{"version":3,"file":"template-location-editor.min.js.map","sources":["../src/common/Select.jsx","../src/template-location-editor/RuleGroups/Rule/Field.jsx","../src/template-location-editor/RuleGroups/Rule/ensureDataForRule.js","../src/template-location-editor/RuleGroups/Rule/index.jsx","../src/template-location-editor/RuleGroups/index.jsx","../src/template-location-editor/LocationEditor.jsx","../src/template-location-editor/index.jsx"],"sourcesContent":["import { useEffect, useRef } from 'react' // Aliased from Tangible.Preact || wp.element\r\n\r\n/**\r\n * Wrap Select2 module from vendor/tangible/interface\r\n *\r\n * @see https://select2.org/\r\n *\r\n * Also used in ../template-import-export\r\n */\r\nconst { jQuery: $ } = window\r\n\r\nconst Select = ({\r\n  labelForEmptyValue = '',\r\n  options = [],\r\n  value = '',\r\n  onChange,\r\n  multiSelect,\r\n  style,\r\n}) => {\r\n  const ref = useRef()\r\n\r\n  /**\r\n   * Activate Select2\r\n   */\r\n\r\n  useEffect(() => {\r\n    const $el = $(ref.current)\r\n    ref.current.$el = $el\r\n\r\n    onChange(value)\r\n\r\n    $el.tangibleSelect({\r\n      minimumResultsForSearch: 5,\r\n    })\r\n\r\n    if (multiSelect) {\r\n      // Ensure multiple values are selected on mount\r\n      $el.val(value)\r\n      $el.trigger('change')\r\n    }\r\n\r\n    $el.on('change', function (e) {\r\n      if (!multiSelect) {\r\n        onChange(e.target.value)\r\n        return\r\n      }\r\n\r\n      if (!ref.current) return\r\n\r\n      // Ensure array of values for multi-select\r\n\r\n      const values = $el.select2('data').map((item) => item.id)\r\n      onChange(values)\r\n    })\r\n\r\n    const select2 = (ref.current.select2 = $el.data('select2'))\r\n\r\n    // Clean up when component removed\r\n    return () => {\r\n      select2 && select2.destroy()\r\n    }\r\n  }, []) // NOTE: Empty array to run only once on component mount\r\n\r\n  // Ensure Select2 shows current value\r\n  if (ref.current && ref.current.$el) {\r\n    if (multiSelect) {\r\n      const currentValues = ref.current.$el.val()\r\n      if (value.length !== currentValues.length && options.length) {\r\n        // After select is rendered with options\r\n        setImmediate(function () {\r\n          ref.current.$el.val(value)\r\n          ref.current.$el.trigger('change')\r\n        })\r\n      }\r\n    } else if (ref.current.value !== value) {\r\n      ref.current.$el.val(value)\r\n      ref.current.$el.trigger('change')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <select\r\n      ref={ref}\r\n      // onChange={e => onChange(e.target.value)}\r\n      autoComplete=\"off\"\r\n      multiple={multiSelect}\r\n      style={{\r\n        display: 'none',\r\n        width: '160px', // Default width\r\n        ...style,\r\n      }}\r\n    >\r\n      {labelForEmptyValue && (\r\n        <option value=\"\" disabled={true} selected={value == null}>\r\n          {labelForEmptyValue}\r\n        </option>\r\n      )}\r\n      {options.map((option, optionIndex) => (\r\n        <option\r\n          key={`option-${optionIndex}`}\r\n          value={option.value}\r\n          selected={option.value === value}\r\n        >\r\n          {option.label}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import Select from '../../../common/Select'\r\n\r\nconst Field = ({ rule, setRule, ruleProps, ensureData }) => {\r\n  const { fieldOptions } = ruleProps\r\n\r\n  return (\r\n    <div className=\"rule-part rule-field\">\r\n      <Select\r\n        {...{\r\n          labelForEmptyValue: 'Select location..',\r\n          options: fieldOptions,\r\n          value: rule.field,\r\n          onChange(value) {\r\n            setRule({\r\n              field: value,\r\n            }) // Will trigger ensureData()\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Field\r\n","const debug = false // Set this to false for production\r\nconst log = (...args) => debug && console.log('[ensureDataForRule]', ...args)\r\n\r\nconst { ajax } = window.Tangible\r\n\r\n// AJAX action prefix must be the same as in includes/location/ajax/index.php\r\nconst ajaxActionPrefix = 'tangible_template_location__'\r\n\r\nconst ensureDataForRule = ({\r\n  rule,\r\n  ruleDefinitionByField,\r\n  ajaxStateRef,\r\n  setAjaxState,\r\n}) => {\r\n  if (!rule.field) return\r\n\r\n  // Field definition\r\n  const fieldDef = ruleDefinitionByField[rule.field]\r\n  if (!fieldDef) return\r\n\r\n  for (const partName of ['field_2', 'values']) {\r\n    if (!fieldDef[partName]) continue // Next\r\n\r\n    // Field part definition\r\n    let partDef = fieldDef[partName][0]\r\n    if (!partDef || partDef.type !== 'select_ajax') continue // Check next part\r\n\r\n    /**\r\n     * Support conditionally showing values select for certain operators\r\n     *\r\n     * Also supports multiple values to match different operators.\r\n     *\r\n     * See same logic in ./index.js, partSelect()\r\n     */\r\n\r\n    if (partName === 'values') {\r\n      for (const valuesDef of fieldDef.values) {\r\n        if (\r\n          !valuesDef.operators ||\r\n          valuesDef.operators.indexOf(rule.operator) >= 0\r\n        ) {\r\n          // Operators not defined or matches\r\n\r\n          partDef = valuesDef\r\n          break // Stop searching\r\n        }\r\n\r\n        // No match - Continue searching\r\n        partDef = null\r\n      }\r\n\r\n      if (!partDef) {\r\n        log('No values select for operator', rule.operator)\r\n        return\r\n      }\r\n    }\r\n\r\n    const ajaxState = ajaxStateRef.current\r\n    const ajaxActionName = partDef.ajax_action\r\n    const ajaxActionData = {}\r\n\r\n    /**\r\n     * Map rule properties to AJAX request\r\n     *\r\n     * For example, if definition is field_2 => post_type, then\r\n     * request.post_type = rule.field_2\r\n     */\r\n\r\n    if (partDef['rule_properties_to_ajax']) {\r\n      const props = partDef['rule_properties_to_ajax']\r\n\r\n      for (const key in props) {\r\n        if (!rule[key]) {\r\n          // Assume all keys are required: Don't make AJAX request\r\n\r\n          log('Missing request key', key)\r\n          return\r\n        }\r\n\r\n        ajaxActionData[props[key]] = rule[key]\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Map direct values to AJAX request keys\r\n     *\r\n     * For example, if definition is post_type => 'lesson', then\r\n     * request.post_type = 'lesson'\r\n     */\r\n    if (partDef['ajax_properties']) {\r\n      const props = partDef['ajax_properties']\r\n\r\n      for (const key in props) {\r\n        ajaxActionData[key] = props[key]\r\n      }\r\n\r\n      log('Mapped AJAX properties to values', ajaxActionData)\r\n    }\r\n\r\n    // Provide part definition with methods to get options based on rule\r\n    if (!partDef.getAjaxActionCacheKey) {\r\n      partDef.getAjaxActionCacheKey = function (currentRule) {\r\n        let cacheKey = ajaxActionName\r\n\r\n        if (partDef['rule_properties_to_ajax']) {\r\n          const props = partDef['rule_properties_to_ajax']\r\n\r\n          for (const key in props) {\r\n            cacheKey += '__' + props[key] + '__' + currentRule[key]\r\n          }\r\n\r\n          // log('Cache key', cacheKey, currentRule)\r\n        }\r\n\r\n        return cacheKey\r\n      }\r\n\r\n      partDef.getOptionsForRule = function (currentRule) {\r\n        const key = partDef.getAjaxActionCacheKey(currentRule)\r\n        const ajaxState = ajaxStateRef.current // NOTE: Ensure fresh reference\r\n\r\n        if (ajaxState[key] && !(ajaxState[key] instanceof Promise)) {\r\n          log('Got options for key', key, ajaxState[key])\r\n          return ajaxState[key]\r\n        }\r\n        // Caller must handle when no options available\r\n        log('Options not ready for key', key, ajaxState)\r\n      }\r\n    }\r\n\r\n    // Unique key to track progress\r\n    const ajaxActionCacheKey = partDef.getAjaxActionCacheKey(rule)\r\n\r\n    /**\r\n     * Update part definition with fetched options\r\n     */\r\n\r\n    const updatePartDefinition = (data) => {\r\n      log('updatePartDefinition', ajaxStateRef.current)\r\n\r\n      setAjaxState({\r\n        ...ajaxStateRef.current, // NOTE: Ensure fresh reference\r\n      }) // Re-render\r\n    }\r\n\r\n    /**\r\n     * Fetch\r\n     */\r\n    if (!ajaxState[ajaxActionCacheKey]) {\r\n      const name = ajaxActionPrefix + ajaxActionName\r\n\r\n      log('Getting data..', name, ajaxActionData)\r\n\r\n      // Assign the Promise to cache for tracking progress\r\n      ajaxState[ajaxActionCacheKey] = ajax(name, ajaxActionData)\r\n        .then((data) => {\r\n          ajaxStateRef.current[ajaxActionCacheKey] = data // NOTE: Ensure fresh reference\r\n\r\n          log(\r\n            'Got data',\r\n            ajaxActionCacheKey,\r\n            ajaxStateRef.current[ajaxActionCacheKey]\r\n          )\r\n\r\n          updatePartDefinition(data)\r\n\r\n          return data // Make it available for subsequent .then()\r\n        })\r\n        .catch((e) => {\r\n          log('Failed to get data', ajaxActionCacheKey, e)\r\n        })\r\n\r\n      return // Skip the rest until data ready\r\n    }\r\n\r\n    /**\r\n     * Fetch in progress\r\n     */\r\n    if (ajaxState[ajaxActionCacheKey] instanceof Promise) {\r\n      log('Fetch in progress', ajaxActionCacheKey)\r\n      return // Skip the rest until data ready\r\n    }\r\n\r\n    /**\r\n     * Cached\r\n     */\r\n\r\n    // log('Cached', ajaxActionCacheKey, ajaxState[ ajaxActionCacheKey ])\r\n\r\n    // Continue to next rule part\r\n  }\r\n}\r\n\r\nexport default ensureDataForRule\r\n","import { useCallback, useRef, useState } from 'react'\r\nimport Field from './Field'\r\nimport Select from '../../../common/Select'\r\nimport ensureDataForRule from './ensureDataForRule'\r\n\r\nconst debug = false // Set this to false for production\r\nconst log = (...args) => debug && console.log('[Rule]', ...args)\r\n\r\nconst Rule = ({\r\n  ruleGroups,\r\n  setRuleGroups,\r\n  group,\r\n  groupIndex,\r\n  rule,\r\n  ruleIndex,\r\n  ruleProps,\r\n}) => {\r\n  log('--- Rule ---', rule)\r\n\r\n  /**\r\n   * Create ever-fresh reference for current rule, for use in onChange function closure\r\n   * for select field (see below)\r\n   */\r\n  const ruleRef = useRef()\r\n  ruleRef.current = rule\r\n\r\n  const {\r\n    ruleDefinitionByField,\r\n\r\n    ajaxStateRef,\r\n    setAjaxState,\r\n  } = ruleProps\r\n\r\n  const setRule = (givenRule = {}) => {\r\n    group[ruleIndex] = {\r\n      ...rule,\r\n      ...givenRule,\r\n    }\r\n    ruleGroups[groupIndex] = group\r\n    setRuleGroups()\r\n  }\r\n\r\n  /**\r\n   * Ensure data by AJAX request as needed\r\n   *\r\n   * Was on rule mount: useEffect(() => { ensureData() }, [])\r\n   *\r\n   * Must check on every render, in case any rule part changed\r\n   */\r\n\r\n  const ensureData = useCallback(() => {\r\n    ensureDataForRule({\r\n      rule,\r\n      ruleDefinitionByField,\r\n\r\n      ajaxStateRef,\r\n      setAjaxState,\r\n    })\r\n  }, [rule])\r\n\r\n  ensureData()\r\n\r\n  const fieldDef = rule.field && ruleDefinitionByField[rule.field]\r\n\r\n  /**\r\n   * Create select field for each rule part\r\n   */\r\n  const partSelect = (partName) => {\r\n    if (!fieldDef || !fieldDef[partName]) return // Ensure field definition exists\r\n\r\n    // Part definition\r\n    let partDef = fieldDef[partName][0]\r\n\r\n    const isPartSelect =\r\n      partName === 'operators' ||\r\n      (partDef && (partDef.type === 'select' || partDef.type === 'select_ajax'))\r\n    // NOTE: If fieldDef['values'][1] exists, assume it's the same type\r\n\r\n    if (!isPartSelect) {\r\n      /**\r\n       * Support non-select field types\r\n       * See ../LocationEditor where it gathers\r\n       */\r\n\r\n      const { type, placeholder, description } = partDef || {}\r\n\r\n      if (type === 'input') {\r\n        let value = rule[partName]\r\n\r\n        return (\r\n          <div className={`rule-part rule-${partName}`}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder={placeholder}\r\n              value={value}\r\n              onChange={(e) => {\r\n                const rule = ruleRef.current // Use fresh reference\r\n                setRule({\r\n                  ...rule,\r\n                  [partName]: e.target.value,\r\n                })\r\n              }}\r\n            />\r\n            {description && (\r\n              <small style={{ display: 'block' }}>{description}</small>\r\n            )}\r\n          </div>\r\n        )\r\n      }\r\n\r\n      return\r\n    }\r\n\r\n    /**\r\n     * Support conditionally showing values select for certain operators\r\n     *\r\n     * Also supports multiple values to match different operators.\r\n     *\r\n     * See same logic in ./ensureDataForRule.js\r\n     */\r\n\r\n    if (partName === 'values') {\r\n      for (const valuesDef of fieldDef.values) {\r\n        if (\r\n          !valuesDef.operators ||\r\n          valuesDef.operators.indexOf(rule.operator) >= 0\r\n        ) {\r\n          // Operators not defined or matches\r\n\r\n          partDef = valuesDef\r\n          break // Stop searching\r\n        }\r\n\r\n        // No match - Continue searching\r\n        partDef = null\r\n      }\r\n\r\n      if (!partDef) {\r\n        log('No values select for operator', rule.operator)\r\n        return\r\n      }\r\n    }\r\n\r\n    const isOperators = partName === 'operators'\r\n\r\n    const rulePartName = isOperators\r\n      ? 'operator'\r\n      : partName.replace(/values/, 'value')\r\n\r\n    // Prepare properties for select input\r\n\r\n    const labelForEmptyValue =\r\n      isOperators || rule.operator === 'exclude'\r\n        ? '' // No empty value for operators\r\n        : // Empty value is accepted if label is defined\r\n          partDef['label_for_empty_value']\r\n\r\n    /**\r\n     * For input type \"select_ajax\", options are empty until they're ready.\r\n     *\r\n     * See ./ensureDataForRule, getOptionsForRule()\r\n     */\r\n\r\n    const options = isOperators\r\n      ? fieldDef[partName]\r\n\r\n          // Support filtering operators by field_2\r\n          .filter(\r\n            (obj) => !obj.field_2 || obj.field_2.indexOf(rule.field_2) >= 0\r\n          )\r\n\r\n          .map((obj) => ({\r\n            value: obj.name,\r\n            label: obj.label,\r\n          }))\r\n      : partDef.getOptionsForRule\r\n      ? partDef.getOptionsForRule(rule)\r\n      : partDef.options\r\n\r\n    if (!options) {\r\n      log('Options not available yet')\r\n      return\r\n    }\r\n\r\n    if (isOperators) log('Operator options', options)\r\n\r\n    let value = rule[rulePartName]\r\n\r\n    // Select first option by default if value is empty and there's no option for empty\r\n    if (\r\n      !partDef['multi_select'] &&\r\n      !value &&\r\n      !labelForEmptyValue &&\r\n      options[0] &&\r\n      options[0].value\r\n    ) {\r\n      value = rule[rulePartName] = options[0].value\r\n\r\n      log('Select first option by default', rulePartName, value)\r\n\r\n      setRule(rule) // Will trigger re-render\r\n    }\r\n\r\n    log('partSelect', rulePartName, rule[rulePartName])\r\n\r\n    return (\r\n      <div className={`rule-part rule-${partName}`}>\r\n        <Select\r\n          {...{\r\n            labelForEmptyValue,\r\n            options,\r\n            value,\r\n\r\n            onChange(value) {\r\n              // Use fresh reference for current rule\r\n              const rule = ruleRef.current\r\n\r\n              /**\r\n               * Update rule with new value for current part\r\n               *\r\n               * Previously, there was logic here to clear/remove the rest of rule parts\r\n               * (afer current part), but because the Select component triggers onChange\r\n               * initially on mount, it caused parts to get cleared incorrectly.\r\n               *\r\n               * Now we simply update the changed part and keep other rule parts the same.\r\n               */\r\n              const nextRule = {\r\n                ...rule,\r\n                [rulePartName]: value,\r\n              }\r\n\r\n              log('Next rule', nextRule)\r\n\r\n              setRule(nextRule) // Will trigger ensureData()\r\n            },\r\n\r\n            multiSelect: !isOperators && partDef['multi_select'],\r\n\r\n            style: isOperators ? { width: 'auto' } : {},\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"rule\">\r\n        <div className=\"rule-parts\">\r\n          <Field\r\n            {...{\r\n              rule,\r\n              setRule,\r\n              ruleProps,\r\n              ensureData,\r\n            }}\r\n          />\r\n\r\n          {partSelect('field_2')}\r\n\r\n          {fieldDef &&\r\n            (!fieldDef['field_2'] || rule['field_2']) &&\r\n            partSelect('operators')}\r\n          {fieldDef &&\r\n            (!fieldDef['field_2'] || rule['field_2']) &&\r\n            partSelect('values')}\r\n        </div>\r\n\r\n        <div className=\"rule-actions\">\r\n          <div className=\"rule-action rule-action--remove-rule\">\r\n            <div\r\n              className=\"icon\"\r\n              onClick={() => {\r\n                // Remove this rule\r\n                group.splice(ruleIndex, 1)\r\n\r\n                if (!group.length) {\r\n                  // If group is empty, remove it\r\n\r\n                  ruleGroups.splice(groupIndex, 1)\r\n                } else {\r\n                  ruleGroups[groupIndex] = group\r\n                }\r\n\r\n                setRuleGroups()\r\n              }}\r\n            >\r\n              <svg viewBox=\"0 0 1792 1792\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M1490 1322q0 40-28 68l-136 136q-28 28-68 28t-68-28l-294-294-294 294q-28 28-68 28t-68-28l-136-136q-28-28-28-68t28-68l294-294-294-294q-28-28-28-68t28-68l136-136q28-28 68-28t68 28l294 294 294-294q28-28 68-28t68 28l136 136q28 28 28 68t-28 68l-294 294 294 294q28 28 28 68z\" />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {fieldDef && fieldDef.description && (\r\n        <p\r\n          dangerouslySetInnerHTML={{\r\n            __html: fieldDef.description,\r\n          }}\r\n        ></p>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Rule\r\n","import Rule from './Rule'\r\n\r\nconst createNewRuleGroup = () => [\r\n  {}, // Empty rule\r\n]\r\n\r\nconst RuleGroups = ({ ruleGroups, setRuleGroups, ruleProps }) => {\r\n  return (\r\n    <>\r\n      <div className=\"rule-groups\">\r\n        {ruleGroups.map((group, groupIndex) => (\r\n          <div key={`rule-group-${groupIndex}`} className=\"rule-group\">\r\n            {/* {groupIndex > 0 &&\r\n          <div>\r\n            ..or..\r\n          </div>\r\n          } */}\r\n\r\n            {group.map((rule, ruleIndex) => (\r\n              <Rule\r\n                key={`rule-group-${groupIndex}-rule-${ruleIndex}`}\r\n                {...{\r\n                  ruleGroups,\r\n                  setRuleGroups,\r\n                  group,\r\n                  groupIndex,\r\n                  rule,\r\n                  ruleIndex,\r\n                  ruleProps,\r\n                }}\r\n              />\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <button\r\n        type=\"button\"\r\n        className=\"button button--add-rule-group\"\r\n        onClick={() => {\r\n          ruleGroups.push(createNewRuleGroup())\r\n          setRuleGroups(ruleGroups)\r\n        }}\r\n      >\r\n        Add location\r\n      </button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default RuleGroups\r\n","import { useEffect, useMemo, useRef, useState } from 'react'\r\nimport RuleGroups from './RuleGroups'\r\n\r\nconst { jQuery: $ } = window\r\n\r\nconst debug = false // Set this to false for production\r\nconst log = (...args) => debug && console.log('[LocationEditor]', ...args)\r\n\r\nconst LocationEditor = ({ data, ruleDefinitions }) => {\r\n  const [state, setState] = useState(data)\r\n\r\n  const stateRef = useRef()\r\n  stateRef.current = state\r\n\r\n  const [ajaxState, setAjaxState] = useState({})\r\n\r\n  /**\r\n   * Create ever-fresh reference for current AJAX state, for use in function closures\r\n   * See ./Rule/ensureDataForRule\r\n   */\r\n  const ajaxStateRef = useRef()\r\n  ajaxStateRef.current = ajaxState\r\n\r\n  const containerRef = useRef()\r\n  const stateInputElementRef = useRef()\r\n\r\n  // Rule groups\r\n\r\n  const {\r\n    // NOTE: Convert incoming data from snake to camel case\r\n    rule_groups: ruleGroups = [],\r\n  } = state\r\n\r\n  const setRuleGroups = () =>\r\n    setState((state) => ({\r\n      ...state,\r\n      // NOTE: Convert outgoing data from camel to snake case\r\n      rule_groups: ruleGroups,\r\n    }))\r\n\r\n  /**\r\n   * Preprocess rule definitions on mount - Used in Rule/Field.js\r\n   */\r\n\r\n  const { fieldOptions, ruleDefinitionByField } = useMemo(() => {\r\n    // First field as list of select options\r\n    const fieldOptions = []\r\n\r\n    // Map of rule definitions organized by field name\r\n    const ruleDefinitionByField = {\r\n      // field: definition\r\n    }\r\n\r\n    ruleDefinitions.forEach((def) => {\r\n      fieldOptions.push({\r\n        value: def.name, // Field name\r\n        label: def.label,\r\n      })\r\n\r\n      ruleDefinitionByField[def.name] = def\r\n    })\r\n\r\n    log('ruleDefinitionByField', ruleDefinitionByField)\r\n\r\n    return {\r\n      fieldOptions,\r\n      ruleDefinitionByField,\r\n    }\r\n  }, [])\r\n\r\n  /**\r\n   * Properties to pass to Rule\r\n   */\r\n  const ruleProps = {\r\n    ruleDefinitions,\r\n    fieldOptions,\r\n    ruleDefinitionByField,\r\n\r\n    ajaxStateRef,\r\n    setAjaxState,\r\n  }\r\n\r\n  useEffect(() => {\r\n    /**\r\n     * Generate human-readable description of rule groups\r\n     */\r\n\r\n    let description = ''\r\n\r\n    const $rules = $(containerRef.current).find('.rule')\r\n\r\n    for (let i = 0, len = $rules.length; i < len; i++) {\r\n      const $parts = $($rules[i]).find('.rule-part')\r\n\r\n      let ruleDescription = ''\r\n\r\n      for (let j = 0, partLen = $parts.length; j < partLen; j++) {\r\n        const $part = $($parts[j])\r\n        const $select = $part.find('select')\r\n\r\n        if (!$select[0]) {\r\n          // Support non-select field types\r\n          const $input = $part.find('input')\r\n          if ($input) {\r\n            ruleDescription += (j > 0 ? ' ' : '') + $input.val()\r\n          }\r\n\r\n          continue\r\n        }\r\n\r\n        /**\r\n         * Ensure Select2 was instantiated - See ./Rule/Select\r\n         */\r\n        if (!$select[0].select2) continue\r\n\r\n        const values = $select.select2('data')\r\n\r\n        if (!Array.isArray(values)) continue\r\n\r\n        ruleDescription +=\r\n          (j > 0 ? ' ' : '') + values.map((value) => value.text).join(', ')\r\n      }\r\n\r\n      // log('Rule description:', ruleDescription)\r\n\r\n      description += (i > 0 ? '<br>' : '') + ruleDescription\r\n    }\r\n\r\n    log('Description:', description)\r\n\r\n    /**\r\n     * Update input field for entire state\r\n     */\r\n    const state = stateRef.current\r\n\r\n    state.description = description\r\n    stateInputElementRef.current.value = JSON.stringify(state)\r\n  })\r\n\r\n  return (\r\n    <div ref={containerRef}>\r\n      <input\r\n        type=\"hidden\"\r\n        name=\"location\"\r\n        ref={stateInputElementRef}\r\n        value={JSON.stringify(state)}\r\n      />\r\n\r\n      <RuleGroups\r\n        {...{\r\n          ruleGroups,\r\n          setRuleGroups,\r\n          ruleProps,\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LocationEditor\r\n","/**\r\n * Template edit screen: Location tab\r\n *\r\n * Depends on Tangible AJAX and Select modules\r\n */\r\n\r\nimport LocationEditor from './LocationEditor'\r\n\r\nconst {\r\n  jQuery: $,\r\n  Tangible: { Preact },\r\n} = window\r\n\r\nconst $el = $('#post .template-location-editor')\r\nconst el = $el[0]\r\n\r\nlet data = $el.data('location')\r\n\r\n// Server can pass empty array to mean an object\r\ndata = typeof data === 'object' && !Array.isArray(data) ? data : {}\r\n\r\nconst ruleDefinitions = $el.data('ruleDefinitions') || []\r\n\r\nPreact.render(\r\n  <LocationEditor\r\n    {...{\r\n      data,\r\n      ruleDefinitions,\r\n    }}\r\n  />,\r\n  el\r\n)\r\n"],"names":["i","a","m","v","o","__name","c","t","e","f","g","b","x","s","l","d","r","useRef","useEffect","Field","rule","setRule","ruleProps","ensureData","fieldOptions","Select","value","debug","log","args","ajax","ajaxActionPrefix","ensureDataForRule","ruleDefinitionByField","ajaxStateRef","setAjaxState","fieldDef","partName","partDef","valuesDef","ajaxState","ajaxActionName","ajaxActionData","props","key","currentRule","cacheKey","ajaxActionCacheKey","updatePartDefinition","data","__spreadValues","name","k","j","z","D","A","E","F","u","q","p","K","N","y","S","C","B","O","useCallback","J","n","R","h","M","P","$","w","V","T","createNewRuleGroup","RuleGroups","ruleGroups","setRuleGroups","group","groupIndex","ruleIndex","Rule","useState","useMemo","_","I","L","Preact","$el","el","ruleDefinitions","LocationEditor"],"mappings":"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"}