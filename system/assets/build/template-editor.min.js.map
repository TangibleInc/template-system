{"version":3,"file":"template-editor.min.js.map","sources":["../src/template-editor/index.js"],"sourcesContent":["/**\r\n * Editor for template post type\r\n */\r\n\r\n/**\r\n * Remember state in local storage\r\n */\r\n\r\nconst memoryKey = 'tangibleTemplateEditorState'\r\n\r\nconst memory = Object.assign(\r\n  {\r\n    tab: undefined, // Default tab\r\n  },\r\n  getMemory() || {}\r\n)\r\n\r\nfunction setMemory(state) {\r\n  if (!window.localStorage) return\r\n  window.localStorage.setItem(memoryKey, JSON.stringify(state))\r\n  Object.assign(memory, state)\r\n}\r\n\r\nfunction getMemory() {\r\n  if (!window.localStorage) return\r\n  let state = window.localStorage.getItem(memoryKey)\r\n  if (!state) return\r\n  try {\r\n    state = JSON.parse(state)\r\n    return state\r\n  } catch (e) {\r\n    /* Ignore */\r\n  }\r\n}\r\n\r\njQuery(function ($) {\r\n  const $postForm = $('#post')\r\n\r\n  const $editors = $postForm.find('[data-tangible-template-editor-type]')\r\n\r\n  if (!$editors.length) {\r\n    console.warn('No editor elements found for Tangible Template code editor')\r\n  }\r\n\r\n  const editorInstances = {\r\n    // fieldName: editor instance\r\n  }\r\n\r\n  const postId = $('#post_ID').val()\r\n  const $postTitle = $postForm.find('input[name=\"post_title\"]')\r\n  // const $postContent = $postForm.find('[name=\"post_content\"]') // textarea\r\n\r\n  const $publishButton = $('#publish')\r\n  const $publishingActions = $publishButton.closest('#major-publishing-actions')\r\n\r\n  const templateMeta =\r\n    $postForm.find('#tangible-template-editor-meta').data('json') || {}\r\n\r\n  const { ajax, createCodeEditor } = window.Tangible\r\n\r\n  /**\r\n   * Additional fields that are not editors\r\n   *\r\n   * @see /includes/template/fields.php\r\n   */\r\n  const additionalFieldNames = [\r\n    'name',\r\n    'assets',\r\n    'location',\r\n    'theme_position',\r\n    'theme_header',\r\n    'theme_footer',\r\n    'universal_id',\r\n  ]\r\n\r\n  const $additionalFields = {\r\n    // name?: $element\r\n  }\r\n\r\n  for (const fieldName of additionalFieldNames) {\r\n    const $field = $postForm.find(`[name=\"${fieldName}\"]`)\r\n    if ($field.length) {\r\n      $additionalFields[fieldName] = $field\r\n    }\r\n  }\r\n\r\n  const taxonomyNames = ['tangible_template_category']\r\n  const $taxonomyFields = {\r\n    // name?: $terms\r\n  }\r\n\r\n  for (const taxName of taxonomyNames) {\r\n    const $terms = $postForm.find(\r\n      `[type=\"checkbox\"][name=\"tax_input[${taxName}][]\"]`\r\n    )\r\n    if ($terms.length) {\r\n      $taxonomyFields[taxName] = $terms\r\n\r\n      /**\r\n       * Fix browser autocomplete messing with checkboxes..\r\n       * Force \"checked\" state based on HTML attribute\r\n       */\r\n      $terms.each(function () {\r\n        const checked = this.getAttribute('checked') === 'checked'\r\n        $(this).prop('checked', checked)\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Show success/error message in publish button\r\n   */\r\n  const updatePublishButton = function (newText, errorMessage) {\r\n    $publishButton.val(newText)\r\n\r\n    if (errorMessage) {\r\n      $publishingActions.append(\r\n        `<div id=\"post-save-error-message\" style=\"padding-top: 8px\">${errorMessage}</div>`\r\n      )\r\n    } else {\r\n      $publishingActions.find('#post-save-error-message').remove()\r\n    }\r\n  }\r\n\r\n  const getEditorFields = function () {\r\n    const data = {}\r\n\r\n    for (let fieldName in editorInstances) {\r\n      const editor = editorInstances[fieldName]\r\n\r\n      if (fieldName === 'post_content') fieldName = 'content'\r\n\r\n      const value = editor.getValue()\r\n      data[fieldName] = value\r\n    }\r\n\r\n    return data\r\n  }\r\n\r\n  const getAdditionalFields = function () {\r\n    const data = {}\r\n\r\n    for (const fieldName of additionalFieldNames) {\r\n      if (!$additionalFields[fieldName]) continue\r\n      data[fieldName] = $additionalFields[fieldName].val()\r\n    }\r\n\r\n    return data\r\n  }\r\n\r\n  const getTaxonomyFields = function () {\r\n    const data = {}\r\n\r\n    for (const taxName of taxonomyNames) {\r\n      if (!$taxonomyFields[taxName]) continue\r\n      data[taxName] = []\r\n      $taxonomyFields[taxName].each(function () {\r\n        const $el = $(this)\r\n        if ($el.prop('checked')) {\r\n          data[taxName].push($el.val())\r\n        }\r\n      })\r\n    }\r\n\r\n    return data\r\n  }\r\n\r\n  const save = function () {\r\n    if (templateMeta.isNewPost) {\r\n      $publishButton.click()\r\n      return\r\n    }\r\n\r\n    // New and existing post should have ID\r\n    if (!postId) return\r\n\r\n    const title = $postTitle.val()\r\n    if (!title) return\r\n\r\n    const data = {\r\n      title,\r\n      id: postId,\r\n      content: '',\r\n      ...getEditorFields(),\r\n      ...getAdditionalFields(),\r\n      tax_input: getTaxonomyFields(),\r\n    }\r\n\r\n    const previousLabel = $publishButton.val()\r\n\r\n    let labelTimer\r\n    function restorePreviousLabelAfterTimeout() {\r\n      if (labelTimer) clearTimeout(labelTimer)\r\n      labelTimer = setTimeout(function () {\r\n        $publishButton.val(previousLabel)\r\n      }, 7000)\r\n    }\r\n\r\n    // $publishButton.val('Saving..')\r\n\r\n    ajax('tangible_template_editor_save', data)\r\n      .then(function (res) {\r\n        updatePublishButton('Saved')\r\n        restorePreviousLabelAfterTimeout()\r\n      })\r\n      .catch(function (e) {\r\n        updatePublishButton('Error', e.message)\r\n        restorePreviousLabelAfterTimeout()\r\n      })\r\n  }\r\n\r\n  /**\r\n   * New or draft posts must submit the form and reload the edit screen,\r\n   * but after that the publish button can use AJAX save.\r\n   */\r\n  if (!templateMeta.isNewPost && templateMeta.postStatus === 'publish') {\r\n    /**\r\n     * Disable AJAX save until following issues are resolved:\r\n     *\r\n     * - AJAX nonce expiring\r\n     * - Sometimes the post slug not saving?\r\n     * - Sometimes there's a confirmation dialog \"information you've entered may not be saved\"\r\n     */\r\n    /*\r\n        $publishButton.on('click', function (e) {\r\n          e.preventDefault()\r\n          save()\r\n        })\r\n    */\r\n    // window.onbeforeunload = function() {}\r\n  }\r\n\r\n  const sharedEditorOptions = {\r\n    viewportMargin: Infinity, // With .CodeMirror height: auto or 100%\r\n    resizable: false,\r\n    lineWrapping: true,\r\n\r\n    extraKeys: {\r\n      'Alt-F': 'findPersistent',\r\n      'Ctrl-S': save,\r\n      'Cmd-S': save,\r\n      Tab: 'emmetExpandAbbreviation',\r\n      Esc: 'emmetResetAbbreviation',\r\n      Enter: 'emmetInsertLineBreak',\r\n      'Ctrl-Space': 'autocomplete',\r\n    },\r\n  }\r\n\r\n  $editors.each(function () {\r\n    const $editor = $(this)\r\n    const fieldName = $editor.attr('name')\r\n    const type = $editor.data('tangibleTemplateEditorType') // html, sass, javascript, json\r\n\r\n    const editorOptions = {\r\n      ...sharedEditorOptions,\r\n      language: type,\r\n    }\r\n\r\n    if (type === 'html') {\r\n      editorOptions.emmet = {\r\n        preview: false,\r\n        config: {\r\n          // TODO: Emmet custom abbreviations - Currently not working\r\n          // @see https://github.com/emmetio/codemirror-plugin#emmet-config\r\n          html: {\r\n            Loop: 'Loop[type]',\r\n            Field: 'Field/',\r\n          },\r\n        },\r\n      }\r\n    }\r\n\r\n    const editor = (editorInstances[fieldName] = createCodeEditor(\r\n      this,\r\n      editorOptions\r\n    ))\r\n\r\n    editor.setSize(null, '100%')\r\n\r\n    // Focus on content if editing existing post\r\n    if (fieldName === 'post_content' && !templateMeta.isNewPost) editor.focus()\r\n  })\r\n\r\n  // Tabs\r\n\r\n  const $tabSelectors = $postForm.find('.tangible-template-tab-selector')\r\n  const $tabs = $postForm.find('.tangible-template-tab')\r\n  const tabEditorActivated = [] // index => boolean\r\n\r\n  if (!$tabs.length) {\r\n    console.warn('No tabs elements found for Tangible Template code editor')\r\n    return\r\n  }\r\n\r\n  $tabSelectors.on('click', function () {\r\n    const currentTabSelector = this\r\n\r\n    // Show current tab, hide others\r\n\r\n    $tabSelectors.each(function (index) {\r\n      const $tabSelector = $(this)\r\n      const $tab = $tabs.eq(index)\r\n\r\n      if (this !== currentTabSelector) {\r\n        // Hide\r\n\r\n        $tabSelector.removeClass('active')\r\n        $tab.hide()\r\n\r\n        return\r\n      }\r\n\r\n      // Show\r\n\r\n      $tabSelector.addClass('active')\r\n      $tab.show()\r\n\r\n      // Find editor in tab, if any\r\n      const $tabEditor = $tab.find('[data-tangible-template-editor-type]')\r\n      const editorInstance = $tabEditor.length\r\n        ? editorInstances[\r\n            $tabEditor.attr('name') // By field name\r\n          ]\r\n        : false\r\n\r\n      if (!tabEditorActivated[index]) {\r\n        tabEditorActivated[index] = true\r\n\r\n        // Refresh editor once\r\n        if (editorInstance) {\r\n          editorInstance.refresh()\r\n        }\r\n      }\r\n\r\n      if (editorInstance) {\r\n        editorInstance.focus()\r\n      }\r\n\r\n      setMemory({\r\n        tab: $tabSelector.data('tabName'),\r\n        postId,\r\n      })\r\n    }) // End for each tab selector\r\n  }) // End on click tab selector\r\n\r\n  /**\r\n   * Set default tab from URL query parameter\r\n   */\r\n\r\n  const query = window.location.search\r\n    .substr(1)\r\n    .split('&')\r\n    .reduce(function (obj, pair) {\r\n      const [key, value] = pair.split('=')\r\n      obj[key] = value\r\n      return obj\r\n    }, {})\r\n\r\n  const gotoTab = query.tab || (memory.postId === postId && memory.tab)\r\n\r\n  if (gotoTab) {\r\n    // Switch to tab\r\n\r\n    const $activeTabSelector = $tabSelectors.filter(\r\n      `[data-tab-name=\"${gotoTab}\"]`\r\n    )\r\n\r\n    if ($activeTabSelector.length) {\r\n      $activeTabSelector.eq(0).click()\r\n    } else {\r\n      // Ignore if tab not found\r\n      // console.log('Tab not found', gotoTab)\r\n    }\r\n  }\r\n})\r\n"],"names":["memoryKey","memory","getMemory","setMemory","state","__name","e","$","$postForm","$editors","editorInstances","postId","$postTitle","$publishButton","$publishingActions","templateMeta","ajax","createCodeEditor","additionalFieldNames","$additionalFields","fieldName","$field","taxonomyNames","$taxonomyFields","taxName","$terms","checked","updatePublishButton","newText","errorMessage","getEditorFields","data","editor","value","getAdditionalFields","getTaxonomyFields","$el","save","title","__spreadProps","__spreadValues","previousLabel","labelTimer","restorePreviousLabelAfterTimeout","res","sharedEditorOptions","$editor","type","editorOptions","$tabSelectors","$tabs","tabEditorActivated","currentTabSelector","index","$tabSelector","$tab","$tabEditor","editorInstance","gotoTab","obj","pair","key","$activeTabSelector"],"mappings":"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"}