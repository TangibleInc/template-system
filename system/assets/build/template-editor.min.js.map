{"version":3,"file":"template-editor.min.js.map","sources":["../src/template-editor/index.js"],"sourcesContent":["/**\n * Editor for template post type\n */\n\n/**\n * Remember state in local storage\n */\n\nconst memoryKey = 'tangibleTemplateEditorState'\n\nconst memory = Object.assign(\n  {\n    tab: undefined, // Default tab\n  },\n  getMemory() || {}\n)\n\nfunction setMemory(state) {\n  if (!window.localStorage) return\n  window.localStorage.setItem(memoryKey, JSON.stringify(state))\n  Object.assign(memory, state)\n}\n\nfunction getMemory() {\n  if (!window.localStorage) return\n  let state = window.localStorage.getItem(memoryKey)\n  if (!state) return\n  try {\n    state = JSON.parse(state)\n    return state\n  } catch (e) {\n    /* Ignore */\n  }\n}\n\njQuery(function ($) {\n  const $postForm = $('#post')\n\n  const $editors = $postForm.find('[data-tangible-template-editor-type]')\n\n  if (!$editors.length) {\n    console.warn('No editor elements found for Tangible Template code editor')\n  }\n\n  const editorInstances = {\n    // fieldName: editor instance\n  }\n\n  const postId = $('#post_ID').val()\n  const $postTitle = $postForm.find('input[name=\"post_title\"]')\n  // const $postContent = $postForm.find('[name=\"post_content\"]') // textarea\n\n  const $publishButton = $('#publish')\n  const $publishingActions = $publishButton.closest('#major-publishing-actions')\n\n  const templateMeta =\n    $postForm.find('#tangible-template-editor-meta').data('json') || {}\n\n  const { ajax, createCodeEditor } = window.Tangible\n\n  /**\n   * Additional fields that are not editors\n   *\n   * @see /includes/template/fields.php\n   */\n  const additionalFieldNames = [\n    'name',\n    'assets',\n    'location',\n    'theme_position',\n    'theme_header',\n    'theme_footer',\n    'universal_id',\n  ]\n\n  const $additionalFields = {\n    // name?: $element\n  }\n\n  for (const fieldName of additionalFieldNames) {\n    const $field = $postForm.find(`[name=\"${fieldName}\"]`)\n    if ($field.length) {\n      $additionalFields[fieldName] = $field\n    }\n  }\n\n  const taxonomyNames = ['tangible_template_category']\n  const $taxonomyFields = {\n    // name?: $terms\n  }\n\n  for (const taxName of taxonomyNames) {\n    const $terms = $postForm.find(\n      `[type=\"checkbox\"][name=\"tax_input[${taxName}][]\"]`\n    )\n    if ($terms.length) {\n      $taxonomyFields[taxName] = $terms\n\n      /**\n       * Fix browser autocomplete messing with checkboxes..\n       * Force \"checked\" state based on HTML attribute\n       */\n      $terms.each(function () {\n        const checked = this.getAttribute('checked') === 'checked'\n        $(this).prop('checked', checked)\n      })\n    }\n  }\n\n  /**\n   * Show success/error message in publish button\n   */\n  const updatePublishButton = function (newText, errorMessage) {\n    $publishButton.val(newText)\n\n    if (errorMessage) {\n      $publishingActions.append(\n        `<div id=\"post-save-error-message\" style=\"padding-top: 8px\">${errorMessage}</div>`\n      )\n    } else {\n      $publishingActions.find('#post-save-error-message').remove()\n    }\n  }\n\n  const getEditorFields = function () {\n    const data = {}\n\n    for (let fieldName in editorInstances) {\n      const editor = editorInstances[fieldName]\n\n      if (fieldName === 'post_content') fieldName = 'content'\n\n      const value = editor.getValue()\n      data[fieldName] = value\n    }\n\n    return data\n  }\n\n  const getAdditionalFields = function () {\n    const data = {}\n\n    for (const fieldName of additionalFieldNames) {\n      if (!$additionalFields[fieldName]) continue\n      data[fieldName] = $additionalFields[fieldName].val()\n    }\n\n    return data\n  }\n\n  const getTaxonomyFields = function () {\n    const data = {}\n\n    for (const taxName of taxonomyNames) {\n      if (!$taxonomyFields[taxName]) continue\n      data[taxName] = []\n      $taxonomyFields[taxName].each(function () {\n        const $el = $(this)\n        if ($el.prop('checked')) {\n          data[taxName].push($el.val())\n        }\n      })\n    }\n\n    return data\n  }\n\n  const save = function () {\n    if (templateMeta.isNewPost) {\n      $publishButton.click()\n      return\n    }\n\n    // New and existing post should have ID\n    if (!postId) return\n\n    const title = $postTitle.val()\n    if (!title) return\n\n    const data = {\n      title,\n      id: postId,\n      content: '',\n      ...getEditorFields(),\n      ...getAdditionalFields(),\n      tax_input: getTaxonomyFields(),\n    }\n\n    const previousLabel = $publishButton.val()\n\n    let labelTimer\n    function restorePreviousLabelAfterTimeout() {\n      if (labelTimer) clearTimeout(labelTimer)\n      labelTimer = setTimeout(function () {\n        $publishButton.val(previousLabel)\n      }, 7000)\n    }\n\n    // $publishButton.val('Saving..')\n\n    ajax('tangible_template_editor_save', data)\n      .then(function (res) {\n        updatePublishButton('Saved')\n        restorePreviousLabelAfterTimeout()\n      })\n      .catch(function (e) {\n        updatePublishButton('Error', e.message)\n        restorePreviousLabelAfterTimeout()\n      })\n  }\n\n  /**\n   * New or draft posts must submit the form and reload the edit screen,\n   * but after that the publish button can use AJAX save.\n   */\n  if (!templateMeta.isNewPost && templateMeta.postStatus === 'publish') {\n    /**\n     * Disable AJAX save until following issues are resolved:\n     *\n     * - AJAX nonce expiring\n     * - Sometimes the post slug not saving?\n     * - Sometimes there's a confirmation dialog \"information you've entered may not be saved\"\n     */\n    /*\n        $publishButton.on('click', function (e) {\n          e.preventDefault()\n          save()\n        })\n    */\n    // window.onbeforeunload = function() {}\n  }\n\n  const sharedEditorOptions = {\n    viewportMargin: Infinity, // With .CodeMirror height: auto or 100%\n    resizable: false,\n    lineWrapping: true,\n\n    extraKeys: {\n      'Alt-F': 'findPersistent',\n      'Ctrl-S': save,\n      'Cmd-S': save,\n      Tab: 'emmetExpandAbbreviation',\n      Esc: 'emmetResetAbbreviation',\n      Enter: 'emmetInsertLineBreak',\n      'Ctrl-Space': 'autocomplete',\n    },\n  }\n\n  $editors.each(function () {\n    const $editor = $(this)\n    const fieldName = $editor.attr('name')\n    const type = $editor.data('tangibleTemplateEditorType') // html, sass, javascript, json\n\n    const editorOptions = {\n      ...sharedEditorOptions,\n      language: type,\n    }\n\n    if (type === 'html') {\n      editorOptions.emmet = {\n        preview: false,\n        config: {\n          // TODO: Emmet custom abbreviations - Currently not working\n          // @see https://github.com/emmetio/codemirror-plugin#emmet-config\n          html: {\n            Loop: 'Loop[type]',\n            Field: 'Field/',\n          },\n        },\n      }\n    }\n\n    const editor = (editorInstances[fieldName] = createCodeEditor(\n      this,\n      editorOptions\n    ))\n\n    editor.setSize(null, '100%')\n\n    // Focus on content if editing existing post\n    if (fieldName === 'post_content' && !templateMeta.isNewPost) editor.focus()\n\n    // Provide public method to save\n    editor.save = save\n    $editor[0].editor = editor\n  })\n\n  // Tabs\n\n  const $tabSelectors = $postForm.find('.tangible-template-tab-selector')\n  const $tabs = $postForm.find('.tangible-template-tab')\n  const tabEditorActivated = [] // index => boolean\n\n  if (!$tabs.length) {\n    console.warn('No tabs elements found for Tangible Template code editor')\n    return\n  }\n\n  $tabSelectors.on('click', function () {\n    const currentTabSelector = this\n\n    // Show current tab, hide others\n\n    $tabSelectors.each(function (index) {\n      const $tabSelector = $(this)\n      const $tab = $tabs.eq(index)\n\n      if (this !== currentTabSelector) {\n        // Hide\n\n        $tabSelector.removeClass('active')\n        $tab.hide()\n\n        return\n      }\n\n      // Show\n\n      $tabSelector.addClass('active')\n      $tab.show()\n\n      // Find editor in tab, if any\n      const $tabEditor = $tab.find('[data-tangible-template-editor-type]')\n      const editorInstance = $tabEditor.length\n        ? editorInstances[\n            $tabEditor.attr('name') // By field name\n          ]\n        : false\n\n      if (!tabEditorActivated[index]) {\n        tabEditorActivated[index] = true\n\n        // Refresh editor once\n        if (editorInstance) {\n          editorInstance.refresh()\n        }\n      }\n\n      if (editorInstance) {\n        editorInstance.focus()\n      }\n\n      setMemory({\n        tab: $tabSelector.data('tabName'),\n        postId,\n      })\n    }) // End for each tab selector\n  }) // End on click tab selector\n\n  /**\n   * Set default tab from URL query parameter\n   */\n\n  const query = window.location.search\n    .substr(1)\n    .split('&')\n    .reduce(function (obj, pair) {\n      const [key, value] = pair.split('=')\n      obj[key] = value\n      return obj\n    }, {})\n\n  const gotoTab = query.tab || (memory.postId === postId && memory.tab)\n\n  if (gotoTab) {\n    // Switch to tab\n\n    const $activeTabSelector = $tabSelectors.filter(\n      `[data-tab-name=\"${gotoTab}\"]`\n    )\n\n    if ($activeTabSelector.length) {\n      $activeTabSelector.eq(0).click()\n    } else {\n      // Ignore if tab not found\n      // console.log('Tab not found', gotoTab)\n    }\n  }\n})\n"],"names":["memoryKey","memory","getMemory","setMemory","state","__name","e","$","$postForm","$editors","editorInstances","postId","$postTitle","$publishButton","$publishingActions","templateMeta","ajax","createCodeEditor","additionalFieldNames","$additionalFields","fieldName","$field","taxonomyNames","$taxonomyFields","taxName","$terms","checked","updatePublishButton","newText","errorMessage","getEditorFields","data","editor","value","getAdditionalFields","getTaxonomyFields","$el","save","title","__spreadProps","__spreadValues","previousLabel","labelTimer","restorePreviousLabelAfterTimeout","res","sharedEditorOptions","$editor","type","editorOptions","$tabSelectors","$tabs","tabEditorActivated","currentTabSelector","index","$tabSelector","$tab","$tabEditor","editorInstance","gotoTab","obj","pair","key","$activeTabSelector"],"mappings":"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"}