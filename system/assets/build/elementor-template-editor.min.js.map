{"version":3,"file":"elementor-template-editor.min.js.map","sources":["../src/elementor-template-editor/index.js"],"sourcesContent":["/**\n * Template editor widget for Elementor\n * Similar to Gutenberg block in ../gutenberg/blocks/template.js\n * Widget is rendered in /integrations/elementor/template-editor-control.php\n *\n * https://developers.elementor.com/creating-a-new-control#Control_JS_file\n */\n\nconst { jQuery, wp, Tangible } = window\n\njQuery(document).ready(function ($) {\n  const { Tangible, elementor } = window\n\n  const { CodeMirror, createCodeEditor, moduleLoader } = Tangible\n\n  /**\n   * Keep track of preview element that corresponds to this widget panel's template editor.\n   *\n   * There's no action for \"close editor\", so the elements must be checked if they actually exist.\n   *\n   * https://code.elementor.com/js-hooks/#panelopen_editorelementType\n   */\n  let currentlyOpenWidget = null\n\n  elementor.hooks.addAction(\n    'panel/open_editor/widget/tangible-template-editor',\n    function (panel, model, view) {\n      currentlyOpenWidget = { panel, model, view }\n    }\n  )\n\n  // Controls\n  const templateEditorControl = elementor.modules.controls.BaseData.extend({\n    onReady: function () {\n      // this = { el, $el, model, ui, .. }\n      // console.log('Template editor control: Ready', this)\n\n      this.unsubscribers = []\n\n      // Create code editor instance\n\n      const textarea = this.$el.find(\n        '.tangible-elementor-template-editor-textarea'\n      )[0]\n      if (!textarea) return\n\n      const editor = createCodeEditor(textarea, {\n        language: 'html',\n        viewportMargin: Infinity, // With .CodeMirror height: auto or 100%\n        resizable: false,\n        lineWrapping: true,\n\n        extraKeys: {\n          'Alt-F': 'findPersistent',\n          Enter: 'emmetInsertLineBreak',\n          'Ctrl-Space': 'autocomplete',\n        },\n      })\n\n      editor.setSize(null, '100%') // Prevent width resize, scroll instead\n\n      // Trick to fix initial CodeMirror styling\n      setTimeout(function () {\n        editor.refresh()\n        editor.focus()\n      }, 0)\n\n      // Preview refresh logic\n\n      let shouldRefresh = false\n\n      editor.on('change', () => {\n        shouldRefresh = true\n\n        /**\n         * Saving field value on every key press is too heavy, because the preview\n         * is rendered server-side.\n         */\n        // const value = editor.getValue()\n        // this.setValue( value )\n      })\n\n      /**\n       * Refresh interval should be small, since the field value needs to be updated before\n       * user can click \"Update\" for the widget.\n       *\n       * Ideally, if Elementor has a *synchronous* hook for \"before save\" actions, it would be\n       * possible to always update the field value before save.\n       */\n      const refreshInterval = 1000\n      const refreshTimer = setInterval(() => {\n        if (!shouldRefresh) return\n        shouldRefresh = false\n\n        // Update field value\n        const value = editor.getValue()\n        this.setValue(value)\n\n        // Load dynamic modules for preview\n        if (\n          moduleLoader &&\n          currentlyOpenWidget &&\n          currentlyOpenWidget.view &&\n          currentlyOpenWidget.view.$el\n        ) {\n          const previewElement = currentlyOpenWidget.view.$el.find(\n            '.elementor-widget-container'\n          )[0]\n          if (!previewElement) return\n\n          moduleLoader(previewElement)\n        }\n      }, refreshInterval)\n\n      // Clean up\n      this.unsubscribers.push(function () {\n        clearInterval(refreshTimer)\n      })\n    },\n\n    onBeforeDestroy: function () {\n      this.unsubscribers.forEach((unsubscribe) => unsubscribe())\n    },\n  })\n\n  elementor.addControlView('tangible-template-editor', templateEditorControl)\n})\n"],"names":["jQuery","wp","Tangible","$","elementor","CodeMirror","createCodeEditor","moduleLoader","currentlyOpenWidget","panel","model","view","templateEditorControl","textarea","editor","shouldRefresh","refreshTimer","value","previewElement","unsubscribe"],"mappings":"mNAQA,KAAM,CAAE,OAAAA,EAAQ,GAAAC,EAAI,SAAAC,CAAS,EAAI,OAEjCF,EAAO,QAAQ,EAAE,MAAM,SAAUG,EAAG,CAClC,KAAM,CAAE,SAAAD,EAAU,UAAAE,CAAU,EAAI,OAE1B,CAAE,WAAAC,EAAY,iBAAAC,EAAkB,aAAAC,CAAa,EAAIL,EASvD,IAAIM,EAAsB,KAE1BJ,EAAU,MAAM,UACd,oDACA,SAAUK,EAAOC,EAAOC,EAAM,CAC5BH,EAAsB,CAAE,MAAAC,EAAO,MAAAC,EAAO,KAAAC,CAAK,CAC7C,CACF,EAGA,MAAMC,EAAwBR,EAAU,QAAQ,SAAS,SAAS,OAAO,CACvE,QAAS,UAAY,CAInB,KAAK,cAAgB,CAAA,EAIrB,MAAMS,EAAW,KAAK,IAAI,KACxB,8CACF,EAAE,GACF,GAAI,CAACA,EAAU,OAEf,MAAMC,EAASR,EAAiBO,EAAU,CACxC,SAAU,OACV,eAAgB,EAAA,EAChB,UAAW,GACX,aAAc,GAEd,UAAW,CACT,QAAS,iBACT,MAAO,uBACP,aAAc,cAChB,CACF,CAAC,EAEDC,EAAO,QAAQ,KAAM,MAAM,EAG3B,WAAW,UAAY,CACrBA,EAAO,QAAA,EACPA,EAAO,MACT,CAAA,EAAG,CAAC,EAIJ,IAAIC,EAAgB,GAEpBD,EAAO,GAAG,SAAU,IAAM,CACxBC,EAAgB,EAQlB,CAAC,EAUD,MAAMC,EAAe,YAAY,IAAM,CACrC,GAAI,CAACD,EAAe,OACpBA,EAAgB,GAGhB,MAAME,EAAQH,EAAO,WAIrB,GAHA,KAAK,SAASG,CAAK,EAIjBV,GACAC,GACAA,EAAoB,MACpBA,EAAoB,KAAK,IACzB,CACA,MAAMU,EAAiBV,EAAoB,KAAK,IAAI,KAClD,6BACF,EAAE,GACF,GAAI,CAACU,EAAgB,OAErBX,EAAaW,CAAc,CAC7B,CACF,EAvBwB,GAuBN,EAGlB,KAAK,cAAc,KAAK,UAAY,CAClC,cAAcF,CAAY,CAC5B,CAAC,CACH,EAEA,gBAAiB,UAAY,CAC3B,KAAK,cAAc,QAASG,GAAgBA,EAAa,CAAA,CAC3D,CACF,CAAC,EAEDf,EAAU,eAAe,2BAA4BQ,CAAqB,CAC5E,CAAC"}