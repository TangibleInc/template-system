{"version":3,"file":"elementor-template-editor.min.js.map","sources":["../src/elementor-template-editor/index.js"],"sourcesContent":["/**\r\n * Template editor widget for Elementor\r\n * Similar to Gutenberg block in ../gutenberg/blocks/template.js\r\n * Widget is rendered in /integrations/elementor/template-editor-control.php\r\n *\r\n * https://developers.elementor.com/creating-a-new-control#Control_JS_file\r\n */\r\n\r\nconst { jQuery, wp, Tangible } = window\r\n\r\njQuery(document).ready(function ($) {\r\n  const { Tangible, elementor } = window\r\n\r\n  const { CodeMirror, createCodeEditor, moduleLoader } = Tangible\r\n\r\n  /**\r\n   * Keep track of preview element that corresponds to this widget panel's template editor.\r\n   *\r\n   * There's no action for \"close editor\", so the elements must be checked if they actually exist.\r\n   *\r\n   * https://code.elementor.com/js-hooks/#panelopen_editorelementType\r\n   */\r\n  let currentlyOpenWidget = null\r\n\r\n  elementor.hooks.addAction(\r\n    'panel/open_editor/widget/tangible-template-editor',\r\n    function (panel, model, view) {\r\n      currentlyOpenWidget = { panel, model, view }\r\n    }\r\n  )\r\n\r\n  // Controls\r\n  const templateEditorControl = elementor.modules.controls.BaseData.extend({\r\n    onReady: function () {\r\n      // this = { el, $el, model, ui, .. }\r\n      // console.log('Template editor control: Ready', this)\r\n\r\n      this.unsubscribers = []\r\n\r\n      // Create code editor instance\r\n\r\n      const textarea = this.$el.find(\r\n        '.tangible-elementor-template-editor-textarea'\r\n      )[0]\r\n      if (!textarea) return\r\n\r\n      const editor = createCodeEditor(textarea, {\r\n        language: 'html',\r\n        viewportMargin: Infinity, // With .CodeMirror height: auto or 100%\r\n        resizable: false,\r\n        lineWrapping: true,\r\n\r\n        extraKeys: {\r\n          'Alt-F': 'findPersistent',\r\n          Enter: 'emmetInsertLineBreak',\r\n          'Ctrl-Space': 'autocomplete',\r\n        },\r\n      })\r\n\r\n      editor.setSize(null, '100%') // Prevent width resize, scroll instead\r\n\r\n      // Trick to fix initial CodeMirror styling\r\n      setTimeout(function () {\r\n        editor.refresh()\r\n        editor.focus()\r\n      }, 0)\r\n\r\n      // Preview refresh logic\r\n\r\n      let shouldRefresh = false\r\n\r\n      editor.on('change', () => {\r\n        shouldRefresh = true\r\n\r\n        /**\r\n         * Saving field value on every key press is too heavy, because the preview\r\n         * is rendered server-side.\r\n         */\r\n        // const value = editor.getValue()\r\n        // this.setValue( value )\r\n      })\r\n\r\n      /**\r\n       * Refresh interval should be small, since the field value needs to be updated before\r\n       * user can click \"Update\" for the widget.\r\n       *\r\n       * Ideally, if Elementor has a *synchronous* hook for \"before save\" actions, it would be\r\n       * possible to always update the field value before save.\r\n       */\r\n      const refreshInterval = 1000\r\n      const refreshTimer = setInterval(() => {\r\n        if (!shouldRefresh) return\r\n        shouldRefresh = false\r\n\r\n        // Update field value\r\n        const value = editor.getValue()\r\n        this.setValue(value)\r\n\r\n        // Load dynamic modules for preview\r\n        if (\r\n          moduleLoader &&\r\n          currentlyOpenWidget &&\r\n          currentlyOpenWidget.view &&\r\n          currentlyOpenWidget.view.$el\r\n        ) {\r\n          const previewElement = currentlyOpenWidget.view.$el.find(\r\n            '.elementor-widget-container'\r\n          )[0]\r\n          if (!previewElement) return\r\n\r\n          moduleLoader(previewElement)\r\n        }\r\n      }, refreshInterval)\r\n\r\n      // Clean up\r\n      this.unsubscribers.push(function () {\r\n        clearInterval(refreshTimer)\r\n      })\r\n    },\r\n\r\n    onBeforeDestroy: function () {\r\n      this.unsubscribers.forEach((unsubscribe) => unsubscribe())\r\n    },\r\n  })\r\n\r\n  elementor.addControlView('tangible-template-editor', templateEditorControl)\r\n})\r\n"],"names":["jQuery","wp","Tangible","$","elementor","CodeMirror","createCodeEditor","moduleLoader","currentlyOpenWidget","panel","model","view","templateEditorControl","textarea","editor","shouldRefresh","refreshTimer","value","previewElement","unsubscribe"],"mappings":"mNAQA,KAAM,CAAE,OAAAA,EAAQ,GAAAC,EAAI,SAAAC,CAAS,EAAI,OAEjCF,EAAO,QAAQ,EAAE,MAAM,SAAUG,EAAG,CAClC,KAAM,CAAE,SAAAD,EAAU,UAAAE,CAAU,EAAI,OAE1B,CAAE,WAAAC,EAAY,iBAAAC,EAAkB,aAAAC,CAAa,EAAIL,EASvD,IAAIM,EAAsB,KAE1BJ,EAAU,MAAM,UACd,oDACA,SAAUK,EAAOC,EAAOC,EAAM,CAC5BH,EAAsB,CAAE,MAAAC,EAAO,MAAAC,EAAO,KAAAC,CAAK,CAC7C,CACF,EAGA,MAAMC,EAAwBR,EAAU,QAAQ,SAAS,SAAS,OAAO,CACvE,QAAS,UAAY,CAInB,KAAK,cAAgB,CAAA,EAIrB,MAAMS,EAAW,KAAK,IAAI,KACxB,8CACF,EAAE,CAAC,EACH,GAAI,CAACA,EAAU,OAEf,MAAMC,EAASR,EAAiBO,EAAU,CACxC,SAAU,OACV,eAAgB,IAChB,UAAW,GACX,aAAc,GAEd,UAAW,CACT,QAAS,iBACT,MAAO,uBACP,aAAc,cAChB,CACF,CAAC,EAEDC,EAAO,QAAQ,KAAM,MAAM,EAG3B,WAAW,UAAY,CACrBA,EAAO,QAAQ,EACfA,EAAO,MACT,CAAA,EAAG,CAAC,EAIJ,IAAIC,EAAgB,GAEpBD,EAAO,GAAG,SAAU,IAAM,CACxBC,EAAgB,EAQlB,CAAC,EAUD,MAAMC,EAAe,YAAY,IAAM,CACrC,GAAI,CAACD,EAAe,OACpBA,EAAgB,GAGhB,MAAME,EAAQH,EAAO,WAIrB,GAHA,KAAK,SAASG,CAAK,EAIjBV,GACAC,GACAA,EAAoB,MACpBA,EAAoB,KAAK,IACzB,CACA,MAAMU,EAAiBV,EAAoB,KAAK,IAAI,KAClD,6BACF,EAAE,CAAC,EACH,GAAI,CAACU,EAAgB,OAErBX,EAAaW,CAAc,EAE/B,EAvBwB,GAuBN,EAGlB,KAAK,cAAc,KAAK,UAAY,CAClC,cAAcF,CAAY,CAC5B,CAAC,CACH,EAEA,gBAAiB,UAAY,CAC3B,KAAK,cAAc,QAASG,GAAgBA,EAAa,CAAA,CAC3D,CACF,CAAC,EAEDf,EAAU,eAAe,2BAA4BQ,CAAqB,CAC5E,CAAC"}