{"version":3,"file":"template-assets-editor.min.js.map","sources":["../src/template-assets-editor/AssetsEditor.jsx","../src/template-assets-editor/index.jsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react'\r\n\r\nconst { wp } = window\r\n\r\nlet mediaModal\r\nlet mediaModalCallback\r\nconst openMediaModal = () => {\r\n  // Open media library\r\n\r\n  if (mediaModal) {\r\n    mediaModal.open()\r\n    return\r\n  }\r\n\r\n  mediaModal = wp.media({\r\n    title: 'Select media attachment',\r\n    button: {\r\n      text: 'Select',\r\n    },\r\n    multiple: true,\r\n  })\r\n\r\n  mediaModal.on('select', mediaModalCallback)\r\n  mediaModal.open()\r\n}\r\n\r\n/**\r\n * Ensure valid asset name, so it can be used as variable name:\r\n * alphanumeric, dash, and underscore.\r\n *\r\n * This is only applied for newly added asset, because if we apply it\r\n * while the user is editing the input field, the cursor jumps unexpectedly.\r\n *\r\n * Same logic on server side: /includes/template/fields.php, get_template_fields()\r\n */\r\nfunction withValidName(asset) {\r\n  if (asset.name) {\r\n    asset.name = asset.name.replace(/[^\\w_\\-]/g, '')\r\n  }\r\n  return asset\r\n}\r\n\r\nconst AssetsEditor = ({ assets }) => {\r\n  const [assetsState, _setAssets] = useState(assets)\r\n\r\n  // Fresh state reference for callbacks\r\n  const assetsRef = useRef()\r\n  assetsRef.current = assetsState\r\n\r\n  /**\r\n   * Update assets JSON in input field on every change\r\n   */\r\n  const assetsElementRef = useRef()\r\n  const updateAssetsElement = () => {\r\n    assetsElementRef.current.value = JSON.stringify(assetsRef.current)\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateAssetsElement()\r\n  }, [assetsElementRef.current])\r\n\r\n  // Create new assets state on change\r\n  const refreshAssets = () => {\r\n    _setAssets([...assetsRef.current])\r\n    updateAssetsElement()\r\n  }\r\n  const addAsset = (newAsset) => {\r\n    assetsRef.current.push(withValidName(newAsset))\r\n    refreshAssets()\r\n  }\r\n  const updateAsset = (index, newAsset) => {\r\n    assetsRef.current[index] = {\r\n      ...(assetsRef.current[index] || {}),\r\n      ...newAsset,\r\n    }\r\n    refreshAssets()\r\n  }\r\n  const removeAsset = (assetIndex) => {\r\n    assetsRef.current.splice(assetIndex, 1)\r\n    refreshAssets()\r\n  }\r\n\r\n  if (!mediaModalCallback) {\r\n    mediaModalCallback = () => {\r\n      const attachments = mediaModal.state().get('selection').toJSON()\r\n      // Previously accepted only one attachment\r\n      // const attachment = mediaModal.state().get('selection').first().toJSON()\r\n\r\n      // console.log('Got attachments', attachments)\r\n\r\n      for (const attachment of attachments) {\r\n        // Ensure the same attachment is added only once\r\n        let skip = false\r\n        for (const asset of assetsRef.current) {\r\n          if (asset.id === attachment.id) {\r\n            skip = true\r\n            break\r\n          }\r\n        }\r\n        if (skip) continue\r\n\r\n        /**\r\n         * Extract attachment fields\r\n         *\r\n         * When adding a new field, update the documentation:\r\n         *\r\n         * - Internal: /includes/templates/assets/field.php\r\n         * - External: https://loop.tangible.one/tags/asset\r\n         */\r\n        const newAsset = [\r\n          'id',\r\n          'name',\r\n          'title',\r\n          'filename',\r\n          'mime',\r\n          'alt',\r\n          'caption',\r\n          'description',\r\n        ].reduce((obj, key) => {\r\n          obj[key] = attachment[key]\r\n          return obj\r\n        }, {})\r\n\r\n        addAsset(newAsset)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Map of asset names to check for duplicates\r\n  const assetNameMap = {} // name => true\r\n\r\n  return (\r\n    <>\r\n      <input type=\"hidden\" name=\"assets\" ref={assetsElementRef} />\r\n\r\n      <div className=\"template-assets\">\r\n        {assetsState.map((asset, assetIndex) => {\r\n          const isDuplicate = assetNameMap[asset.name] ? true : false\r\n\r\n          if (!isDuplicate) {\r\n            assetNameMap[asset.name] = true\r\n          }\r\n\r\n          return (\r\n            <div key={`asset-${assetIndex}`} className=\"template-asset\">\r\n              <div className=\"template-asset-fields\">\r\n                <div className=\"template-asset-field template-asset-field--name\">\r\n                  <label>Name</label>\r\n\r\n                  <input\r\n                    type=\"text\"\r\n                    value={asset.name}\r\n                    onChange={(e) => {\r\n                      updateAsset(assetIndex, { name: e.target.value })\r\n                    }}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"template-asset-field template-asset-field--attachment\">\r\n                  <div>\r\n                    {isDuplicate && (\r\n                      <div className=\"template-asset--duplicate-name-message\">\r\n                        Duplicate name exists\r\n                      </div>\r\n                    )}\r\n                    ID:{' '}\r\n                    <a\r\n                      href={`post.php?post=${asset.id}&action=edit`}\r\n                      target=\"_blank\"\r\n                    >\r\n                      {asset.id}\r\n                    </a>\r\n                    <br />\r\n                    Title: {asset.title}\r\n                    <br />\r\n                    File name: <code>{asset.filename}</code>\r\n                    <br />\r\n                    {/* MIME type: <code>{ asset.mime }</code> */}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"template-asset-actions\">\r\n                <div className=\"template-asset-action template-asset-action--remove-asset\">\r\n                  <div className=\"icon\" onClick={() => removeAsset(assetIndex)}>\r\n                    <svg\r\n                      viewBox=\"0 0 1792 1792\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                    >\r\n                      <path d=\"M1490 1322q0 40-28 68l-136 136q-28 28-68 28t-68-28l-294-294-294 294q-28 28-68 28t-68-28l-136-136q-28-28-28-68t28-68l294-294-294-294q-28-28-28-68t28-68l136-136q28-28 68-28t68 28l294 294 294-294q28-28 68-28t68 28l136 136q28 28 28 68t-28 68l-294 294 294 294q28 28 28 68z\" />\r\n                    </svg>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n\r\n      <button\r\n        type=\"button\"\r\n        className=\"button button--add-rule-group\"\r\n        onClick={() => openMediaModal()}\r\n      >\r\n        Add asset\r\n      </button>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AssetsEditor\r\n","/**\r\n * Template assets\r\n *\r\n * @see /includes/template/assets\r\n */\r\nimport { render } from 'react'\r\nimport AssetsEditor from './AssetsEditor'\r\n\r\nconst { jQuery: $ } = window\r\n\r\nconst el = document.getElementById('tangible_template_assets_editor')\r\n\r\nlet assets = $(el).data('assets')\r\nif (!Array.isArray(assets)) assets = []\r\n\r\nrender(<AssetsEditor assets={assets} />, el)\r\n"],"names":["useState","assets","useRef","useEffect","render"],"mappings":"mrBAEA,sUAyCoCA,SAASC,OAAAA,SAAAA,CAAAA,EAAAA,EAGzBC,uBAMOA,EAAAA,EAAAA,QAAAA,EAAAA,MAAAA,EAAAA,SAAAA,OAAAA,OAAO,6EAKhCC,2tFC1CFC"}