{"version":3,"file":"template-import-export.min.js.map","sources":["../src/template-import-export/common.js","../src/template-import-export/Importer/handleDuplicates.js","../src/template-import-export/Importer/index.jsx","../src/common/Select.jsx","../src/template-import-export/Exporter/ExportRule.jsx","../src/template-import-export/Exporter/localStorage.js","../src/template-import-export/Exporter/index.jsx","../src/template-import-export/index.jsx"],"sourcesContent":["const {\n  Tangible: { ajax },\n} = window\n\n// AJAX action prefix must be the same as in /system/import-export/ajax.php\nconst ajaxActionPrefix = 'tangible_template_import_export__'\n\nexport { ajax, ajaxActionPrefix }\n","import { ajax, ajaxActionPrefix } from '../common'\n\nexport default function handleDuplicates({\n  mode, // overwrite or keep_both\n  inputStateRef,\n  setInputState,\n}) {\n  const { importData } = inputStateRef.current\n\n  if (!importData || !importData.post_types) {\n    console.warn('Import data not found', importData)\n    return\n  }\n\n  const duplicates = {\n    ...importData, // NOTE: Other import data properties such as \"shared_assets\"\n    post_types: {},\n    handle_duplicates: mode,\n  }\n\n  // Filter only duplicate posts\n  for (const { id, title, post_type } of inputStateRef.current\n    .duplicatesFound) {\n    const postData = importData.post_types[post_type].filter(\n      (post) => post.id === id\n    )[0]\n    if (!postData) {\n      console.warn('Corresponding post not found', id, post_type, title)\n      continue\n    }\n\n    if (!duplicates.post_types[post_type]) {\n      duplicates.post_types[post_type] = []\n    }\n\n    duplicates.post_types[post_type].push(postData)\n  }\n\n  // console.log('Import duplicates', mode, duplicates)\n\n  setInputState({\n    ...inputStateRef.current,\n    importData: {},\n    importedData: {},\n    duplicatesFound: [],\n    duplicatesHandledMessage: '',\n    message: '',\n  })\n\n  ajax(ajaxActionPrefix + 'import', duplicates)\n    .then((result) => {\n      const importedData = {\n        ...duplicates,\n        old_to_new_id: {\n          ...(inputStateRef.current.old_to_new_id || {}),\n          ...(result.old_to_new_id || {}),\n        },\n      }\n\n      console.log('Imported duplicates', importedData)\n\n      // Clear duplicate posts state and show message after \"Import\" button\n\n      setInputState({\n        ...inputStateRef.current,\n        importing: false,\n        importData: {},\n        importedData,\n        duplicatesFound: [],\n        duplicatesHandledMessage: '',\n        message:\n          result.post_count +\n          ' template' +\n          (result.post_count !== 1 ? 's' : '') +\n          ' imported',\n      })\n    })\n    .catch((error) => {\n      setInputState({\n        ...inputStateRef.current,\n        duplicatesHandledMessage: 'Error: ' + error.message,\n      })\n    })\n}\n","/**\n * Template importer with support for handling duplicates\n *\n * Also used in ../../template-cloud\n */\n\nimport { useEffect, useRef, useState } from 'react'\nimport handleDuplicates from './handleDuplicates'\n\nimport { ajax, ajaxActionPrefix } from '../common'\n\nconst debug = true // Set this to false for production\nconst log = (...args) => debug && console.log('[Importer]', ...args)\n\nconst { FileReader } = window\n\nconst postTypeToLabel = {\n  tangible_template: 'Templates',\n  tangible_style: 'Styles',\n  tangible_script: 'Scripts',\n  tangible_layout: 'Layouts',\n  tangible_block: 'Blocks',\n}\n\nconst Importer = ({\n  useInput = true,\n  directImportData, // Optionally pass direct JSON data instead of using file upload\n}) => {\n  const [inputState, setInputState] = useState({\n    importing: false,\n    importData: {},\n    importedData: {},\n    message: '',\n    duplicatesFound: [],\n    duplicatesHandledMessage: '',\n  })\n\n  const preImport = () => {\n    setInputState({\n      ...inputStateRef.current,\n      importing: true,\n      importData: {},\n      importedData: {},\n      duplicatesFound: [],\n      duplicatesHandledMessage: '',\n      message: 'Importing..',\n    })\n  }\n\n  const onError = (message) =>\n    setInputState({\n      ...inputStateRef.current,\n      importing: false,\n      importData: {},\n      importedData: {},\n      duplicatesFound: [],\n      duplicatesHandledMessage: '',\n      message: 'Error: ' + message,\n    })\n\n  const importJSON = (data) => {\n    setInputState({\n      ...inputStateRef.current,\n      importData: data,\n    })\n\n    ajax(ajaxActionPrefix + 'import', data)\n      .then((result) => {\n        // Import complete\n        log('Import success', result)\n\n        const { importData } = inputStateRef.current\n        const importedData = {\n          post_types: Object.keys(importData.post_types).reduce(\n            (obj, postType) => {\n              const duplicateIds = result.duplicates_found\n                .filter((post) => post.post_type === postType)\n                .map((post) => post.id)\n\n              obj[postType] = importData.post_types[postType].filter(\n                (post) => duplicateIds.indexOf(post.id) < 0\n              )\n\n              return obj\n            },\n            {}\n          ),\n          // Map of old to new ID - See same property in ./handleDuplicates\n          old_to_new_id: result.old_to_new_id || {},\n        }\n\n        log('Imported minus duplicates', importedData)\n\n        setInputState({\n          ...inputStateRef.current,\n          importing: false,\n          duplicatesFound: result.duplicates_found,\n          importData: result.duplicates_found.length ? importData : {}, // Clear\n          importedData,\n          message:\n            result.post_count +\n            ' template' +\n            (result.post_count !== 1 ? 's' : '') +\n            ' imported' +\n            (result.failed_post_count\n              ? ' - ' +\n                result.failed_post_count +\n                ' template' +\n                (result.failed_post_count !== 1 ? 's' : '') +\n                ' failed'\n              : ''),\n        })\n      })\n      .catch((error) => {\n        // Import failed\n        console.error(error)\n        onError(error.message)\n      })\n  }\n\n  useEffect(() => {\n    if (!directImportData) return\n\n    preImport()\n    importJSON(directImportData) // Will correctly refresh when a new block json is installed\n  }, [])\n\n  const inputStateRef = useRef()\n  inputStateRef.current = inputState\n\n  const fileInputRef = useRef()\n\n  return (\n    <div id=\"importer\">\n      {useInput && (\n        <p>\n          <input\n            type=\"file\"\n            hidden\n            ref={fileInputRef}\n            accept=\".json,text/json\"\n            onChange={({ target: { files } }) => {\n              // File upload\n\n              // log('File upload state', files)\n\n              const file = files[0]\n\n              const reader = new FileReader()\n\n              preImport()\n\n              reader.onload = function (e) {\n                const content = e.target.result\n\n                // File upload complete\n\n                try {\n                  const data = JSON.parse(content)\n\n                  log('Import data', data)\n\n                  importJSON(data)\n                } catch (e) {\n                  log('Invalid JSON', content)\n\n                  onError('Invalid JSON')\n                }\n              }\n\n              reader.onerror = function (e) {\n                onError(e.message)\n              }\n\n              reader.readAsText(file)\n            }}\n          />\n          <button\n            type=\"button\"\n            className=\"button button-primary\"\n            disabled={inputState.importing}\n            onClick={() => {\n              fileInputRef.current && fileInputRef.current.click()\n            }}\n          >\n            Import\n          </button>\n        </p>\n      )}\n\n      {inputState.message && <p>{inputState.message}</p>}\n\n      {\n        // List imported posts\n\n        Object.keys(inputState.importedData.post_types || {}).map(\n          (postType) =>\n            inputState.importedData.post_types[postType] &&\n            inputState.importedData.post_types[postType].length > 0 && (\n              <>\n                <div>\n                  <b>{postTypeToLabel[postType] || 'Templates'}</b>\n                </div>\n                <ul>\n                  {inputState.importedData.post_types[postType].map(\n                    (post, postIndex) => (\n                      <li key={`post-${postIndex}`}>\n                        {inputState.importedData.old_to_new_id &&\n                        inputState.importedData.old_to_new_id[post.id] ? (\n                          // Link to newly created template\n                          <a\n                            href={`post.php?post=${\n                              inputState.importedData.old_to_new_id[post.id]\n                            }&action=edit`}\n                          >\n                            {post.title}\n                          </a>\n                        ) : (\n                          // Fallback in case we couldn't find new ID in map\n                          post.title\n                        )}\n                      </li>\n                    )\n                  )}\n                </ul>\n              </>\n            )\n        )\n      }\n\n      {\n        // Duplicates\n\n        inputState.duplicatesFound.length > 0 && (\n          <>\n            <p style={{ fontWeight: 'bold', color: 'red' }}>\n              {inputState.duplicatesFound.length} duplicate template\n              {inputState.duplicatesFound !== 1 ? 's' : ''} found\n            </p>\n            {\n              // Organize list of duplicate posts by post type\n              Object.keys(postTypeToLabel).map((postType) => {\n                const posts = inputState.duplicatesFound.filter(\n                  (post) => post.post_type === postType\n                )\n                if (!posts.length) return\n                return (\n                  <>\n                    <div>\n                      <b>{postTypeToLabel[postType] || 'Templates'}</b>\n                    </div>\n                    <ul>\n                      {posts.map((post, postIndex) => (\n                        <li key={`duplicate-post-${postIndex}`}>\n                          {post.title}\n                        </li>\n                      ))}\n                    </ul>\n                  </>\n                )\n              })\n            }\n            {/* <ul>\n          {inputState.duplicatesFound.map((post, postIndex) =>\n            <li key={`duplicate-post-${postIndex}`}>{ post.title }\n            </li>\n          )}\n        </ul> */}\n            <button\n              type=\"button\"\n              className=\"button button-primary\"\n              onClick={() => {\n                handleDuplicates({\n                  mode: 'overwrite',\n                  inputStateRef,\n                  setInputState,\n                })\n              }}\n            >\n              Overwrite\n            </button>\n            &nbsp;\n            <button\n              type=\"button\"\n              className=\"button button-primary\"\n              onClick={() => {\n                handleDuplicates({\n                  mode: 'keep_both',\n                  inputStateRef,\n                  setInputState,\n                })\n              }}\n            >\n              Keep both\n            </button>\n            &nbsp;\n            <button\n              type=\"button\"\n              className=\"button button-primary\"\n              onClick={() => {\n                // Clear state\n\n                setInputState({\n                  ...inputStateRef.current,\n                  importing: false,\n                  importData: {},\n                  importedData: {},\n                  duplicatesFound: [],\n                  duplicatesHandledMessage: '',\n                  message: '',\n                })\n              }}\n            >\n              Skip\n            </button>\n            {inputState.duplicatesHandledMessage && (\n              <p>{inputState.duplicatesHandledMessage}</p>\n            )}\n          </>\n        )\n      }\n    </div>\n  )\n}\n\nexport default Importer\n","import { useEffect, useRef } from 'react' // Aliased from Tangible.Preact || wp.element\n\n/**\n * Wrap Select2 module from vendor/tangible/interface\n *\n * @see https://select2.org/\n *\n * Also used in ../template-import-export\n */\nconst { jQuery: $ } = window\n\nconst Select = ({\n  labelForEmptyValue = '',\n  options = [],\n  value = '',\n  onChange,\n  multiSelect,\n  style,\n}) => {\n  const ref = useRef()\n\n  /**\n   * Activate Select2\n   */\n\n  useEffect(() => {\n    const $el = $(ref.current)\n    ref.current.$el = $el\n\n    onChange(value)\n\n    $el.tangibleSelect({\n      minimumResultsForSearch: 5,\n    })\n\n    if (multiSelect) {\n      // Ensure multiple values are selected on mount\n      $el.val(value)\n      $el.trigger('change')\n    }\n\n    $el.on('change', function (e) {\n      if (!multiSelect) {\n        onChange(e.target.value)\n        return\n      }\n\n      if (!ref.current) return\n\n      // Ensure array of values for multi-select\n\n      const values = $el.select2('data').map((item) => item.id)\n      onChange(values)\n    })\n\n    const select2 = (ref.current.select2 = $el.data('select2'))\n\n    // Clean up when component removed\n    return () => {\n      select2 && select2.destroy()\n    }\n  }, []) // NOTE: Empty array to run only once on component mount\n\n  // Ensure Select2 shows current value\n  if (ref.current && ref.current.$el) {\n    if (multiSelect) {\n      const currentValues = ref.current.$el.val()\n      if (value.length !== currentValues.length && options.length) {\n        // After select is rendered with options\n        setImmediate(function () {\n          ref.current.$el.val(value)\n          ref.current.$el.trigger('change')\n        })\n      }\n    } else if (ref.current.value !== value) {\n      ref.current.$el.val(value)\n      ref.current.$el.trigger('change')\n    }\n  }\n\n  return (\n    <select\n      ref={ref}\n      // onChange={e => onChange(e.target.value)}\n      autoComplete=\"off\"\n      multiple={multiSelect}\n      style={{\n        display: 'none',\n        width: '160px', // Default width\n        ...style,\n      }}\n    >\n      {labelForEmptyValue && (\n        <option value=\"\" disabled={true} selected={value == null}>\n          {labelForEmptyValue}\n        </option>\n      )}\n      {options.map((option, optionIndex) => (\n        <option\n          key={`option-${optionIndex}`}\n          value={option.value}\n          selected={option.value === value}\n        >\n          {option.label}\n        </option>\n      ))}\n    </select>\n  )\n}\n\nexport default Select\n","import Select from '../../common/Select'\n\n/**\n * Check for Block Editor plugin\n * @see /template/import-export/enqueue.php\n */\nconst { templateSystemHasPlugin = {} } = window.Tangible\n\nconst ExportRule = ({\n  rule,\n  ruleIndex,\n\n  exportRulesRef,\n  setExportRules,\n\n  templateTypeItemOptionsRef,\n  ensureTemplateTypeItemOptions,\n}) => (\n  <div className=\"export-rule\">\n    <div className=\"export-rule-part\">\n      <Select\n        {...{\n          labelForEmptyValue: 'Select template type',\n          options: [\n\n            /**\n             * Enable block export only when Blocks & Editor is active\n             */\n            ...((templateSystemHasPlugin['blocks'] && templateSystemHasPlugin['blocks_editor'])\n              ? [{ label: 'Block', value: 'tangible_block' }]\n              : []),\n            ...(templateSystemHasPlugin['loops']\n              ? [\n                { label: 'Template', value: 'tangible_template' },\n                { label: 'Style', value: 'tangible_style' },\n                { label: 'Script', value: 'tangible_script' },\n                { label: 'Layout', value: 'tangible_layout' },\n              ]\n              : []\n            )\n          ],\n          value: rule.field,\n          onChange(field) {\n            rule.field = field\n\n            exportRulesRef.current[ruleIndex] = rule\n            setExportRules(exportRulesRef.current)\n          },\n        }}\n      />\n    </div>\n\n    {rule.field && (\n      <div className=\"export-rule-part\">\n        <Select\n          {...{\n            options: [\n              { label: 'All', value: 'all' },\n              { label: 'Include', value: 'include' },\n              { label: 'Exclude', value: 'exclude' },\n            ],\n            value: rule.operator,\n            onChange(operator) {\n              rule.operator = operator\n\n              if (operator === 'all') {\n                rule.values = [] // Clear values from include/exclude\n              }\n\n              exportRulesRef.current[ruleIndex] = rule\n              setExportRules(exportRulesRef.current)\n\n              if (operator !== 'all') {\n                ensureTemplateTypeItemOptions(rule.field)\n              }\n            },\n            style: { width: 'auto' },\n          }}\n        />\n      </div>\n    )}\n\n    {rule.field &&\n      rule.operator !== 'all' &&\n      templateTypeItemOptionsRef.current[rule.field] && (\n        <div className=\"export-rule-part\">\n          <Select\n            {...{\n              options:\n                templateTypeItemOptionsRef.current[rule.field] instanceof\n                Promise\n                  ? [] // Still loading\n                  : templateTypeItemOptionsRef.current[rule.field],\n\n              value: rule.values,\n\n              onChange(values) {\n                rule.values = values\n\n                exportRulesRef.current[ruleIndex] = rule\n                setExportRules(exportRulesRef.current)\n              },\n              multiSelect: true,\n            }}\n          />\n        </div>\n      )}\n\n    <div className=\"export-rule-part export-rule-part--remove-rule\">\n      <div\n        className=\"icon\"\n        onClick={() => {\n          // Remove this rule\n          exportRulesRef.current.splice(ruleIndex, 1)\n\n          setExportRules(exportRulesRef.current)\n        }}\n      >\n        <svg viewBox=\"0 0 1792 1792\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M1490 1322q0 40-28 68l-136 136q-28 28-68 28t-68-28l-294-294-294 294q-28 28-68 28t-68-28l-136-136q-28-28-28-68t28-68l294-294-294-294q-28-28-28-68t28-68l136-136q28-28 68-28t68 28l294 294 294-294q28-28 68-28t68 28l136 136q28 28 28 68t-28 68l-294 294 294 294q28 28 28 68z\" />\n        </svg>\n      </div>\n    </div>\n  </div>\n)\n\nexport default ExportRule\n","/**\n * Remember export settings in local storage\n */\nexport function saveStateToLocalStorage(state) {\n  if (!window.localStorage) return\n  window.localStorage.setItem('exporterState', JSON.stringify(state))\n}\n\nexport function getSavedStateFromLocalStorage() {\n  if (!window.localStorage) return\n  let state = window.localStorage.getItem('exporterState')\n  if (!state) return\n  try {\n    state = JSON.parse(state)\n    return state\n  } catch (e) {\n    /* Ignore */\n  }\n}\n","/**\n * Template exporter\n */\n\nimport { useEffect, useRef, useState } from 'react'\nimport ExportRule from './ExportRule'\nimport {\n  saveStateToLocalStorage,\n  getSavedStateFromLocalStorage,\n} from './localStorage'\n\nimport { ajax, ajaxActionPrefix } from '../common'\n\nconst debug = false // Set this to false for production\nconst log = (...args) => debug && console.log('[Exporter]', ...args)\n\nconst savedState = getSavedStateFromLocalStorage()\n\nconst defaultPackageName =\n  (savedState && savedState.name) || 'tangible-templates'\nconst defaultExportRules = (savedState && savedState.rules) || [\n  {\n    field: 'tangible_template',\n    operator: 'all',\n    values: [],\n  },\n]\n\nconst Exporter = () => {\n  // Export package name\n  const exportNameRef = useRef()\n\n  // Rules state\n\n  const [exportRules, _setExportRules] = useState(defaultExportRules)\n\n  const exportRulesRef = useRef()\n  exportRulesRef.current = exportRules // Keep ever-fresh reference for event callbacks to use\n\n  const setExportRules = (rules) => {\n    _setExportRules([...rules]) // Must create new state to re-render\n  }\n\n  // log('exportRulesRef.current', exportRulesRef.current)\n\n  // AJAX data state\n\n  const [templateTypeItemOptions, setTemplateTypeItemOptions] = useState({})\n  const templateTypeItemOptionsRef = useRef()\n\n  // Keep ever-fresh reference for event callbacks to use\n  templateTypeItemOptionsRef.current = templateTypeItemOptions\n\n  // log('templateTypeItemOptionsRef.current', templateTypeItemOptionsRef.current)\n\n  // Export state\n\n  const [exportState, _setExportState] = useState({\n    exporting: false,\n    message: '',\n    json: '',\n    packageName: '',\n  })\n\n  const exportStateRef = useRef()\n  exportStateRef.current = exportState\n\n  const setExportState = (newState) => {\n    _setExportState({\n      ...exportStateRef.current,\n      ...newState,\n    })\n  }\n\n  // Ensure data\n\n  const ensureTemplateTypeItemOptions = async (templateType) => {\n    // We already have data (or is loading it)\n    if (templateTypeItemOptionsRef.current[templateType]) return\n\n    log(\n      'ensureTemplateTypeItemOptions',\n      templateType,\n      templateTypeItemOptionsRef.current\n    )\n\n    const promise = ajax(ajaxActionPrefix + 'get_template_type_item_options', {\n      post_type: templateType,\n    })\n      .then((result) => {\n        log('ensureTemplateTypeItemOptions Success', result)\n\n        setTemplateTypeItemOptions({\n          ...templateTypeItemOptionsRef.current,\n          [templateType]: result,\n        })\n      })\n      .catch((error) => {\n        log('ensureTemplateTypeItemOptions Fail', error)\n      })\n\n    // Store promise to prevent loading multiple times\n    setTemplateTypeItemOptions({\n      ...templateTypeItemOptionsRef.current,\n      [templateType]: promise,\n    })\n  }\n\n  return (\n    <div id=\"exporter\">\n      <div className=\"export-name\">\n        Package name:{' '}\n        <input\n          type=\"text\"\n          name=\"name\"\n          defaultValue={defaultPackageName}\n          ref={exportNameRef}\n        />\n      </div>\n\n      <div className=\"export-rules\">\n        {exportRules.map((rule, ruleIndex) => (\n          <ExportRule\n            key={`export-rule-${ruleIndex}`}\n            {...{\n              rule,\n              ruleIndex,\n\n              exportRulesRef,\n              setExportRules,\n\n              templateTypeItemOptionsRef,\n              ensureTemplateTypeItemOptions,\n            }}\n          />\n        ))}\n      </div>\n\n      <p>\n        <button\n          type=\"button\"\n          className=\"button button-secondary\"\n          onClick={() => {\n            // Add export rule\n\n            exportRulesRef.current.push({\n              field: 'tangible_template',\n              operator: 'all',\n              values: [],\n            })\n\n            setExportRules(exportRulesRef.current)\n          }}\n        >\n          Add export rule\n        </button>\n      </p>\n\n      {exportRulesRef.current.length > 0 && (\n        <p>\n          <button\n            type=\"button\"\n            className=\"button button-primary\"\n            disabled={exportState.exporting}\n            onClick={() => {\n              const packageName =\n                (exportNameRef.current && exportNameRef.current.value) ||\n                defaultPackageName\n\n              saveStateToLocalStorage({\n                name: packageName,\n                rules: exportRulesRef.current,\n              })\n\n              // Export\n\n              log('Export start', exportRulesRef.current)\n\n              setExportState({\n                exporting: true,\n                message: 'Exporting..',\n              })\n\n              ajax(ajaxActionPrefix + 'export', {\n                export_rules: exportRulesRef.current,\n              })\n                .then((result) => {\n                  console.log('Export success', result)\n\n                  setExportState({\n                    exporting: false,\n                    message: '',\n                    // json: JSON.stringify(result, null, 2)\n                  })\n\n                  // Download JSON file\n\n                  const data = {\n                    package_name: packageName,\n                    ...result,\n                  }\n\n                  const timestamp = new Date()\n                    .toISOString()\n                    .slice(0, 10)\n                    .replace(/-/g, '') // Ymd\n\n                  const a = document.createElement('a')\n\n                  a.href =\n                    'data:text/json;charset=utf-8,' +\n                    encodeURIComponent(JSON.stringify(data, null, 2))\n                  a.download = `${packageName}-${timestamp}.json`\n                  a.style.display = 'none'\n\n                  document.body.appendChild(a)\n\n                  a.click()\n                })\n                .catch((error) => {\n                  console.error(error)\n\n                  setExportState({\n                    exporting: false,\n                    message: 'Error: ' + error.message,\n                  })\n                })\n            }}\n          >\n            Export\n          </button>\n\n          {exportState.message && (\n            <span style={{ paddingLeft: '1rem' }}>{exportState.message}</span>\n          )}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Exporter\n","/**\n * Template import/export\n *\n * @see /template/import-export/ajax.php, view.php\n */\n\nimport Importer from './Importer'\nimport Exporter from './Exporter'\n\nconst {\n  Tangible: {\n    Preact,\n    /**\n     * Check for installed plugins\n     * @see /template/import-export/enqueue.php\n     */\n    templateSystemHasPlugin = {}\n  },\n} = window\n\nconst el = document.getElementById('tangible_template_import_export_form')\n\nel.addEventListener('submit', function (e) {\n  e.preventDefault()\n})\n\nconst hasExport = templateSystemHasPlugin['loops']\n  || templateSystemHasPlugin['blocks_editor']\n\nPreact.render(\n  <>\n    <h1 className=\"wp-heading-inline\">Import</h1>\n\n    <Importer />\n\n    { hasExport && <>\n      <hr />\n      <h1 className=\"wp-heading-inline\">Export</h1>\n      <Exporter />\n    </> \n    }\n  </>,\n  el\n)\n"],"names":["ajax","ajaxActionPrefix","handleDuplicates","mode","inputStateRef","setInputState","importData","duplicates","__spreadProps","__spreadValues","id","title","post_type","postData","post","result","importedData","error","__name","useState","useEffect","useRef","i","a","m","v","o","c","e","f","g","b","x","s","l","d","r","templateSystemHasPlugin","ExportRule","rule","ruleIndex","exportRulesRef","setExportRules","templateTypeItemOptionsRef","ensureTemplateTypeItemOptions","Select","field","operator","values","saveStateToLocalStorage","state","getSavedStateFromLocalStorage","Preact","el","hasExport","Importer","Exporter"],"mappings":"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"}