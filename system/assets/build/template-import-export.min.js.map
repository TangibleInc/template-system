{"version":3,"file":"template-import-export.min.js","sources":["../../node_modules/png-compressor/build/esm/image.js","../../node_modules/png-compressor/build/esm/png.js","../../node_modules/png-compressor/build/esm/compress.js","../../node_modules/png-compressor/build/esm/json-array-buffer.js","../../node_modules/png-compressor/build/esm/encode.js","../../node_modules/png-compressor/build/esm/decode.js","../../node_modules/png-compressor/build/esm/file.js","../src/template-import-export/common.js","../src/template-import-export/Importer/handleDuplicates.js","../src/template-import-export/Importer/index.jsx","../src/common/Select.jsx","../src/template-import-export/Exporter/ExportRule.jsx","../src/template-import-export/Exporter/localStorage.js","../src/template-import-export/Exporter/index.jsx","../src/template-import-export/index.jsx"],"sourcesContent":["async function imageElementToBlob(image) {\n  const { canvas } = imageElementToCanvas(image);\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(function(blob) {\n      if (!blob)\n        reject(new Error(\"\"));\n      else\n        resolve(blob);\n    }, \"image/png\");\n  });\n}\nasync function blobToImageElement(blob, image = document.createElement(\"img\")) {\n  return new Promise((resolve, reject) => {\n    const listener = () => {\n      URL.revokeObjectURL(image.src);\n      image.removeEventListener(\"load\", listener);\n      resolve(image);\n    };\n    image.addEventListener(\"load\", listener);\n    image.src = URL.createObjectURL(blob);\n  });\n}\nfunction getImageData(image) {\n  const { context, width, height } = imageElementToCanvas(image);\n  return context.getImageData(0, 0, width, height).data;\n}\nfunction imageElementToCanvas(image) {\n  const canvas = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  const width = canvas.width = image.naturalWidth;\n  const height = canvas.height = image.naturalHeight;\n  context?.drawImage(image, 0, 0);\n  return {\n    canvas,\n    context,\n    width,\n    height\n  };\n}\nfunction encodeDataIntoImage(data, img) {\n  for (let i = 0, size = data.length; i < 3; i++) {\n    img[i] = size / Math.pow(256, i) % 256 | 0;\n  }\n  img[3] = 255;\n  for (let i = 4, j = 0, l = img.length; i < l; i += 4, j += 3) {\n    img[i] = data[j] || 0;\n    img[i + 1] = data[j + 1] || 0;\n    img[i + 2] = data[j + 2] || 0;\n    img[i + 3] = 255;\n  }\n  return img;\n}\nfunction decodeDataFromImage(image) {\n  let size = 0;\n  for (let i = 0; i < 3; i++) {\n    size += image[i] * Math.pow(256, i);\n  }\n  const data = new Uint8Array(size);\n  root:\n    for (let i = 4, j = 0, l = image.length; j < l; i += 4, j += 3) {\n      for (let k = 0; k < 3; k++) {\n        if (j + k >= size)\n          break root;\n        data[j + k] = image[i + k];\n      }\n    }\n  return data.buffer;\n}\nexport {\n  blobToImageElement,\n  decodeDataFromImage,\n  encodeDataIntoImage,\n  getImageData,\n  imageElementToBlob,\n  imageElementToCanvas\n};\n","import {\n  encodeDataIntoImage,\n  blobToImageElement,\n  decodeDataFromImage,\n  getImageData\n} from \"./image.js\";\nasync function encodeBinaryToPng(buffer) {\n  const blob = await encodeBinaryToBlob(buffer);\n  return await blob.arrayBuffer();\n}\nasync function encodeBinaryToBlob(buffer) {\n  const data = new Uint8Array(buffer);\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    const size = Math.ceil(Math.sqrt(data.length / 3 + 1));\n    canvas.width = size;\n    canvas.height = size;\n    const image = ctx?.getImageData(0, 0, size, size);\n    encodeDataIntoImage(data, image.data);\n    ctx?.putImageData(image, 0, 0);\n    canvas.toBlob((blob) => {\n      if (!blob)\n        reject(new Error(\"Canvas failed to create blob\"));\n      else\n        resolve(blob);\n    }, \"image/png\");\n  });\n}\nasync function decodeBinaryFromPng(buffer) {\n  if (!(buffer instanceof ArrayBuffer)) {\n    throw new Error(\"Expected ArrayBuffer but got \" + typeof buffer);\n  }\n  const blob = new Blob([buffer]);\n  const image = await blobToImageElement(blob);\n  return decodeDataFromImage(getImageData(image));\n}\nexport {\n  decodeBinaryFromPng,\n  encodeBinaryToBlob,\n  encodeBinaryToPng\n};\n","const { CompressionStream, DecompressionStream, Response } = globalThis;\nconst defaultCompressionFormat = \"gzip\";\nasync function compress(buffer, compressionFormat = defaultCompressionFormat) {\n  const compressor = new CompressionStream(compressionFormat);\n  const stream = new Response(buffer).body?.pipeThrough(compressor);\n  return await new Response(stream).arrayBuffer();\n}\nasync function decompressAsResponse(buffer, compressionFormat = defaultCompressionFormat) {\n  const decompressor = new DecompressionStream(compressionFormat);\n  const stream = new Response(buffer).body?.pipeThrough(decompressor);\n  return new Response(stream);\n}\nasync function decompressAsArrayBuffer(buffer, compressionFormat = defaultCompressionFormat) {\n  return (await decompressAsResponse(buffer, compressionFormat)).arrayBuffer();\n}\nasync function decompressAsString(buffer, compressionFormat = defaultCompressionFormat) {\n  return (await decompressAsResponse(buffer, compressionFormat)).text();\n}\nconst decompress = decompressAsArrayBuffer;\nexport {\n  compress,\n  decompress,\n  decompressAsArrayBuffer,\n  decompressAsString,\n  defaultCompressionFormat\n};\n","function valueToArrayBuffer(value) {\n  return new TextEncoder().encode(JSON.stringify(value)).buffer;\n}\nfunction arrayBufferToValue(buffer) {\n  return JSON.parse(new TextDecoder().decode(buffer));\n}\nexport {\n  arrayBufferToValue,\n  valueToArrayBuffer\n};\n","import { encodeBinaryToPng, encodeBinaryToBlob } from \"./png.js\";\nimport { compress } from \"./compress.js\";\nimport { valueToArrayBuffer } from \"./json-array-buffer.js\";\nimport { blobToImageElement } from \"./image.js\";\nasync function encode(value) {\n  return await encodeBinary(valueToArrayBuffer(value));\n}\nasync function encodeToBlob(value) {\n  return await encodeBinaryToBlob(await compress(valueToArrayBuffer(value)));\n}\nasync function encodeToImage(value, image) {\n  return blobToImageElement(await encodeToBlob(value), image);\n}\nasync function encodeBinary(buffer) {\n  return await encodeBinaryToPng(await compress(buffer));\n}\nexport {\n  encode,\n  encodeBinary,\n  encodeToBlob,\n  encodeToImage\n};\n","import { decodeBinaryFromPng } from \"./png.js\";\nimport { decompressAsArrayBuffer } from \"./compress.js\";\nimport { arrayBufferToValue } from \"./json-array-buffer.js\";\nasync function decode(buffer) {\n  return arrayBufferToValue(await decodeBinary(buffer));\n}\nasync function decodeBinary(buffer) {\n  return await decompressAsArrayBuffer(await decodeBinaryFromPng(buffer));\n}\nexport {\n  decode,\n  decodeBinary\n};\n","import { decodeBinary } from \"./decode.js\";\nimport { arrayBufferToValue } from \"./json-array-buffer.js\";\nfunction downloadImage(blob, name = \"compressed.png\") {\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement(\"a\");\n  a.download = name;\n  a.href = url;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n}\nasync function decodeBinaryFromFile(file) {\n  const buffer = await getBufferfromFile(file);\n  return await decodeBinary(buffer);\n}\nasync function decodeFromFile(file) {\n  return arrayBufferToValue(await decodeBinaryFromFile(file));\n}\nasync function getBufferfromFile(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", () => {\n      resolve(reader.result);\n    });\n    reader.addEventListener(\"error\", reject);\n    reader.readAsArrayBuffer(file);\n  });\n}\nexport {\n  decodeBinaryFromFile,\n  decodeFromFile,\n  downloadImage,\n  getBufferfromFile\n};\n","const {\n  Tangible: { ajax },\n} = window\n\n// AJAX action prefix must be the same as in /system/import-export/ajax.php\nconst ajaxActionPrefix = 'tangible_template_import_export__'\n\nexport { ajax, ajaxActionPrefix }\n","import { ajax, ajaxActionPrefix } from '../common'\n\nexport default function handleDuplicates({\n  mode, // overwrite or keep_both\n  inputStateRef,\n  setInputState,\n}) {\n  const { importData } = inputStateRef.current\n\n  if (!importData || !importData.post_types) {\n    console.warn('Import data not found', importData)\n    return\n  }\n\n  const duplicates = {\n    ...importData, // NOTE: Other import data properties such as \"shared_assets\"\n    post_types: {},\n    handle_duplicates: mode,\n  }\n\n  // Filter only duplicate posts\n  for (const { id, title, post_type } of inputStateRef.current\n    .duplicatesFound) {\n    const postData = importData.post_types[post_type].filter(\n      (post) => post.id === id\n    )[0]\n    if (!postData) {\n      console.warn('Corresponding post not found', id, post_type, title)\n      continue\n    }\n\n    if (!duplicates.post_types[post_type]) {\n      duplicates.post_types[post_type] = []\n    }\n\n    duplicates.post_types[post_type].push(postData)\n  }\n\n  // console.log('Import duplicates', mode, duplicates)\n\n  setInputState({\n    ...inputStateRef.current,\n    importData: {},\n    importedData: {},\n    duplicatesFound: [],\n    duplicatesHandledMessage: '',\n    message: '',\n  })\n\n  ajax(ajaxActionPrefix + 'import', duplicates)\n    .then((result) => {\n      const importedData = {\n        ...duplicates,\n        old_to_new_id: {\n          ...(inputStateRef.current.old_to_new_id || {}),\n          ...(result.old_to_new_id || {}),\n        },\n      }\n\n      console.log('Imported duplicates', importedData)\n\n      // Clear duplicate posts state and show message after \"Import\" button\n\n      setInputState({\n        ...inputStateRef.current,\n        importing: false,\n        importData: {},\n        importedData,\n        duplicatesFound: [],\n        duplicatesHandledMessage: '',\n        message:\n          result.post_count +\n          ' template' +\n          (result.post_count !== 1 ? 's' : '') +\n          ' imported',\n      })\n    })\n    .catch((error) => {\n      setInputState({\n        ...inputStateRef.current,\n        duplicatesHandledMessage: 'Error: ' + error.message,\n      })\n    })\n}\n","/**\n * Template importer with support for handling duplicates\n *\n * Also used in ../../template-cloud\n */\n\nimport { useEffect, useRef, useState } from 'react'\nimport { decode as decodeImageBuffer } from 'png-compressor'\nimport handleDuplicates from './handleDuplicates'\n\nimport { ajax, ajaxActionPrefix } from '../common'\n\nconst debug = true // Set this to false for production\nconst log = (...args) => debug && console.log('[Importer]', ...args)\n\nconst { FileReader } = window\n\nconst postTypeToLabel = {\n  tangible_template: 'Templates',\n  tangible_style: 'Styles',\n  tangible_script: 'Scripts',\n  tangible_layout: 'Layouts',\n  tangible_block: 'Blocks',\n}\n\nconst Importer = ({\n  useInput = true,\n  directImportData, // Optionally pass direct JSON data instead of using file upload\n}) => {\n  const [inputState, setInputState] = useState({\n    importing: false,\n    importData: {},\n    importedData: {},\n    message: '',\n    duplicatesFound: [],\n    duplicatesHandledMessage: '',\n  })\n\n  const preImport = () => {\n    setInputState({\n      ...inputStateRef.current,\n      importing: true,\n      importData: {},\n      importedData: {},\n      duplicatesFound: [],\n      duplicatesHandledMessage: '',\n      message: 'Importing..',\n    })\n  }\n\n  const onError = (message) =>\n    setInputState({\n      ...inputStateRef.current,\n      importing: false,\n      importData: {},\n      importedData: {},\n      duplicatesFound: [],\n      duplicatesHandledMessage: '',\n      message: 'Error: ' + message,\n    })\n\n  const importJSON = (data) => {\n    setInputState({\n      ...inputStateRef.current,\n      importData: data,\n    })\n\n    ajax(ajaxActionPrefix + 'import', data)\n      .then((result) => {\n        // Import complete\n        log('Import success', result)\n\n        const { importData } = inputStateRef.current\n        const importedData = {\n          post_types: Object.keys(importData.post_types).reduce(\n            (obj, postType) => {\n              const duplicateIds = result.duplicates_found\n                .filter((post) => post.post_type === postType)\n                .map((post) => post.id)\n\n              obj[postType] = importData.post_types[postType].filter(\n                (post) => duplicateIds.indexOf(post.id) < 0\n              )\n\n              return obj\n            },\n            {}\n          ),\n          // Map of old to new ID - See same property in ./handleDuplicates\n          old_to_new_id: result.old_to_new_id || {},\n        }\n\n        log('Imported minus duplicates', importedData)\n\n        setInputState({\n          ...inputStateRef.current,\n          importing: false,\n          duplicatesFound: result.duplicates_found,\n          importData: result.duplicates_found.length ? importData : {}, // Clear\n          importedData,\n          message:\n            result.post_count +\n            ' template' +\n            (result.post_count !== 1 ? 's' : '') +\n            ' imported' +\n            (result.failed_post_count\n              ? ' - ' +\n                result.failed_post_count +\n                ' template' +\n                (result.failed_post_count !== 1 ? 's' : '') +\n                ' failed'\n              : ''),\n        })\n      })\n      .catch((error) => {\n        // Import failed\n        console.error(error)\n        onError(error.message)\n      })\n  }\n\n  useEffect(() => {\n    if (!directImportData) return\n\n    preImport()\n    importJSON(directImportData) // Will correctly refresh when a new block json is installed\n  }, [])\n\n  const inputStateRef = useRef()\n  inputStateRef.current = inputState\n\n  const fileInputRef = useRef()\n\n  return (\n    <div id=\"importer\">\n      {useInput && (\n        <p>\n          <input\n            type=\"file\"\n            hidden\n            ref={fileInputRef}\n            accept=\".json,text/json,.png,image/png\"\n            onChange={({ target: { files } }) => {\n              // File upload\n\n              // log('File upload state', files)\n\n              const file = files[0]\n\n              const isImage = file.name.endsWith('.png')\n\n              const reader = new FileReader()\n\n              preImport()\n\n              reader.onload = function (e) {\n                const content = e.target.result\n\n                // File upload complete\n\n                if (isImage) {\n                  decodeImageBuffer(content)\n                    .then((data) => {\n                      importJSON(data)\n                    })\n                    .catch((error) => {\n                      console.error(error)\n                      onError(error.message)\n                    })\n                  return\n                }\n\n                try {\n                  const data = JSON.parse(content)\n\n                  log('Import data', data)\n\n                  importJSON(data)\n                } catch (e) {\n                  log('Invalid JSON', content)\n\n                  onError('Invalid JSON')\n                }\n              }\n\n              reader.onerror = function (e) {\n                onError(e.message)\n              }\n\n              if (isImage) {\n                reader.readAsArrayBuffer(file)\n              } else {\n                reader.readAsText(file)\n              }\n            }}\n          />\n          <button\n            type=\"button\"\n            className=\"button button-primary\"\n            onClick={() => {\n              if (inputState.importing) return\n              fileInputRef.current && fileInputRef.current.click()\n            }}\n          >\n            Import\n          </button>\n        </p>\n      )}\n\n      {inputState.message && <p>{inputState.message}</p>}\n\n      {\n        // List imported posts\n\n        Object.keys(inputState.importedData.post_types || {}).map(\n          (postType) =>\n            inputState.importedData.post_types[postType] &&\n            inputState.importedData.post_types[postType].length > 0 && (\n              <>\n                <div>\n                  <b>{postTypeToLabel[postType] || 'Templates'}</b>\n                </div>\n                <ul>\n                  {inputState.importedData.post_types[postType].map(\n                    (post, postIndex) => (\n                      <li key={`post-${postIndex}`}>\n                        {inputState.importedData.old_to_new_id &&\n                        inputState.importedData.old_to_new_id[post.id] ? (\n                          // Link to newly created template\n                          <a\n                            href={`post.php?post=${\n                              inputState.importedData.old_to_new_id[post.id]\n                            }&action=edit`}\n                          >\n                            {post.title}\n                          </a>\n                        ) : (\n                          // Fallback in case we couldn't find new ID in map\n                          post.title\n                        )}\n                      </li>\n                    )\n                  )}\n                </ul>\n              </>\n            )\n        )\n      }\n\n      {\n        // Duplicates\n\n        inputState.duplicatesFound.length > 0 && (\n          <>\n            <p style={{ fontWeight: 'bold', color: 'red' }}>\n              {inputState.duplicatesFound.length} duplicate template\n              {inputState.duplicatesFound !== 1 ? 's' : ''} found\n            </p>\n            {\n              // Organize list of duplicate posts by post type\n              Object.keys(postTypeToLabel).map((postType) => {\n                const posts = inputState.duplicatesFound.filter(\n                  (post) => post.post_type === postType\n                )\n                if (!posts.length) return\n                return (\n                  <>\n                    <div>\n                      <b>{postTypeToLabel[postType] || 'Templates'}</b>\n                    </div>\n                    <ul>\n                      {posts.map((post, postIndex) => (\n                        <li key={`duplicate-post-${postIndex}`}>\n                          {post.title}\n                        </li>\n                      ))}\n                    </ul>\n                  </>\n                )\n              })\n            }\n            {/* <ul>\n          {inputState.duplicatesFound.map((post, postIndex) =>\n            <li key={`duplicate-post-${postIndex}`}>{ post.title }\n            </li>\n          )}\n        </ul> */}\n            <button\n              type=\"button\"\n              className=\"button button-primary\"\n              onClick={() => {\n                handleDuplicates({\n                  mode: 'overwrite',\n                  inputStateRef,\n                  setInputState,\n                })\n              }}\n            >\n              Overwrite\n            </button>\n            &nbsp;\n            <button\n              type=\"button\"\n              className=\"button button-primary\"\n              onClick={() => {\n                handleDuplicates({\n                  mode: 'keep_both',\n                  inputStateRef,\n                  setInputState,\n                })\n              }}\n            >\n              Keep both\n            </button>\n            &nbsp;\n            <button\n              type=\"button\"\n              className=\"button button-primary\"\n              onClick={() => {\n                // Clear state\n\n                setInputState({\n                  ...inputStateRef.current,\n                  importing: false,\n                  importData: {},\n                  importedData: {},\n                  duplicatesFound: [],\n                  duplicatesHandledMessage: '',\n                  message: '',\n                })\n              }}\n            >\n              Skip\n            </button>\n            {inputState.duplicatesHandledMessage && (\n              <p>{inputState.duplicatesHandledMessage}</p>\n            )}\n          </>\n        )\n      }\n    </div>\n  )\n}\n\nexport default Importer\n","import { useEffect, useRef } from 'react' // Aliased from Tangible.Preact || wp.element\n\n/**\n * Wrap Select2 module from vendor/tangible/interface\n *\n * @see https://select2.org/\n *\n * Also used in ../template-import-export\n */\nconst { jQuery: $ } = window\n\nconst Select = ({\n  labelForEmptyValue = '',\n  options = [],\n  value = '',\n  onChange,\n  multiSelect,\n  style,\n}) => {\n  const ref = useRef()\n\n  /**\n   * Activate Select2\n   */\n\n  useEffect(() => {\n    const $el = $(ref.current)\n    ref.current.$el = $el\n\n    onChange(value)\n\n    $el.tangibleSelect({\n      minimumResultsForSearch: 5,\n    })\n\n    if (multiSelect) {\n      // Ensure multiple values are selected on mount\n      $el.val(value)\n      $el.trigger('change')\n    }\n\n    $el.on('change', function (e) {\n      if (!multiSelect) {\n        onChange(e.target.value)\n        return\n      }\n\n      if (!ref.current) return\n\n      // Ensure array of values for multi-select\n\n      const values = $el.select2('data').map((item) => item.id)\n      onChange(values)\n    })\n\n    const select2 = (ref.current.select2 = $el.data('select2'))\n\n    // Clean up when component removed\n    return () => {\n      select2 && select2.destroy()\n    }\n  }, []) // NOTE: Empty array to run only once on component mount\n\n  // Ensure Select2 shows current value\n  if (ref.current && ref.current.$el) {\n    if (multiSelect) {\n      const currentValues = ref.current.$el.val()\n      if (value.length !== currentValues.length && options.length) {\n        // After select is rendered with options\n        setImmediate(function () {\n          ref.current.$el.val(value)\n          ref.current.$el.trigger('change')\n        })\n      }\n    } else if (ref.current.value !== value) {\n      ref.current.$el.val(value)\n      ref.current.$el.trigger('change')\n    }\n  }\n\n  return (\n    <select\n      ref={ref}\n      // onChange={e => onChange(e.target.value)}\n      autoComplete=\"off\"\n      multiple={multiSelect}\n      style={{\n        display: 'none',\n        width: '160px', // Default width\n        ...style,\n      }}\n    >\n      {labelForEmptyValue && (\n        <option value=\"\" disabled={true} selected={value == null}>\n          {labelForEmptyValue}\n        </option>\n      )}\n      {options.map((option, optionIndex) => (\n        <option\n          key={`option-${optionIndex}`}\n          value={option.value}\n          selected={option.value === value}\n        >\n          {option.label}\n        </option>\n      ))}\n    </select>\n  )\n}\n\nexport default Select\n","import Select from '../../common/Select'\n\n/**\n * Check for Block Editor plugin\n * @see /template/import-export/enqueue.php\n */\nconst { templateSystemHasPlugin: hasPlugin = {} } = window.Tangible\nconsole.log('hasPlugin', hasPlugin)\nconst ExportRule = ({\n  rule,\n  ruleIndex,\n\n  exportRulesRef,\n  setExportRules,\n\n  templateTypeItemOptionsRef,\n  ensureTemplateTypeItemOptions,\n}) => (\n  <div className=\"export-rule\">\n    <div className=\"export-rule-part\">\n      <Select\n        {...{\n          labelForEmptyValue: 'Select template type',\n          options: [\n\n            /**\n             * Enable block export only when Blocks & Editor is active\n             */\n            ...((hasPlugin['blocks'] && hasPlugin['blocks_editor'])\n              ? [{ label: 'Block', value: 'tangible_block' }]\n              : []),\n            ...(hasPlugin['loops'] || hasPlugin['template_system']\n              ? [\n                { label: 'Template', value: 'tangible_template' },\n                { label: 'Style', value: 'tangible_style' },\n                { label: 'Script', value: 'tangible_script' },\n                { label: 'Layout', value: 'tangible_layout' },\n              ]\n              : []\n            )\n          ],\n          value: rule.field,\n          onChange(field) {\n            rule.field = field\n\n            exportRulesRef.current[ruleIndex] = rule\n            setExportRules(exportRulesRef.current)\n          },\n        }}\n      />\n    </div>\n\n    {rule.field && (\n      <div className=\"export-rule-part\">\n        <Select\n          {...{\n            options: [\n              { label: 'All', value: 'all' },\n              { label: 'Include', value: 'include' },\n              { label: 'Exclude', value: 'exclude' },\n            ],\n            value: rule.operator,\n            onChange(operator) {\n              rule.operator = operator\n\n              if (operator === 'all') {\n                rule.values = [] // Clear values from include/exclude\n              }\n\n              exportRulesRef.current[ruleIndex] = rule\n              setExportRules(exportRulesRef.current)\n\n              if (operator !== 'all') {\n                ensureTemplateTypeItemOptions(rule.field)\n              }\n            },\n            style: { width: 'auto' },\n          }}\n        />\n      </div>\n    )}\n\n    {rule.field &&\n      rule.operator !== 'all' &&\n      templateTypeItemOptionsRef.current[rule.field] && (\n        <div className=\"export-rule-part\">\n          <Select\n            {...{\n              options:\n                templateTypeItemOptionsRef.current[rule.field] instanceof\n                Promise\n                  ? [] // Still loading\n                  : templateTypeItemOptionsRef.current[rule.field],\n\n              value: rule.values,\n\n              onChange(values) {\n                rule.values = values\n\n                exportRulesRef.current[ruleIndex] = rule\n                setExportRules(exportRulesRef.current)\n              },\n              multiSelect: true,\n            }}\n          />\n        </div>\n      )}\n\n    <div className=\"export-rule-part export-rule-part--remove-rule\">\n      <div\n        className=\"icon\"\n        onClick={() => {\n          // Remove this rule\n          exportRulesRef.current.splice(ruleIndex, 1)\n\n          setExportRules(exportRulesRef.current)\n        }}\n      >\n        <svg viewBox=\"0 0 1792 1792\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M1490 1322q0 40-28 68l-136 136q-28 28-68 28t-68-28l-294-294-294 294q-28 28-68 28t-68-28l-136-136q-28-28-28-68t28-68l294-294-294-294q-28-28-28-68t28-68l136-136q28-28 68-28t68 28l294 294 294-294q28-28 68-28t68 28l136 136q28 28 28 68t-28 68l-294 294 294 294q28 28 28 68z\" />\n        </svg>\n      </div>\n    </div>\n  </div>\n)\n\nexport default ExportRule\n","/**\n * Remember export settings in local storage\n */\nexport function saveStateToLocalStorage(state) {\n  if (!window.localStorage) return\n  window.localStorage.setItem('exporterState', JSON.stringify(state))\n}\n\nexport function getSavedStateFromLocalStorage() {\n  if (!window.localStorage) return\n  let state = window.localStorage.getItem('exporterState')\n  if (!state) return\n  try {\n    state = JSON.parse(state)\n    return state\n  } catch (e) {\n    /* Ignore */\n  }\n}\n","/**\n * Template exporter\n */\n\nimport { useEffect, useCallback, useRef, useState } from 'react'\nimport { encodeToBlob, downloadImage } from 'png-compressor'\n\nimport ExportRule from './ExportRule'\nimport {\n  saveStateToLocalStorage,\n  getSavedStateFromLocalStorage,\n} from './localStorage'\n\nimport { ajax, ajaxActionPrefix } from '../common'\n\nconst debug = false // Set this to false for production\nconst log = (...args) => debug && console.log('[Exporter]', ...args)\n\nconst savedState = getSavedStateFromLocalStorage()\n\nconst defaultPackageName =\n  (savedState && savedState.name) || 'tangible-templates'\nconst defaultExportRules = (savedState && savedState.rules) || [\n  {\n    field: 'tangible_template',\n    operator: 'all',\n    values: [],\n  },\n]\n\nconst Exporter = () => {\n  // Export package name\n  const exportNameRef = useRef()\n\n  // Rules state\n\n  const [exportRules, _setExportRules] = useState(defaultExportRules)\n\n  const exportRulesRef = useRef()\n  exportRulesRef.current = exportRules // Keep ever-fresh reference for event callbacks to use\n\n  const setExportRules = (rules) => {\n    _setExportRules([...rules]) // Must create new state to re-render\n  }\n\n  // log('exportRulesRef.current', exportRulesRef.current)\n\n  // AJAX data state\n\n  const [templateTypeItemOptions, setTemplateTypeItemOptions] = useState({})\n  const templateTypeItemOptionsRef = useRef()\n\n  // Keep ever-fresh reference for event callbacks to use\n  templateTypeItemOptionsRef.current = templateTypeItemOptions\n\n  // log('templateTypeItemOptionsRef.current', templateTypeItemOptionsRef.current)\n\n  // Export state\n\n  const [exportState, _setExportState] = useState({\n    exporting: false,\n    message: '',\n    json: '',\n    packageName: '',\n  })\n\n  const exportStateRef = useRef()\n  exportStateRef.current = exportState\n\n  const setExportState = (newState) => {\n    _setExportState({\n      ...exportStateRef.current,\n      ...newState,\n    })\n  }\n\n  // Ensure data\n\n  const ensureTemplateTypeItemOptions = async (templateType) => {\n    // We already have data (or is loading it)\n    if (templateTypeItemOptionsRef.current[templateType]) return\n\n    log(\n      'ensureTemplateTypeItemOptions',\n      templateType,\n      templateTypeItemOptionsRef.current\n    )\n\n    const promise = ajax(ajaxActionPrefix + 'get_template_type_item_options', {\n      post_type: templateType,\n    })\n      .then((result) => {\n        log('ensureTemplateTypeItemOptions Success', result)\n\n        setTemplateTypeItemOptions({\n          ...templateTypeItemOptionsRef.current,\n          [templateType]: result,\n        })\n      })\n      .catch((error) => {\n        log('ensureTemplateTypeItemOptions Fail', error)\n      })\n\n    // Store promise to prevent loading multiple times\n    setTemplateTypeItemOptions({\n      ...templateTypeItemOptionsRef.current,\n      [templateType]: promise,\n    })\n  }\n\n  const runExport = useCallback((exportType = 'json') => {\n    const packageName =\n      (exportNameRef.current && exportNameRef.current.value) ||\n      defaultPackageName\n\n    saveStateToLocalStorage({\n      name: packageName,\n      rules: exportRulesRef.current,\n    })\n\n    // Export\n\n    log('Export start', exportRulesRef.current)\n\n    setExportState({\n      exporting: true,\n      message: 'Exporting..',\n    })\n\n    function handleError(error) {\n      console.error(error)\n      setExportState({\n        exporting: false,\n        message: 'Error: ' + error.message,\n      })\n    }\n\n    ajax(ajaxActionPrefix + 'export', {\n      export_rules: exportRulesRef.current,\n    })\n      .then((result) => {\n        console.log('Export success', result)\n\n        setExportState({\n          exporting: false,\n          message: 'Export success',\n          // json: JSON.stringify(result, null, 2)\n        })\n\n        // Download JSON file\n\n        const data = {\n          package_name: packageName,\n          ...result,\n        }\n\n        const timestamp = new Date()\n          .toISOString()\n          .slice(0, 10)\n          .replace(/-/g, '') // Ymd\n\n        if (exportType === 'png') {\n          encodeToBlob(data)\n            .then(blob => {\n              downloadImage(blob, `${packageName}-${timestamp}.png`)\n            })\n            .catch(handleError)\n          return\n        }\n\n        const a = document.createElement('a')\n\n        a.href =\n          'data:text/json;charset=utf-8,' +\n          encodeURIComponent(JSON.stringify(data, null, 2))\n        a.download = `${packageName}-${timestamp}.json`\n        a.style.display = 'none'\n\n        document.body.appendChild(a)\n\n        a.click()\n      })\n      .catch(handleError)\n  })\n\n  return (\n    <div id=\"exporter\">\n      <div className=\"export-name\">\n        Package name:{' '}\n        <input\n          type=\"text\"\n          name=\"name\"\n          defaultValue={defaultPackageName}\n          ref={exportNameRef}\n        />\n      </div>\n\n      <div className=\"export-rules\">\n        {exportRules.map((rule, ruleIndex) => (\n          <ExportRule\n            key={`export-rule-${ruleIndex}`}\n            {...{\n              rule,\n              ruleIndex,\n\n              exportRulesRef,\n              setExportRules,\n\n              templateTypeItemOptionsRef,\n              ensureTemplateTypeItemOptions,\n            }}\n          />\n        ))}\n      </div>\n\n      <p>\n        <button\n          type=\"button\"\n          className=\"button button-secondary\"\n          onClick={() => {\n            // Add export rule\n\n            exportRulesRef.current.push({\n              field: 'tangible_template',\n              operator: 'all',\n              values: [],\n            })\n\n            setExportRules(exportRulesRef.current)\n          }}\n        >\n          Add export rule\n        </button>\n      </p>\n\n      {exportRulesRef.current.length > 0 && (\n        <p>\n          <button\n            type=\"button\"\n            className=\"button button-primary\"\n            onClick={() => {\n              if (exportState.exporting) return\n              runExport()\n            }}\n          >\n            Export\n          </button>\n\n          <a\n            href=\"#\"\n            style=\"margin-left: 1rem\"\n            onClick={(e) => {\n              e.preventDefault()\n              if (exportState.exporting) return\n              runExport('png')\n            }}\n          >\n            Export as image\n          </a>\n\n          {exportState.message && (\n            <div style={{ padding: '.5rem 0' }}>{exportState.message}</div>\n          )}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Exporter\n","/**\n * Template import/export\n *\n * @see /template/import-export/ajax.php, view.php\n */\n\nimport Importer from './Importer'\nimport Exporter from './Exporter'\n\nconst {\n  Tangible: {\n    Preact,\n    /**\n     * Check for installed plugins\n     * @see /template/import-export/enqueue.php\n     */\n    templateSystemHasPlugin: hasPlugin = {}\n  },\n} = window\n\nconst el = document.getElementById('tangible_template_import_export_form')\n\nel.addEventListener('submit', function (e) {\n  e.preventDefault()\n})\n\nconst hasExport =\n  hasPlugin['loops'] // Loop & Logic\n  || hasPlugin['blocks_editor'] // Tangible Blocks Editor\n  || hasPlugin['template_system'] // Template System module as standalone plugin\n\nPreact.render(\n  <>\n    <h1 className=\"wp-heading-inline\">Import</h1>\n\n    <Importer />\n\n    { hasExport && <>\n      <hr />\n      <h1 className=\"wp-heading-inline\">Export</h1>\n      <Exporter />\n    </> \n    }\n  </>,\n  el\n)\n"],"names":["blobToImageElement","blob","image","resolve","reject","listener","__name","getImageData","context","width","height","imageElementToCanvas","canvas","encodeDataIntoImage","data","img","i","size","j","l","decodeDataFromImage","root","k","encodeBinaryToBlob","buffer","ctx","decodeBinaryFromPng","CompressionStream","DecompressionStream","Response","defaultCompressionFormat","compress","compressionFormat","compressor","stream","decompressAsResponse","decompressor","decompressAsArrayBuffer","valueToArrayBuffer","value","arrayBufferToValue","encodeToBlob","decode","decodeBinary","downloadImage","name","url","a","ajax","ajaxActionPrefix","handleDuplicates","mode","inputStateRef","setInputState","importData","duplicates","id","title","post_type","postData","post","result","importedData","error","useState","useEffect","useRef","d","n","c","h","m","r","s","o","e","hasPlugin","ExportRule","rule","ruleIndex","exportRulesRef","setExportRules","templateTypeItemOptionsRef","ensureTemplateTypeItemOptions","Select","field","operator","values","saveStateToLocalStorage","state","getSavedStateFromLocalStorage","u","f","_","T","E","useCallback","t","A","x","R","v","S","$","O","w","P","N","b","Preact","el","hasExport","Importer","Exporter"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6]}