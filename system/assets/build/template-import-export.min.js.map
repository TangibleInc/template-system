{"version":3,"file":"template-import-export.min.js.map","sources":["../src/template-import-export/common.js","../src/template-import-export/Importer/handleDuplicates.js","../src/template-import-export/Importer/index.jsx","../src/common/Select.jsx","../src/template-import-export/Exporter/ExportRule.jsx","../src/template-import-export/Exporter/localStorage.js","../src/template-import-export/Exporter/index.jsx","../src/template-import-export/index.jsx"],"sourcesContent":["const {\r\n  Tangible: { ajax },\r\n} = window\r\n\r\n// AJAX action prefix must be the same as in /system/import-export/ajax.php\r\nconst ajaxActionPrefix = 'tangible_template_import_export__'\r\n\r\nexport { ajax, ajaxActionPrefix }\r\n","import { ajax, ajaxActionPrefix } from '../common'\r\n\r\nexport default function handleDuplicates({\r\n  mode, // overwrite or keep_both\r\n  inputStateRef,\r\n  setInputState,\r\n}) {\r\n  const { importData } = inputStateRef.current\r\n\r\n  if (!importData || !importData.post_types) {\r\n    console.warn('Import data not found', importData)\r\n    return\r\n  }\r\n\r\n  const duplicates = {\r\n    ...importData, // NOTE: Other import data properties such as \"shared_assets\"\r\n    post_types: {},\r\n    handle_duplicates: mode,\r\n  }\r\n\r\n  // Filter only duplicate posts\r\n  for (const { id, title, post_type } of inputStateRef.current\r\n    .duplicatesFound) {\r\n    const postData = importData.post_types[post_type].filter(\r\n      (post) => post.id === id\r\n    )[0]\r\n    if (!postData) {\r\n      console.warn('Corresponding post not found', id, post_type, title)\r\n      continue\r\n    }\r\n\r\n    if (!duplicates.post_types[post_type]) {\r\n      duplicates.post_types[post_type] = []\r\n    }\r\n\r\n    duplicates.post_types[post_type].push(postData)\r\n  }\r\n\r\n  // console.log('Import duplicates', mode, duplicates)\r\n\r\n  setInputState({\r\n    ...inputStateRef.current,\r\n    importData: {},\r\n    importedData: {},\r\n    duplicatesFound: [],\r\n    duplicatesHandledMessage: '',\r\n    message: '',\r\n  })\r\n\r\n  ajax(ajaxActionPrefix + 'import', duplicates)\r\n    .then((result) => {\r\n      const importedData = {\r\n        ...duplicates,\r\n        old_to_new_id: {\r\n          ...(inputStateRef.current.old_to_new_id || {}),\r\n          ...(result.old_to_new_id || {}),\r\n        },\r\n      }\r\n\r\n      console.log('Imported duplicates', importedData)\r\n\r\n      // Clear duplicate posts state and show message after \"Import\" button\r\n\r\n      setInputState({\r\n        ...inputStateRef.current,\r\n        importing: false,\r\n        importData: {},\r\n        importedData,\r\n        duplicatesFound: [],\r\n        duplicatesHandledMessage: '',\r\n        message:\r\n          result.post_count +\r\n          ' template' +\r\n          (result.post_count !== 1 ? 's' : '') +\r\n          ' imported',\r\n      })\r\n    })\r\n    .catch((error) => {\r\n      setInputState({\r\n        ...inputStateRef.current,\r\n        duplicatesHandledMessage: 'Error: ' + error.message,\r\n      })\r\n    })\r\n}\r\n","/**\r\n * Template importer with support for handling duplicates\r\n *\r\n * Also used in ../../template-cloud\r\n */\r\n\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport handleDuplicates from './handleDuplicates'\r\n\r\nimport { ajax, ajaxActionPrefix } from '../common'\r\n\r\nconst debug = true // Set this to false for production\r\nconst log = (...args) => debug && console.log('[Importer]', ...args)\r\n\r\nconst { FileReader } = window\r\n\r\nconst postTypeToLabel = {\r\n  tangible_template: 'Templates',\r\n  tangible_style: 'Styles',\r\n  tangible_script: 'Scripts',\r\n  tangible_layout: 'Layouts',\r\n  tangible_block: 'Blocks',\r\n}\r\n\r\nconst Importer = ({\r\n  useInput = true,\r\n  directImportData, // Optionally pass direct JSON data instead of using file upload\r\n}) => {\r\n  const [inputState, setInputState] = useState({\r\n    importing: false,\r\n    importData: {},\r\n    importedData: {},\r\n    message: '',\r\n    duplicatesFound: [],\r\n    duplicatesHandledMessage: '',\r\n  })\r\n\r\n  const preImport = () => {\r\n    setInputState({\r\n      ...inputStateRef.current,\r\n      importing: true,\r\n      importData: {},\r\n      importedData: {},\r\n      duplicatesFound: [],\r\n      duplicatesHandledMessage: '',\r\n      message: 'Importing..',\r\n    })\r\n  }\r\n\r\n  const onError = (message) =>\r\n    setInputState({\r\n      ...inputStateRef.current,\r\n      importing: false,\r\n      importData: {},\r\n      importedData: {},\r\n      duplicatesFound: [],\r\n      duplicatesHandledMessage: '',\r\n      message: 'Error: ' + message,\r\n    })\r\n\r\n  const importJSON = (data) => {\r\n    setInputState({\r\n      ...inputStateRef.current,\r\n      importData: data,\r\n    })\r\n\r\n    ajax(ajaxActionPrefix + 'import', data)\r\n      .then((result) => {\r\n        // Import complete\r\n        log('Import success', result)\r\n\r\n        const { importData } = inputStateRef.current\r\n        const importedData = {\r\n          post_types: Object.keys(importData.post_types).reduce(\r\n            (obj, postType) => {\r\n              const duplicateIds = result.duplicates_found\r\n                .filter((post) => post.post_type === postType)\r\n                .map((post) => post.id)\r\n\r\n              obj[postType] = importData.post_types[postType].filter(\r\n                (post) => duplicateIds.indexOf(post.id) < 0\r\n              )\r\n\r\n              return obj\r\n            },\r\n            {}\r\n          ),\r\n          // Map of old to new ID - See same property in ./handleDuplicates\r\n          old_to_new_id: result.old_to_new_id || {},\r\n        }\r\n\r\n        log('Imported minus duplicates', importedData)\r\n\r\n        setInputState({\r\n          ...inputStateRef.current,\r\n          importing: false,\r\n          duplicatesFound: result.duplicates_found,\r\n          importData: result.duplicates_found.length ? importData : {}, // Clear\r\n          importedData,\r\n          message:\r\n            result.post_count +\r\n            ' template' +\r\n            (result.post_count !== 1 ? 's' : '') +\r\n            ' imported' +\r\n            (result.failed_post_count\r\n              ? ' - ' +\r\n                result.failed_post_count +\r\n                ' template' +\r\n                (result.failed_post_count !== 1 ? 's' : '') +\r\n                ' failed'\r\n              : ''),\r\n        })\r\n      })\r\n      .catch((error) => {\r\n        // Import failed\r\n        console.error(error)\r\n        onError(error.message)\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!directImportData) return\r\n\r\n    preImport()\r\n    importJSON(directImportData) // Will correctly refresh when a new block json is installed\r\n  }, [])\r\n\r\n  const inputStateRef = useRef()\r\n  inputStateRef.current = inputState\r\n\r\n  const fileInputRef = useRef()\r\n\r\n  return (\r\n    <div id=\"importer\">\r\n      {useInput && (\r\n        <p>\r\n          <input\r\n            type=\"file\"\r\n            hidden\r\n            ref={fileInputRef}\r\n            accept=\".json,text/json\"\r\n            onChange={({ target: { files } }) => {\r\n              // File upload\r\n\r\n              // log('File upload state', files)\r\n\r\n              const file = files[0]\r\n\r\n              const reader = new FileReader()\r\n\r\n              preImport()\r\n\r\n              reader.onload = function (e) {\r\n                const content = e.target.result\r\n\r\n                // File upload complete\r\n\r\n                try {\r\n                  const data = JSON.parse(content)\r\n\r\n                  log('Import data', data)\r\n\r\n                  importJSON(data)\r\n                } catch (e) {\r\n                  log('Invalid JSON', content)\r\n\r\n                  onError('Invalid JSON')\r\n                }\r\n              }\r\n\r\n              reader.onerror = function (e) {\r\n                onError(e.message)\r\n              }\r\n\r\n              reader.readAsText(file)\r\n            }}\r\n          />\r\n          <button\r\n            type=\"button\"\r\n            className=\"button button-primary\"\r\n            disabled={inputState.importing}\r\n            onClick={() => {\r\n              fileInputRef.current && fileInputRef.current.click()\r\n            }}\r\n          >\r\n            Import\r\n          </button>\r\n        </p>\r\n      )}\r\n\r\n      {inputState.message && <p>{inputState.message}</p>}\r\n\r\n      {\r\n        // List imported posts\r\n\r\n        Object.keys(inputState.importedData.post_types || {}).map(\r\n          (postType) =>\r\n            inputState.importedData.post_types[postType] &&\r\n            inputState.importedData.post_types[postType].length > 0 && (\r\n              <>\r\n                <div>\r\n                  <b>{postTypeToLabel[postType] || 'Templates'}</b>\r\n                </div>\r\n                <ul>\r\n                  {inputState.importedData.post_types[postType].map(\r\n                    (post, postIndex) => (\r\n                      <li key={`post-${postIndex}`}>\r\n                        {inputState.importedData.old_to_new_id &&\r\n                        inputState.importedData.old_to_new_id[post.id] ? (\r\n                          // Link to newly created template\r\n                          <a\r\n                            href={`post.php?post=${\r\n                              inputState.importedData.old_to_new_id[post.id]\r\n                            }&action=edit`}\r\n                          >\r\n                            {post.title}\r\n                          </a>\r\n                        ) : (\r\n                          // Fallback in case we couldn't find new ID in map\r\n                          post.title\r\n                        )}\r\n                      </li>\r\n                    )\r\n                  )}\r\n                </ul>\r\n              </>\r\n            )\r\n        )\r\n      }\r\n\r\n      {\r\n        // Duplicates\r\n\r\n        inputState.duplicatesFound.length > 0 && (\r\n          <>\r\n            <p style={{ fontWeight: 'bold', color: 'red' }}>\r\n              {inputState.duplicatesFound.length} duplicate template\r\n              {inputState.duplicatesFound !== 1 ? 's' : ''} found\r\n            </p>\r\n            {\r\n              // Organize list of duplicate posts by post type\r\n              Object.keys(postTypeToLabel).map((postType) => {\r\n                const posts = inputState.duplicatesFound.filter(\r\n                  (post) => post.post_type === postType\r\n                )\r\n                if (!posts.length) return\r\n                return (\r\n                  <>\r\n                    <div>\r\n                      <b>{postTypeToLabel[postType] || 'Templates'}</b>\r\n                    </div>\r\n                    <ul>\r\n                      {posts.map((post, postIndex) => (\r\n                        <li key={`duplicate-post-${postIndex}`}>\r\n                          {post.title}\r\n                        </li>\r\n                      ))}\r\n                    </ul>\r\n                  </>\r\n                )\r\n              })\r\n            }\r\n            {/* <ul>\r\n          {inputState.duplicatesFound.map((post, postIndex) =>\r\n            <li key={`duplicate-post-${postIndex}`}>{ post.title }\r\n            </li>\r\n          )}\r\n        </ul> */}\r\n            <button\r\n              type=\"button\"\r\n              className=\"button button-primary\"\r\n              onClick={() => {\r\n                handleDuplicates({\r\n                  mode: 'overwrite',\r\n                  inputStateRef,\r\n                  setInputState,\r\n                })\r\n              }}\r\n            >\r\n              Overwrite\r\n            </button>\r\n            &nbsp;\r\n            <button\r\n              type=\"button\"\r\n              className=\"button button-primary\"\r\n              onClick={() => {\r\n                handleDuplicates({\r\n                  mode: 'keep_both',\r\n                  inputStateRef,\r\n                  setInputState,\r\n                })\r\n              }}\r\n            >\r\n              Keep both\r\n            </button>\r\n            &nbsp;\r\n            <button\r\n              type=\"button\"\r\n              className=\"button button-primary\"\r\n              onClick={() => {\r\n                // Clear state\r\n\r\n                setInputState({\r\n                  ...inputStateRef.current,\r\n                  importing: false,\r\n                  importData: {},\r\n                  importedData: {},\r\n                  duplicatesFound: [],\r\n                  duplicatesHandledMessage: '',\r\n                  message: '',\r\n                })\r\n              }}\r\n            >\r\n              Skip\r\n            </button>\r\n            {inputState.duplicatesHandledMessage && (\r\n              <p>{inputState.duplicatesHandledMessage}</p>\r\n            )}\r\n          </>\r\n        )\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Importer\r\n","import { useEffect, useRef } from 'react' // Aliased from Tangible.Preact || wp.element\r\n\r\n/**\r\n * Wrap Select2 module from vendor/tangible/interface\r\n *\r\n * @see https://select2.org/\r\n *\r\n * Also used in ../template-import-export\r\n */\r\nconst { jQuery: $ } = window\r\n\r\nconst Select = ({\r\n  labelForEmptyValue = '',\r\n  options = [],\r\n  value = '',\r\n  onChange,\r\n  multiSelect,\r\n  style,\r\n}) => {\r\n  const ref = useRef()\r\n\r\n  /**\r\n   * Activate Select2\r\n   */\r\n\r\n  useEffect(() => {\r\n    const $el = $(ref.current)\r\n    ref.current.$el = $el\r\n\r\n    onChange(value)\r\n\r\n    $el.tangibleSelect({\r\n      minimumResultsForSearch: 5,\r\n    })\r\n\r\n    if (multiSelect) {\r\n      // Ensure multiple values are selected on mount\r\n      $el.val(value)\r\n      $el.trigger('change')\r\n    }\r\n\r\n    $el.on('change', function (e) {\r\n      if (!multiSelect) {\r\n        onChange(e.target.value)\r\n        return\r\n      }\r\n\r\n      if (!ref.current) return\r\n\r\n      // Ensure array of values for multi-select\r\n\r\n      const values = $el.select2('data').map((item) => item.id)\r\n      onChange(values)\r\n    })\r\n\r\n    const select2 = (ref.current.select2 = $el.data('select2'))\r\n\r\n    // Clean up when component removed\r\n    return () => {\r\n      select2 && select2.destroy()\r\n    }\r\n  }, []) // NOTE: Empty array to run only once on component mount\r\n\r\n  // Ensure Select2 shows current value\r\n  if (ref.current && ref.current.$el) {\r\n    if (multiSelect) {\r\n      const currentValues = ref.current.$el.val()\r\n      if (value.length !== currentValues.length && options.length) {\r\n        // After select is rendered with options\r\n        setImmediate(function () {\r\n          ref.current.$el.val(value)\r\n          ref.current.$el.trigger('change')\r\n        })\r\n      }\r\n    } else if (ref.current.value !== value) {\r\n      ref.current.$el.val(value)\r\n      ref.current.$el.trigger('change')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <select\r\n      ref={ref}\r\n      // onChange={e => onChange(e.target.value)}\r\n      autoComplete=\"off\"\r\n      multiple={multiSelect}\r\n      style={{\r\n        display: 'none',\r\n        width: '160px', // Default width\r\n        ...style,\r\n      }}\r\n    >\r\n      {labelForEmptyValue && (\r\n        <option value=\"\" disabled={true} selected={value == null}>\r\n          {labelForEmptyValue}\r\n        </option>\r\n      )}\r\n      {options.map((option, optionIndex) => (\r\n        <option\r\n          key={`option-${optionIndex}`}\r\n          value={option.value}\r\n          selected={option.value === value}\r\n        >\r\n          {option.label}\r\n        </option>\r\n      ))}\r\n    </select>\r\n  )\r\n}\r\n\r\nexport default Select\r\n","import Select from '../../common/Select'\r\n\r\n/**\r\n * Check for Block Editor plugin\r\n * @see /template/import-export/enqueue.php\r\n */\r\nconst { templateSystemHasPlugin = {} } = window.Tangible\r\n\r\nconst ExportRule = ({\r\n  rule,\r\n  ruleIndex,\r\n\r\n  exportRulesRef,\r\n  setExportRules,\r\n\r\n  templateTypeItemOptionsRef,\r\n  ensureTemplateTypeItemOptions,\r\n}) => (\r\n  <div className=\"export-rule\">\r\n    <div className=\"export-rule-part\">\r\n      <Select\r\n        {...{\r\n          labelForEmptyValue: 'Select template type',\r\n          options: [\r\n\r\n            /**\r\n             * Enable block export only when Blocks & Editor is active\r\n             */\r\n            ...((templateSystemHasPlugin['blocks'] && templateSystemHasPlugin['blocks_editor'])\r\n              ? [{ label: 'Block', value: 'tangible_block' }]\r\n              : []),\r\n            ...(templateSystemHasPlugin['loops']\r\n              ? [\r\n                { label: 'Template', value: 'tangible_template' },\r\n                { label: 'Style', value: 'tangible_style' },\r\n                { label: 'Script', value: 'tangible_script' },\r\n                { label: 'Layout', value: 'tangible_layout' },\r\n              ]\r\n              : []\r\n            )\r\n          ],\r\n          value: rule.field,\r\n          onChange(field) {\r\n            rule.field = field\r\n\r\n            exportRulesRef.current[ruleIndex] = rule\r\n            setExportRules(exportRulesRef.current)\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n\r\n    {rule.field && (\r\n      <div className=\"export-rule-part\">\r\n        <Select\r\n          {...{\r\n            options: [\r\n              { label: 'All', value: 'all' },\r\n              { label: 'Include', value: 'include' },\r\n              { label: 'Exclude', value: 'exclude' },\r\n            ],\r\n            value: rule.operator,\r\n            onChange(operator) {\r\n              rule.operator = operator\r\n\r\n              if (operator === 'all') {\r\n                rule.values = [] // Clear values from include/exclude\r\n              }\r\n\r\n              exportRulesRef.current[ruleIndex] = rule\r\n              setExportRules(exportRulesRef.current)\r\n\r\n              if (operator !== 'all') {\r\n                ensureTemplateTypeItemOptions(rule.field)\r\n              }\r\n            },\r\n            style: { width: 'auto' },\r\n          }}\r\n        />\r\n      </div>\r\n    )}\r\n\r\n    {rule.field &&\r\n      rule.operator !== 'all' &&\r\n      templateTypeItemOptionsRef.current[rule.field] && (\r\n        <div className=\"export-rule-part\">\r\n          <Select\r\n            {...{\r\n              options:\r\n                templateTypeItemOptionsRef.current[rule.field] instanceof\r\n                Promise\r\n                  ? [] // Still loading\r\n                  : templateTypeItemOptionsRef.current[rule.field],\r\n\r\n              value: rule.values,\r\n\r\n              onChange(values) {\r\n                rule.values = values\r\n\r\n                exportRulesRef.current[ruleIndex] = rule\r\n                setExportRules(exportRulesRef.current)\r\n              },\r\n              multiSelect: true,\r\n            }}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n    <div className=\"export-rule-part export-rule-part--remove-rule\">\r\n      <div\r\n        className=\"icon\"\r\n        onClick={() => {\r\n          // Remove this rule\r\n          exportRulesRef.current.splice(ruleIndex, 1)\r\n\r\n          setExportRules(exportRulesRef.current)\r\n        }}\r\n      >\r\n        <svg viewBox=\"0 0 1792 1792\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <path d=\"M1490 1322q0 40-28 68l-136 136q-28 28-68 28t-68-28l-294-294-294 294q-28 28-68 28t-68-28l-136-136q-28-28-28-68t28-68l294-294-294-294q-28-28-28-68t28-68l136-136q28-28 68-28t68 28l294 294 294-294q28-28 68-28t68 28l136 136q28 28 28 68t-28 68l-294 294 294 294q28 28 28 68z\" />\r\n        </svg>\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default ExportRule\r\n","/**\r\n * Remember export settings in local storage\r\n */\r\nexport function saveStateToLocalStorage(state) {\r\n  if (!window.localStorage) return\r\n  window.localStorage.setItem('exporterState', JSON.stringify(state))\r\n}\r\n\r\nexport function getSavedStateFromLocalStorage() {\r\n  if (!window.localStorage) return\r\n  let state = window.localStorage.getItem('exporterState')\r\n  if (!state) return\r\n  try {\r\n    state = JSON.parse(state)\r\n    return state\r\n  } catch (e) {\r\n    /* Ignore */\r\n  }\r\n}\r\n","/**\r\n * Template exporter\r\n */\r\n\r\nimport { useEffect, useRef, useState } from 'react'\r\nimport ExportRule from './ExportRule'\r\nimport {\r\n  saveStateToLocalStorage,\r\n  getSavedStateFromLocalStorage,\r\n} from './localStorage'\r\n\r\nimport { ajax, ajaxActionPrefix } from '../common'\r\n\r\nconst debug = false // Set this to false for production\r\nconst log = (...args) => debug && console.log('[Exporter]', ...args)\r\n\r\nconst savedState = getSavedStateFromLocalStorage()\r\n\r\nconst defaultPackageName =\r\n  (savedState && savedState.name) || 'tangible-templates'\r\nconst defaultExportRules = (savedState && savedState.rules) || [\r\n  {\r\n    field: 'tangible_template',\r\n    operator: 'all',\r\n    values: [],\r\n  },\r\n]\r\n\r\nconst Exporter = () => {\r\n  // Export package name\r\n  const exportNameRef = useRef()\r\n\r\n  // Rules state\r\n\r\n  const [exportRules, _setExportRules] = useState(defaultExportRules)\r\n\r\n  const exportRulesRef = useRef()\r\n  exportRulesRef.current = exportRules // Keep ever-fresh reference for event callbacks to use\r\n\r\n  const setExportRules = (rules) => {\r\n    _setExportRules([...rules]) // Must create new state to re-render\r\n  }\r\n\r\n  // log('exportRulesRef.current', exportRulesRef.current)\r\n\r\n  // AJAX data state\r\n\r\n  const [templateTypeItemOptions, setTemplateTypeItemOptions] = useState({})\r\n  const templateTypeItemOptionsRef = useRef()\r\n\r\n  // Keep ever-fresh reference for event callbacks to use\r\n  templateTypeItemOptionsRef.current = templateTypeItemOptions\r\n\r\n  // log('templateTypeItemOptionsRef.current', templateTypeItemOptionsRef.current)\r\n\r\n  // Export state\r\n\r\n  const [exportState, _setExportState] = useState({\r\n    exporting: false,\r\n    message: '',\r\n    json: '',\r\n    packageName: '',\r\n  })\r\n\r\n  const exportStateRef = useRef()\r\n  exportStateRef.current = exportState\r\n\r\n  const setExportState = (newState) => {\r\n    _setExportState({\r\n      ...exportStateRef.current,\r\n      ...newState,\r\n    })\r\n  }\r\n\r\n  // Ensure data\r\n\r\n  const ensureTemplateTypeItemOptions = async (templateType) => {\r\n    // We already have data (or is loading it)\r\n    if (templateTypeItemOptionsRef.current[templateType]) return\r\n\r\n    log(\r\n      'ensureTemplateTypeItemOptions',\r\n      templateType,\r\n      templateTypeItemOptionsRef.current\r\n    )\r\n\r\n    const promise = ajax(ajaxActionPrefix + 'get_template_type_item_options', {\r\n      post_type: templateType,\r\n    })\r\n      .then((result) => {\r\n        log('ensureTemplateTypeItemOptions Success', result)\r\n\r\n        setTemplateTypeItemOptions({\r\n          ...templateTypeItemOptionsRef.current,\r\n          [templateType]: result,\r\n        })\r\n      })\r\n      .catch((error) => {\r\n        log('ensureTemplateTypeItemOptions Fail', error)\r\n      })\r\n\r\n    // Store promise to prevent loading multiple times\r\n    setTemplateTypeItemOptions({\r\n      ...templateTypeItemOptionsRef.current,\r\n      [templateType]: promise,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div id=\"exporter\">\r\n      <div className=\"export-name\">\r\n        Package name:{' '}\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          defaultValue={defaultPackageName}\r\n          ref={exportNameRef}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"export-rules\">\r\n        {exportRules.map((rule, ruleIndex) => (\r\n          <ExportRule\r\n            key={`export-rule-${ruleIndex}`}\r\n            {...{\r\n              rule,\r\n              ruleIndex,\r\n\r\n              exportRulesRef,\r\n              setExportRules,\r\n\r\n              templateTypeItemOptionsRef,\r\n              ensureTemplateTypeItemOptions,\r\n            }}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <p>\r\n        <button\r\n          type=\"button\"\r\n          className=\"button button-secondary\"\r\n          onClick={() => {\r\n            // Add export rule\r\n\r\n            exportRulesRef.current.push({\r\n              field: 'tangible_template',\r\n              operator: 'all',\r\n              values: [],\r\n            })\r\n\r\n            setExportRules(exportRulesRef.current)\r\n          }}\r\n        >\r\n          Add export rule\r\n        </button>\r\n      </p>\r\n\r\n      {exportRulesRef.current.length > 0 && (\r\n        <p>\r\n          <button\r\n            type=\"button\"\r\n            className=\"button button-primary\"\r\n            disabled={exportState.exporting}\r\n            onClick={() => {\r\n              const packageName =\r\n                (exportNameRef.current && exportNameRef.current.value) ||\r\n                defaultPackageName\r\n\r\n              saveStateToLocalStorage({\r\n                name: packageName,\r\n                rules: exportRulesRef.current,\r\n              })\r\n\r\n              // Export\r\n\r\n              log('Export start', exportRulesRef.current)\r\n\r\n              setExportState({\r\n                exporting: true,\r\n                message: 'Exporting..',\r\n              })\r\n\r\n              ajax(ajaxActionPrefix + 'export', {\r\n                export_rules: exportRulesRef.current,\r\n              })\r\n                .then((result) => {\r\n                  console.log('Export success', result)\r\n\r\n                  setExportState({\r\n                    exporting: false,\r\n                    message: '',\r\n                    // json: JSON.stringify(result, null, 2)\r\n                  })\r\n\r\n                  // Download JSON file\r\n\r\n                  const data = {\r\n                    package_name: packageName,\r\n                    ...result,\r\n                  }\r\n\r\n                  const timestamp = new Date()\r\n                    .toISOString()\r\n                    .slice(0, 10)\r\n                    .replace(/-/g, '') // Ymd\r\n\r\n                  const a = document.createElement('a')\r\n\r\n                  a.href =\r\n                    'data:text/json;charset=utf-8,' +\r\n                    encodeURIComponent(JSON.stringify(data, null, 2))\r\n                  a.download = `${packageName}-${timestamp}.json`\r\n                  a.style.display = 'none'\r\n\r\n                  document.body.appendChild(a)\r\n\r\n                  a.click()\r\n                })\r\n                .catch((error) => {\r\n                  console.error(error)\r\n\r\n                  setExportState({\r\n                    exporting: false,\r\n                    message: 'Error: ' + error.message,\r\n                  })\r\n                })\r\n            }}\r\n          >\r\n            Export\r\n          </button>\r\n\r\n          {exportState.message && (\r\n            <span style={{ paddingLeft: '1rem' }}>{exportState.message}</span>\r\n          )}\r\n        </p>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Exporter\r\n","/**\n * Template import/export\n *\n * @see /template/import-export/ajax.php, view.php\n */\n\nimport Importer from './Importer'\nimport Exporter from './Exporter'\n\nconst {\n  Tangible: {\n    Preact,\n    /**\n     * Check for installed plugins\n     * @see /template/import-export/enqueue.php\n     */\n    templateSystemHasPlugin = {}\n  },\n} = window\n\nconst el = document.getElementById('tangible_template_import_export_form')\n\nel.addEventListener('submit', function (e) {\n  e.preventDefault()\n})\n\nconst hasExport = templateSystemHasPlugin['loops']\n  || templateSystemHasPlugin['blocks_editor']\n\nPreact.render(\n  <>\n    <h1 className=\"wp-heading-inline\">Import</h1>\n\n    <Importer />\n\n    { hasExport && <>\n      <hr />\n      <h1 className=\"wp-heading-inline\">Export</h1>\n      <Exporter />\n    </> \n    }\n  </>,\n  el\n)\n"],"names":["ajax","ajaxActionPrefix","handleDuplicates","mode","inputStateRef","setInputState","importData","duplicates","__spreadProps","__spreadValues","id","title","post_type","postData","post","result","importedData","error","__name","useState","useEffect","useRef","i","a","m","v","o","c","e","f","g","b","x","s","l","d","r","templateSystemHasPlugin","ExportRule","rule","ruleIndex","exportRulesRef","setExportRules","templateTypeItemOptionsRef","ensureTemplateTypeItemOptions","Select","field","operator","values","saveStateToLocalStorage","state","getSavedStateFromLocalStorage","S","T","I","n","h","k","p","E","N","w","A","j","u","Preact","el","hasExport","Importer","Exporter"],"mappings":"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"}