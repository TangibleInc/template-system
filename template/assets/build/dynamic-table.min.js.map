{"version":3,"sources":["../../node_modules/browser-pack/_prelude.js","index.js","../src/dynamic-table/index.js","../../node_modules/@babel/runtime/helpers/defineProperty.js","../../node_modules/@babel/runtime/helpers/interopRequireDefault.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","module","_defineProperty2","_interopRequireDefault","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","default","getOwnPropertyDescriptors","defineProperties","defineProperty","title","$","window","jQuery","_ref","Tangible","Table","ajax","console","reduce","obj","_window$console","_len","args","Array","_key","concat","debounce","func","delay","timer","_arguments","_this","this","clearTimeout","setTimeout","cacheKey","activateTable","selector","options","undefined","el","document","querySelector","$el","config","data","log","name","_config$rows","rows","_config$column_label","column_label","columnLabel","_config$column_sort_e","column_sort_enabled","columnSortEnabled","_config$column_sort_t","column_sort_type","columnSortType","_config$pagination","pagination","paginationTemplate","pagination_template","_config$empty_table_t","empty_table_template","emptyTableTemplate","rowLoop","row_loop","columnTemplate","column_template","columnOrder","column_order","currentPage","_config$per_page","per_page","perPage","totalPages","total_pages","sortColumn","sort_column","sortOrder","sort_order","sortType","sort_type","currentSearch","currentSearchColumns","currentFilterByColumnValues","$container","element","find","tableOptions","columns","sorting","rowsPerPage","onPaginationChange","onColumnSort","table","empty","append","children","$pagination","insertAfter","wrap","$emptyTableTemplate","hide","closest","$table","tableDataCache","createCacheKey","sort","str","JSON","stringify","_createTableRequest2","createTableRequest","initialCacheKey","$filterForm","runFilter","_ref2","$field","tag","action","type","filterColumns","value","val","attributes","fetchTableData","then","response","setTotalPages","pageIndex","currentRows","setPage","handleEmptyTable","onUpdateRowsPerPage","parseInt","onSearch","each","$form","prop","toLowerCase","attr","onAction","on","preventDefault","warn","request","tableRequest","page","search","search_columns","filter_by_column_values","hasData","show","removeClass","addClass","_createTableRequest","Promise","resolve","reject","cached","catch","column","order","searchColumns","getVisibleColumns","configurable","writable","__esModule"],"mappings":"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","file":"dynamic-table.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","\nconst $ = window.jQuery\nconst {\n  Table,\n  ajax\n} = window.Tangible || {}\n\n\nconst debug = false // Show console.log - Set false before publish\n\nconst createLogger = title => ['log', 'warn', 'error'].reduce((obj, key) => {\n  obj[key] = (...args) =>\n    (key==='log' && !debug) ? null : window.console[key](`[${title}]`, ...args)\n  return obj\n}, {})\n\nconst console = createLogger('Tangible Table')\n\nconst debounce = (func, delay) => {\n  let timer\n  return function() {\n    clearTimeout(timer)\n    timer = window.setTimeout(() => func.apply(this, arguments), delay)\n  }\n}\n\nconst cacheKey = '__tangibleTableRendered'\n\nfunction activateTable(selector, options = {}) {\n\n  if (!Table) {\n    console.warn('Library not found')\n    return\n  }\n\n  const el = typeof selector==='string'\n    ? document.querySelector(selector)\n    : selector\n\n  if (!el) {\n    console.warn('Element not found', selector)\n    return\n  }\n\n  if (el[cacheKey]) return\n  el[cacheKey] = true\n\n  const $el = $(el)\n\n  /**\n   * Create table options\n   */\n\n  const config = $el.data('tangibleTableConfig') || {}\n\n  console.log('Config', config)\n\n  const {\n    name,\n\n    // Table data\n    rows = [],\n    column_label: columnLabel = {},\n    column_sort_enabled: columnSortEnabled = [],\n    column_sort_type: columnSortType = {},\n\n    pagination = true,\n    pagination_template: paginationTemplate,\n\n    empty_table_template: emptyTableTemplate = '', // Show when no rows\n\n    // These are needed for dynamic render via AJAX\n    row_loop: rowLoop,\n    column_template: columnTemplate,\n    column_order: columnOrder,\n\n  } = config\n\n  // Current state\n\n  let currentPage = 1\n  let {\n    per_page:    perPage = -1,\n    total_pages: totalPages,\n\n    sort_column: sortColumn,\n    sort_order:  sortOrder,\n    sort_type:   sortType,\n\n  } = config\n\n  let currentSearch = ''\n  let currentSearchColumns = []\n\n  let currentFilterByColumnValues = {}\n\n  /**\n   * Table class creates a <table> element inside container, and appends\n   * to its parent a pagination element\n   */\n  let $container = $('<div><div></div></div>')\n  const element = $container.find('div')[0]\n\n  const tableOptions = {\n    ...options,\n\n    element,\n    // searchField: '',\n\n    data: rows,\n    columns: columnLabel,\n    sorting: columnSortEnabled,\n\n    rowsPerPage: perPage===-1 ? 999 : perPage,\n    pagination,\n    totalPages,\n    paginationTemplate,\n\n    // See event handlers defined below\n    onPaginationChange,\n    onColumnSort,\n\n    // Filters are manually handled\n    // onUpdateRowsPerPage,\n    // onSearch\n  }\n\n  const table = new Table(tableOptions)\n\n  console.log('Created', tableOptions)\n\n\n  // Replace existing table's content and move pagination after it\n\n  $el.empty().append(\n    $container.find('table').children()\n  )\n\n  const $pagination = $container.find('.tangible-table-pagination')\n\n  $pagination.insertAfter($el)\n\n  $el.wrap('<div class=\"tangible-table-overflow\"></div>')\n\n  const $emptyTableTemplate = $('<div class=\"tangible-table-on-empty\">' + emptyTableTemplate + '</div>')\n\n  $emptyTableTemplate.hide()\n  $emptyTableTemplate.insertAfter( $pagination )\n\n  $container = $el.closest('.tangible-table-container')\n\n  const $table = $el\n\n  /**\n   * Fetch new table data via AJAX\n   */\n\n  const tableDataCache = {}\n\n  const createCacheKey = obj => {\n\n    const keys = Object.keys(obj)\n\n    keys.sort()\n\n    return keys.reduce((str, key) => {\n      return `${str}${key}=${JSON.stringify(obj[key])},`\n    }, '')\n  }\n\n  function createTableRequest(request = {}) {\n\n    const tableRequest = {\n\n      page: currentPage,\n      per_page: perPage,\n\n      row_loop: rowLoop,\n      column_order: columnOrder,\n\n      sort_column: sortColumn,\n      sort_order: sortOrder,\n      sort_type: sortType,\n\n      search: currentSearch,\n      search_columns: currentSearchColumns,\n\n      filter_by_column_values: currentFilterByColumnValues,\n\n      ...request\n    }\n\n    // Create unique key to cache request\n    const cacheKey = createCacheKey(tableRequest)\n\n    return {\n      tableRequest: {\n        ...tableRequest,\n        // Excluded from cache key\n        column_template: columnTemplate,\n        column_sort_type: columnSortType\n      },\n      cacheKey\n    }\n  }\n\n  function handleEmptyTable( hasData = false ) {\n\n    // Called on search or filter - Show empty table template as needed\n\n    if (hasData) {\n      $emptyTableTemplate.hide()\n      $table.show()\n      $container.removeClass('is-empty-table')\n    } else {\n      $table.hide()\n      $emptyTableTemplate.show()\n      $container.addClass('is-empty-table')\n    }\n  }\n\n  function fetchTableData(request = {}) {\n\n    const {\n      tableRequest,\n      cacheKey\n    } = createTableRequest(request)\n\n    return new Promise((resolve, reject) => {\n\n      if (tableDataCache[ cacheKey ]) {\n\n        const cached = tableDataCache[ cacheKey ]\n\n        // console.log('fetchTableData cached', cached)\n\n        return resolve(cached)\n      }\n\n      console.log('fetchTableData', tableRequest)\n\n      $container.addClass('loading')\n\n      ajax('tangible_table_data', tableRequest)\n        .then(function(response) {\n\n          tableDataCache[ cacheKey ] = response\n\n          console.log('fetchTableData success', response)\n          resolve(response)\n\n          $container.removeClass('loading')\n        })\n        .catch(function(e) {\n\n          console.log('fetchTableData error', e)\n          resolve() // NOTE: Caller must check for undefined\n\n          $container.removeClass('loading')\n        })\n    })\n  }\n\n  // Cache initial page\n\n  const {\n    cacheKey: initialCacheKey\n  } = createTableRequest()\n\n  tableDataCache[ initialCacheKey ] = {\n    rows,\n    total_pages: totalPages\n  }\n\n  /**\n   * Event handlers\n   */\n\n  function onPaginationChange(pageIndex) {\n\n    console.log('Get page', pageIndex+1)\n\n    currentPage = pageIndex+1\n\n    fetchTableData()\n      .then(function(response) {\n        if (!response) return\n        table.setPage(pageIndex, response.rows)\n      })\n  }\n\n  function onUpdateRowsPerPage(rowsPerPage) {\n    console.log('onUpdateRowsPerPage', rowsPerPage)\n  }\n\n  function onColumnSort(column, order) {\n\n    currentPage = 1\n    sortColumn = column\n    sortOrder  = order\n    sortType   = columnSortType[column] || 'string'\n\n    console.log('onColumnSort', currentPage, sortColumn, sortOrder, sortType)\n\n    fetchTableData()\n      .then(function(response) {\n        if (!response) return\n        const pageIndex = currentPage - 1\n        table.setPage(pageIndex, response.rows)\n      })\n  }\n\n  function onSearch(value, searchColumns) {\n\n    console.log('onSearch', value, searchColumns)\n\n    currentPage = 1\n    currentSearch = value\n    currentSearchColumns = searchColumns || table.getVisibleColumns()\n\n    fetchTableData()\n      .then(function(response) {\n        if (!response) return\n\n        console.log('Search result', response)\n\n        table.setTotalPages(response.total_pages || 1)\n\n        const pageIndex = currentPage - 1\n        const currentRows = response.rows || []\n\n        table.setPage(pageIndex, currentRows)\n\n        handleEmptyTable( currentRows.length )\n      })\n  }\n\n  // Filters\n\n  const $filterForm = $container.find('.tangible-table-filter-form')\n\n  if (!$filterForm.length) return\n\n  const runFilter = function({\n    $field, tag, name, type, action, filterColumns\n  }) {\n\n    const value = $field.val()\n\n    console.log('Filter', action, name, value)\n\n    if (action==='loop' || action==='column') {\n\n      if (action==='column') {\n\n        // Filter by column value\n\n        // If value is empty, clear previous filter\n        if ( ! value.length ) {\n          delete currentFilterByColumnValues[ name ]\n        } else {\n          currentFilterByColumnValues[ name ] = {\n            value\n          }\n        }\n\n      } else {\n\n        // Filter by loop attribute\n\n        rowLoop.attributes[name] = value\n      }\n\n      fetchTableData()\n        .then(function(response) {\n\n          if (!response) return\n\n          totalPages = response.total_pages || 1 // Minimum\n\n          if (currentPage > totalPages) {\n            currentPage = totalPages\n          }\n\n          table.setTotalPages(totalPages)\n\n          const pageIndex = currentPage - 1\n          const currentRows = response.rows || []\n\n          table.setPage(pageIndex, currentRows)\n\n          handleEmptyTable( currentRows.length )\n        })\n\n      return\n    }\n\n    if (action==='search') {\n\n      onSearch(value, filterColumns)\n      // table.search( value, filterColumns )\n\n      return\n    }\n\n    if (action==='perPage') {\n\n      onUpdateRowsPerPage(parseInt(value, 10))\n      return\n    }\n\n    // Unkown action\n  }\n\n  $filterForm.each(function() {\n\n    const $form = $(this)\n\n    $form.find('select,input').each(function() {\n\n      const $field = $(this)\n\n      const tag = $field.prop('tagName').toLowerCase()\n      const name = $field.attr('name')\n\n      const type = tag==='select' ? 'select' : $field.attr('type')\n      const action = $field.data('tangibleTableFilterAction') || 'loop'\n\n      const filterColumns = $field.data('tangibleTableFilterColumns')\n\n      const onAction = function() {\n        runFilter({\n          $field, tag, name, type, action, filterColumns\n        })\n      }\n\n      $field.on('change', onAction)\n\n      if (type==='text') {\n        $field.on('input', debounce(onAction, 500)) // Limit frequency\n      }\n    })\n\n    $form.on('submit', function(e) {\n      e.preventDefault()\n    })\n  })\n}\n\n$('.tangible-table').each(function() {\n  activateTable(this)\n})\n\nwindow.Tangible = window.Tangible || {}\nwindow.Tangible.activateTable = activateTable\n","\nconst $ = window.jQuery\nconst {\n  Table,\n  ajax\n} = window.Tangible || {}\n\n\nconst debug = false // Show console.log - Set false before publish\n\nconst createLogger = title => ['log', 'warn', 'error'].reduce((obj, key) => {\n  obj[key] = (...args) =>\n    (key==='log' && !debug) ? null : window.console[key](`[${title}]`, ...args)\n  return obj\n}, {})\n\nconst console = createLogger('Tangible Table')\n\nconst debounce = (func, delay) => {\n  let timer\n  return function() {\n    clearTimeout(timer)\n    timer = window.setTimeout(() => func.apply(this, arguments), delay)\n  }\n}\n\nconst cacheKey = '__tangibleTableRendered'\n\nfunction activateTable(selector, options = {}) {\n\n  if (!Table) {\n    console.warn('Library not found')\n    return\n  }\n\n  const el = typeof selector==='string'\n    ? document.querySelector(selector)\n    : selector\n\n  if (!el) {\n    console.warn('Element not found', selector)\n    return\n  }\n\n  if (el[cacheKey]) return\n  el[cacheKey] = true\n\n  const $el = $(el)\n\n  /**\n   * Create table options\n   */\n\n  const config = $el.data('tangibleTableConfig') || {}\n\n  console.log('Config', config)\n\n  const {\n    name,\n\n    // Table data\n    rows = [],\n    column_label: columnLabel = {},\n    column_sort_enabled: columnSortEnabled = [],\n    column_sort_type: columnSortType = {},\n\n    pagination = true,\n    pagination_template: paginationTemplate,\n\n    empty_table_template: emptyTableTemplate = '', // Show when no rows\n\n    // These are needed for dynamic render via AJAX\n    row_loop: rowLoop,\n    column_template: columnTemplate,\n    column_order: columnOrder,\n\n  } = config\n\n  // Current state\n\n  let currentPage = 1\n  let {\n    per_page:    perPage = -1,\n    total_pages: totalPages,\n\n    sort_column: sortColumn,\n    sort_order:  sortOrder,\n    sort_type:   sortType,\n\n  } = config\n\n  let currentSearch = ''\n  let currentSearchColumns = []\n\n  let currentFilterByColumnValues = {}\n\n  /**\n   * Table class creates a <table> element inside container, and appends\n   * to its parent a pagination element\n   */\n  let $container = $('<div><div></div></div>')\n  const element = $container.find('div')[0]\n\n  const tableOptions = {\n    ...options,\n\n    element,\n    // searchField: '',\n\n    data: rows,\n    columns: columnLabel,\n    sorting: columnSortEnabled,\n\n    rowsPerPage: perPage===-1 ? 999 : perPage,\n    pagination,\n    totalPages,\n    paginationTemplate,\n\n    // See event handlers defined below\n    onPaginationChange,\n    onColumnSort,\n\n    // Filters are manually handled\n    // onUpdateRowsPerPage,\n    // onSearch\n  }\n\n  const table = new Table(tableOptions)\n\n  console.log('Created', tableOptions)\n\n\n  // Replace existing table's content and move pagination after it\n\n  $el.empty().append(\n    $container.find('table').children()\n  )\n\n  const $pagination = $container.find('.tangible-table-pagination')\n\n  $pagination.insertAfter($el)\n\n  $el.wrap('<div class=\"tangible-table-overflow\"></div>')\n\n  const $emptyTableTemplate = $('<div class=\"tangible-table-on-empty\">' + emptyTableTemplate + '</div>')\n\n  $emptyTableTemplate.hide()\n  $emptyTableTemplate.insertAfter( $pagination )\n\n  $container = $el.closest('.tangible-table-container')\n\n  const $table = $el\n\n  /**\n   * Fetch new table data via AJAX\n   */\n\n  const tableDataCache = {}\n\n  const createCacheKey = obj => {\n\n    const keys = Object.keys(obj)\n\n    keys.sort()\n\n    return keys.reduce((str, key) => {\n      return `${str}${key}=${JSON.stringify(obj[key])},`\n    }, '')\n  }\n\n  function createTableRequest(request = {}) {\n\n    const tableRequest = {\n\n      page: currentPage,\n      per_page: perPage,\n\n      row_loop: rowLoop,\n      column_order: columnOrder,\n\n      sort_column: sortColumn,\n      sort_order: sortOrder,\n      sort_type: sortType,\n\n      search: currentSearch,\n      search_columns: currentSearchColumns,\n\n      filter_by_column_values: currentFilterByColumnValues,\n\n      ...request\n    }\n\n    // Create unique key to cache request\n    const cacheKey = createCacheKey(tableRequest)\n\n    return {\n      tableRequest: {\n        ...tableRequest,\n        // Excluded from cache key\n        column_template: columnTemplate,\n        column_sort_type: columnSortType\n      },\n      cacheKey\n    }\n  }\n\n  function handleEmptyTable( hasData = false ) {\n\n    // Called on search or filter - Show empty table template as needed\n\n    if (hasData) {\n      $emptyTableTemplate.hide()\n      $table.show()\n      $container.removeClass('is-empty-table')\n    } else {\n      $table.hide()\n      $emptyTableTemplate.show()\n      $container.addClass('is-empty-table')\n    }\n  }\n\n  function fetchTableData(request = {}) {\n\n    const {\n      tableRequest,\n      cacheKey\n    } = createTableRequest(request)\n\n    return new Promise((resolve, reject) => {\n\n      if (tableDataCache[ cacheKey ]) {\n\n        const cached = tableDataCache[ cacheKey ]\n\n        // console.log('fetchTableData cached', cached)\n\n        return resolve(cached)\n      }\n\n      console.log('fetchTableData', tableRequest)\n\n      $container.addClass('loading')\n\n      ajax('tangible_table_data', tableRequest)\n        .then(function(response) {\n\n          tableDataCache[ cacheKey ] = response\n\n          console.log('fetchTableData success', response)\n          resolve(response)\n\n          $container.removeClass('loading')\n        })\n        .catch(function(e) {\n\n          console.log('fetchTableData error', e)\n          resolve() // NOTE: Caller must check for undefined\n\n          $container.removeClass('loading')\n        })\n    })\n  }\n\n  // Cache initial page\n\n  const {\n    cacheKey: initialCacheKey\n  } = createTableRequest()\n\n  tableDataCache[ initialCacheKey ] = {\n    rows,\n    total_pages: totalPages\n  }\n\n  /**\n   * Event handlers\n   */\n\n  function onPaginationChange(pageIndex) {\n\n    console.log('Get page', pageIndex+1)\n\n    currentPage = pageIndex+1\n\n    fetchTableData()\n      .then(function(response) {\n        if (!response) return\n        table.setPage(pageIndex, response.rows)\n      })\n  }\n\n  function onUpdateRowsPerPage(rowsPerPage) {\n    console.log('onUpdateRowsPerPage', rowsPerPage)\n  }\n\n  function onColumnSort(column, order) {\n\n    currentPage = 1\n    sortColumn = column\n    sortOrder  = order\n    sortType   = columnSortType[column] || 'string'\n\n    console.log('onColumnSort', currentPage, sortColumn, sortOrder, sortType)\n\n    fetchTableData()\n      .then(function(response) {\n        if (!response) return\n        const pageIndex = currentPage - 1\n        table.setPage(pageIndex, response.rows)\n      })\n  }\n\n  function onSearch(value, searchColumns) {\n\n    console.log('onSearch', value, searchColumns)\n\n    currentPage = 1\n    currentSearch = value\n    currentSearchColumns = searchColumns || table.getVisibleColumns()\n\n    fetchTableData()\n      .then(function(response) {\n        if (!response) return\n\n        console.log('Search result', response)\n\n        table.setTotalPages(response.total_pages || 1)\n\n        const pageIndex = currentPage - 1\n        const currentRows = response.rows || []\n\n        table.setPage(pageIndex, currentRows)\n\n        handleEmptyTable( currentRows.length )\n      })\n  }\n\n  // Filters\n\n  const $filterForm = $container.find('.tangible-table-filter-form')\n\n  if (!$filterForm.length) return\n\n  const runFilter = function({\n    $field, tag, name, type, action, filterColumns\n  }) {\n\n    const value = $field.val()\n\n    console.log('Filter', action, name, value)\n\n    if (action==='loop' || action==='column') {\n\n      if (action==='column') {\n\n        // Filter by column value\n\n        // If value is empty, clear previous filter\n        if ( ! value.length ) {\n          delete currentFilterByColumnValues[ name ]\n        } else {\n          currentFilterByColumnValues[ name ] = {\n            value\n          }\n        }\n\n      } else {\n\n        // Filter by loop attribute\n\n        rowLoop.attributes[name] = value\n      }\n\n      fetchTableData()\n        .then(function(response) {\n\n          if (!response) return\n\n          totalPages = response.total_pages || 1 // Minimum\n\n          if (currentPage > totalPages) {\n            currentPage = totalPages\n          }\n\n          table.setTotalPages(totalPages)\n\n          const pageIndex = currentPage - 1\n          const currentRows = response.rows || []\n\n          table.setPage(pageIndex, currentRows)\n\n          handleEmptyTable( currentRows.length )\n        })\n\n      return\n    }\n\n    if (action==='search') {\n\n      onSearch(value, filterColumns)\n      // table.search( value, filterColumns )\n\n      return\n    }\n\n    if (action==='perPage') {\n\n      onUpdateRowsPerPage(parseInt(value, 10))\n      return\n    }\n\n    // Unkown action\n  }\n\n  $filterForm.each(function() {\n\n    const $form = $(this)\n\n    $form.find('select,input').each(function() {\n\n      const $field = $(this)\n\n      const tag = $field.prop('tagName').toLowerCase()\n      const name = $field.attr('name')\n\n      const type = tag==='select' ? 'select' : $field.attr('type')\n      const action = $field.data('tangibleTableFilterAction') || 'loop'\n\n      const filterColumns = $field.data('tangibleTableFilterColumns')\n\n      const onAction = function() {\n        runFilter({\n          $field, tag, name, type, action, filterColumns\n        })\n      }\n\n      $field.on('change', onAction)\n\n      if (type==='text') {\n        $field.on('input', debounce(onAction, 500)) // Limit frequency\n      }\n    })\n\n    $form.on('submit', function(e) {\n      e.preventDefault()\n    })\n  })\n}\n\n$('.tangible-table').each(function() {\n  activateTable(this)\n})\n\nwindow.Tangible = window.Tangible || {}\nwindow.Tangible.activateTable = activateTable\n","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;"]}