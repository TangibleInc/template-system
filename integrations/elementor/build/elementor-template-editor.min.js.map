{"version":3,"file":"elementor-template-editor.min.js","sources":["../src/elementor-template-editor/index.js"],"sourcesContent":["/**\n * Template editor widget for Elementor\n * Similar to Gutenberg block in ../gutenberg/blocks/template.js\n * Widget is rendered in /integrations/elementor/template-editor-control.php\n *\n * https://developers.elementor.com/creating-a-new-control#Control_JS_file\n */\n\nconst { jQuery } = window\n\njQuery(document).ready(function ($) {\n  const { Tangible, elementor } = window\n  const { createCodeEditor } = Tangible\n\n  const refreshInterval = 1000\n\n  elementor.once('preview:loaded', function () {\n    const { elementorFrontend = {} } = window\n\n    const previewWindow = elementor?.$preview[0]?.contentWindow\n    const $previewBody = elementorFrontend?.elements?.$body\n\n    function refreshPreview() {\n      const previewModuleLoader = previewWindow?.Tangible?.moduleLoader\n      if (!previewModuleLoader || !$previewBody || !$previewBody.length) return\n\n      const $modules = $previewBody.find('.tangible-dynamic-module')\n      const key = '_tangibleDynamicModuleActivated'\n\n      $modules.each(function () {\n        if (this[key]) return\n        this[key] = true\n        previewModuleLoader(this)\n      })\n    }\n\n    setInterval(refreshPreview, refreshInterval)\n  })\n\n  // Controls\n  const templateEditorControl = elementor.modules.controls.BaseData.extend({\n    onReady: function () {\n      // this = { el, $el, model, ui, .. }\n\n      this.unsubscribers = []\n\n      // Create code editor instance\n\n      const textarea = this.$el.find(\n        '.tangible-elementor-template-editor-textarea'\n      )[0]\n      if (!textarea) return\n\n      ;(async () => {\n\n        const editor = await createCodeEditor(textarea, {\n          language: 'html',\n\n          // Legacy options\n\n          viewportMargin: Infinity, // With .CodeMirror height: auto or 100%\n          resizable: false,\n          lineWrapping: true,\n\n          extraKeys: {\n            'Alt-F': 'findPersistent',\n            Enter: 'emmetInsertLineBreak',\n            'Ctrl-Space': 'autocomplete',\n          },\n        })\n\n        editor.setSize(null, '100%') // Prevent width resize, scroll instead\n\n        // Trick to fix initial CodeMirror styling\n        setTimeout(function () {\n          editor.refresh()\n          editor.focus()\n        }, 0)\n\n        // Preview refresh logic\n\n        let shouldRefresh = false\n\n        editor.on('change', () => {\n          shouldRefresh = true\n          /**\n           * Saving field value on every key press is too heavy, because the preview\n           * is rendered server-side.\n           */\n          // const value = editor.getValue()\n          // this.setValue( value )\n        })\n\n        const refreshTimer = setInterval(() => {\n          if (!shouldRefresh) return\n          shouldRefresh = false\n\n          const value = editor.getValue()\n\n          // Update field value\n          this.setValue(value)\n\n          shouldRefresh = false\n        }, refreshInterval)\n\n        // Clean up\n        this.unsubscribers.push(function () {\n          clearInterval(refreshTimer)\n        })\n      })().catch(console.error)\n    },\n\n    // saveValue() {\n    //   this.setValue(\n    //     this.codeEditor ? this.codeEditor.getValue() : this.textarea.value\n    //   )\n    // },\n\n    onBeforeDestroy: function () {\n      this.unsubscribers.forEach((unsubscribe) => unsubscribe())\n    },\n  })\n\n  elementor.addControlView('tangible-template-editor', templateEditorControl)\n})\n"],"names":["jQuery","$","Tangible","elementor","createCodeEditor","refreshInterval","elementorFrontend","previewWindow","$previewBody","refreshPreview","previewModuleLoader","$modules","key","__name","templateEditorControl","textarea","editor","shouldRefresh","refreshTimer","value","unsubscribe"],"mappings":"2WAQA,KAAM,CAAE,OAAAA,CAAO,EAAI,OAEnBA,EAAO,QAAQ,EAAE,MAAM,SAAUC,EAAG,CAClC,KAAM,CAAE,SAAAC,EAAU,UAAAC,CAAU,EAAI,OAC1B,CAAE,iBAAAC,CAAiB,EAAIF,EAEvBG,EAAkB,IAExBF,EAAU,KAAK,iBAAkB,UAAY,CAC3C,KAAM,CAAE,kBAAAG,EAAoB,CAAA,CAAG,EAAI,OAE7BC,EAAgBJ,GAAW,SAAS,CAAC,GAAG,cACxCK,EAAeF,GAAmB,UAAU,MAElD,SAASG,GAAiB,CACxB,MAAMC,EAAsBH,GAAe,UAAU,aACrD,GAAI,CAACG,GAAuB,CAACF,GAAgB,CAACA,EAAa,OAAQ,OAEnE,MAAMG,EAAWH,EAAa,KAAK,0BAA0B,EACvDI,EAAM,kCAEZD,EAAS,KAAK,UAAY,CACpB,KAAKC,CAAG,IACZ,KAAKA,CAAG,EAAI,GACZF,EAAoB,IAAI,EAC1B,CAAC,CACH,CAZSD,EAAAA,EAAAA,KAAAI,EAAAJ,EAAA,gBAcT,EAAA,YAAYA,EAAgBJ,CAAe,CAC7C,CAAC,EAGD,MAAMS,EAAwBX,EAAU,QAAQ,SAAS,SAAS,OAAO,CACvE,QAAS,UAAY,CAGnB,KAAK,cAAgB,CAAA,EAIrB,MAAMY,EAAW,KAAK,IAAI,KACxB,8CACF,EAAE,CAAC,EACEA,IAEH,SAAY,CAEZ,MAAMC,EAAS,MAAMZ,EAAiBW,EAAU,CAC9C,SAAU,OAIV,eAAgB,IAChB,UAAW,GACX,aAAc,GAEd,UAAW,CACT,QAAS,iBACT,MAAO,uBACP,aAAc,cAChB,CACF,CAAC,EAEDC,EAAO,QAAQ,KAAM,MAAM,EAG3B,WAAW,UAAY,CACrBA,EAAO,QAAQ,EACfA,EAAO,OACT,EAAG,CAAC,EAIJ,IAAIC,EAAgB,GAEpBD,EAAO,GAAG,SAAU,IAAM,CACxBC,EAAgB,EAOlB,CAAC,EAED,MAAMC,EAAe,YAAY,IAAM,CACrC,GAAI,CAACD,EAAe,OACpBA,EAAgB,GAEhB,MAAME,EAAQH,EAAO,SAGrB,EAAA,KAAK,SAASG,CAAK,EAEnBF,EAAgB,EAClB,EAAGZ,CAAe,EAGlB,KAAK,cAAc,KAAK,UAAY,CAClC,cAAca,CAAY,CAC5B,CAAC,CACH,GAAA,EAAK,MAAM,QAAQ,KAAK,CAC1B,EAQA,gBAAiB,UAAY,CAC3B,KAAK,cAAc,QAASE,GAAgBA,EAAAA,CAAa,CAC3D,CACF,CAAC,EAEDjB,EAAU,eAAe,2BAA4BW,CAAqB,CAC5E,CAAC"}