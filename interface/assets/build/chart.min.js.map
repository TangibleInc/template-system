{"version":3,"sources":["../../node_modules/browser-pack/_prelude.js","index.js","../src/chart/index.js","../../node_modules/@babel/runtime/helpers/arrayLikeToArray.js","../../node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","../../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../../node_modules/@babel/runtime/helpers/iterableToArray.js","../../node_modules/@babel/runtime/helpers/nonIterableSpread.js","../../node_modules/@babel/runtime/helpers/toConsumableArray.js","../../node_modules/@babel/runtime/helpers/typeof.js","../../node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","../../node_modules/chart.js/dist/chart.js","../../node_modules/chart.js/helpers/helpers.js","../../node_modules/chartjs-plugin-datalabels/dist/chartjs-plugin-datalabels.js","../../node_modules/lodash/_Hash.js","../../node_modules/lodash/_ListCache.js","../../node_modules/lodash/_Map.js","../../node_modules/lodash/_MapCache.js","../../node_modules/lodash/_Symbol.js","../../node_modules/lodash/_arrayMap.js","../../node_modules/lodash/_assignValue.js","../../node_modules/lodash/_assocIndexOf.js","../../node_modules/lodash/_baseAssignValue.js","../../node_modules/lodash/_baseGet.js","../../node_modules/lodash/_baseGetTag.js","../../node_modules/lodash/_baseIsNative.js","../../node_modules/lodash/_baseSet.js","../../node_modules/lodash/_baseToString.js","../../node_modules/lodash/_castPath.js","../../node_modules/lodash/_coreJsData.js","../../node_modules/lodash/_defineProperty.js","../../node_modules/lodash/_freeGlobal.js","../../node_modules/lodash/_getMapData.js","../../node_modules/lodash/_getNative.js","../../node_modules/lodash/_getRawTag.js","../../node_modules/lodash/_getValue.js","../../node_modules/lodash/_hashClear.js","../../node_modules/lodash/_hashDelete.js","../../node_modules/lodash/_hashGet.js","../../node_modules/lodash/_hashHas.js","../../node_modules/lodash/_hashSet.js","../../node_modules/lodash/_isIndex.js","../../node_modules/lodash/_isKey.js","../../node_modules/lodash/_isKeyable.js","../../node_modules/lodash/_isMasked.js","../../node_modules/lodash/_listCacheClear.js","../../node_modules/lodash/_listCacheDelete.js","../../node_modules/lodash/_listCacheGet.js","../../node_modules/lodash/_listCacheHas.js","../../node_modules/lodash/_listCacheSet.js","../../node_modules/lodash/_mapCacheClear.js","../../node_modules/lodash/_mapCacheDelete.js","../../node_modules/lodash/_mapCacheGet.js","../../node_modules/lodash/_mapCacheHas.js","../../node_modules/lodash/_mapCacheSet.js","../../node_modules/lodash/_memoizeCapped.js","../../node_modules/lodash/_nativeCreate.js","../../node_modules/lodash/_objectToString.js","../../node_modules/lodash/_root.js","../../node_modules/lodash/_stringToPath.js","../../node_modules/lodash/_toKey.js","../../node_modules/lodash/_toSource.js","../../node_modules/lodash/eq.js","../../node_modules/lodash/get.js","../../node_modules/lodash/isArray.js","../../node_modules/lodash/isFunction.js","../../node_modules/lodash/isObject.js","../../node_modules/lodash/isObjectLike.js","../../node_modules/lodash/isSymbol.js","../../node_modules/lodash/memoize.js","../../node_modules/lodash/set.js","../../node_modules/lodash/toString.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_interopRequireDefault","_toConsumableArray2","_typeof2","_chart","_chartjsPluginDatalabels","_get","_set","default","register","window","Tangible","Chart","$","jQuery","fn","tangibleChart","config","arguments","undefined","$el","this","each","el","tangibleChartLoaded","optionsFromElement","data","Array","isArray","Object","assign","canvas","find","document","createElement","append","context","getContext","datasets","$data","type","_config$data","labels","options","tickValues","tooltipValues","styleOptionNames","forEach","index","key","borderWidth","chartOptions","indexAxis","axis","x_title","y_title","axes_path","axes_data","tick_values","set_max_value","max","$max_value","Math","apply","min_value","max_value","min_percent","max_percent","show_in","text_before","text_after","show_in_percent","before","after","min","min_p","max_p","is_number","percent_data","idx","Number","isNaN","parseFloat","round","callback","value","_callback","tooltip_values","_max_value","show","show_label","custom_label","custom_label_text","if_show_label","_max","tooltip_enabled","callbacks","label_cb","label","dataset","parsed","_data","dataIndex","_label_cb","afterBody_cb","after_body","_data2","afterBody","_label_cb2","datalabels","pl","vl","_max2","pf","_data3","vf","labels_data","formatter","label_name","backgroundColor","borderColor","borderRadius","color","font","padding","align","anchor","offset","console","log","chart","@babel/runtime/helpers/interopRequireDefault","@babel/runtime/helpers/toConsumableArray","@babel/runtime/helpers/typeof","chart.js","chartjs-plugin-datalabels","lodash/get","lodash/set","2","arr","len","arr2","__esModule","3","arrayLikeToArray","./arrayLikeToArray.js","4","obj","5","iter","Symbol","iterator","from","6","TypeError","7","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","./arrayWithoutHoles.js","./iterableToArray.js","./nonIterableSpread.js","./unsupportedIterableToArray.js","8","_typeof","constructor","prototype","9","minLen","toString","slice","name","test","10","global","factory","define","amd","globalThis","self","requestAnimFrame","requestAnimationFrame","throttled","thisArg","updateFn","updateArgs","args","ticking","rest","debounce","delay","timeout","clearTimeout","setTimeout","_toLeftRightCenter","_alignStartEnd","start","end","_textX","left","right","rtl","animator","[object Object]","_request","_charts","Map","_running","_lastDate","anims","date","listeners","numSteps","duration","initial","currentStep","me","_update","_refresh","Date","now","remaining","running","items","item","draw","_active","_total","tick","pop","_notify","charts","get","complete","progress","set","event","cb","_getAnims","push","reduce","acc","cur","_duration","cancel","delete","map$1","0","A","B","C","D","E","F","b","d","hex","h1","h2","eq","hexString","v","g","isShort","lim","l","h","p2b","n2b","b2n","n2p","RGB_RE","HUE_RE","hsl2rgbn","s","k","hsv2rgbn","hwb2rgbn","w","rgb","rgb2hsl","calln","map","hsl2rgb","hue","hueParse","str","m","exec","p1","p2","hwb2rgb","hsv2rgb","map$1$1","x","Z","Y","X","W","V","U","T","S","R","Q","P","O","N","M","L","K","G","H","I","J","names","OiceXe","antiquewEte","aqua","aquamarRe","azuY","beige","bisque","black","blanKedOmond","Xe","XeviTet","bPwn","burlywood","caMtXe","KartYuse","KocTate","cSO","cSnflowerXe","cSnsilk","crimson","cyan","xXe","xcyan","xgTMnPd","xWay","xgYF","xgYy","xkhaki","xmagFta","xTivegYF","xSange","xScEd","xYd","xsOmon","xsHgYF","xUXe","xUWay","xUgYy","xQe","xviTet","dAppRk","dApskyXe","dimWay","dimgYy","dodgerXe","fiYbrick","flSOwEte","foYstWAn","fuKsia","gaRsbSo","ghostwEte","gTd","gTMnPd","Way","gYF","gYFLw","gYy","honeyMw","hotpRk","RdianYd","Rdigo","ivSy","khaki","lavFMr","lavFMrXsh","lawngYF","NmoncEffon","ZXe","ZcSO","Zcyan","ZgTMnPdLw","ZWay","ZgYF","ZgYy","ZpRk","ZsOmon","ZsHgYF","ZskyXe","ZUWay","ZUgYy","ZstAlXe","ZLw","lime","limegYF","lRF","magFta","maPon","VaquamarRe","VXe","VScEd","VpurpN","VsHgYF","VUXe","VsprRggYF","VQe","VviTetYd","midnightXe","mRtcYam","mistyPse","moccasR","navajowEte","navy","Tdlace","Tive","TivedBb","Sange","SangeYd","ScEd","pOegTMnPd","pOegYF","pOeQe","pOeviTetYd","papayawEp","pHKpuff","peru","pRk","plum","powMrXe","purpN","YbeccapurpN","Yd","Psybrown","PyOXe","saddNbPwn","sOmon","sandybPwn","sHgYF","sHshell","siFna","silver","skyXe","UXe","UWay","UgYy","snow","sprRggYF","stAlXe","tan","teO","tEstN","tomato","Qe","viTet","JHt","wEte","wEtesmoke","Lw","LwgYF","names$1","nameParse","unpacked","keys","tkeys","j","ok","nk","replace","parseInt","unpack","transparent","toLowerCase","modHSL","ratio","tmp","clone$1","proto","fromObject","input","functionParse","charAt","rgbParse","Color","ret","_rgb","_valid","valid","hslString","weight","c1","c2","w2","w1","val","deg","rotate","index_esm","isPatternOrGradient","CanvasGradient","CanvasPattern","getHoverColor","saturate","darken","noop","uid","id","isNullOrUndef","substr","isObject","isNumberFinite","isFinite","finiteOrDefault","defaultValue","valueOrDefault","toPercentage","dimension","endsWith","toDimension","loopable","reverse","_elementsEqual","a0","a1","ilen","v0","v1","datasetIndex","clone","source","target","create","klen","isValidKey","indexOf","_merger","tval","sval","merge","sources","merger","mergeIf","_mergerIf","hasOwnProperty","indexOfDotOrLength","resolveObjectKey","pos","_capitalize","toUpperCase","defined","isFunction","setsEqual","size","has","overrides","descriptors","getScope$1","node","split","root","scope","values","defaults","_descriptors","animation","devicePixelRatio","platform","getDevicePixelRatio","elements","events","family","style","lineHeight","hover","hoverBackgroundColor","ctx","hoverBorderColor","hoverColor","interaction","mode","intersect","maintainAspectRatio","onHover","onClick","parsing","plugins","responsive","scale","scales","showLine","describe","targetScope","targetName","scopeObject","targetScopeObject","privateName","defineProperties","writable","enumerable","local","_scriptable","startsWith","_indexable","_fallback","PI","TAU","PITAU","INFINITY","POSITIVE_INFINITY","RAD_PER_DEG","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","log10","sign","niceNum","range","roundedRange","almostEquals","niceRange","pow","floor","fraction","_factorize","result","sqrt","sort","isNumber","y","epsilon","abs","almostWhole","rounded","_setMinAndMaxByKey","array","property","toRadians","degrees","toDegrees","radians","_decimalPlaces","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","angle","atan2","distance","distanceBetweenPoints","pt1","pt2","_angleDiff","_normalizeAngle","_angleBetween","sameAngleIsFullCircle","angleToStart","angleToEnd","startToAngle","endToAngle","_limitValue","_int16Range","toFontString","_measureText","gc","longest","string","textWidth","measureText","width","_longestText","arrayOfThings","cache","garbageCollect","save","jlen","thing","nestedThing","restore","gcLen","splice","_alignPixel","pixel","currentDevicePixelRatio","halfWidth","clearCanvas","resetTransform","clearRect","height","drawPoint","xOffset","yOffset","cornerRadius","pointStyle","rotation","radius","rad","translate","drawImage","beginPath","arc","closePath","moveTo","sin","cos","lineTo","SQRT1_2","rect","fill","stroke","_isPointInArea","point","area","margin","top","bottom","clipArea","clip","unclipArea","_steppedLineTo","previous","flip","midpoint","_bezierCurveTo","bezierCurveTo","cp1x","cp2x","cp1y","cp2y","renderText","text","opts","lines","strokeWidth","strokeColor","line","translation","fillStyle","textAlign","textBaseline","setRenderOpts","strokeStyle","lineWidth","strokeText","maxWidth","fillText","decorateText","strikethrough","underline","metrics","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","yDecoration","decorationWidth","addRoundedRectPath","topLeft","bottomLeft","bottomRight","topRight","_lookup","table","cmp","mid","hi","lo","_lookupByKey","_rlookupByKey","_filterBetween","arrayEvents","listenArrayEvents","listener","_chartjs","defineProperty","configurable","method","base","res","object","unlistenArrayEvents","stub","_arrayUnique","Set","add","_isDomSupported","_getParentNode","domNode","parent","parentNode","host","parseMaxStyle","styleValue","parentProperty","valueInPixels","getComputedStyle","element","getStyle","getPropertyValue","positions","getPositionedStyle","styles","suffix","getRelativePosition$1","evt","borderBox","boxSizing","paddings","borders","box","native","touches","offsetX","offsetY","shadowRoot","useOffsetPos","getBoundingClientRect","clientX","clientY","getCanvasPosition","round1","getMaximumSize","bbWidth","bbHeight","aspectRatio","margins","maxHeight","containerSize","container","containerStyle","containerBorder","containerPadding","clientWidth","clientHeight","getContainerSize","retinaScale","forceRatio","forceStyle","pixelRatio","deviceHeight","deviceWidth","setTransform","supportsEventListenerOptions","passiveSupported","passive","addEventListener","removeEventListener","readUsedSize","matches","match","getRelativePosition","binarySearch","metaset","controller","_sorted","iScale","_cachedMeta","lookupMethod","_reversePixels","_sharedOptions","getRange","optimizedEvaluateItems","position","handler","metasets","getSortedVisibleDatasetMetas","skip","getIntersectItems","useFinalPosition","chartArea","_minPadding","inRange","getNearestItems","distanceMetric","useX","useY","deltaX","deltaY","getDistanceMetricForAxis","minDistance","center","getCenterPoint","getAxisItems","rangeMethod","intersectsItem","evaluateAllVisibleItems","Interaction","modes","meta","getDatasetMeta","nearest","LINE_HEIGHT","RegExp","FONT_STYLE","toLineHeight","_readValueToProps","props","objProps","read","prop","toTRBL","toTRBLCorners","toPadding","toFont","fallback","warn","resolve","inputs","info","cacheable","_addGrace","minmax","grace","STATIC_POSITIONS","filterByPosition","filter","filterDynamicPositionByAxis","sortByWeight","setLayoutDims","layouts","params","stacks","wrap","stack","stackWeight","includes","_stack","count","placed","buildStacks","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","factor","horizontal","availableWidth","availableHeight","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","same","other","getMargins","marginForPositions","fitBoxes","boxes","refitBoxes","refit","changed","update","setBoxDims","placeBoxes","userPadding","_layers","z","layoutItem","minPadding","layoutBoxes","isHorizontal","wrapBoxes","centerHorizontal","centerVertical","leftAndTop","concat","rightAndBottom","vertical","buildLayoutBoxes","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","total","display","freeze","updatePos","change","handleMaxPadding","_createResolver","scopes","prefixes","rootScopes","getTarget","_resolve","toStringTag","_cacheable","_scopes","_rootScopes","_getTarget","override","Proxy","deleteProperty","_keys","_cached","proxy","prefix","readKey","needsSubResolver","createSubResolver","_resolveWithPrefixes","getOwnPropertyDescriptor","Reflect","getPrototypeOf","getKeysFromAllScopes","ownKeys","_storage","_attachContext","subProxy","descriptorDefaults","_proxy","_context","_subProxy","setContext","receiver","isScriptable","join","_resolveScriptable","isIndexable","resolver","_resolveArray","_resolveWithContext","allKeys","scriptable","indexable","_allKeys","resolveFallback","getScope","addScopes","parentScopes","parentFallback","allScopes","addScopesFromKey","subGetTarget","resolveKeysFromAllScopes","EPSILON","getPoint","points","getValueAxis","splineCurve","firstPoint","middlePoint","afterPoint","current","next","d01","d12","s01","s12","fa","fb","splineCurveMonotone","valueAxis","pointsLen","deltaK","mK","pointBefore","pointCurrent","pointAfter","slopeDelta","alphaK","betaK","tauK","squaredMagnitude","monotoneAdjust","delta","iPixel","vPixel","monotoneCompute","capControlPoint","pt","_updateBezierControlPoints","loop","controlPoints","spanGaps","cubicInterpolationMode","prev","tension","capBezierPoints","inArea","inAreaPrev","inAreaNext","atEdge","elasticIn","elasticOut","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInBounce","easeOutBounce","easeInOutBounce","_pointInLine","_steppedInterpolation","_bezierInterpolation","cp1","cp2","intlCache","formatNumber","num","locale","cacheKey","JSON","stringify","Intl","NumberFormat","getNumberFormat","format","getRtlAdapter","rectX","xPlus","leftForLtr","itemWidth","getRightToLeftAdapter","_itemWidth","overrideTextDirection","direction","original","getPropertyPriority","setProperty","prevTextDirection","restoreTextDirection","propertyFn","between","compare","normalize","normalizeSegment","_boundSegment","segment","bounds","startBound","endBound","getSegment","prevValue","inside","subStart","shouldStart","shouldStop","_boundSegments","segments","sub","_computeSegments","segmentOptions","_loop","findStartAndEnd","splitByStyles","last","stop","solidSegments","_fullLoop","baseStyle","readStyle","prevStyle","p0","p0DataIndex","p1DataIndex","_datasetIndex","styleChanged","doSplitByStyles","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","helpers","__proto__","easingEffects","_deprecated","fontString","pixelSize","fontStyle","fontFamily","BasePlatform","BasicPlatform","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","eventListenerOptions","removeListener","createAttachObserver","observer","MutationObserver","entries","entry","addedNodes","added","observe","childList","subtree","createDetachObserver","removedNodes","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","resize","createResizeObserver","ResizeObserver","contentRect","listenDevicePixelRatioChanges","releaseObserver","disconnect","unlistenDevicePixelRatioChanges","createProxyAndListen","fromNativeEvent","addListener","DomPlatform","renderHeight","getAttribute","renderWidth","displayWidth","displayHeight","initCanvas","removeAttribute","setAttribute","proxies","$proxies","attach","detach","isConnected","_detectPlatform","OffscreenCanvas","platforms","interpolators","boolean","to","c0","mix","number","Animation","cfg","currentValue","_fn","_easing","easing","_start","_target","_prop","_from","_to","_promises","elapsed","remain","promises","Promise","rej","resolved","animationOptions","colors","properties","numbers","active","animations","visible","hide","Animations","_properties","configure","animatedProps","getOwnPropertyNames","option","newOptions","$shared","$animations","resolveTargetOptions","_createAnimations","anim","wait","all","awaitAll","then","_animateOptions","scaleClip","allowedOverflow","getSortedDatasetIndices","filterVisible","_getSortedDatasetMetas","applyStack","dsIndex","singleMode","otherValue","isStacked","stacked","getOrCreateStack","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","_stacks","iAxis","vAxis","indexScale","valueScale","getStackKey","_top","_bottom","getFirstScaleId","shift","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","DatasetController","_ctx","_cachedDataOpts","getMeta","_type","_parsing","_objectData","_drawStart","_drawCount","enableOptionSharing","$context","_syncList","initialize","linkScales","_stacked","addElements","getDataset","chooseId","xid","xAxisID","yid","yAxisID","rid","rAxisID","iid","iAxisID","vid","vAxisID","xScale","getScaleForId","yScale","rScale","scaleID","adata","convertObjectDataToArray","isExtensible","_dataCheck","datasetElementType","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","getOptionScopes","createResolver","sorted","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","getLabels","singleScale","parse","xAxisKey","yAxisKey","parsedValue","NaN","canStack","otherScale","_getOtherScale","NEGATIVE_INFINITY","otherMin","otherMax","minDefined","maxDefined","getUserBounds","_skip","updateRangeFromParsed","getParsed","getLabelForValue","_clip","disabled","toClip","defaultClip","getMaxOverflow","hidden","resolveDatasetElementOptions","resolveDataElementOptions","raw","createDataContext","createDatasetContext","_resolveElementOptions","dataElementType","elementType","sharing","datasetElementScopeKeys","resolveNamedOptions","transition","datasetAnimationScopeKeys","sharedOptions","_animationsDisabled","_resolveAnimations","getSharedOptions","_setStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","updateElements","removed","_sync","Element","getProps","final","defaultRoutes","formatters","tickValue","ticks","notation","maxTick","calculateDelta","logDelta","numDecimal","minimumFractionDigits","maximumFractionDigits","numeric","Ticks","autoSkip","tickOpts","ticksLimit","maxTicksLimit","tickLength","_tickSize","maxScale","_length","maxChart","_maxLength","determineMaxTicks","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","spacing","ceil","skipMajors","evenMajorSpacing","diff","getEvenSpacing","factors","calculateSpacing","avgMajorSpacing","majorStart","majorEnd","beginAtZero","grid","drawBorder","drawOnChartArea","drawTicks","tickWidth","tickColor","title","minRotation","maxRotation","mirror","textStrokeWidth","textStrokeColor","autoSkipPadding","labelOffset","minor","crossAlign","showLabelBackdrop","backdropColor","backdropPadding","route","offsetFromEdge","edge","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","_startPixel","_endPixel","lineValue","getPixelForTick","getTickMarkLength","getTitleHeight","titleAlign","reverseAlign","Scale","super","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_cache","_dataLimitsCached","suggestedMin","suggestedMax","metas","getMinMax","xLabels","yLabels","beforeUpdate","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","beforeFit","fit","afterFit","afterUpdate","startPixel","endPixel","reversePixels","_alignToPixels","alignToPixels","notifyPlugins","_callHooks","beforeTickToLabelConversion","afterTickToLabelConversion","numTicks","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","asin","minSize","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","generateTickLabels","_computeLabelSizes","caches","widths","heights","tickFont","nestedLabel","widestLabelSize","highestLabelSize","_resolveTickFontOptions","valueAt","getPixelForValue","decimal","getBaseValue","createTickContext","optionTicks","rot","ticksLength","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","positionAxisID","limit","step","optsAtIndex","lineColor","tickBorderDash","tickBorderDashOffset","tickAndPadding","hTickAndPadding","lineCount","textOffset","_getXAxisLabelAlignment","_getYAxisLabelAlignment","halfCount","backdrop","labelPadding","fillRect","findIndex","_computeGridLineItems","drawLine","setLineDash","lineDashOffset","lastLineWidth","_computeLabelArea","_computeLabelItems","titleX","titleY","titleArgs","drawBackground","drawGrid","drawTitle","drawLabels","tz","gz","axisID","fontSize","TypedRegistry","isPrototypeOf","parentScope","isIChartComponent","itemDefaults","routes","propertyParts","sourceName","sourceScope","parts","routeDefaults","registerDefaults","registry","controllers","_typedRegistries","_each","typedRegistry","arg","reg","_getRegistryForType","isForType","_exec","itemReg","component","camelMethod","PluginService","_init","hook","_createDescriptors","descriptor","plugin","cancelable","_oldCache","_notifyStateChanges","getPlugin","allPlugins","getOpts","pluginOpts","createDescriptors","previousDescriptors","some","pluginScopeKeys","getIndexAxis","datasetDefaults","determineAxis","scaleOptions","initOptions","chartDefaults","configScales","chartIndexAxis","firstIDs","scaleConf","defaultId","getDefaultScaleIDFromAxis","defaultScaleOptions","defaultID","getAxisFromDefaultScaleID","mergeScaleConfig","initData","keyCache","keysCached","cachedKeys","generate","addIfFound","Config","_config","initConfig","_scopeCache","_resolverCache","clearCache","clear","datasetType","additionalOptionScopes","mainScope","resetCache","keyLists","_cachedScopes","subPrefixes","getResolver","needContext","resolverCache","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","userConfig","initialCanvas","existingChart","chartOptionScopes","acquireContext","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","resizeDelay","listen","_initialize","error","bindEvents","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","axisOptions","scaleOpts","updated","isRadial","dposition","dtype","scaleType","getScale","init","hasUpdated","addBox","_destroyDatasetMeta","_dataset","newControllers","_removeUnreferencedMetasets","order","isDatasetVisible","updateIndex","ControllerClass","getController","getElement","_updateMetasets","reset","_resetElements","removeBox","animsDisabled","ensureScalesHaveIDs","buildOrUpdateScales","existingEvents","newEvents","unbindEvents","invalidate","buildOrUpdateControllers","buildOrUpdateElements","_updateLayout","_updateDatasets","_eventHandler","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","setDatasetVisibility","_updateVisibility","_destroy","remove","releaseContext","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","isAttached","activeElements","lastActive","_updateHoverStyles","notify","replay","hoverOptions","deactivated","activated","updateHoverStyle","eventFilter","_handleEvent","lastEvent","getElementsAtEventForMode","invalidatePlugins","abstract","version","unregister","DateAdapter","timestamp","amount","unit","weekday","members","_adapters","_date","computeMinSampleSize","$bar","getAllParsedValues","getAllScaleValues","curr","updateMinAndPrev","parseValue","startValue","endValue","barStart","barEnd","_custom","parseFloatBar","parseArrayOrPrimitive","isFloatBar","custom","setBorderSkipped","borderSkipped","borderProps","enableBorderRadius","parseEdge","orig","v2","startEnd","BarController","iAxisKey","vAxisKey","bars","getBasePixel","ruler","_getRuler","firstOpts","includeOptions","updateSharedOptions","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","updateElement","grouped","_getStacks","pixels","barThickness","stackCount","_getStackCount","categoryPercentage","barPercentage","baseValue","minBarLength","actualBase","floating","getDataVisibility","barSign","halfGrid","getLineWidthForValue","skipNull","maxBarThickness","Infinity","percent","chunk","computeFlexCategoryTraits","thickness","computeFitCategoryTraits","stackIndex","_getStackIndex","rects","_index_","_value_","BubbleController","getPixelForDecimal","tooltip","DoughnutController","innerRadius","outerRadius","circumference","_getRotation","_getCircumference","arcs","getMaxBorderWidth","getMaxOffset","maxSize","cutout","chartWeight","_getRingWeight","_getRotationExtents","ratioX","ratioY","startAngle","endAngle","startX","startY","endX","endY","calcMax","calcMin","maxX","maxY","minX","minY","getRatioAndOffset","maxRadius","radiusLength","_getVisibleDatasetWeightTotal","calculateTotal","_getRingWeightOffset","animateRotate","calculateCircumference","animationOpts","centerX","centerY","animateScale","_circumference","metaData","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","legend","legendItem","toggleDataVisibility","tooltipItem","dataLabel","formattedValue","LineController","animationsDisabled","pointCount","getStartAndCountOfVisiblePoints","_scaleRanges","newRanges","xmin","xmax","ymin","ymax","scaleRangesChanged","_decimated","animated","maxGapLength","directUpdate","prevParsed","nullData","border","lastPoint","updateControlPoints","PolarAreaController","_updateRadius","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","angleLines","circular","pointLabels","PieController","RadarController","pointPosition","getPointPositionForValue","ScatterController","clipArc","pixelMargin","angleMargin","parseBorderRadius$1","angleDelta","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","avNogSpacingRadius","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","pCenter","p4","p8","inner","lineJoin","fullCircles","drawFullCircleBorders","ArcElement","chartX","chartY","rAdjust","halfAngle","halfRadius","radiusOffset","drawArc","setStyle","lineCap","pathVars","paramsStart","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","lineMethod","stepped","getLineMethod","fastPathSegment","prevX","lastY","avgX","countX","pointIndex","drawX","truncX","_getSegmentMethod","usePath2D","Path2D","path","_path","strokePathWithCache","segmentMethod","strokePathDirect","LineElement","_points","_segments","_pointsUpdated","_interpolate","_getInterpolationMethod","interpolated","inRange$1","hitRadius","PointElement","mouseX","mouseY","hoverRadius","getBarBounds","bar","half","skipOrLimit","boundingRects","maxW","maxH","parseBorderWidth","maxR","enableBorder","parseBorderRadius","outer","skipX","skipY","addNormalRectPath","inflateRect","refRect","BarElement","addRectPath","inflateAmount","cleanDecimatedDataset","cleanDecimatedData","plugin_decimation","algorithm","beforeElementsUpdate","xAxis","getStartAndCountOfVisiblePointsSimplified","threshold","decimated","samples","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","pointAx","pointAy","lttbDecimation","minIndex","maxIndex","startIndex","xMin","dx","lastIndex","intermediateIndex1","intermediateIndex2","minMaxDecimation","decodeFill","fillOption","parseFillOption","simpleArc","computeBoundary","computeCircularBoundary","computeLinearBoundary","findSegmentEnd","buildStackLine","sourcePoints","linesBelow","below","isLineAndNotInHideAnimation","unshift","getLinesBelow","createBoundaryLine","addPointsBelow","sourcePoint","postponed","findPoint","interpolate","pointValue","linePoints","firstValue","lastValue","boundary","pointsFromSegments","resolveTarget","propagate","visited","clipY","getBounds","_getEdge","clipBounds","interpolatedLineTo","interpolatedPoint","_fill","tpoints","targetSegments","tgt","subBounds","fillSources","fillSource","src","notShape","lineLoop","targetLoop","drawfill","getLineByIndex","lineOpts","above","doFill","plugin_filler","_args","$filler","drawTime","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","itemHeight","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","generateLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","heightLimit","totalWidth","currentColWidth","currentColHeight","col","rtlHelper","hitbox","_draw","defaultColor","fontColor","halfFontSize","cursor","textDirection","setWidth","lineDash","drawOptions","SQRT2","yBoxTop","xBoxLeft","drawLegendBox","titleFont","titlePadding","topPaddingPlusHalfFontSize","hitBox","lh","onLeave","isListened","hoveredItem","_getLegendItemAt","sameItem","plugin_legend","_element","adjustHitBoxes","handleEvent","ci","Title","_padding","textSize","fontOpts","_drawArgs","plugin_title","titleBlock","createTitle","WeakMap","plugin_subtitle","positioners","hasValue","tooltipPosition","eventPosition","nearestElement","tp","pushOrConcat","toPush","splitNewlines","String","createTooltipItem","getLabelAndValue","getTooltipSize","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","beforeBody","titleSpacing","titleMarginBottom","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineXAlign","yAlign","chartWidth","xAlign","caret","caretSize","caretPadding","doesNotFitWithAlign","determineAlignment","determineYAlign","getBackgroundPoint","alignment","paddingAndSize","radiusAndPadding","alignX","alignY","getAlignedX","getBeforeAfterBodyLines","overrideCallbacks","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","tooltipItems","beforeTitle","afterTitle","bodyItems","scoped","beforeLabel","afterLabel","beforeFooter","afterFooter","itemSort","labelColor","labelPointStyle","labelTextColor","_createItems","getTitle","getBeforeBody","getBody","getAfterBody","getFooter","positionAndSize","backgroundPoint","external","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","titleColor","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","bodyAlign","bodyLineHeight","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","bodyColor","_drawColorBox","footerAlign","footerColor","tooltipSize","drawCaret","quadraticCurveTo","animX","animY","_updateAnimationTarget","hasTooltipContent","globalAlpha","drawBody","drawFooter","positionChanged","_positionChanged","plugin_tooltip","labelCount","Decimation","Filler","SubTitle","findOrAddLabel","addIfString","lastIndexOf","CategoryScale","_startValue","_valueRange","getDecimalForPixel","relativeLabelSize","minSpacing","LinearScaleBase","_endValue","setMin","setMax","minSign","maxSign","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","maxTicks","stepSize","computeTickLimit","getTickLimit","generationOptions","dataRange","precision","maxDigits","includeBounds","maxSpaces","rmin","rmax","countDefined","niceMin","niceMax","numSpaces","decimalPlaces","generateTicks$1","_maxDigits","LinearScale","handleTickRangeOptions","isMajor","tickVal","LogarithmicScale","_zero","exp","endExp","endSignificand","significand","lastTick","generateTicks","getTickBackdropHeight","determineLimits","fitWithPointLabels","furthestLimits","furthestAngles","valueCount","getPointLabelContext","getPointPosition","drawingArea","plFont","_pointLabels","hLimits","vLimits","_setReductions","_pointLabelItems","tickBackdropHeight","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","buildPointLabelItems","pathRadiusLine","numberOrZero","param","logarithmic","RadialLinearScale","setCenterPoint","largestPossibleRadius","radiusReductionLeft","radiusReductionRight","radiusReductionTop","radiusReductionBottom","leftMovement","rightMovement","topMovement","bottomMovement","maxRight","maxLeft","maxTop","maxBottom","scalingFactor","scaledDistance","pointLabel","createPointLabelContext","distanceFromCenter","drawPointLabels","gridLineOpts","drawRadiusLine","animate","angleLines.color","pointLabels.color","ticks.color","INTERVALS","millisecond","common","steps","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","adapter","_adapter","parser","isoWeekday","_parseOpts","startOf","determineUnitForAutoTicks","minUnit","capacity","interval","addTick","time","timestamps","ticksFromTimestamps","majorUnit","setMajorTicks","TimeScale","_unit","_majorUnit","_offsets","_normalized","adapters","displayFormats","formats","normalized","_applyBounds","_getLabelBounds","endOf","getLabelTimestamps","timeOpts","_generate","_getLabelCapacity","determineUnitForFormatting","determineMajorUnit","initOffsets","getDecimalForValue","hasWeekday","getDataTimestamps","tooltipFormat","datetime","minorFormat","majorFormat","_tickFormatFunction","offsets","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","_getLabelSize","prevSource","nextSource","prevTarget","nextTarget","span","TimeSeriesScale","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","11","..","12","ChartDataLabels","chart_js","screen","deviceXDPI","logicalXDPI","utils","updates","orient","origin","x0","y0","dy","ln","region","compute$1","clamp","r0","r1","clipped","vx","vy","aligned","rx","ry","sx","sy","rasterize","getScaleOrigin","drawFrame","model","bgColor","drawRoundedRect","drawTextLine","shadow","shadowBlur","stroked","filled","Label","_index","_model","_rects","_el","_modelize","positioner","textShadowBlur","textShadowColor","th","tw","tx","ty","frame","geometry","textGeometry","shadowColor","drawText","MIN_INTEGER","MAX_INTEGER","rotated","cx","cy","projected","dp","toAxis","HitBox","_rotation","_rect","coordinates","vs","contains","intersects","pr0","pr1","axes","prepare","$layout","_box","_hidable","_visible","sa","sb","state","dirty","collider","s0","s1","collide","h0","compute","lookup","DEFAULT_KEY","dispatchEvent","groups","$groups","_key","_dirty","handleMoveEvents","expando","enter","leave","_labels","_hovered","dispatchMoveEvents","beforeInit","_actives","_listened","_datasets","afterDatasetUpdate","configs","afterDatasetsDraw","beforeEvent","handlers","click","handleClickEvents","afterEvent","actives","getActiveElements","chart.js/helpers","13","hashClear","hashDelete","hashGet","hashHas","hashSet","Hash","./_hashClear","./_hashDelete","./_hashGet","./_hashHas","./_hashSet","14","listCacheClear","listCacheDelete","listCacheGet","listCacheHas","listCacheSet","ListCache","./_listCacheClear","./_listCacheDelete","./_listCacheGet","./_listCacheHas","./_listCacheSet","15","getNative","./_getNative","./_root","16","mapCacheClear","mapCacheDelete","mapCacheGet","mapCacheHas","mapCacheSet","MapCache","./_mapCacheClear","./_mapCacheDelete","./_mapCacheGet","./_mapCacheHas","./_mapCacheSet","17","18","iteratee","19","baseAssignValue","objValue","./_baseAssignValue","./eq","20","21","./_defineProperty","22","castPath","toKey","./_castPath","./_toKey","23","getRawTag","objectToString","symToStringTag","./_Symbol","./_getRawTag","./_objectToString","24","isMasked","toSource","reIsHostCtor","funcProto","Function","objectProto","funcToString","reIsNative","./_isMasked","./_toSource","./isFunction","./isObject","25","assignValue","isIndex","customizer","nested","newValue","./_assignValue","./_isIndex","26","arrayMap","isSymbol","symbolProto","symbolToString","baseToString","./_arrayMap","./isArray","./isSymbol","27","isKey","stringToPath","./_isKey","./_stringToPath","./toString","28","coreJsData","29","func","30","freeGlobal","31","isKeyable","__data__","./_isKeyable","32","baseIsNative","getValue","./_baseIsNative","./_getValue","33","nativeObjectToString","isOwn","tag","unmasked","34","35","nativeCreate","./_nativeCreate","36","37","38","39","40","reIsUint","41","reIsDeepProp","reIsPlainProp","42","43","maskSrcKey","IE_PROTO","./_coreJsData","44","45","assocIndexOf","./_assocIndexOf","46","47","48","49","hash","./_Hash","./_ListCache","./_Map","50","getMapData","./_getMapData","51","52","53","54","memoize","./memoize","55","56","57","freeSelf","./_freeGlobal","58","memoizeCapped","rePropName","reEscapeChar","charCodeAt","quote","subString","./_memoizeCapped","59","60","61","62","baseGet","./_baseGet","63","64","baseGetTag","./_baseGetTag","65","66","67","isObjectLike","./isObjectLike","68","memoized","Cache","./_MapCache","69","baseSet","./_baseSet","70","./_baseToString"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,SAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,KAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,GCCA,aAEA,IAAIK,EAAyBX,EAAQ,gDAEjCY,EAAsBD,EAAuBX,EAAQ,6CAErDa,EAAWF,EAAuBX,EAAQ,kCCP9Cc,EAAAH,EAAAX,EAAA,aACAe,EAAAJ,EAAAX,EAAA,8BAIAgB,EAAAL,EAAAX,EAAA,eACAiB,EAAAN,EAAAX,EAAA,eAHAc,EAAAI,QAAMC,SAASJ,EAAAG,SAKfE,OAAOC,SAAWD,OAAOC,UAAY,GACrCD,OAAOC,SAASC,MAAQR,EAAAI,QAExB,IAAMK,EAAIH,OAAOI,OAEjBD,EAAEE,GAAGC,cAAgB,WAAuB,IAAbC,EAAaC,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAJ,GAEhCE,EAAMC,KAEZ,GAAmB,IAAfD,EAAItB,OACN,OAAOsB,EAGT,GAAIA,EAAItB,OAAS,EAIf,OAHAsB,EAAIE,MAAK,WACPT,EAAEQ,MAAML,cAAcC,MAEjBG,EAGT,IAAMG,EAAKH,EAAI,GAEf,IAAIG,EAAGC,oBAAP,CACAD,EAAGC,qBAAsB,EAIzB,IAAMC,EAAqBL,EAAIM,KAAK,gCAEhCD,GAAkD,YAA5B,EAAAtB,EAAAK,SAAOiB,KAAkCE,MAAMC,QAAQH,IAE/EI,OAAOC,OAAOb,EAAQQ,GAKxB,IAAIM,EAASX,EAAIY,KAAK,UAAU,GAE3BD,IACHA,EAASE,SAASC,cAAc,UAChCd,EAAIe,OAAOJ,IAGb,IAAMK,EAAUL,EAAOM,WAAW,MAMlC,IAAOpB,EAAOS,KAAKY,SAASxC,OAAS,CAEnC,IAAMyC,EAAQnB,EAAIY,KAAK,+CACvB,GAAIO,EAAMzC,OAAQ,CAChB,IAAM4B,EAAOa,EAAMb,KAAK,gCACN,YAAd,EAAAvB,EAAAK,SAAOkB,IACTG,OAAOC,OAAOb,EAAOS,KAAMA,IAUjC,IACEc,EAQEvB,EARFuB,KADFC,EASIxB,EAPFS,KACEgB,EAHJD,EAGIC,OACAJ,EAJJG,EAIIH,SAEFK,EAGE1B,EAHF0B,QACAC,EAEE3B,EAFF2B,WACAC,EACE5B,EADF4B,cAGIC,EAAmB,CACvB,OAAQ,kBAAmB,cAAe,eAG5CR,EAASS,SAAQ,SAACrB,EAAMsB,GAEtBF,EAAiBC,SAAQ,SAACE,GACxBvB,EAAKuB,GAAOvB,EAAKuB,IAAQhC,EAAOgC,MAG7BvB,EAAKwB,cAAaxB,EAAKwB,YAAc,GAG/B,QAAPV,GACD,CAAC,kBAAmB,eAAeO,SAAQ,SAACE,GACvChC,EAAOgC,IAAQhC,EAAOgC,GAAKD,KAC7BtB,EAAKuB,GAAOhC,EAAOgC,GAAKD,UAMhC,IAAMG,EAAe,CACnBX,KAAAA,EACAd,KAAM,CACJgB,OAAAA,EACAJ,SAAAA,GAEFK,QAAAA,EACAC,WAAAA,EACAC,cAAAA,GAKIO,GAAY,EAAA9C,EAAAE,SAAI2C,EAAc,qBAC9BE,EAAqB,MAAdD,EAAoB,IAAM,IAGvC,GAAiB,MAAdA,EAAkB,CACnB,IAAME,GAAU,EAAAhD,EAAAE,SAAI2C,EAAc,0BAC5BI,GAAU,EAAAjD,EAAAE,SAAI2C,EAAc,2BAElC,EAAA5C,EAAAC,SAAI2C,EAAc,yBAA0BI,IAC5C,EAAAhD,EAAAC,SAAI2C,EAAc,yBAA0BG,GAI9C,IAAIE,EAA0B,MAAdJ,EAAoB,mBAAqB,mBAIrDK,GAAY,EAAAnD,EAAAE,SAAI2C,EAAc,yBAI5BO,GAAc,EAAApD,EAAAE,SAAI2C,EAAc,cAIhCQ,EAAgB,WAAyB,IAAxBF,EAAwBvC,UAAApB,OAAA,QAAAqB,IAAAD,UAAA,GAAAA,UAAA,GAAZ,GAAI0C,EAAQ1C,UAAApB,OAAA,EAAAoB,UAAA,QAAAC,EAGvC0C,EAAazC,EAAIY,KAAK,+CAO5B,OANI6B,EAAW/D,SAAQ8D,EAAMC,EAAWnC,KAAK,6BAGxCkC,IACHA,EAAMH,EAAU3D,OAASgE,KAAKF,IAALG,MAAAD,MAAI,EAAA5D,EAAAM,SAAQiD,IAAa,GAE7CG,GAGT,GAAIF,GAAoC,YAArB,EAAAvD,EAAAK,SAAOkD,KAA2B/B,MAAMC,QAAQ8B,GAAc,CAE/E,IACEM,EAOEN,EAPFM,UACAC,EAMEP,EANFO,UACAC,EAKER,EALFQ,YACAC,EAIET,EAJFS,YACAC,EAGEV,EAHFU,QACAC,EAEEX,EAFFW,YACAC,EACEZ,EADFY,WAKIC,KAAmBH,GAAsB,WAAXA,GAI9BI,EAAUH,GAA6B,GACvCI,EAASH,GAA2B,GAIpCI,EAAQV,GAAa,EACrBW,EAAUT,GAAe,EAIzBN,EAAMD,EAAcF,EAAWQ,GAC/BW,EAAUT,GAAe,IAE/B,GAAGI,GAID,GAAId,EAAW,CACb,IAAIoB,GAAY,EACZC,EAAe,GAUnB,GATArB,EAAUV,SAAQ,SAACxB,EAAGwD,IACyB,IAAxCC,OAAOC,MAAMD,OAAOE,WAAW3D,IAIlCuD,EAAaC,GAAOjB,KAAKqB,MAAM5D,EAAGqC,EAAM,IAAM,KAAO,IAHrDiB,GAAY,KAOZA,EAAW,CAIb,IAAMO,EAAW,SAACC,GAChB,OAAOb,EAAS,IAAMa,EAAfb,KAAmCC,IAM5C,EAAAlE,EAAAC,SAAI2C,EAAc,wBAAyB2B,IAG3C,EAAAvE,EAAAC,SAAI2C,EAAcK,EAAW,OAAQmB,IACrC,EAAApE,EAAAC,SAAI2C,EAAcK,EAAW,OAAQoB,IAGrC,EAAArE,EAAAC,SAAI2C,EAAcK,EAAW,kBAAmB4B,UAI/C,IAAIb,IAAoBC,GAAUC,GAAQ,CAI/C,IAAMa,EAAW,SAACD,GAChB,OAAOb,EAAS,IAAMa,EAAU,IAAKZ,IAIvC,EAAAlE,EAAAC,SAAI2C,EAAcK,EAAW,OAAQkB,IACrC,EAAAnE,EAAAC,SAAI2C,EAAcK,EAAW,OAAQI,IAGrC,EAAArD,EAAAC,SAAI2C,EAAcK,EAAW,kBAAmB8B,IAMpD,IAAMC,GAAiB,EAAAjF,EAAAE,SAAI2C,EAAc,iBAEzC,GAAIoC,GAA0C,YAAxB,EAAApF,EAAAK,SAAO+E,KAA8B5D,MAAMC,QAAQ2D,GAAiB,CAExF,IACEC,EAKED,EALFtB,UACAwB,EAIEF,EAJFE,KACAC,EAGEH,EAHFG,WACAC,EAEEJ,EAFFI,aACAC,GACEL,EADFK,kBAKIC,IAAgC,IAAfH,QAAuBvE,IAAcuE,EAItDI,GAAMnC,EAAcF,EAAW+B,GAI/BO,IAAkB,EAAAzF,EAAAE,SAAI2C,EAAc,mCAE1C,IAAuB,IAApB4C,SAA4B5E,IAAc4E,GAAgB,CAE3D,IAAIC,GAAY,GAEhB,GAAY,YAATP,EAAmB,CAIpB,IAAMQ,GAAU,SAAC7D,GAEf,IAAI8D,EAAQ9D,EAAQ+D,QAAQD,OAAS,GASrC,IAPoB,IAAjBP,IAAuBO,EAASN,IAAwC,IAEvEM,IACFA,GAAS,MAIkB,OAAzB9D,EAAQgE,OAAO/C,GACjB,GAA0B,WAAvBK,EAAYU,QACb8B,GAAS9D,EAAQgE,OAAO/C,GAAQ,QAC5B,CACJ,IAAMgD,EAAM5C,EAAUrB,EAAQkE,WAE9BJ,GADgBpC,KAAKqB,MAAMkB,EAAKP,GAAM,IAAM,KAAO,IAChC,IAIvB,OAAOD,GAAgBK,EAAQ,IAGjCF,GAAUE,MAAQD,QAEb,GAAY,SAATR,EAAgB,CAIxB,IAAMc,GAAW,SAACnE,GAEhB,IAAMV,EAAM+B,EAAUrB,EAAQkE,WAC1BJ,EAAQ9D,EAAQ+D,QAAQD,OAAS,GAYrC,OAVoB,IAAjBP,IAAuBO,EAASN,IAAwC,IAEvEM,IACFA,GAAS,MAGkB,OAAzB9D,EAAQgE,OAAO/C,KACjB6C,GAASxE,GAGJmE,GAAgBK,EAAQ,IAK3BM,GAAe,SAACpE,GAEpB,IAAIqE,EAAa,GAGjB,GAAgC,OAA5BrE,EAAQ,GAAGgE,OAAO/C,GACpB,GAA0B,WAAvBK,EAAYU,QACbqC,GAAc,IAAIrE,EAAQ,GAAGgE,OAAO/C,GAAtB,SACV,CACJ,IAAMqD,EAAMjD,EAAUrB,EAAQ,GAAGkE,WAEjCG,GAAc,IADE3C,KAAKqB,MAAMuB,EAAKZ,GAAM,IAAM,KAAO,IACrC,KAIlB,OAAOD,GAAgBY,EAAa,IAGtCT,GAAUE,MAAQK,GAClBP,GAAUW,UAAYH,OAEjB,CAIL,IAAMI,GAAW,SAACxE,GAEhB,IAAMV,EAAO+B,EAAUrB,EAAQkE,WAC3BJ,EAAQ9D,EAAQ+D,QAAQD,OAAS,GAgBrC,OAdoB,IAAjBP,IAAuBO,EAASN,IAAwC,IAEvEM,IACFA,GAAS,MAGkB,OAAzB9D,EAAQgE,OAAO/C,KACS,WAAvBK,EAAYU,SAAgC,UAARqB,EACrCS,GAAQ9D,EAAQgE,OAAO/C,GAAM,IAE7B6C,GAASxE,GAINmE,GAAgBK,EAAQ,IAGjCF,GAAUE,MAAQU,IAGpB,EAAArG,EAAAC,SAAI2C,EAAc,oCAAoC6C,KAM1D,IAAMa,IAAa,EAAAvG,EAAAE,SAAI2C,EAAc,8BAI/B2D,IAAK,EAAAxG,EAAAE,SAAIqG,GAAY,iBAIrBE,IAAK,EAAAzG,EAAAE,SAAIqG,GAAY,eAE3B,IAAkC,KAA/B,EAAAvG,EAAAE,SAAIqG,GAAY,iBAAwB1F,KAAc,EAAAb,EAAAE,SAAIqG,GAAY,WAAY,CAInF,IAAMG,GAAMrD,EAAcF,EAAW,GAE/BwD,GAAK,SAAC5B,EAAOjD,GACjB,GAA0B,WAAvBsB,EAAYU,QACb,OAAOiB,EAAQ,IAEf,IAAM6B,EAAMzD,EAAUrB,EAAQkE,WAE9B,OADgBxC,KAAKqB,MAAM+B,EAAKF,GAAM,IAAM,KAAO,IAClC,KAIfG,GAAK,SAAC9B,EAAOjD,GACjB,MAA0B,WAAvBsB,EAAYU,QACNX,EAAUrB,EAAQkE,WAElBjB,GAIP+B,GAAc,CAACN,GAAGC,IAEtBK,GAAYrE,SAAQ,SAACrB,EAAMsB,GAEzB,IAAIqE,EAAY3F,IAASoF,GAAKG,GAAKE,GAC/BG,EAAa5F,IAASoF,GAAK,UAAY,QAEvCZ,EAAM,CACRqB,iBAAmB,EAAAjH,EAAAE,SAAIkB,EAAM,oBAAqB,EAAApB,EAAAE,SAAIkB,EAAM,mBAAqB,gBACjF8F,aAAe,EAAAlH,EAAAE,SAAIkB,EAAM,gBAAiB,EAAApB,EAAAE,SAAIkB,EAAM,eAAiB,gBACrE+F,cAAgB,EAAAnH,EAAAE,SAAIkB,EAAM,iBAAkB,EAAApB,EAAAE,SAAIkB,EAAM,gBAAkB,IACxEwB,aAAe,EAAA5C,EAAAE,SAAIkB,EAAM,gBAAiB,EAAApB,EAAAE,SAAIkB,EAAM,eAAiB,IACrEgG,OAAS,EAAApH,EAAAE,SAAIkB,EAAM,UAAW,EAAApB,EAAAE,SAAIkB,EAAM,SAAW,GACnDiG,MAAQ,EAAArH,EAAAE,SAAIkB,EAAM,SAAU,EAAApB,EAAAE,SAAIkB,EAAM,QAAU,GAChDkG,SAAW,EAAAtH,EAAAE,SAAIkB,EAAM,YAAa,EAAApB,EAAAE,SAAIkB,EAAM,WAAa,GACzDmG,OAAS,EAAAvH,EAAAE,SAAIkB,EAAM,UAAW,EAAApB,EAAAE,SAAIkB,EAAM,SAAYA,IAASoF,GAAK,MAAO,QACzEgB,QAAU,EAAAxH,EAAAE,SAAIkB,EAAM,WAAY,EAAApB,EAAAE,SAAIkB,EAAM,UAAaA,IAASoF,GAAK,QAAS,MAC9EiB,QAAU,EAAAzH,EAAAE,SAAIkB,EAAM,WAAY,EAAApB,EAAAE,SAAIkB,EAAM,UAAaA,IAASoF,GAAK,IAAM,IAC3EO,UAAaA,IAGmB,KAA/B,EAAA/G,EAAAE,SAAIkB,EAAM,uBAA6BP,KAAa,EAAAb,EAAAE,SAAIkB,EAAM,mBAC/D,EAAAnB,EAAAC,SAAI2C,EAAc,qCAAqCmE,EAAYpB,WAIvE,EAAA3F,EAAAC,SAAI2C,EAAc,sCAAsC,GAK1D6E,QAAQC,IAAI,iBAAkB9E,GAE9B,IAAM+E,GAAQ,IAAI9H,EAAAI,QAAM4B,EAASe,GAKjC,OAFA/B,EAAIM,KAAK,QAASwG,IAEXA,KAGTrH,EAAE,mBAAmBG,iBD/EnB,CAACmH,+CAA+C,EAAEC,2CAA2C,EAAEC,gCAAgC,EAAEC,WAAW,GAAGC,4BAA4B,GAAGC,aAAa,GAAGC,aAAa,KAAKC,EAAE,CAAC,SAASpJ,EAAQU,EAAOJ,GEjX7OI,EAAAJ,QAVA,SAAA+I,EAAAC,IACA,MAAAA,GAAAA,EAAAD,EAAA7I,UAAA8I,EAAAD,EAAA7I,QAEA,IAAA,IAAAX,EAAA,EAAA0J,EAAA,IAAAlH,MAAAiH,GAAAzJ,EAAAyJ,EAAAzJ,IACA0J,EAAA1J,GAAAwJ,EAAAxJ,GAGA,OAAA0J,GAIA7I,EAAAJ,QAAA,QAAAI,EAAAJ,QAAAI,EAAAJ,QAAAkJ,YAAA,GF6XE,IAAIC,EAAE,CAAC,SAASzJ,EAAQU,EAAOJ,GGxYjC,IAAAoJ,EAAA1J,EAAA,yBAMAU,EAAAJ,QAJA,SAAA+I,GACA,GAAAhH,MAAAC,QAAA+G,GAAA,OAAAK,EAAAL,IAIA3I,EAAAJ,QAAA,QAAAI,EAAAJ,QAAAI,EAAAJ,QAAAkJ,YAAA,GH0YE,CAACG,wBAAwB,IAAIC,EAAE,CAAC,SAAS5J,EAAQU,EAAOJ,GI3Y1DI,EAAAJ,QANA,SAAAuJ,GACA,OAAAA,GAAAA,EAAAL,WAAAK,EAAA,CACA3I,QAAA2I,IAKAnJ,EAAAJ,QAAA,QAAAI,EAAAJ,QAAAI,EAAAJ,QAAAkJ,YAAA,GJmZE,IAAIM,EAAE,CAAC,SAAS9J,EAAQU,EAAOJ,GKtZjCI,EAAAJ,QAJA,SAAAyJ,GACA,GAAA,oBAAAC,QAAA,MAAAD,EAAAC,OAAAC,WAAA,MAAAF,EAAA,cAAA,OAAA1H,MAAA6H,KAAAH,IAIArJ,EAAAJ,QAAA,QAAAI,EAAAJ,QAAAI,EAAAJ,QAAAkJ,YAAA,GL4ZE,IAAIW,EAAE,CAAC,SAASnK,EAAQU,EAAOJ,GM7ZjCI,EAAAJ,QAJA,WACA,MAAA,IAAA8J,UAAA,yIAIA1J,EAAAJ,QAAA,QAAAI,EAAAJ,QAAAI,EAAAJ,QAAAkJ,YAAA,GNmaE,IAAIa,EAAE,CAAC,SAASrK,EAAQU,EAAOJ,GOxajC,IAAAgK,EAAAtK,EAAA,0BAEAuK,EAAAvK,EAAA,wBAEAwK,EAAAxK,EAAA,mCAEAyK,EAAAzK,EAAA,0BAMAU,EAAAJ,QAJA,SAAA+I,GACA,OAAAiB,EAAAjB,IAAAkB,EAAAlB,IAAAmB,EAAAnB,IAAAoB,KAIA/J,EAAAJ,QAAA,QAAAI,EAAAJ,QAAAI,EAAAJ,QAAAkJ,YAAA,GP0aE,CAACkB,yBAAyB,EAAEC,uBAAuB,EAAEC,yBAAyB,EAAEC,kCAAkC,IAAIC,EAAE,CAAC,SAAS9K,EAAQU,EAAOJ,GQvbnJ,SAAAyK,EAAAlB,GAiBA,MAdA,mBAAAG,QAAA,iBAAAA,OAAAC,UACAvJ,EAAAJ,QAAAyK,EAAA,SAAAlB,GACA,cAAAA,GAGAnJ,EAAAJ,QAAA,QAAAI,EAAAJ,QAAAI,EAAAJ,QAAAkJ,YAAA,IAEA9I,EAAAJ,QAAAyK,EAAA,SAAAlB,GACA,OAAAA,GAAA,mBAAAG,QAAAH,EAAAmB,cAAAhB,QAAAH,IAAAG,OAAAiB,UAAA,gBAAApB,GAGAnJ,EAAAJ,QAAA,QAAAI,EAAAJ,QAAAI,EAAAJ,QAAAkJ,YAAA,GAGAuB,EAAAlB,GAGAnJ,EAAAJ,QAAAyK,EACArK,EAAAJ,QAAA,QAAAI,EAAAJ,QAAAI,EAAAJ,QAAAkJ,YAAA,GRybE,IAAI0B,EAAE,CAAC,SAASlL,EAAQU,EAAOJ,GS9cjC,IAAAoJ,EAAA1J,EAAA,yBAWAU,EAAAJ,QATA,SAAAV,EAAAuL,GACA,GAAAvL,EAAA,CACA,GAAA,iBAAAA,EAAA,OAAA8J,EAAA9J,EAAAuL,GACA,IAAAzL,EAAA6C,OAAA0I,UAAAG,SAAA7K,KAAAX,GAAAyL,MAAA,GAAA,GAEA,MADA,WAAA3L,GAAAE,EAAAoL,cAAAtL,EAAAE,EAAAoL,YAAAM,MACA,QAAA5L,GAAA,QAAAA,EAAA2C,MAAA6H,KAAAtK,GACA,cAAAF,GAAA,2CAAA6L,KAAA7L,GAAAgK,EAAA9J,EAAAuL,QAAA,IAIAzK,EAAAJ,QAAA,QAAAI,EAAAJ,QAAAI,EAAAJ,QAAAkJ,YAAA,GTgdE,CAACG,wBAAwB,IAAI6B,GAAG,CAAC,SAASxL,EAAQU,EAAOJ;;;;;;;CUtd3D,SAAAmL,EAAAC,GACA,iBAAApL,QAAA,IAAAI,EAAAA,EAAAJ,QAAAoL,IACA,mBAAAC,QAAAA,OAAAC,IAAAD,OAAAD,IACAD,EAAA,oBAAAI,WAAAA,WAAAJ,GAAAK,MAAAxK,MAAAoK,IAHA,CAIA3J,MAAA,WAAA,aAKA,MAAAgK,EACA,oBAAA3K,OACA,SAAA0E,GACA,OAAAA,KAGA1E,OAAA4K,sBAEA,SAAAC,EAAAxK,EAAAyK,EAAAC,GACA,MAAAC,EAAAD,GAAA,CAAAE,GAAAhK,MAAA4I,UAAAI,MAAA9K,KAAA8L,IACA,IAAAC,GAAA,EACAD,EAAA,GACA,OAAA,YAAAE,GACAF,EAAAD,EAAAG,GACAD,IACAA,GAAA,EACAP,EAAAxL,KAAAa,QAAA,KACAkL,GAAA,EACA7K,EAAAgD,MAAAyH,EAAAG,QAKA,SAAAG,EAAA/K,EAAAgL,GACA,IAAAC,EACA,OAAA,WAOA,OANAD,GACAE,aAAAD,GACAA,EAAAE,WAAAnL,EAAAgL,IAEAhL,IAEAgL,GAGA,MAAAI,EAAAtE,GAAA,UAAAA,EAAA,OAAA,QAAAA,EAAA,QAAA,SACAuE,EAAA,CAAAvE,EAAAwE,EAAAC,IAAA,UAAAzE,EAAAwE,EAAA,QAAAxE,EAAAyE,GAAAD,EAAAC,GAAA,EACAC,EAAA,CAAA1E,EAAA2E,EAAAC,EAAAC,IAEA7E,KADA6E,EAAA,OAAA,SACAD,EAAA,WAAA5E,GAAA2E,EAAAC,GAAA,EAAAD,EA4IA,IAAAG,EAAA,IAzIA,MACAC,cACAvL,KAAAwL,SAAA,KACAxL,KAAAyL,QAAA,IAAAC,IACA1L,KAAA2L,UAAA,EACA3L,KAAA4L,eAAA9L,EAEAyL,QAAA1E,EAAAgF,EAAAC,EAAA3K,GACA,MAAAwD,EAAAkH,EAAAE,UAAA5K,GACA6K,EAAAH,EAAAI,SACAtH,EAAAjD,SAAAhC,GAAAA,EAAA,CACAmH,MAAAA,EACAqF,QAAAL,EAAAK,QACAF,SAAAA,EACAG,YAAA1J,KAAAY,IAAAyI,EAAAD,EAAAb,MAAAgB,OAGAT,WACA,MAAAa,EAAApM,KACAoM,EAAAZ,WAGAY,EAAAT,UAAA,EACAS,EAAAZ,SAAAxB,EAAAxL,KAAAa,QAAA,KACA+M,EAAAC,UACAD,EAAAZ,SAAA,KACAY,EAAAT,UACAS,EAAAE,eAIAf,QAAAO,EAAAS,KAAAC,OACA,MAAAJ,EAAApM,KACA,IAAAyM,EAAA,EACAL,EAAAX,QAAA/J,SAAA,CAAAmK,EAAAhF,KACA,IAAAgF,EAAAa,UAAAb,EAAAc,MAAAlO,OACA,OAEA,MAAAkO,EAAAd,EAAAc,MACA,IAEAC,EAFA9O,EAAA6O,EAAAlO,OAAA,EACAoO,GAAA,EAEA,KAAA/O,GAAA,IAAAA,EACA8O,EAAAD,EAAA7O,GACA8O,EAAAE,SACAF,EAAAG,OAAAlB,EAAAI,WACAJ,EAAAI,SAAAW,EAAAG,QAEAH,EAAAI,KAAAlB,GACAe,GAAA,IAEAF,EAAA7O,GAAA6O,EAAAA,EAAAlO,OAAA,GACAkO,EAAAM,OAGAJ,IACAhG,EAAAgG,OACAT,EAAAc,QAAArG,EAAAgF,EAAAC,EAAA,aAEAa,EAAAlO,SACAoN,EAAAa,SAAA,EACAN,EAAAc,QAAArG,EAAAgF,EAAAC,EAAA,YACAD,EAAAK,SAAA,GAEAO,GAAAE,EAAAlO,UAEA2N,EAAAR,UAAAE,EACA,IAAAW,IACAL,EAAAT,UAAA,GAGAJ,UAAA1E,GACA,MAAAsG,EAAAnN,KAAAyL,QACA,IAAAI,EAAAsB,EAAAC,IAAAvG,GAaA,OAZAgF,IACAA,EAAA,CACAa,SAAA,EACAR,SAAA,EACAS,MAAA,GACAZ,UAAA,CACAsB,SAAA,GACAC,SAAA,KAGAH,EAAAI,IAAA1G,EAAAgF,IAEAA,EAEAN,OAAA1E,EAAA2G,EAAAC,GACAzN,KAAA0N,UAAA7G,GAAAkF,UAAAyB,GAAAG,KAAAF,GAEAlC,IAAA1E,EAAA8F,GACAA,GAAAA,EAAAlO,QAGAuB,KAAA0N,UAAA7G,GAAA8F,MAAAgB,QAAAhB,GAEApB,IAAA1E,GACA,OAAA7G,KAAA0N,UAAA7G,GAAA8F,MAAAlO,OAAA,EAEA8M,MAAA1E,GACA,MAAAgF,EAAA7L,KAAAyL,QAAA2B,IAAAvG,GACAgF,IAGAA,EAAAa,SAAA,EACAb,EAAAb,MAAAuB,KAAAC,MACAX,EAAAI,SAAAJ,EAAAc,MAAAiB,QAAA,CAAAC,EAAAC,IAAArL,KAAAF,IAAAsL,EAAAC,EAAAC,YAAA,GACA/N,KAAAsM,YAEAf,QAAA1E,GACA,IAAA7G,KAAA2L,SACA,OAAA,EAEA,MAAAE,EAAA7L,KAAAyL,QAAA2B,IAAAvG,GACA,SAAAgF,GAAAA,EAAAa,SAAAb,EAAAc,MAAAlO,QAKA8M,KAAA1E,GACA,MAAAgF,EAAA7L,KAAAyL,QAAA2B,IAAAvG,GACA,IAAAgF,IAAAA,EAAAc,MAAAlO,OACA,OAEA,MAAAkO,EAAAd,EAAAc,MACA,IAAA7O,EAAA6O,EAAAlO,OAAA,EACA,KAAAX,GAAA,IAAAA,EACA6O,EAAA7O,GAAAkQ,SAEAnC,EAAAc,MAAA,GACA3M,KAAAkN,QAAArG,EAAAgF,EAAAU,KAAAC,MAAA,YAEAjB,OAAA1E,GACA,OAAA7G,KAAAyL,QAAAwC,OAAApH;;;;;;GAWA,MAAAqH,EAAA,CAAAC,EAAA,EAAAzP,EAAA,EAAA2I,EAAA,EAAAK,EAAA,EAAAG,EAAA,EAAAE,EAAA,EAAAK,EAAA,EAAAE,EAAA,EAAAS,EAAA,EAAAI,EAAA,EAAAiF,EAAA,GAAAC,EAAA,GAAAC,EAAA,GAAAC,EAAA,GAAAC,EAAA,GAAAC,EAAA,GAAAtQ,EAAA,GAAAuQ,EAAA,GAAA1Q,EAAA,GAAA2Q,EAAA,GAAAjR,EAAA,GAAAK,EAAA,IACA6Q,EAAA,mBACAC,EAAAH,GAAAE,EAAA,GAAAF,GACAI,EAAAJ,GAAAE,GAAA,IAAAF,IAAA,GAAAE,EAAA,GAAAF,GACAK,EAAAL,IAAA,IAAAA,IAAA,IAAA,GAAAA,GA0BA,SAAAM,EAAAC,GACA,IAAAlR,EA1BA,SAAAkR,GACA,OAAAF,EAAAE,EAAAxR,IAAAsR,EAAAE,EAAAC,IAAAH,EAAAE,EAAAP,IAAAK,EAAAE,EAAA9Q,GAyBAgR,CAAAF,GAAAJ,EAAAC,EACA,OAAAG,EACA,IAAAlR,EAAAkR,EAAAxR,GAAAM,EAAAkR,EAAAC,GAAAnR,EAAAkR,EAAAP,IAAAO,EAAA9Q,EAAA,IAAAJ,EAAAkR,EAAA9Q,GAAA,IACA8Q,EAEA,SAAAnL,EAAAmL,GACA,OAAAA,EAAA,GAAA,EAEA,MAAAG,EAAA,CAAAH,EAAAI,EAAAC,IAAA7M,KAAAF,IAAAE,KAAAY,IAAA4L,EAAAK,GAAAD,GACA,SAAAE,EAAAN,GACA,OAAAG,EAAAtL,EAAA,KAAAmL,GAAA,EAAA,KAEA,SAAAO,EAAAP,GACA,OAAAG,EAAAtL,EAAA,IAAAmL,GAAA,EAAA,KAEA,SAAAQ,EAAAR,GACA,OAAAG,EAAAtL,EAAAmL,EAAA,MAAA,IAAA,EAAA,GAEA,SAAAS,EAAAT,GACA,OAAAG,EAAAtL,EAAA,IAAAmL,GAAA,EAAA,KAEA,MAAAU,EAAA,uGAgCA,MAAAC,EAAA,+GACA,SAAAC,EAAAP,EAAAQ,EAAAT,GACA,MAAAlR,EAAA2R,EAAArN,KAAAY,IAAAgM,EAAA,EAAAA,GACAtR,EAAA,CAAAJ,EAAAoS,GAAApS,EAAA2R,EAAA,IAAA,KAAAD,EAAAlR,EAAAsE,KAAAF,IAAAE,KAAAY,IAAA0M,EAAA,EAAA,EAAAA,EAAA,IAAA,GACA,MAAA,CAAAhS,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEA,SAAAiS,EAAAV,EAAAQ,EAAAb,GACA,MAAAlR,EAAA,CAAAJ,EAAAoS,GAAApS,EAAA2R,EAAA,IAAA,IAAAL,EAAAA,EAAAa,EAAArN,KAAAF,IAAAE,KAAAY,IAAA0M,EAAA,EAAAA,EAAA,GAAA,GACA,MAAA,CAAAhS,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAEA,SAAAkS,EAAAX,EAAAY,EAAAxB,GACA,MAAAyB,EAAAN,EAAAP,EAAA,EAAA,IACA,IAAAxR,EAMA,IALAoS,EAAAxB,EAAA,IACA5Q,EAAA,GAAAoS,EAAAxB,GACAwB,GAAApS,EACA4Q,GAAA5Q,GAEAA,EAAA,EAAAA,EAAA,EAAAA,IACAqS,EAAArS,IAAA,EAAAoS,EAAAxB,EACAyB,EAAArS,IAAAoS,EAEA,OAAAC,EAEA,SAAAC,EAAAnB,GACA,MACAxR,EAAAwR,EAAAxR,EADA,IAEAyR,EAAAD,EAAAC,EAFA,IAGAR,EAAAO,EAAAP,EAHA,IAIAnM,EAAAE,KAAAF,IAAA9E,EAAAyR,EAAAR,GACArL,EAAAZ,KAAAY,IAAA5F,EAAAyR,EAAAR,GACAW,GAAA9M,EAAAc,GAAA,EACA,IAAAiM,EAAAQ,EAAAnB,EAWA,OAVApM,IAAAc,IACAsL,EAAApM,EAAAc,EACAyM,EAAAT,EAAA,GAAAV,GAAA,EAAApM,EAAAc,GAAAsL,GAAApM,EAAAc,GACAiM,EAAA/M,IAAA9E,GACAyR,EAAAR,GAAAC,GAAAO,EAAAR,EAAA,EAAA,GACAnM,IAAA2M,GACAR,EAAAjR,GAAAkR,EAAA,GACAlR,EAAAyR,GAAAP,EAAA,EACAW,EAAA,GAAAA,EAAA,IAEA,CAAA,EAAAA,EAAAQ,GAAA,EAAAT,GAEA,SAAAgB,EAAAtS,EAAAI,EAAAuQ,EAAA1Q,GACA,OACAsC,MAAAC,QAAApC,GACAJ,EAAAI,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACAJ,EAAAI,EAAAuQ,EAAA1Q,IACAsS,IAAAd,GAEA,SAAAe,EAAAjB,EAAAQ,EAAAT,GACA,OAAAgB,EAAAR,EAAAP,EAAAQ,EAAAT,GAQA,SAAAmB,EAAAlB,GACA,OAAAA,EAAA,IAAA,KAAA,IAEA,SAAAmB,EAAAC,GACA,MAAAC,EAAAf,EAAAgB,KAAAF,GACA,IACAzB,EADA9Q,EAAA,IAEA,IAAAwS,EACA,OAEAA,EAAA,KAAA1B,IACA9Q,EAAAwS,EAAA,GAAApB,GAAAoB,EAAA,IAAAnB,GAAAmB,EAAA,KAEA,MAAArB,EAAAkB,GAAAG,EAAA,IACAE,GAAAF,EAAA,GAAA,IACAG,GAAAH,EAAA,GAAA,IAQA,OANA1B,EADA,QAAA0B,EAAA,GAtBA,SAAArB,EAAAY,EAAAxB,GACA,OAAA2B,EAAAJ,EAAAX,EAAAY,EAAAxB,GAsBAqC,CAAAzB,EAAAuB,EAAAC,GACA,QAAAH,EAAA,GArBA,SAAArB,EAAAQ,EAAAb,GACA,OAAAoB,EAAAL,EAAAV,EAAAQ,EAAAb,GAqBA+B,CAAA1B,EAAAuB,EAAAC,GAEAP,EAAAjB,EAAAuB,EAAAC,GAEA,CACArT,EAAAwR,EAAA,GACAC,EAAAD,EAAA,GACAP,EAAAO,EAAA,GACA9Q,EAAAA,GAuBA,MAAA8S,EAAA,CACAC,EAAA,OACAC,EAAA,QACAC,EAAA,KACAC,EAAA,MACAC,EAAA,KACAC,EAAA,SACAC,EAAA,QACApD,EAAA,KACAqD,EAAA,KACAC,EAAA,KACArD,EAAA,KACAC,EAAA,QACAC,EAAA,QACAoD,EAAA,KACAC,EAAA,WACApD,EAAA,KACAqD,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,KACAC,EAAA,QACAxD,EAAA,KACAyD,EAAA,KACAC,EAAA,OACAC,EAAA,KACAC,EAAA,QACAC,EAAA,MAEAC,EAAA,CACAC,OAAA,SACAC,YAAA,SACAC,KAAA,OACAC,UAAA,SACAC,KAAA,SACAC,MAAA,SACAC,OAAA,SACAC,MAAA,IACAC,aAAA,SACAC,GAAA,KACAC,QAAA,SACAC,KAAA,SACAC,UAAA,SACAC,OAAA,SACAC,SAAA,SACAC,QAAA,SACAC,IAAA,SACAC,YAAA,SACAC,QAAA,SACAC,QAAA,SACAC,KAAA,OACAC,IAAA,KACAC,MAAA,OACAC,QAAA,SACAC,KAAA,SACAC,KAAA,OACAC,KAAA,SACAC,OAAA,SACAC,QAAA,SACAC,SAAA,SACAC,OAAA,SACAC,MAAA,SACAC,IAAA,SACAC,OAAA,SACAC,OAAA,SACAC,KAAA,SACAC,MAAA,SACAC,MAAA,SACAC,IAAA,OACAC,OAAA,SACAC,OAAA,SACAC,SAAA,OACAC,OAAA,SACAC,OAAA,SACAC,SAAA,SACAC,SAAA,SACAC,SAAA,SACAC,SAAA,SACAC,OAAA,SACAC,QAAA,SACAC,UAAA,SACAC,IAAA,SACAC,OAAA,SACAC,IAAA,SACAC,IAAA,OACAC,MAAA,SACAC,IAAA,SACAC,QAAA,SACAC,OAAA,SACAC,QAAA,SACAC,MAAA,SACAC,KAAA,SACAC,MAAA,SACAC,OAAA,SACAC,UAAA,SACAC,QAAA,SACAC,WAAA,SACAC,IAAA,SACAC,KAAA,SACAC,MAAA,SACAC,UAAA,SACAC,KAAA,SACAC,KAAA,SACAC,KAAA,SACAC,KAAA,SACAC,OAAA,SACAC,OAAA,SACAC,OAAA,SACAC,MAAA,SACAC,MAAA,SACAC,QAAA,SACAC,IAAA,SACAC,KAAA,OACAC,QAAA,SACAC,IAAA,SACAC,OAAA,SACAC,MAAA,SACAC,WAAA,SACAC,IAAA,KACAC,MAAA,SACAC,OAAA,SACAC,OAAA,SACAC,KAAA,SACAC,UAAA,OACAC,IAAA,SACAC,SAAA,SACAC,WAAA,SACAC,QAAA,SACAC,SAAA,SACAC,QAAA,SACAC,WAAA,SACAC,KAAA,KACAC,OAAA,SACAC,KAAA,SACAC,QAAA,SACAC,MAAA,SACAC,QAAA,SACAC,KAAA,SACAC,UAAA,SACAC,OAAA,SACAC,MAAA,SACAC,WAAA,SACAC,UAAA,SACAC,QAAA,SACAC,KAAA,SACAC,IAAA,SACAC,KAAA,SACAC,QAAA,SACAC,MAAA,SACAC,YAAA,SACAC,GAAA,SACAC,SAAA,SACAC,MAAA,SACAC,UAAA,SACAC,MAAA,SACAC,UAAA,SACAC,MAAA,SACAC,QAAA,SACAC,MAAA,SACAC,OAAA,SACAC,MAAA,SACAC,IAAA,SACAC,KAAA,SACAC,KAAA,SACAC,KAAA,SACAC,SAAA,OACAC,OAAA,SACAC,IAAA,SACAC,IAAA,OACAC,MAAA,SACAC,OAAA,SACAC,GAAA,SACAC,MAAA,SACAC,IAAA,SACAC,KAAA,SACAC,UAAA,SACAC,GAAA,SACAC,MAAA,UAkBA,IAAAC,EACA,SAAAC,EAAAnL,GACAkL,IACAA,EAnBA,WACA,MAAAE,EAAA,GACAC,EAAAvb,OAAAub,KAAAxJ,GACAyJ,EAAAxb,OAAAub,KAAA9K,GACA,IAAAnT,EAAAme,EAAAlM,EAAAmM,EAAAC,EACA,IAAAre,EAAA,EAAAA,EAAAie,EAAAtd,OAAAX,IAAA,CAEA,IADAoe,EAAAC,EAAAJ,EAAAje,GACAme,EAAA,EAAAA,EAAAD,EAAAvd,OAAAwd,IACAlM,EAAAiM,EAAAC,GACAE,EAAAA,EAAAC,QAAArM,EAAAkB,EAAAlB,IAEAA,EAAAsM,SAAA9J,EAAA2J,GAAA,IACAJ,EAAAK,GAAA,CAAApM,GAAA,GAAA,IAAAA,GAAA,EAAA,IAAA,IAAAA,GAEA,OAAA+L,EAKAQ,GACAV,EAAAW,YAAA,CAAA,EAAA,EAAA,EAAA,IAEA,MAAApe,EAAAyd,EAAAlL,EAAA8L,eACA,OAAAre,GAAA,CACAV,EAAAU,EAAA,GACA+Q,EAAA/Q,EAAA,GACAuQ,EAAAvQ,EAAA,GACAA,EAAA,IAAAA,EAAAM,OAAAN,EAAA,GAAA,KAGA,SAAAse,EAAAxN,EAAAnR,EAAA4e,GACA,GAAAzN,EAAA,CACA,IAAA0N,EAAAvM,EAAAnB,GACA0N,EAAA7e,GAAA2E,KAAAF,IAAA,EAAAE,KAAAY,IAAAsZ,EAAA7e,GAAA6e,EAAA7e,GAAA4e,EAAA,IAAA5e,EAAA,IAAA,IACA6e,EAAApM,EAAAoM,GACA1N,EAAAxR,EAAAkf,EAAA,GACA1N,EAAAC,EAAAyN,EAAA,GACA1N,EAAAP,EAAAiO,EAAA,IAGA,SAAAC,EAAA3N,EAAA4N,GACA,OAAA5N,EAAAzO,OAAAC,OAAAoc,GAAA,GAAA5N,GAAAA,EAEA,SAAA6N,EAAAC,GACA,IAAA9N,EAAA,CAAAxR,EAAA,EAAAyR,EAAA,EAAAR,EAAA,EAAAvQ,EAAA,KAYA,OAXAmC,MAAAC,QAAAwc,GACAA,EAAAte,QAAA,IACAwQ,EAAA,CAAAxR,EAAAsf,EAAA,GAAA7N,EAAA6N,EAAA,GAAArO,EAAAqO,EAAA,GAAA5e,EAAA,KACA4e,EAAAte,OAAA,IACAwQ,EAAA9Q,EAAAqR,EAAAuN,EAAA,OAIA9N,EAAA2N,EAAAG,EAAA,CAAAtf,EAAA,EAAAyR,EAAA,EAAAR,EAAA,EAAAvQ,EAAA,KACAA,EAAAqR,EAAAP,EAAA9Q,GAEA8Q,EAEA,SAAA+N,EAAAtM,GACA,MAAA,MAAAA,EAAAuM,OAAA,GA5XA,SAAAvM,GACA,MAAAC,EAAAhB,EAAAiB,KAAAF,GACA,IACAjT,EAAAyR,EAAAR,EADAvQ,EAAA,IAEA,GAAAwS,EAAA,CAGA,GAAAA,EAAA,KAAAlT,EAAA,CACA,MAAAwR,GAAA0B,EAAA,GACAxS,EAAA,KAAAwS,EAAA,GAAApB,EAAAN,GAAA,IAAAA,GAQA,OANAxR,GAAAkT,EAAA,GACAzB,GAAAyB,EAAA,GACAjC,GAAAiC,EAAA,GACAlT,EAAA,KAAAkT,EAAA,GAAApB,EAAA9R,GAAAA,GACAyR,EAAA,KAAAyB,EAAA,GAAApB,EAAAL,GAAAA,GACAR,EAAA,KAAAiC,EAAA,GAAApB,EAAAb,GAAAA,GACA,CACAjR,EAAAA,EACAyR,EAAAA,EACAR,EAAAA,EACAvQ,EAAAA,IAwWA+e,CAAAxM,GAEAD,EAAAC,GAEA,MAAAyM,EACA5R,YAAAwR,GACA,GAAAA,aAAAI,EACA,OAAAJ,EAEA,MAAA5b,SAAA4b,EACA,IAAA9N,EApbA,IAAAyB,EAEA0M,EADA7V,EAobA,WAAApG,EACA8N,EAAA6N,EAAAC,GACA,WAAA5b,IAtbAoG,GADAmJ,EAwbAqM,GAvbAte,OAEA,MAAAiS,EAAA,KACA,IAAAnJ,GAAA,IAAAA,EACA6V,EAAA,CACA3f,EAAA,IAAA,GAAAyQ,EAAAwC,EAAA,IACAxB,EAAA,IAAA,GAAAhB,EAAAwC,EAAA,IACAhC,EAAA,IAAA,GAAAR,EAAAwC,EAAA,IACAvS,EAAA,IAAAoJ,EAAA,GAAA2G,EAAAwC,EAAA,IAAA,KAEA,IAAAnJ,GAAA,IAAAA,IACA6V,EAAA,CACA3f,EAAAyQ,EAAAwC,EAAA,KAAA,EAAAxC,EAAAwC,EAAA,IACAxB,EAAAhB,EAAAwC,EAAA,KAAA,EAAAxC,EAAAwC,EAAA,IACAhC,EAAAR,EAAAwC,EAAA,KAAA,EAAAxC,EAAAwC,EAAA,IACAvS,EAAA,IAAAoJ,EAAA2G,EAAAwC,EAAA,KAAA,EAAAxC,EAAAwC,EAAA,IAAA,OAwaAzB,EApaAmO,GAoaAvB,EAAAkB,IAAAC,EAAAD,IAEA/c,KAAAqd,KAAApO,EACAjP,KAAAsd,SAAArO,EAEAsO,YACA,OAAAvd,KAAAsd,OAEAnN,UACA,IAAAlB,EAAA2N,EAAA5c,KAAAqd,MAIA,OAHApO,IACAA,EAAA9Q,EAAAsR,EAAAR,EAAA9Q,IAEA8Q,EAEAkB,QAAArI,GACA9H,KAAAqd,KAAAP,EAAAhV,GAEAyD,YACA,OAAAvL,KAAAsd,QAtYArO,EAsYAjP,KAAAqd,QApYApO,EAAA9Q,EAAA,IACA,QAAA8Q,EAAAxR,MAAAwR,EAAAC,MAAAD,EAAAP,MAAAe,EAAAR,EAAA9Q,MACA,OAAA8Q,EAAAxR,MAAAwR,EAAAC,MAAAD,EAAAP,MAkYA1O,KAAAqd,KAtYA,IAAApO,EAwYA1D,YACA,OAAAvL,KAAAsd,OAAAtO,EAAAhP,KAAAqd,MAAArd,KAAAqd,KAEA9R,YACA,OAAAvL,KAAAsd,OAlSA,SAAArO,GACA,IAAAA,EACA,OAEA,MAAA9Q,EAAAiS,EAAAnB,GACAK,EAAAnR,EAAA,GACA2R,EAAAJ,EAAAvR,EAAA,IACAkR,EAAAK,EAAAvR,EAAA,IACA,OAAA8Q,EAAA9Q,EAAA,IACA,QAAAmR,MAAAQ,OAAAT,OAAAI,EAAAR,EAAA9Q,MACA,OAAAmR,MAAAQ,OAAAT,MAwRAmO,CAAAxd,KAAAqd,MAAArd,KAAAqd,KAEA9R,IAAAlF,EAAAoX,GACA,MAAArR,EAAApM,KACA,GAAAqG,EAAA,CACA,MAAAqX,EAAAtR,EAAA+D,IACAwN,EAAAtX,EAAA8J,IACA,IAAAyN,EACA,MAAAtf,EAAAmf,IAAAG,EAAA,GAAAH,EACAvN,EAAA,EAAA5R,EAAA,EACAH,EAAAuf,EAAAvf,EAAAwf,EAAAxf,EACA0f,IAAA3N,EAAA/R,IAAA,EAAA+R,GAAAA,EAAA/R,IAAA,EAAA+R,EAAA/R,IAAA,GAAA,EACAyf,EAAA,EAAAC,EACAH,EAAAjgB,EAAA,IAAAogB,EAAAH,EAAAjgB,EAAAmgB,EAAAD,EAAAlgB,EAAA,GACAigB,EAAAxO,EAAA,IAAA2O,EAAAH,EAAAxO,EAAA0O,EAAAD,EAAAzO,EAAA,GACAwO,EAAAhP,EAAA,IAAAmP,EAAAH,EAAAhP,EAAAkP,EAAAD,EAAAjP,EAAA,GACAgP,EAAAvf,EAAAG,EAAAof,EAAAvf,GAAA,EAAAG,GAAAqf,EAAAxf,EACAiO,EAAA+D,IAAAuN,EAEA,OAAAtR,EAEAb,QACA,OAAA,IAAA4R,EAAAnd,KAAAmQ,KAEA5E,MAAApN,GAEA,OADA6B,KAAAqd,KAAAlf,EAAAqR,EAAArR,GACA6B,KAEAuL,QAAAmR,GAGA,OAFA1c,KAAAqd,KACAlf,GAAA,EAAAue,EACA1c,KAEAuL,YACA,MAAA4E,EAAAnQ,KAAAqd,KACAS,EAAAha,EAAA,GAAAqM,EAAA1S,EAAA,IAAA0S,EAAAjB,EAAA,IAAAiB,EAAAzB,GAEA,OADAyB,EAAA1S,EAAA0S,EAAAjB,EAAAiB,EAAAzB,EAAAoP,EACA9d,KAEAuL,QAAAmR,GAGA,OAFA1c,KAAAqd,KACAlf,GAAA,EAAAue,EACA1c,KAEAuL,SACA,MAAA0D,EAAAjP,KAAAqd,KAIA,OAHApO,EAAAxR,EAAA,IAAAwR,EAAAxR,EACAwR,EAAAC,EAAA,IAAAD,EAAAC,EACAD,EAAAP,EAAA,IAAAO,EAAAP,EACA1O,KAEAuL,QAAAmR,GAEA,OADAD,EAAAzc,KAAAqd,KAAA,EAAAX,GACA1c,KAEAuL,OAAAmR,GAEA,OADAD,EAAAzc,KAAAqd,KAAA,GAAAX,GACA1c,KAEAuL,SAAAmR,GAEA,OADAD,EAAAzc,KAAAqd,KAAA,EAAAX,GACA1c,KAEAuL,WAAAmR,GAEA,OADAD,EAAAzc,KAAAqd,KAAA,GAAAX,GACA1c,KAEAuL,OAAAwS,GAEA,OA/WA,SAAA9O,EAAA8O,GACA,IAAAzO,EAAAc,EAAAnB,GACAK,EAAA,GAAAkB,EAAAlB,EAAA,GAAAyO,GACAzO,EAAAiB,EAAAjB,GACAL,EAAAxR,EAAA6R,EAAA,GACAL,EAAAC,EAAAI,EAAA,GACAL,EAAAP,EAAAY,EAAA,GAwWA0O,CAAAhe,KAAAqd,KAAAU,GACA/d,MAGA,SAAAie,EAAAlB,GACA,OAAA,IAAAI,EAAAJ,GAGA,MAAAmB,EAAAla,GAAAA,aAAAma,gBAAAna,aAAAoa,cACA,SAAA/X,EAAArC,GACA,OAAAka,EAAAla,GAAAA,EAAAia,EAAAja,GAEA,SAAAqa,EAAAra,GACA,OAAAka,EAAAla,GACAA,EACAia,EAAAja,GAAAsa,SAAA,IAAAC,OAAA,IAAAvP,YAGA,SAAAwP,KACA,MAAAC,EAAA,WACA,IAAAC,EAAA,EACA,OAAA,WACA,OAAAA,KAHA,GAMA,SAAAC,EAAA3a,GACA,OAAAA,MAAAA,EAEA,SAAAzD,EAAAyD,GACA,GAAA1D,MAAAC,SAAAD,MAAAC,QAAAyD,GACA,OAAA,EAEA,MAAA7C,EAAAX,OAAA0I,UAAAG,SAAA7K,KAAAwF,GACA,MAAA,YAAA7C,EAAAyd,OAAA,EAAA,IAAA,WAAAzd,EAAAyd,QAAA,GAKA,SAAAC,EAAA7a,GACA,OAAA,OAAAA,GAAA,oBAAAxD,OAAA0I,UAAAG,SAAA7K,KAAAwF,GAEA,MAAA8a,EAAA9a,IAAA,iBAAAA,GAAAA,aAAAL,SAAAob,UAAA/a,GACA,SAAAgb,EAAAhb,EAAAib,GACA,OAAAH,EAAA9a,GAAAA,EAAAib,EAEA,SAAAC,EAAAlb,EAAAib,GACA,YAAA,IAAAjb,EAAAib,EAAAjb,EAEA,MAAAmb,EAAA,CAAAnb,EAAAob,IACA,iBAAApb,GAAAA,EAAAqb,SAAA,KACAxb,WAAAG,GAAA,IACAA,EAAAob,EACAE,EAAA,CAAAtb,EAAAob,IACA,iBAAApb,GAAAA,EAAAqb,SAAA,KACAxb,WAAAG,GAAA,IAAAob,GACApb,EACA,SAAAD,EAAArE,EAAA4K,EAAAH,GACA,GAAAzK,GAAA,mBAAAA,EAAAlB,KACA,OAAAkB,EAAAgD,MAAAyH,EAAAG,GAGA,SAAArK,EAAAsf,EAAA7f,EAAAyK,EAAAqV,GACA,IAAA1hB,EAAAyJ,EAAAwU,EACA,GAAAxb,EAAAgf,GAEA,GADAhY,EAAAgY,EAAA9gB,OACA+gB,EACA,IAAA1hB,EAAAyJ,EAAA,EAAAzJ,GAAA,EAAAA,IACA4B,EAAAlB,KAAA2L,EAAAoV,EAAAzhB,GAAAA,QAGA,IAAAA,EAAA,EAAAA,EAAAyJ,EAAAzJ,IACA4B,EAAAlB,KAAA2L,EAAAoV,EAAAzhB,GAAAA,QAGA,GAAA+gB,EAAAU,GAGA,IAFAxD,EAAAvb,OAAAub,KAAAwD,GACAhY,EAAAwU,EAAAtd,OACAX,EAAA,EAAAA,EAAAyJ,EAAAzJ,IACA4B,EAAAlB,KAAA2L,EAAAoV,EAAAxD,EAAAje,IAAAie,EAAAje,IAIA,SAAA2hB,GAAAC,EAAAC,GACA,IAAA7hB,EAAA8hB,EAAAC,EAAAC,EACA,IAAAJ,IAAAC,GAAAD,EAAAjhB,SAAAkhB,EAAAlhB,OACA,OAAA,EAEA,IAAAX,EAAA,EAAA8hB,EAAAF,EAAAjhB,OAAAX,EAAA8hB,IAAA9hB,EAGA,GAFA+hB,EAAAH,EAAA5hB,GACAgiB,EAAAH,EAAA7hB,GACA+hB,EAAAE,eAAAD,EAAAC,cAAAF,EAAAle,QAAAme,EAAAne,MACA,OAAA,EAGA,OAAA,EAEA,SAAAqe,GAAAC,GACA,GAAA1f,EAAA0f,GACA,OAAAA,EAAA3P,IAAA0P,IAEA,GAAAnB,EAAAoB,GAAA,CACA,MAAAC,EAAA1f,OAAA2f,OAAA,MACApE,EAAAvb,OAAAub,KAAAkE,GACAG,EAAArE,EAAAtd,OACA,IAAAsR,EAAA,EACA,KAAAA,EAAAqQ,IAAArQ,EACAmQ,EAAAnE,EAAAhM,IAAAiQ,GAAAC,EAAAlE,EAAAhM,KAEA,OAAAmQ,EAEA,OAAAD,EAEA,SAAAI,GAAAze,GACA,OAAA,IAAA,CAAA,YAAA,YAAA,eAAA0e,QAAA1e,GAEA,SAAA2e,GAAA3e,EAAAse,EAAAD,EAAA3e,GACA,IAAA+e,GAAAze,GACA,OAEA,MAAA4e,EAAAN,EAAAte,GACA6e,EAAAR,EAAAre,GACAid,EAAA2B,IAAA3B,EAAA4B,GACAC,GAAAF,EAAAC,EAAAnf,GAEA4e,EAAAte,GAAAoe,GAAAS,GAGA,SAAAC,GAAAR,EAAAD,EAAA3e,GACA,MAAAqf,EAAApgB,EAAA0f,GAAAA,EAAA,CAAAA,GACAL,EAAAe,EAAAliB,OACA,IAAAogB,EAAAqB,GACA,OAAAA,EAGA,MAAAU,GADAtf,EAAAA,GAAA,IACAsf,QAAAL,GACA,IAAA,IAAAziB,EAAA,EAAAA,EAAA8hB,IAAA9hB,EAAA,CAEA,IAAA+gB,EADAoB,EAAAU,EAAA7iB,IAEA,SAEA,MAAAie,EAAAvb,OAAAub,KAAAkE,GACA,IAAA,IAAAlQ,EAAA,EAAAqQ,EAAArE,EAAAtd,OAAAsR,EAAAqQ,IAAArQ,EACA6Q,EAAA7E,EAAAhM,GAAAmQ,EAAAD,EAAA3e,GAGA,OAAA4e,EAEA,SAAAW,GAAAX,EAAAD,GACA,OAAAS,GAAAR,EAAAD,EAAA,CAAAW,OAAAE,KAEA,SAAAA,GAAAlf,EAAAse,EAAAD,GACA,IAAAI,GAAAze,GACA,OAEA,MAAA4e,EAAAN,EAAAte,GACA6e,EAAAR,EAAAre,GACAid,EAAA2B,IAAA3B,EAAA4B,GACAI,GAAAL,EAAAC,GACAjgB,OAAA0I,UAAA6X,eAAAviB,KAAA0hB,EAAAte,KACAse,EAAAte,GAAAoe,GAAAS,IAWA,SAAAO,GAAApf,EAAAoJ,GACA,MAAAtH,EAAA9B,EAAA0e,QAFA,IAEAtV,GACA,OAAA,IAAAtH,EAAA9B,EAAAnD,OAAAiF,EAEA,SAAAud,GAAAnZ,EAAAlG,GACA,GAPA,KAOAA,EACA,OAAAkG,EAEA,IAAAoZ,EAAA,EACAxd,EAAAsd,GAAApf,EAAAsf,GACA,KAAApZ,GAAApE,EAAAwd,GACApZ,EAAAA,EAAAlG,EAAAgd,OAAAsC,EAAAxd,EAAAwd,IACAA,EAAAxd,EAAA,EACAA,EAAAsd,GAAApf,EAAAsf,GAEA,OAAApZ,EAEA,SAAAqZ,GAAAzQ,GACA,OAAAA,EAAAuM,OAAA,GAAAmE,cAAA1Q,EAAApH,MAAA,GAEA,MAAA+X,GAAArd,QAAA,IAAAA,EACAsd,GAAAtd,GAAA,mBAAAA,EACAud,GAAA,CAAApjB,EAAAuQ,KACA,GAAAvQ,EAAAqjB,OAAA9S,EAAA8S,KACA,OAAA,EAEA,IAAA,MAAA5U,KAAAzO,EACA,IAAAuQ,EAAA+S,IAAA7U,GACA,OAAA,EAGA,OAAA,GAGA8U,GAAAlhB,OAAA2f,OAAA,MACAwB,GAAAnhB,OAAA2f,OAAA,MACA,SAAAyB,GAAAC,EAAAjgB,GACA,IAAAA,EACA,OAAAigB,EAEA,MAAA9F,EAAAna,EAAAkgB,MAAA,KACA,IAAA,IAAAhkB,EAAA,EAAAH,EAAAoe,EAAAtd,OAAAX,EAAAH,IAAAG,EAAA,CACA,MAAAiS,EAAAgM,EAAAje,GACA+jB,EAAAA,EAAA9R,KAAA8R,EAAA9R,GAAAvP,OAAA2f,OAAA,OAEA,OAAA0B,EAEA,SAAAtU,GAAAwU,EAAAC,EAAAC,GACA,MAAA,iBAAAD,EACAtB,GAAAkB,GAAAG,EAAAC,GAAAC,GAEAvB,GAAAkB,GAAAG,EAAA,IAAAC,GAmFA,IAAAE,GAAA,IAjFA,MACA3W,YAAA4W,GACAniB,KAAAoiB,eAAAtiB,EACAE,KAAAkG,gBAAA,kBACAlG,KAAAmG,YAAA,kBACAnG,KAAAqG,MAAA,OACArG,KAAAiB,SAAA,GACAjB,KAAAqiB,iBAAAthB,GAAAA,EAAA8F,MAAAyb,SAAAC,sBACAviB,KAAAwiB,SAAA,GACAxiB,KAAAyiB,OAAA,CACA,YACA,WACA,QACA,aACA,aAEAziB,KAAAsG,KAAA,CACAoc,OAAA,qDACAlB,KAAA,GACAmB,MAAA,SACAC,WAAA,IACAnF,OAAA,MAEAzd,KAAA6iB,MAAA,GACA7iB,KAAA8iB,qBAAA,CAAAC,EAAAzhB,IAAA+c,EAAA/c,EAAA4E,iBACAlG,KAAAgjB,iBAAA,CAAAD,EAAAzhB,IAAA+c,EAAA/c,EAAA6E,aACAnG,KAAAijB,WAAA,CAAAF,EAAAzhB,IAAA+c,EAAA/c,EAAA+E,OACArG,KAAA+B,UAAA,IACA/B,KAAAkjB,YAAA,CACAC,KAAA,UACAC,WAAA,GAEApjB,KAAAqjB,qBAAA,EACArjB,KAAAsjB,QAAA,KACAtjB,KAAAujB,QAAA,KACAvjB,KAAAwjB,SAAA,EACAxjB,KAAAyjB,QAAA,GACAzjB,KAAA0jB,YAAA,EACA1jB,KAAA2jB,WAAA7jB,EACAE,KAAA4jB,OAAA,GACA5jB,KAAA6jB,UAAA,EACA7jB,KAAA8jB,SAAA3B,GAEA5W,IAAAyW,EAAAC,GACA,OAAA1U,GAAAvN,KAAAgiB,EAAAC,GAEA1W,IAAAyW,GACA,OAAAJ,GAAA5hB,KAAAgiB,GAEAzW,SAAAyW,EAAAC,GACA,OAAA1U,GAAAoU,GAAAK,EAAAC,GAEA1W,SAAAyW,EAAAC,GACA,OAAA1U,GAAAmU,GAAAM,EAAAC,GAEA1W,MAAAyW,EAAAzY,EAAAwa,EAAAC,GACA,MAAAC,EAAArC,GAAA5hB,KAAAgiB,GACAkC,EAAAtC,GAAA5hB,KAAA+jB,GACAI,EAAA,IAAA5a,EACA/I,OAAA4jB,iBAAAH,EAAA,CACA1Y,CAAA4Y,GAAA,CACAngB,MAAAigB,EAAA1a,GACA8a,UAAA,GAEA9Y,CAAAhC,GAAA,CACA+a,YAAA,EACA/Y,MACA,MAAAgZ,EAAAvkB,KAAAmkB,GACAjE,EAAAgE,EAAAF,GACA,OAAAnF,EAAA0F,GACA/jB,OAAAC,OAAA,GAAAyf,EAAAqE,GAEArF,EAAAqF,EAAArE,IAEA3U,IAAAvH,GACAhE,KAAAmkB,GAAAngB,QAMA,CACAwgB,YAAAjb,IAAAA,EAAAkb,WAAA,MACAC,WAAAnb,GAAA,WAAAA,EACAsZ,MAAA,CACA8B,UAAA,eAEAzB,YAAA,CACAsB,aAAA,EACAE,YAAA,KAIA,MAAAE,GAAAniB,KAAAmiB,GACAC,GAAA,EAAAD,GACAE,GAAAD,GAAAD,GACAG,GAAAphB,OAAAqhB,kBACAC,GAAAL,GAAA,IACAM,GAAAN,GAAA,EACAO,GAAAP,GAAA,EACAQ,GAAA,EAAAR,GAAA,EACAS,GAAA5iB,KAAA4iB,MACAC,GAAA7iB,KAAA6iB,KACA,SAAAC,GAAAC,GACA,MAAAC,EAAAhjB,KAAAqB,MAAA0hB,GACAA,EAAAE,GAAAF,EAAAC,EAAAD,EAAA,KAAAC,EAAAD,EACA,MAAAG,EAAAljB,KAAAmjB,IAAA,GAAAnjB,KAAAojB,MAAAR,GAAAG,KACAM,EAAAN,EAAAG,EAEA,OADAG,GAAA,EAAA,EAAAA,GAAA,EAAA,EAAAA,GAAA,EAAA,EAAA,IACAH,EAEA,SAAAI,GAAA/hB,GACA,MAAAgiB,EAAA,GACAC,EAAAxjB,KAAAwjB,KAAAjiB,GACA,IAAAlG,EACA,IAAAA,EAAA,EAAAA,EAAAmoB,EAAAnoB,IACAkG,EAAAlG,GAAA,IACAkoB,EAAArY,KAAA7P,GACAkoB,EAAArY,KAAA3J,EAAAlG,IAOA,OAJAmoB,KAAA,EAAAA,IACAD,EAAArY,KAAAsY,GAEAD,EAAAE,MAAA,CAAA/nB,EAAAuQ,IAAAvQ,EAAAuQ,IAAAzB,MACA+Y,EAEA,SAAAG,GAAAxoB,GACA,OAAAiG,MAAAC,WAAAlG,KAAAohB,SAAAphB,GAEA,SAAA+nB,GAAAxU,EAAAkV,EAAAC,GACA,OAAA5jB,KAAA6jB,IAAApV,EAAAkV,GAAAC,EAEA,SAAAE,GAAArV,EAAAmV,GACA,MAAAG,EAAA/jB,KAAAqB,MAAAoN,GACA,OAAAsV,EAAAH,GAAAnV,GAAAsV,EAAAH,GAAAnV,EAEA,SAAAuV,GAAAC,EAAAxG,EAAAyG,GACA,IAAA7oB,EAAA8hB,EAAA5b,EACA,IAAAlG,EAAA,EAAA8hB,EAAA8G,EAAAjoB,OAAAX,EAAA8hB,EAAA9hB,IACAkG,EAAA0iB,EAAA5oB,GAAA6oB,GACA/iB,MAAAI,KACAkc,EAAA7c,IAAAZ,KAAAY,IAAA6c,EAAA7c,IAAAW,GACAkc,EAAA3d,IAAAE,KAAAF,IAAA2d,EAAA3d,IAAAyB,IAIA,SAAA4iB,GAAAC,GACA,OAAAA,GAAAjC,GAAA,KAEA,SAAAkC,GAAAC,GACA,OAAAA,GAAA,IAAAnC,IAEA,SAAAoC,GAAA9V,GACA,IAAA4N,EAAA5N,GACA,OAEA,IAAAxT,EAAA,EACAY,EAAA,EACA,KAAAmE,KAAAqB,MAAAoN,EAAAxT,GAAAA,IAAAwT,GACAxT,GAAA,GACAY,IAEA,OAAAA,EAEA,SAAA2oB,GAAAC,EAAAC,GACA,MAAAC,EAAAD,EAAAjW,EAAAgW,EAAAhW,EACAmW,EAAAF,EAAAf,EAAAc,EAAAd,EACAkB,EAAA7kB,KAAAwjB,KAAAmB,EAAAA,EAAAC,EAAAA,GACA,IAAAE,EAAA9kB,KAAA+kB,MAAAH,EAAAD,GAIA,OAHAG,GAAA,GAAA3C,KACA2C,GAAA1C,IAEA,CACA0C,MAAAA,EACAE,SAAAH,GAGA,SAAAI,GAAAC,EAAAC,GACA,OAAAnlB,KAAAwjB,KAAAxjB,KAAAmjB,IAAAgC,EAAA1W,EAAAyW,EAAAzW,EAAA,GAAAzO,KAAAmjB,IAAAgC,EAAAxB,EAAAuB,EAAAvB,EAAA,IAEA,SAAAyB,GAAA1pB,EAAAuQ,GACA,OAAAvQ,EAAAuQ,EAAAoW,IAAAD,GAAAD,GAEA,SAAAkD,GAAA3pB,GACA,OAAAA,EAAA0mB,GAAAA,IAAAA,GAEA,SAAAkD,GAAAR,EAAAvc,EAAAC,EAAA+c,GACA,MAAA7pB,EAAA2pB,GAAAP,GACAzX,EAAAgY,GAAA9c,GACAtN,EAAAoqB,GAAA7c,GACAgd,EAAAH,GAAAhY,EAAA3R,GACA+pB,EAAAJ,GAAApqB,EAAAS,GACAgqB,EAAAL,GAAA3pB,EAAA2R,GACAsY,EAAAN,GAAA3pB,EAAAT,GACA,OAAAS,IAAA2R,GAAA3R,IAAAT,GAAAsqB,GAAAlY,IAAApS,GACAuqB,EAAAC,GAAAC,EAAAC,EAEA,SAAAC,GAAArkB,EAAAX,EAAAd,GACA,OAAAE,KAAAF,IAAAc,EAAAZ,KAAAY,IAAAd,EAAAyB,IAEA,SAAAskB,GAAAtkB,GACA,OAAAqkB,GAAArkB,GAAA,MAAA,OAGA,SAAAukB,GAAAjiB,GACA,OAAAA,GAAAqY,EAAArY,EAAAkb,OAAA7C,EAAArY,EAAAoc,QACA,MAEApc,EAAAqc,MAAArc,EAAAqc,MAAA,IAAA,KACArc,EAAAmX,OAAAnX,EAAAmX,OAAA,IAAA,IACAnX,EAAAkb,KAAA,MACAlb,EAAAoc,OAEA,SAAA8F,GAAAzF,EAAA1iB,EAAAooB,EAAAC,EAAAC,GACA,IAAAC,EAAAvoB,EAAAsoB,GAQA,OAPAC,IACAA,EAAAvoB,EAAAsoB,GAAA5F,EAAA8F,YAAAF,GAAAG,MACAL,EAAA9a,KAAAgb,IAEAC,EAAAF,IACAA,EAAAE,GAEAF,EAEA,SAAAK,GAAAhG,EAAAzc,EAAA0iB,EAAAC,GAEA,IAAA5oB,GADA4oB,EAAAA,GAAA,IACA5oB,KAAA4oB,EAAA5oB,MAAA,GACAooB,EAAAQ,EAAAC,eAAAD,EAAAC,gBAAA,GACAD,EAAA3iB,OAAAA,IACAjG,EAAA4oB,EAAA5oB,KAAA,GACAooB,EAAAQ,EAAAC,eAAA,GACAD,EAAA3iB,KAAAA,GAEAyc,EAAAoG,OACApG,EAAAzc,KAAAA,EACA,IAAAoiB,EAAA,EACA,MAAA9I,EAAAoJ,EAAAvqB,OACA,IAAAX,EAAAme,EAAAmN,EAAAC,EAAAC,EACA,IAAAxrB,EAAA,EAAAA,EAAA8hB,EAAA9hB,IAEA,GADAurB,EAAAL,EAAAlrB,GACAurB,MAAAA,IAAA,IAAA9oB,EAAA8oB,GACAX,EAAAF,GAAAzF,EAAA1iB,EAAAooB,EAAAC,EAAAW,QACA,GAAA9oB,EAAA8oB,GACA,IAAApN,EAAA,EAAAmN,EAAAC,EAAA5qB,OAAAwd,EAAAmN,EAAAnN,IACAqN,EAAAD,EAAApN,GACAqN,MAAAA,GAAA/oB,EAAA+oB,KACAZ,EAAAF,GAAAzF,EAAA1iB,EAAAooB,EAAAC,EAAAY,IAKAvG,EAAAwG,UACA,MAAAC,EAAAf,EAAAhqB,OAAA,EACA,GAAA+qB,EAAAR,EAAAvqB,OAAA,CACA,IAAAX,EAAA,EAAAA,EAAA0rB,EAAA1rB,WACAuC,EAAAooB,EAAA3qB,IAEA2qB,EAAAgB,OAAA,EAAAD,GAEA,OAAAd,EAEA,SAAAgB,GAAA7iB,EAAA8iB,EAAAb,GACA,MAAAzG,EAAAxb,EAAA+iB,wBACAC,EAAA,IAAAf,EAAArmB,KAAAF,IAAAumB,EAAA,EAAA,IAAA,EACA,OAAArmB,KAAAqB,OAAA6lB,EAAAE,GAAAxH,GAAAA,EAAAwH,EAEA,SAAAC,GAAAppB,EAAAqiB,IACAA,EAAAA,GAAAriB,EAAAM,WAAA,OACAmoB,OACApG,EAAAgH,iBACAhH,EAAAiH,UAAA,EAAA,EAAAtpB,EAAAooB,MAAApoB,EAAAupB,QACAlH,EAAAwG,UAEA,SAAAW,GAAAnH,EAAAzhB,EAAA4P,EAAAkV,GACA,IAAAjlB,EAAAgpB,EAAAC,EAAA5I,EAAA6I,EACA,MAAA1H,EAAArhB,EAAAgpB,WACAC,EAAAjpB,EAAAipB,SACAC,EAAAlpB,EAAAkpB,OACA,IAAAC,GAAAF,GAAA,GAAAtF,GACA,GAAAtC,GAAA,iBAAAA,IACAxhB,EAAAwhB,EAAAtZ,WACA,8BAAAlI,GAAA,+BAAAA,GAMA,OALA4hB,EAAAoG,OACApG,EAAA2H,UAAAxZ,EAAAkV,GACArD,EAAA/E,OAAAyM,GACA1H,EAAA4H,UAAAhI,GAAAA,EAAAmG,MAAA,GAAAnG,EAAAsH,OAAA,EAAAtH,EAAAmG,MAAAnG,EAAAsH,aACAlH,EAAAwG,UAIA,KAAA3lB,MAAA4mB,IAAAA,GAAA,GAAA,CAIA,OADAzH,EAAA6H,YACAjI,GACA,QACAI,EAAA8H,IAAA3Z,EAAAkV,EAAAoE,EAAA,EAAA3F,IACA9B,EAAA+H,YACA,MACA,IAAA,WACA/H,EAAAgI,OAAA7Z,EAAAzO,KAAAuoB,IAAAP,GAAAD,EAAApE,EAAA3jB,KAAAwoB,IAAAR,GAAAD,GACAC,GAAArF,GACArC,EAAAmI,OAAAha,EAAAzO,KAAAuoB,IAAAP,GAAAD,EAAApE,EAAA3jB,KAAAwoB,IAAAR,GAAAD,GACAC,GAAArF,GACArC,EAAAmI,OAAAha,EAAAzO,KAAAuoB,IAAAP,GAAAD,EAAApE,EAAA3jB,KAAAwoB,IAAAR,GAAAD,GACAzH,EAAA+H,YACA,MACA,IAAA,cACAT,EAAA,KAAAG,EACAhJ,EAAAgJ,EAAAH,EACAF,EAAA1nB,KAAAwoB,IAAAR,EAAAtF,IAAA3D,EACA4I,EAAA3nB,KAAAuoB,IAAAP,EAAAtF,IAAA3D,EACAuB,EAAA8H,IAAA3Z,EAAAiZ,EAAA/D,EAAAgE,EAAAC,EAAAI,EAAA7F,GAAA6F,EAAAvF,IACAnC,EAAA8H,IAAA3Z,EAAAkZ,EAAAhE,EAAA+D,EAAAE,EAAAI,EAAAvF,GAAAuF,GACA1H,EAAA8H,IAAA3Z,EAAAiZ,EAAA/D,EAAAgE,EAAAC,EAAAI,EAAAA,EAAAvF,IACAnC,EAAA8H,IAAA3Z,EAAAkZ,EAAAhE,EAAA+D,EAAAE,EAAAI,EAAAvF,GAAAuF,EAAA7F,IACA7B,EAAA+H,YACA,MACA,IAAA,OACA,IAAAP,EAAA,CACA/I,EAAA/e,KAAA0oB,QAAAX,EACAzH,EAAAqI,KAAAla,EAAAsQ,EAAA4E,EAAA5E,EAAA,EAAAA,EAAA,EAAAA,GACA,MAEAiJ,GAAAtF,GACA,IAAA,UACAgF,EAAA1nB,KAAAwoB,IAAAR,GAAAD,EACAJ,EAAA3nB,KAAAuoB,IAAAP,GAAAD,EACAzH,EAAAgI,OAAA7Z,EAAAiZ,EAAA/D,EAAAgE,GACArH,EAAAmI,OAAAha,EAAAkZ,EAAAhE,EAAA+D,GACApH,EAAAmI,OAAAha,EAAAiZ,EAAA/D,EAAAgE,GACArH,EAAAmI,OAAAha,EAAAkZ,EAAAhE,EAAA+D,GACApH,EAAA+H,YACA,MACA,IAAA,WACAL,GAAAtF,GACA,IAAA,QACAgF,EAAA1nB,KAAAwoB,IAAAR,GAAAD,EACAJ,EAAA3nB,KAAAuoB,IAAAP,GAAAD,EACAzH,EAAAgI,OAAA7Z,EAAAiZ,EAAA/D,EAAAgE,GACArH,EAAAmI,OAAAha,EAAAiZ,EAAA/D,EAAAgE,GACArH,EAAAgI,OAAA7Z,EAAAkZ,EAAAhE,EAAA+D,GACApH,EAAAmI,OAAAha,EAAAkZ,EAAAhE,EAAA+D,GACA,MACA,IAAA,OACAA,EAAA1nB,KAAAwoB,IAAAR,GAAAD,EACAJ,EAAA3nB,KAAAuoB,IAAAP,GAAAD,EACAzH,EAAAgI,OAAA7Z,EAAAiZ,EAAA/D,EAAAgE,GACArH,EAAAmI,OAAAha,EAAAiZ,EAAA/D,EAAAgE,GACArH,EAAAgI,OAAA7Z,EAAAkZ,EAAAhE,EAAA+D,GACApH,EAAAmI,OAAAha,EAAAkZ,EAAAhE,EAAA+D,GACAM,GAAAtF,GACAgF,EAAA1nB,KAAAwoB,IAAAR,GAAAD,EACAJ,EAAA3nB,KAAAuoB,IAAAP,GAAAD,EACAzH,EAAAgI,OAAA7Z,EAAAiZ,EAAA/D,EAAAgE,GACArH,EAAAmI,OAAAha,EAAAiZ,EAAA/D,EAAAgE,GACArH,EAAAgI,OAAA7Z,EAAAkZ,EAAAhE,EAAA+D,GACApH,EAAAmI,OAAAha,EAAAkZ,EAAAhE,EAAA+D,GACA,MACA,IAAA,OACAA,EAAA1nB,KAAAwoB,IAAAR,GAAAD,EACAJ,EAAA3nB,KAAAuoB,IAAAP,GAAAD,EACAzH,EAAAgI,OAAA7Z,EAAAiZ,EAAA/D,EAAAgE,GACArH,EAAAmI,OAAAha,EAAAiZ,EAAA/D,EAAAgE,GACA,MACA,IAAA,OACArH,EAAAgI,OAAA7Z,EAAAkV,GACArD,EAAAmI,OAAAha,EAAAzO,KAAAwoB,IAAAR,GAAAD,EAAApE,EAAA3jB,KAAAuoB,IAAAP,GAAAD,GAGAzH,EAAAsI,OACA/pB,EAAAO,YAAA,GACAkhB,EAAAuI,UAGA,SAAAC,GAAAC,EAAAC,EAAAC,GAEA,OADAA,EAAAA,GAAA,IACAD,GAAAD,GAAAA,EAAAta,EAAAua,EAAAtgB,KAAAugB,GAAAF,EAAAta,EAAAua,EAAArgB,MAAAsgB,GACAF,EAAApF,EAAAqF,EAAAE,IAAAD,GAAAF,EAAApF,EAAAqF,EAAAG,OAAAF,EAEA,SAAAG,GAAA9I,EAAA0I,GACA1I,EAAAoG,OACApG,EAAA6H,YACA7H,EAAAqI,KAAAK,EAAAtgB,KAAAsgB,EAAAE,IAAAF,EAAArgB,MAAAqgB,EAAAtgB,KAAAsgB,EAAAG,OAAAH,EAAAE,KACA5I,EAAA+I,OAEA,SAAAC,GAAAhJ,GACAA,EAAAwG,UAEA,SAAAyC,GAAAjJ,EAAAkJ,EAAA/L,EAAAgM,EAAA/I,GACA,IAAA8I,EACA,OAAAlJ,EAAAmI,OAAAhL,EAAAhP,EAAAgP,EAAAkG,GAEA,GAAA,WAAAjD,EAAA,CACA,MAAAgJ,GAAAF,EAAA/a,EAAAgP,EAAAhP,GAAA,EACA6R,EAAAmI,OAAAiB,EAAAF,EAAA7F,GACArD,EAAAmI,OAAAiB,EAAAjM,EAAAkG,OACA,UAAAjD,KAAA+I,EACAnJ,EAAAmI,OAAAe,EAAA/a,EAAAgP,EAAAkG,GAEArD,EAAAmI,OAAAhL,EAAAhP,EAAA+a,EAAA7F,GAEArD,EAAAmI,OAAAhL,EAAAhP,EAAAgP,EAAAkG,GAEA,SAAAgG,GAAArJ,EAAAkJ,EAAA/L,EAAAgM,GACA,IAAAD,EACA,OAAAlJ,EAAAmI,OAAAhL,EAAAhP,EAAAgP,EAAAkG,GAEArD,EAAAsJ,cACAH,EAAAD,EAAAK,KAAAL,EAAAM,KACAL,EAAAD,EAAAO,KAAAP,EAAAQ,KACAP,EAAAhM,EAAAqM,KAAArM,EAAAoM,KACAJ,EAAAhM,EAAAuM,KAAAvM,EAAAsM,KACAtM,EAAAhP,EACAgP,EAAAkG,GAEA,SAAAsG,GAAA3J,EAAA4J,EAAAzb,EAAAkV,EAAA9f,EAAAsmB,EAAA,IACA,MAAAC,EAAAtsB,EAAAosB,GAAAA,EAAA,CAAAA,GACArB,EAAAsB,EAAAE,YAAA,GAAA,KAAAF,EAAAG,YACA,IAAAjvB,EAAAkvB,EAIA,IAHAjK,EAAAoG,OACApG,EAAAzc,KAAAA,EAAAqiB,OAmBA,SAAA5F,EAAA6J,GACAA,EAAAK,aACAlK,EAAA2H,UAAAkC,EAAAK,YAAA,GAAAL,EAAAK,YAAA,IAEAtO,EAAAiO,EAAArC,WACAxH,EAAA/E,OAAA4O,EAAArC,UAEAqC,EAAAvmB,QACA0c,EAAAmK,UAAAN,EAAAvmB,OAEAumB,EAAAO,YACApK,EAAAoK,UAAAP,EAAAO,WAEAP,EAAAQ,eACArK,EAAAqK,aAAAR,EAAAQ,cAhCAC,CAAAtK,EAAA6J,GACA9uB,EAAA,EAAAA,EAAA+uB,EAAApuB,SAAAX,EACAkvB,EAAAH,EAAA/uB,GACAwtB,IACAsB,EAAAG,cACAhK,EAAAuK,YAAAV,EAAAG,aAEApO,EAAAiO,EAAAE,eACA/J,EAAAwK,UAAAX,EAAAE,aAEA/J,EAAAyK,WAAAR,EAAA9b,EAAAkV,EAAAwG,EAAAa,WAEA1K,EAAA2K,SAAAV,EAAA9b,EAAAkV,EAAAwG,EAAAa,UACAE,GAAA5K,EAAA7R,EAAAkV,EAAA4G,EAAAJ,GACAxG,GAAA9f,EAAAsc,WAEAG,EAAAwG,UAmBA,SAAAoE,GAAA5K,EAAA7R,EAAAkV,EAAA4G,EAAAJ,GACA,GAAAA,EAAAgB,eAAAhB,EAAAiB,UAAA,CACA,MAAAC,EAAA/K,EAAA8F,YAAAmE,GACA7hB,EAAA+F,EAAA4c,EAAAC,sBACA3iB,EAAA8F,EAAA4c,EAAAE,uBACArC,EAAAvF,EAAA0H,EAAAG,wBACArC,EAAAxF,EAAA0H,EAAAI,yBACAC,EAAAvB,EAAAgB,eAAAjC,EAAAC,GAAA,EAAAA,EACA7I,EAAAuK,YAAAvK,EAAAmK,UACAnK,EAAA6H,YACA7H,EAAAwK,UAAAX,EAAAwB,iBAAA,EACArL,EAAAgI,OAAA5f,EAAAgjB,GACApL,EAAAmI,OAAA9f,EAAA+iB,GACApL,EAAAuI,UAGA,SAAA+C,GAAAtL,EAAAqI,GACA,MAAAla,EAAAA,EAAAkV,EAAAA,EAAAlW,EAAAA,EAAAZ,EAAAA,EAAAkb,OAAAA,GAAAY,EACArI,EAAA8H,IAAA3Z,EAAAsZ,EAAA8D,QAAAlI,EAAAoE,EAAA8D,QAAA9D,EAAA8D,SAAApJ,GAAAN,IAAA,GACA7B,EAAAmI,OAAAha,EAAAkV,EAAA9W,EAAAkb,EAAA+D,YACAxL,EAAA8H,IAAA3Z,EAAAsZ,EAAA+D,WAAAnI,EAAA9W,EAAAkb,EAAA+D,WAAA/D,EAAA+D,WAAA3J,GAAAM,IAAA,GACAnC,EAAAmI,OAAAha,EAAAhB,EAAAsa,EAAAgE,YAAApI,EAAA9W,GACAyT,EAAA8H,IAAA3Z,EAAAhB,EAAAsa,EAAAgE,YAAApI,EAAA9W,EAAAkb,EAAAgE,YAAAhE,EAAAgE,YAAAtJ,GAAA,GAAA,GACAnC,EAAAmI,OAAAha,EAAAhB,EAAAkW,EAAAoE,EAAAiE,UACA1L,EAAA8H,IAAA3Z,EAAAhB,EAAAsa,EAAAiE,SAAArI,EAAAoE,EAAAiE,SAAAjE,EAAAiE,SAAA,GAAAvJ,IAAA,GACAnC,EAAAmI,OAAAha,EAAAsZ,EAAA8D,QAAAlI,GAGA,SAAAsI,GAAAC,EAAA3qB,EAAA4qB,GACAA,EAAAA,GAAA,CAAAjtB,GAAAgtB,EAAAhtB,GAAAqC,GACA,IAEA6qB,EAFAC,EAAAH,EAAAlwB,OAAA,EACAswB,EAAA,EAEA,KAAAD,EAAAC,EAAA,GACAF,EAAAE,EAAAD,GAAA,EACAF,EAAAC,GACAE,EAAAF,EAEAC,EAAAD,EAGA,MAAA,CAAAE,GAAAA,EAAAD,GAAAA,GAEA,MAAAE,GAAA,CAAAL,EAAA/sB,EAAAoC,IACA0qB,GAAAC,EAAA3qB,GAAArC,GAAAgtB,EAAAhtB,GAAAC,GAAAoC,IACAirB,GAAA,CAAAN,EAAA/sB,EAAAoC,IACA0qB,GAAAC,EAAA3qB,GAAArC,GAAAgtB,EAAAhtB,GAAAC,IAAAoC,IACA,SAAAkrB,GAAAjN,EAAA5e,EAAAd,GACA,IAAAyI,EAAA,EACAC,EAAAgX,EAAAxjB,OACA,KAAAuM,EAAAC,GAAAgX,EAAAjX,GAAA3H,GACA2H,IAEA,KAAAC,EAAAD,GAAAiX,EAAAhX,EAAA,GAAA1I,GACA0I,IAEA,OAAAD,EAAA,GAAAC,EAAAgX,EAAAxjB,OACAwjB,EAAA3Y,MAAA0B,EAAAC,GACAgX,EAEA,MAAAkN,GAAA,CAAA,OAAA,MAAA,QAAA,SAAA,WACA,SAAAC,GAAA1I,EAAA2I,GACA3I,EAAA4I,SACA5I,EAAA4I,SAAAvjB,UAAA4B,KAAA0hB,IAGA7uB,OAAA+uB,eAAA7I,EAAA,WAAA,CACA8I,cAAA,EACAlL,YAAA,EACAtgB,MAAA,CACA+H,UAAA,CAAAsjB,MAGAF,GAAAztB,SAAAE,IACA,MAAA6tB,EAAA,UAAAtO,GAAAvf,GACA8tB,EAAAhJ,EAAA9kB,GACApB,OAAA+uB,eAAA7I,EAAA9kB,EAAA,CACA4tB,cAAA,EACAlL,YAAA,EACA/Y,SAAAjB,GACA,MAAAqlB,EAAAD,EAAAhtB,MAAA1C,KAAAsK,GAMA,OALAoc,EAAA4I,SAAAvjB,UAAArK,SAAAkuB,IACA,mBAAAA,EAAAH,IACAG,EAAAH,MAAAnlB,MAGAqlB,SAKA,SAAAE,GAAAnJ,EAAA2I,GACA,MAAAS,EAAApJ,EAAA4I,SACA,IAAAQ,EACA,OAEA,MAAA/jB,EAAA+jB,EAAA/jB,UACApK,EAAAoK,EAAAuU,QAAA+O,IACA,IAAA1tB,GACAoK,EAAA0d,OAAA9nB,EAAA,GAEAoK,EAAAtN,OAAA,IAGA0wB,GAAAztB,SAAAE,WACA8kB,EAAA9kB,aAEA8kB,EAAA4I,UAEA,SAAAS,GAAApjB,GACA,MAAAY,EAAA,IAAAyiB,IACA,IAAAlyB,EAAA8hB,EACA,IAAA9hB,EAAA,EAAA8hB,EAAAjT,EAAAlO,OAAAX,EAAA8hB,IAAA9hB,EACAyP,EAAA0iB,IAAAtjB,EAAA7O,IAEA,OAAAyP,EAAAiU,OAAA5B,EACAjT,EAEArM,MAAA6H,KAAAoF,GAGA,SAAA2iB,KACA,MAAA,oBAAA7wB,QAAA,oBAAAuB,SAEA,SAAAuvB,GAAAC,GACA,IAAAC,EAAAD,EAAAE,WAIA,OAHAD,GAAA,wBAAAA,EAAAhnB,aACAgnB,EAAAA,EAAAE,MAEAF,EAEA,SAAAG,GAAAC,EAAA5O,EAAA6O,GACA,IAAAC,EASA,MARA,iBAAAF,GACAE,EAAAtU,SAAAoU,EAAA,KACA,IAAAA,EAAAnQ,QAAA,OACAqQ,EAAAA,EAAA,IAAA9O,EAAAyO,WAAAI,KAGAC,EAAAF,EAEAE,EAEA,MAAAC,GAAAC,GAAAxxB,OAAAuxB,iBAAAC,EAAA,MACA,SAAAC,GAAA5wB,EAAAymB,GACA,OAAAiK,GAAA1wB,GAAA6wB,iBAAApK,GAEA,MAAAqK,GAAA,CAAA,MAAA,QAAA,SAAA,QACA,SAAAC,GAAAC,EAAAvO,EAAAwO,GACA,MAAAnL,EAAA,GACAmL,EAAAA,EAAA,IAAAA,EAAA,GACA,IAAA,IAAArzB,EAAA,EAAAA,EAAA,EAAAA,IAAA,CACA,MAAAojB,EAAA8P,GAAAlzB,GACAkoB,EAAA9E,GAAArd,WAAAqtB,EAAAvO,EAAA,IAAAzB,EAAAiQ,KAAA,EAIA,OAFAnL,EAAA8C,MAAA9C,EAAA7a,KAAA6a,EAAA5a,MACA4a,EAAAiE,OAAAjE,EAAA2F,IAAA3F,EAAA4F,OACA5F,EAqBA,SAAAoL,GAAAC,EAAAxqB,GACA,MAAAnG,OAAAA,EAAAkpB,wBAAAA,GAAA/iB,EACA8b,EAAAiO,GAAAlwB,GACA4wB,EAAA,eAAA3O,EAAA4O,UACAC,EAAAP,GAAAtO,EAAA,WACA8O,EAAAR,GAAAtO,EAAA,SAAA,UACAzR,EAAAA,EAAAkV,EAAAA,EAAAsL,IAAAA,GAxBA,SAAAL,EAAA3wB,GACA,MAAAhD,EAAA2zB,EAAAM,QAAAN,EACAO,EAAAl0B,EAAAk0B,QACA3R,EAAA2R,GAAAA,EAAAnzB,OAAAmzB,EAAA,GAAAl0B,GACAm0B,QAAAA,EAAAC,QAAAA,GAAA7R,EACA,IACA/O,EAAAkV,EADAsL,GAAA,EAEA,GARA,EAAAxgB,EAAAkV,EAAAlG,KAAAhP,EAAA,GAAAkV,EAAA,MAAAlG,IAAAA,EAAA6R,YAQAC,CAAAH,EAAAC,EAAAp0B,EAAAwiB,QACAhP,EAAA2gB,EACAzL,EAAA0L,MACA,CACA,MAAA1G,EAAA1qB,EAAAuxB,wBACA/gB,EAAA+O,EAAAiS,QAAA9G,EAAAjgB,KACAib,EAAAnG,EAAAkS,QAAA/G,EAAAO,IACA+F,GAAA,EAEA,MAAA,CAAAxgB,EAAAA,EAAAkV,EAAAA,EAAAsL,IAAAA,GAQAU,CAAAf,EAAA3wB,GACAypB,EAAAqH,EAAArmB,MAAAumB,GAAAD,EAAAtmB,MACAif,EAAAoH,EAAA7F,KAAA+F,GAAAD,EAAA9F,KACA,IAAA7C,MAAAA,EAAAmB,OAAAA,GAAApjB,EAKA,OAJAyqB,IACAxI,GAAA0I,EAAA1I,MAAA2I,EAAA3I,MACAmB,GAAAuH,EAAAvH,OAAAwH,EAAAxH,QAEA,CACA/Y,EAAAzO,KAAAqB,OAAAoN,EAAAiZ,GAAArB,EAAApoB,EAAAooB,MAAAc,GACAxD,EAAA3jB,KAAAqB,OAAAsiB,EAAAgE,GAAAH,EAAAvpB,EAAAupB,OAAAL,IA4BA,MAAAyI,GAAApjB,GAAAxM,KAAAqB,MAAA,GAAAmL,GAAA,GACA,SAAAqjB,GAAA5xB,EAAA6xB,EAAAC,EAAAC,GACA,MAAA9P,EAAAiO,GAAAlwB,GACAgyB,EAAAzB,GAAAtO,EAAA,UACA8K,EAAA+C,GAAA7N,EAAA8K,SAAA/sB,EAAA,gBAAAqkB,GACA4N,EAAAnC,GAAA7N,EAAAgQ,UAAAjyB,EAAA,iBAAAqkB,GACA6N,EA/BA,SAAAlyB,EAAAooB,EAAAmB,GACA,IAAAwD,EAAAkF,EACA,QAAA7yB,IAAAgpB,QAAAhpB,IAAAmqB,EAAA,CACA,MAAA4I,EAAA1C,GAAAzvB,GACA,GAAAmyB,EAGA,CACA,MAAAzH,EAAAyH,EAAAZ,wBACAa,EAAAlC,GAAAiC,GACAE,EAAA9B,GAAA6B,EAAA,SAAA,SACAE,EAAA/B,GAAA6B,EAAA,WACAhK,EAAAsC,EAAAtC,MAAAkK,EAAAlK,MAAAiK,EAAAjK,MACAmB,EAAAmB,EAAAnB,OAAA+I,EAAA/I,OAAA8I,EAAA9I,OACAwD,EAAA+C,GAAAsC,EAAArF,SAAAoF,EAAA,eACAF,EAAAnC,GAAAsC,EAAAH,UAAAE,EAAA,qBAVA/J,EAAApoB,EAAAuyB,YACAhJ,EAAAvpB,EAAAwyB,aAYA,MAAA,CACApK,MAAAA,EACAmB,OAAAA,EACAwD,SAAAA,GAAA1I,GACA4N,UAAAA,GAAA5N,IASAoO,CAAAzyB,EAAA6xB,EAAAC,GACA,IAAA1J,MAAAA,EAAAmB,OAAAA,GAAA2I,EACA,GAAA,gBAAAjQ,EAAA4O,UAAA,CACA,MAAAE,EAAAR,GAAAtO,EAAA,SAAA,SACA6O,EAAAP,GAAAtO,EAAA,WACAmG,GAAA0I,EAAA1I,MAAA2I,EAAA3I,MACAmB,GAAAuH,EAAAvH,OAAAwH,EAAAxH,OASA,OAPAnB,EAAArmB,KAAAF,IAAA,EAAAumB,EAAA4J,EAAA5J,OACAmB,EAAAxnB,KAAAF,IAAA,EAAAkwB,EAAAhwB,KAAAojB,MAAAiD,EAAA2J,GAAAxI,EAAAyI,EAAAzI,QACAnB,EAAAuJ,GAAA5vB,KAAAY,IAAAylB,EAAA2E,EAAAmF,EAAAnF,WACAxD,EAAAoI,GAAA5vB,KAAAY,IAAA4mB,EAAA0I,EAAAC,EAAAD,YACA7J,IAAAmB,IACAA,EAAAoI,GAAAvJ,EAAA,IAEA,CACAA,MAAAA,EACAmB,OAAAA,GAGA,SAAAmJ,GAAAvsB,EAAAwsB,EAAAC,GACA,MAAAC,EAAAF,GAAA,EACAG,EAAA/wB,KAAAojB,MAAAhf,EAAAojB,OAAAsJ,GACAE,EAAAhxB,KAAAojB,MAAAhf,EAAAiiB,MAAAyK,GACA1sB,EAAAojB,OAAAuJ,EAAAD,EACA1sB,EAAAiiB,MAAA2K,EAAAF,EACA,MAAA7yB,EAAAmG,EAAAnG,OAKA,OAJAA,EAAAiiB,QAAA2Q,IAAA5yB,EAAAiiB,MAAAsH,SAAAvpB,EAAAiiB,MAAAmG,SACApoB,EAAAiiB,MAAAsH,OAAA,GAAApjB,EAAAojB,WACAvpB,EAAAiiB,MAAAmG,MAAA,GAAAjiB,EAAAiiB,YAEAjiB,EAAA+iB,0BAAA2J,GACA7yB,EAAAupB,SAAAuJ,GACA9yB,EAAAooB,QAAA2K,KACA5sB,EAAA+iB,wBAAA2J,EACA7yB,EAAAupB,OAAAuJ,EACA9yB,EAAAooB,MAAA2K,EACA5sB,EAAAkc,IAAA2Q,aAAAH,EAAA,EAAA,EAAAA,EAAA,EAAA,IACA,GAIA,MAAAI,GAAA,WACA,IAAAC,GAAA,EACA,IACA,MAAAtyB,EAAA,CACAuyB,cAEA,OADAD,GAAA,GACA,IAGAv0B,OAAAy0B,iBAAA,OAAA,KAAAxyB,GACAjC,OAAA00B,oBAAA,OAAA,KAAAzyB,GACA,MAAA5D,IAEA,OAAAk2B,EAbA,GAeA,SAAAI,GAAAnD,EAAAlK,GACA,MAAA3iB,EAAA8sB,GAAAD,EAAAlK,GACAsN,EAAAjwB,GAAAA,EAAAkwB,MAAA,qBACA,OAAAD,GAAAA,EAAA,QAAAn0B,EAGA,SAAAq0B,GAAAz2B,EAAAmJ,GACA,MAAA,WAAAnJ,EACA,CACAwT,EAAAxT,EAAAwT,EACAkV,EAAA1oB,EAAA0oB,GAGAgL,GAAA1zB,EAAAmJ,GAeA,SAAAutB,GAAAC,EAAAryB,EAAAgC,EAAAof,GACA,MAAAkR,WAAAA,EAAAj0B,KAAAA,EAAAk0B,QAAAA,GAAAF,EACAG,EAAAF,EAAAG,YAAAD,OACA,GAAAA,GAAAxyB,IAAAwyB,EAAAxyB,MAAAuyB,GAAAl0B,EAAA5B,OAAA,CACA,MAAAi2B,EAAAF,EAAAG,eAAA1F,GAAAD,GACA,IAAA5L,EACA,OAAAsR,EAAAr0B,EAAA2B,EAAAgC,GACA,GAAAswB,EAAAM,eAAA,CACA,MAAA10B,EAAAG,EAAA,GACAmlB,EAAA,mBAAAtlB,EAAA20B,UAAA30B,EAAA20B,SAAA7yB,GACA,GAAAwjB,EAAA,CACA,MAAAxa,EAAA0pB,EAAAr0B,EAAA2B,EAAAgC,EAAAwhB,GACAva,EAAAypB,EAAAr0B,EAAA2B,EAAAgC,EAAAwhB,GACA,MAAA,CAAAuJ,GAAA/jB,EAAA+jB,GAAAD,GAAA7jB,EAAA6jB,MAIA,MAAA,CAAAC,GAAA,EAAAD,GAAAzuB,EAAA5B,OAAA,GAEA,SAAAq2B,GAAAjuB,EAAA7E,EAAA+yB,EAAAC,EAAA5R,GACA,MAAA6R,EAAApuB,EAAAquB,+BACAlxB,EAAA+wB,EAAA/yB,GACA,IAAA,IAAAlE,EAAA,EAAA8hB,EAAAqV,EAAAx2B,OAAAX,EAAA8hB,IAAA9hB,EAAA,CACA,MAAA6D,MAAAA,EAAAtB,KAAAA,GAAA40B,EAAAn3B,IACAixB,GAAAA,EAAAD,GAAAA,GAAAsF,GAAAa,EAAAn3B,GAAAkE,EAAAgC,EAAAof,GACA,IAAA,IAAAnH,EAAA8S,EAAA9S,GAAA6S,IAAA7S,EAAA,CACA,MAAA4U,EAAAxwB,EAAA4b,GACA4U,EAAAsE,MACAH,EAAAnE,EAAAlvB,EAAAsa,KAcA,SAAAmZ,GAAAvuB,EAAAkuB,EAAA/yB,EAAAqzB,GACA,MAAA1oB,EAAA,GACA,IAAA4e,GAAAwJ,EAAAluB,EAAAyuB,UAAAzuB,EAAA0uB,aACA,OAAA5oB,EAQA,OADAmoB,GAAAjuB,EAAA7E,EAAA+yB,GALA,SAAAlE,EAAA9Q,EAAApe,GACAkvB,EAAA2E,QAAAT,EAAA7jB,EAAA6jB,EAAA3O,EAAAiP,IACA1oB,EAAAgB,KAAA,CAAAkjB,QAAAA,EAAA9Q,aAAAA,EAAApe,MAAAA,OAGA,GACAgL,EAEA,SAAA8oB,GAAA5uB,EAAAkuB,EAAA/yB,EAAAohB,EAAAiS,GACA,MAAAK,EAvBA,SAAA1zB,GACA,MAAA2zB,GAAA,IAAA3zB,EAAAse,QAAA,KACAsV,GAAA,IAAA5zB,EAAAse,QAAA,KACA,OAAA,SAAAqH,EAAAC,GACA,MAAAiO,EAAAF,EAAAlzB,KAAA6jB,IAAAqB,EAAAzW,EAAA0W,EAAA1W,GAAA,EACA4kB,EAAAF,EAAAnzB,KAAA6jB,IAAAqB,EAAAvB,EAAAwB,EAAAxB,GAAA,EACA,OAAA3jB,KAAAwjB,KAAAxjB,KAAAmjB,IAAAiQ,EAAA,GAAApzB,KAAAmjB,IAAAkQ,EAAA,KAiBAC,CAAA/zB,GACA,IAAAg0B,EAAAryB,OAAAqhB,kBACArY,EAAA,GACA,IAAA4e,GAAAwJ,EAAAluB,EAAAyuB,UAAAzuB,EAAA0uB,aACA,OAAA5oB,EAmBA,OADAmoB,GAAAjuB,EAAA7E,EAAA+yB,GAhBA,SAAAlE,EAAA9Q,EAAApe,GACA,GAAAyhB,IAAAyN,EAAA2E,QAAAT,EAAA7jB,EAAA6jB,EAAA3O,EAAAiP,GACA,OAEA,MAAAY,EAAApF,EAAAqF,eAAAb,GACA,IAAA9J,GAAA0K,EAAApvB,EAAAyuB,UAAAzuB,EAAA0uB,eAAA1E,EAAA2E,QAAAT,EAAA7jB,EAAA6jB,EAAA3O,EAAAiP,GACA,OAEA,MAAA5N,EAAAiO,EAAAX,EAAAkB,GACAxO,EAAAuO,GACArpB,EAAA,CAAA,CAAAkkB,QAAAA,EAAA9Q,aAAAA,EAAApe,MAAAA,IACAq0B,EAAAvO,GACAA,IAAAuO,GACArpB,EAAAgB,KAAA,CAAAkjB,QAAAA,EAAA9Q,aAAAA,EAAApe,MAAAA,OAIAgL,EAEA,SAAAwpB,GAAAtvB,EAAAnJ,EAAA4D,EAAA+zB,GACA,MAAAN,EAAAZ,GAAAz2B,EAAAmJ,GACA8F,EAAA,GACA3K,EAAAV,EAAAU,KACAo0B,EAAA,MAAAp0B,EAAA,WAAA,WACA,IAAAq0B,GAAA,EASA,OA5GA,SAAAxvB,EAAAmuB,GACA,MAAAC,EAAApuB,EAAAquB,+BACA,IAAAvzB,EAAAtB,EAAAwwB,EACA,IAAA,IAAA/yB,EAAA,EAAA8hB,EAAAqV,EAAAx2B,OAAAX,EAAA8hB,IAAA9hB,EAAA,GACA6D,MAAAA,EAAAtB,KAAAA,GAAA40B,EAAAn3B,IACA,IAAA,IAAAme,EAAA,EAAAmN,EAAA/oB,EAAA5B,OAAAwd,EAAAmN,IAAAnN,EACA4U,EAAAxwB,EAAA4b,GACA4U,EAAAsE,MACAH,EAAAnE,EAAAlvB,EAAAsa,IA4FAqa,CAAAzvB,GAAA,CAAAgqB,EAAA9Q,EAAApe,KACAkvB,EAAAuF,GAAArB,EAAA/yB,GAAAqzB,IACA1oB,EAAAgB,KAAA,CAAAkjB,QAAAA,EAAA9Q,aAAAA,EAAApe,MAAAA,IAEAkvB,EAAA2E,QAAAT,EAAA7jB,EAAA6jB,EAAA3O,EAAAiP,KACAgB,GAAA,MAGA/0B,EAAA8hB,YAAAiT,EACA,GAEA1pB,EAEA,IAAA4pB,GAAA,CACAC,MAAA,CACAjrB,MAAA1E,EAAAnJ,EAAA4D,EAAA+zB,GACA,MAAAN,EAAAZ,GAAAz2B,EAAAmJ,GACA7E,EAAAV,EAAAU,MAAA,IACA2K,EAAArL,EAAA8hB,UACAgS,GAAAvuB,EAAAkuB,EAAA/yB,EAAAqzB,GACAI,GAAA5uB,EAAAkuB,EAAA/yB,GAAA,EAAAqzB,GACA7S,EAAA,GACA,OAAA7V,EAAAlO,QAGAoI,EAAAquB,+BAAAxzB,SAAA+0B,IACA,MAAA90B,EAAAgL,EAAA,GAAAhL,MACAkvB,EAAA4F,EAAAp2B,KAAAsB,GACAkvB,IAAAA,EAAAsE,MACA3S,EAAA7U,KAAA,CAAAkjB,QAAAA,EAAA9Q,aAAA0W,EAAA90B,MAAAA,MAAAA,OAGA6gB,GATA,IAWAjX,QAAA1E,EAAAnJ,EAAA4D,EAAA+zB,GACA,MAAAN,EAAAZ,GAAAz2B,EAAAmJ,GACA7E,EAAAV,EAAAU,MAAA,KACA,IAAA2K,EAAArL,EAAA8hB,UACAgS,GAAAvuB,EAAAkuB,EAAA/yB,EAAAqzB,GACAI,GAAA5uB,EAAAkuB,EAAA/yB,GAAA,EAAAqzB,GACA,GAAA1oB,EAAAlO,OAAA,EAAA,CACA,MAAAshB,EAAApT,EAAA,GAAAoT,aACA1f,EAAAwG,EAAA6vB,eAAA3W,GAAA1f,KACAsM,EAAA,GACA,IAAA,IAAA7O,EAAA,EAAAA,EAAAuC,EAAA5B,SAAAX,EACA6O,EAAAgB,KAAA,CAAAkjB,QAAAxwB,EAAAvC,GAAAiiB,aAAAA,EAAApe,MAAA7D,IAGA,OAAA6O,GAEA6e,MAAA,CAAA3kB,EAAAnJ,EAAA4D,EAAA+zB,IAGAD,GAAAvuB,EAFAstB,GAAAz2B,EAAAmJ,GACAvF,EAAAU,MAAA,KACAqzB,GAEAsB,QAAA,CAAA9vB,EAAAnJ,EAAA4D,EAAA+zB,IAGAI,GAAA5uB,EAFAstB,GAAAz2B,EAAAmJ,GACAvF,EAAAU,MAAA,KACAV,EAAA8hB,UAAAiS,GAEAnkB,EAAA,CAAArK,EAAAnJ,EAAA4D,EAAA+zB,KACA/zB,EAAAU,KAAA,IACAm0B,GAAAtvB,EAAAnJ,EAAA4D,EAAA+zB,IAEAjP,EAAA,CAAAvf,EAAAnJ,EAAA4D,EAAA+zB,KACA/zB,EAAAU,KAAA,IACAm0B,GAAAtvB,EAAAnJ,EAAA4D,EAAA+zB,MAKA,MAAAuB,GAAA,IAAAC,OAAA,wCACAC,GAAA,IAAAD,OAAA,yEACA,SAAAE,GAAA/yB,EAAAwd,GACA,MAAAyS,GAAA,GAAAjwB,GAAAkwB,MAAA0C,IACA,IAAA3C,GAAA,WAAAA,EAAA,GACA,OAAA,IAAAzS,EAGA,OADAxd,GAAAiwB,EAAA,GACAA,EAAA,IACA,IAAA,KACA,OAAAjwB,EACA,IAAA,IACAA,GAAA,IAGA,OAAAwd,EAAAxd,EAGA,SAAAgzB,GAAAhzB,EAAAizB,GACA,MAAA7Z,EAAA,GACA8Z,EAAArY,EAAAoY,GACAlb,EAAAmb,EAAA12B,OAAAub,KAAAkb,GAAAA,EACAE,EAAAtY,EAAA7a,GACAkzB,EACAE,GAAAlY,EAAAlb,EAAAozB,GAAApzB,EAAAizB,EAAAG,KACAA,GAAApzB,EAAAozB,GACA,IAAApzB,EACA,IAAA,MAAAozB,KAAArb,EACAqB,EAAAga,IAAAD,EAAAC,IAXA,EAaA,OAAAha,EAEA,SAAAia,GAAArzB,GACA,OAAAgzB,GAAAhzB,EAAA,CAAA2nB,IAAA,IAAAvgB,MAAA,IAAAwgB,OAAA,IAAAzgB,KAAA,MAEA,SAAAmsB,GAAAtzB,GACA,OAAAgzB,GAAAhzB,EAAA,CAAA,UAAA,WAAA,aAAA,gBAEA,SAAAuzB,GAAAvzB,GACA,MAAA8D,EAAAuvB,GAAArzB,GAGA,OAFA8D,EAAAghB,MAAAhhB,EAAAqD,KAAArD,EAAAsD,MACAtD,EAAAmiB,OAAAniB,EAAA6jB,IAAA7jB,EAAA8jB,OACA9jB,EAEA,SAAA0vB,GAAAl2B,EAAAm2B,GACAn2B,EAAAA,GAAA,GACAm2B,EAAAA,GAAAvV,GAAA5b,KACA,IAAAkb,EAAAtC,EAAA5d,EAAAkgB,KAAAiW,EAAAjW,MACA,iBAAAA,IACAA,EAAAnF,SAAAmF,EAAA,KAEA,IAAAmB,EAAAzD,EAAA5d,EAAAqhB,MAAA8U,EAAA9U,OACAA,KAAA,GAAAA,GAAAuR,MAAA4C,MACAnwB,QAAA+wB,KAAA,kCAAA/U,EAAA,KACAA,EAAA,IAEA,MAAArc,EAAA,CACAoc,OAAAxD,EAAA5d,EAAAohB,OAAA+U,EAAA/U,QACAE,WAAAmU,GAAA7X,EAAA5d,EAAAshB,WAAA6U,EAAA7U,YAAApB,GACAA,KAAAA,EACAmB,MAAAA,EACAlF,OAAAyB,EAAA5d,EAAAmc,OAAAga,EAAAha,QACAkL,OAAA,IAGA,OADAriB,EAAAqiB,OAAAJ,GAAAjiB,GACAA,EAEA,SAAAqxB,GAAAC,EAAA72B,EAAAY,EAAAk2B,GACA,IACA/5B,EAAA8hB,EAAA5b,EADA8zB,GAAA,EAEA,IAAAh6B,EAAA,EAAA8hB,EAAAgY,EAAAn5B,OAAAX,EAAA8hB,IAAA9hB,EAEA,GADAkG,EAAA4zB,EAAA95B,QACAgC,IAAAkE,SAGAlE,IAAAiB,GAAA,mBAAAiD,IACAA,EAAAA,EAAAjD,GACA+2B,GAAA,QAEAh4B,IAAA6B,GAAApB,EAAAyD,KACAA,EAAAA,EAAArC,EAAAqC,EAAAvF,QACAq5B,GAAA,QAEAh4B,IAAAkE,GAIA,OAHA6zB,IAAAC,IACAD,EAAAC,WAAA,GAEA9zB,EAIA,SAAA+zB,GAAAC,EAAAC,GACA,MAAA50B,IAAAA,EAAAd,IAAAA,GAAAy1B,EACA,MAAA,CACA30B,IAAAA,EAAAZ,KAAA6jB,IAAAhH,EAAA2Y,EAAA50B,IACAd,IAAAA,EAAA+c,EAAA2Y,EAAA11B,IAIA,MAAA21B,GAAA,CAAA,OAAA,MAAA,QAAA,UACA,SAAAC,GAAAzR,EAAAqO,GACA,OAAArO,EAAA0R,QAAAnpB,GAAAA,EAAAiS,MAAA6T,IAEA,SAAAsD,GAAA3R,EAAA1kB,GACA,OAAA0kB,EAAA0R,QAAAnpB,IAAA,IAAAipB,GAAA5X,QAAArR,EAAAiS,MAAAjS,EAAAyiB,IAAA1vB,OAAAA,IAEA,SAAAs2B,GAAA5R,EAAAlH,GACA,OAAAkH,EAAAR,MAAA,CAAA/nB,EAAAuQ,KACA,MAAAmR,EAAAL,EAAA9Q,EAAAvQ,EACA2hB,EAAAN,EAAArhB,EAAAuQ,EACA,OAAAmR,EAAApC,SAAAqC,EAAArC,OACAoC,EAAAle,MAAAme,EAAAne,MACAke,EAAApC,OAAAqC,EAAArC,UAkCA,SAAA8a,GAAAC,EAAAC,GACA,MAAAC,EAdA,SAAAF,GACA,MAAAE,EAAA,GACA,IAAA,MAAAC,KAAAH,EAAA,CACA,MAAAI,MAAAA,EAAA1X,IAAAA,EAAA2X,YAAAA,GAAAF,EACA,IAAAC,IAAAV,GAAAY,SAAA5X,GACA,SAEA,MAAA6X,EAAAL,EAAAE,KAAAF,EAAAE,GAAA,CAAAI,MAAA,EAAAC,OAAA,EAAAxb,OAAA,EAAA+D,KAAA,IACAuX,EAAAC,QACAD,EAAAtb,QAAAob,EAEA,OAAAH,EAGAQ,CAAAV,IACAW,aAAAA,EAAAC,cAAAA,GAAAX,EACA,IAAA36B,EAAA8hB,EAAAyZ,EACA,IAAAv7B,EAAA,EAAA8hB,EAAA4Y,EAAA/5B,OAAAX,EAAA8hB,IAAA9hB,EAAA,CACAu7B,EAAAb,EAAA16B,GACA,MAAAw7B,SAAAA,GAAAD,EAAA3H,IACAkH,EAAAF,EAAAW,EAAAT,OACAW,EAAAX,GAAAS,EAAAR,YAAAD,EAAAnb,OACA4b,EAAAG,YACAH,EAAAvQ,MAAAyQ,EAAAA,EAAAJ,EAAAG,GAAAb,EAAAgB,eACAJ,EAAApP,OAAAmP,IAEAC,EAAAvQ,MAAAqQ,EACAE,EAAApP,OAAAsP,EAAAA,EAAAH,EAAAE,GAAAb,EAAAiB,iBAGA,OAAAhB,EAoBA,SAAAiB,GAAAC,EAAAtE,EAAAn3B,EAAAuQ,GACA,OAAAjM,KAAAF,IAAAq3B,EAAAz7B,GAAAm3B,EAAAn3B,IAAAsE,KAAAF,IAAAq3B,EAAAlrB,GAAA4mB,EAAA5mB,IAEA,SAAAmrB,GAAAD,EAAAE,GACAF,EAAAjO,IAAAlpB,KAAAF,IAAAq3B,EAAAjO,IAAAmO,EAAAnO,KACAiO,EAAAzuB,KAAA1I,KAAAF,IAAAq3B,EAAAzuB,KAAA2uB,EAAA3uB,MACAyuB,EAAAhO,OAAAnpB,KAAAF,IAAAq3B,EAAAhO,OAAAkO,EAAAlO,QACAgO,EAAAxuB,MAAA3I,KAAAF,IAAAq3B,EAAAxuB,MAAA0uB,EAAA1uB,OAEA,SAAA2uB,GAAAzE,EAAAmD,EAAAY,EAAAX,GACA,MAAAxX,IAAAA,EAAAwQ,IAAAA,GAAA2H,EACAO,EAAAtE,EAAAsE,WACA,IAAA/a,EAAAqC,GAAA,CACAmY,EAAA7X,OACA8T,EAAApU,IAAAmY,EAAA7X,MAEA,MAAAoX,EAAAF,EAAAW,EAAAT,QAAA,CAAApX,KAAA,EAAAwX,MAAA,GACAJ,EAAApX,KAAA/e,KAAAF,IAAAq2B,EAAApX,KAAA6X,EAAAG,WAAA9H,EAAAzH,OAAAyH,EAAA5I,OACAuQ,EAAA7X,KAAAoX,EAAApX,KAAAoX,EAAAI,MACA1D,EAAApU,IAAAmY,EAAA7X,KAEAkQ,EAAAsI,YACAH,GAAAD,EAAAlI,EAAAsI,cAEA,MAAAC,EAAAx3B,KAAAF,IAAA,EAAAk2B,EAAAyB,WAAAP,GAAAC,EAAAtE,EAAA,OAAA,UACA6E,EAAA13B,KAAAF,IAAA,EAAAk2B,EAAA2B,YAAAT,GAAAC,EAAAtE,EAAA,MAAA,WACA+E,EAAAJ,IAAA3E,EAAAplB,EACAoqB,EAAAH,IAAA7E,EAAAhmB,EAGA,OAFAgmB,EAAAplB,EAAA+pB,EACA3E,EAAAhmB,EAAA6qB,EACAd,EAAAG,WACA,CAAAe,KAAAF,EAAAG,MAAAF,GACA,CAAAC,KAAAD,EAAAE,MAAAH,GAcA,SAAAI,GAAAjB,EAAAlE,GACA,MAAAsE,EAAAtE,EAAAsE,WACA,SAAAc,EAAA1J,GACA,MAAAtF,EAAA,CAAAvgB,KAAA,EAAAwgB,IAAA,EAAAvgB,MAAA,EAAAwgB,OAAA,GAIA,OAHAoF,EAAAtvB,SAAAwf,IACAwK,EAAAxK,GAAAze,KAAAF,IAAA+yB,EAAApU,GAAA0Y,EAAA1Y,OAEAwK,EAEA,OACAgP,EADAlB,EACA,CAAA,OAAA,SACA,CAAA,MAAA,WAEA,SAAAmB,GAAAC,EAAAtF,EAAAmD,EAAAC,GACA,MAAAmC,EAAA,GACA,IAAA/8B,EAAA8hB,EAAAyZ,EAAA3H,EAAAoJ,EAAAC,EACA,IAAAj9B,EAAA,EAAA8hB,EAAAgb,EAAAn8B,OAAAq8B,EAAA,EAAAh9B,EAAA8hB,IAAA9hB,EAAA,CACAu7B,EAAAuB,EAAA98B,GACA4zB,EAAA2H,EAAA3H,IACAA,EAAAsJ,OACA3B,EAAAvQ,OAAAwM,EAAAplB,EACAmpB,EAAApP,QAAAqL,EAAAhmB,EACAmrB,GAAApB,EAAAG,WAAAlE,IAEA,MAAAiF,KAAAA,EAAAC,MAAAA,GAAAT,GAAAzE,EAAAmD,EAAAY,EAAAX,GACAoC,GAAAP,GAAAM,EAAAp8B,OACAs8B,EAAAA,GAAAP,EACA9I,EAAA4H,UACAuB,EAAAltB,KAAA0rB,GAGA,OAAAyB,GAAAH,GAAAE,EAAAvF,EAAAmD,EAAAC,IAAAqC,EAEA,SAAAE,GAAAvJ,EAAAvmB,EAAAwgB,EAAA7C,EAAAmB,GACAyH,EAAA/F,IAAAA,EACA+F,EAAAvmB,KAAAA,EACAumB,EAAAtmB,MAAAD,EAAA2d,EACA4I,EAAA9F,OAAAD,EAAA1B,EACAyH,EAAA5I,MAAAA,EACA4I,EAAAzH,OAAAA,EAEA,SAAAiR,GAAAN,EAAAtF,EAAAmD,EAAAC,GACA,MAAAyC,EAAA1C,EAAAlyB,QACA,IAAA2K,EAAAA,EAAAkV,EAAAA,GAAAkP,EACA,IAAA,MAAA+D,KAAAuB,EAAA,CACA,MAAAlJ,EAAA2H,EAAA3H,IACAkH,EAAAF,EAAAW,EAAAT,QAAA,CAAAI,MAAA,EAAAC,OAAA,EAAAxb,OAAA,GACAA,EAAA4b,EAAAR,YAAAD,EAAAnb,QAAA,EACA,GAAA4b,EAAAG,WAAA,CACA,MAAA1Q,EAAAwM,EAAAplB,EAAAuN,EACAwM,EAAA2O,EAAApX,MAAAkQ,EAAAzH,OACA5I,GAAAuX,EAAA5tB,SACAob,EAAAwS,EAAA5tB,OAEA0mB,EAAA4H,SACA2B,GAAAvJ,EAAAyJ,EAAAhwB,KAAAib,EAAAqS,EAAAyB,WAAAiB,EAAA/vB,MAAA+vB,EAAAhwB,KAAA8e,GAEAgR,GAAAvJ,EAAA4D,EAAAnqB,KAAAytB,EAAAK,OAAA7S,EAAA0C,EAAAmB,GAEA2O,EAAA5tB,MAAAob,EACAwS,EAAAK,QAAAnQ,EACA1C,EAAAsL,EAAA9F,WACA,CACA,MAAA3B,EAAAqL,EAAAhmB,EAAAmO,EACAqL,EAAA8P,EAAApX,MAAAkQ,EAAA5I,MACAzH,GAAAuX,EAAA5tB,SACAkG,EAAA0nB,EAAA5tB,OAEA0mB,EAAA4H,SACA2B,GAAAvJ,EAAAxgB,EAAAiqB,EAAAxP,IAAA7C,EAAA2P,EAAA2B,YAAAe,EAAAvP,OAAAuP,EAAAxP,KAEAsP,GAAAvJ,EAAAxgB,EAAAokB,EAAA3J,IAAAiN,EAAAK,OAAAnQ,EAAAmB,GAEA2O,EAAA5tB,MAAAkG,EACA0nB,EAAAK,QAAAhP,EACA/Y,EAAAwgB,EAAAtmB,OAGAkqB,EAAApkB,EAAAA,EACAokB,EAAAlP,EAAAA,EAEAlE,GAAA3U,IAAA,SAAA,CACAhH,QAAA,CACAolB,IAAA,EACAvgB,MAAA,EACAwgB,OAAA,EACAzgB,KAAA,KAGA,IAAAqtB,GAAA,CACAjtB,OAAA1E,EAAA+F,GACA/F,EAAA+zB,QACA/zB,EAAA+zB,MAAA,IAEAhuB,EAAA0sB,SAAA1sB,EAAA0sB,WAAA,EACA1sB,EAAAmoB,SAAAnoB,EAAAmoB,UAAA,MACAnoB,EAAA6Q,OAAA7Q,EAAA6Q,QAAA,EACA7Q,EAAAwuB,QAAAxuB,EAAAwuB,SAAA,WACA,MAAA,CAAA,CACAC,EAAA,EACA9vB,KAAA+pB,GACA1oB,EAAAC,KAAAyoB,OAIAzuB,EAAA+zB,MAAAjtB,KAAAf,IAEArB,UAAA1E,EAAAy0B,GACA,MAAA35B,EAAAkF,EAAA+zB,MAAA/zB,EAAA+zB,MAAAta,QAAAgb,IAAA,GACA,IAAA35B,GACAkF,EAAA+zB,MAAAnR,OAAA9nB,EAAA,IAGA4J,UAAA1E,EAAA+F,EAAAtL,GACAsL,EAAA0sB,SAAAh4B,EAAAg4B,SACA1sB,EAAAmoB,SAAAzzB,EAAAyzB,SACAnoB,EAAA6Q,OAAAnc,EAAAmc,QAEAlS,OAAA1E,EAAAiiB,EAAAmB,EAAAsR,GACA,IAAA10B,EACA,OAEA,MAAAN,EAAAgxB,GAAA1wB,EAAAvF,QAAA+3B,OAAA9yB,SACAkzB,EAAAh3B,KAAAF,IAAAumB,EAAAviB,EAAAuiB,MAAA,GACA4Q,EAAAj3B,KAAAF,IAAA0nB,EAAA1jB,EAAA0jB,OAAA,GACA2Q,EA7LA,SAAAA,GACA,MAAAY,EAnDA,SAAAZ,GACA,MAAAY,EAAA,GACA,IAAA19B,EAAA8hB,EAAA8R,EAAAxQ,EAAA0X,EAAAC,EACA,IAAA/6B,EAAA,EAAA8hB,GAAAgb,GAAA,IAAAn8B,OAAAX,EAAA8hB,IAAA9hB,EACA4zB,EAAAkJ,EAAA98B,KACAi3B,SAAA7T,EAAA5f,SAAAs3B,MAAAA,EAAAC,YAAAA,EAAA,IAAAnH,GACA8J,EAAA7tB,KAAA,CACAhM,MAAA7D,EACA4zB,IAAAA,EACAxQ,IAAAA,EACAsY,WAAA9H,EAAA+J,eACAhe,OAAAiU,EAAAjU,OACAmb,MAAAA,GAAA1X,EAAA0X,EACAC,YAAAA,IAGA,OAAA2C,EAmCAE,CAAAd,GACAtB,EAAAhB,GAAAkD,EAAApD,QAAAO,GAAAA,EAAAjH,IAAA4H,YAAA,GACAnuB,EAAAmtB,GAAAH,GAAAqD,EAAA,SAAA,GACApwB,EAAAktB,GAAAH,GAAAqD,EAAA,UACA7P,EAAA2M,GAAAH,GAAAqD,EAAA,QAAA,GACA5P,EAAA0M,GAAAH,GAAAqD,EAAA,WACAG,EAAAtD,GAAAmD,EAAA,KACAI,EAAAvD,GAAAmD,EAAA,KACA,MAAA,CACAlC,SAAAA,EACAuC,WAAA1wB,EAAA2wB,OAAAnQ,GACAoQ,eAAA3wB,EAAA0wB,OAAAF,GAAAE,OAAAlQ,GAAAkQ,OAAAH,GACArG,UAAA6C,GAAAqD,EAAA,aACAQ,SAAA7wB,EAAA2wB,OAAA1wB,GAAA0wB,OAAAF,GACApC,WAAA7N,EAAAmQ,OAAAlQ,GAAAkQ,OAAAH,IA8KAM,CAAAp1B,EAAA+zB,OACAsB,EAAAtB,EAAAoB,SACAG,EAAAvB,EAAApB,WACAv5B,EAAA4G,EAAA+zB,OAAAlJ,IACA,mBAAAA,EAAA0K,cACA1K,EAAA0K,kBAGA,MAAAC,EAAAH,EAAAtuB,QAAA,CAAA0uB,EAAA3D,IACAA,EAAAjH,IAAApwB,UAAA,IAAAq3B,EAAAjH,IAAApwB,QAAAi7B,QAAAD,EAAAA,EAAA,GAAA,IAAA,EACA7D,EAAAj4B,OAAAg8B,OAAA,CACAtC,WAAApR,EACAsR,YAAAnQ,EACA1jB,QAAAA,EACAkzB,eAAAA,EACAC,gBAAAA,EACAP,aAAAM,EAAA,EAAA4C,EACAjD,cAAAM,EAAA,IAEAE,EAAAp5B,OAAAC,OAAA,GAAA8F,GACAszB,GAAAD,EAAArC,GAAAgE,IACA,MAAAjG,EAAA90B,OAAAC,OAAA,CACAm5B,WAAAA,EACA1pB,EAAAupB,EACAnqB,EAAAoqB,EACAxoB,EAAA3K,EAAA4E,KACAib,EAAA7f,EAAAolB,KACAplB,GACAmyB,EAAAH,GAAA2D,EAAAJ,OAAAK,GAAA1D,GACAkC,GAAAC,EAAAtB,SAAAhE,EAAAmD,EAAAC,GACAiC,GAAAuB,EAAA5G,EAAAmD,EAAAC,GACAiC,GAAAwB,EAAA7G,EAAAmD,EAAAC,IACAiC,GAAAuB,EAAA5G,EAAAmD,EAAAC,GAzKA,SAAApD,GACA,MAAAsE,EAAAtE,EAAAsE,WACA,SAAA6C,EAAAvb,GACA,MAAAwb,EAAAj6B,KAAAF,IAAAq3B,EAAA1Y,GAAAoU,EAAApU,GAAA,GAEA,OADAoU,EAAApU,IAAAwb,EACAA,EAEApH,EAAAlP,GAAAqW,EAAA,OACAnH,EAAApkB,GAAAurB,EAAA,QACAA,EAAA,SACAA,EAAA,UAiKAE,CAAArH,GACA4F,GAAAN,EAAAiB,WAAAvG,EAAAmD,EAAAC,GACApD,EAAApkB,GAAAokB,EAAAplB,EACAolB,EAAAlP,GAAAkP,EAAAhmB,EACA4rB,GAAAN,EAAAmB,eAAAzG,EAAAmD,EAAAC,GACA7xB,EAAAyuB,UAAA,CACAnqB,KAAAmqB,EAAAnqB,KACAwgB,IAAA2J,EAAA3J,IACAvgB,MAAAkqB,EAAAnqB,KAAAmqB,EAAAplB,EACA0b,OAAA0J,EAAA3J,IAAA2J,EAAAhmB,EACA2a,OAAAqL,EAAAhmB,EACAwZ,MAAAwM,EAAAplB,GAEAjQ,EAAA26B,EAAAtF,WAAA+D,IACA,MAAA3H,EAAA2H,EAAA3H,IACAlxB,OAAAC,OAAAixB,EAAA7qB,EAAAyuB,WACA5D,EAAAsJ,OAAA1F,EAAAplB,EAAAolB,EAAAhmB,QAKA,SAAAstB,GAAAC,EAAAC,EAAA,CAAA,IAAAC,EAAAF,EAAApF,EAAAuF,EAAA,KAAAH,EAAA,KACAxb,GAAAoW,KACAA,EAAAwF,GAAA,YAAAJ,IAEA,MAAA5T,EAAA,CACA1d,CAAAtD,OAAAi1B,aAAA,SACAC,YAAA,EACAC,QAAAP,EACAQ,YAAAN,EACApY,UAAA8S,EACA6F,WAAAN,EACAO,SAAAvb,GAAA4a,GAAA,CAAA5a,KAAA6a,GAAAC,EAAAC,EAAAtF,IAEA,OAAA,IAAA+F,MAAAvU,EAAA,CACAwU,eAAA,CAAAvd,EAAAkX,YACAlX,EAAAkX,UACAlX,EAAAwd,aACAb,EAAA,GAAAzF,IACA,GAEAhqB,IAAA,CAAA8S,EAAAkX,IACAuG,GAAAzd,EAAAkX,GACA,IA0LA,SAAAA,EAAA0F,EAAAD,EAAAe,GACA,IAAA55B,EACA,IAAA,MAAA65B,KAAAf,EAEA,GADA94B,EAAAi5B,GAAAa,GAAAD,EAAAzG,GAAAyF,GACAxb,GAAArd,GACA,OAAA+5B,GAAA3G,EAAApzB,GACAg6B,GAAAnB,EAAAe,EAAAxG,EAAApzB,GACAA,EAjMAi6B,CAAA7G,EAAA0F,EAAAD,EAAA3c,KAEAge,yBAAA,CAAAhe,EAAAkX,IACA+G,QAAAD,yBAAAhe,EAAAkd,QAAA,GAAAhG,GAEAgH,eAAA,IACAD,QAAAC,eAAAvB,EAAA,IAEApb,IAAA,CAAAvB,EAAAkX,IACAiH,GAAAne,GAAA4Y,SAAA1B,GAEAkH,QAAApe,GACAme,GAAAne,GAEA3S,IAAA,CAAA2S,EAAAkX,EAAApzB,MACAkc,EAAAqe,WAAAre,EAAAqe,SAAAvB,MACA5F,GAAApzB,SACAkc,EAAAkX,UACAlX,EAAAwd,OACA,KAIA,SAAAc,GAAAZ,EAAA78B,EAAA09B,EAAAC,GACA,MAAAzV,EAAA,CACAkU,YAAA,EACAwB,OAAAf,EACAgB,SAAA79B,EACA89B,UAAAJ,EACA1F,OAAA,IAAA/I,IACA7N,aAAAA,GAAAyb,EAAAc,GACAI,WAAA/b,GAAAyb,GAAAZ,EAAA7a,EAAA0b,EAAAC,GACAnB,SAAAvb,GAAAwc,GAAAZ,EAAAL,SAAAvb,GAAAjhB,EAAA09B,EAAAC,IAEA,OAAA,IAAAlB,MAAAvU,EAAA,CACAwU,eAAA,CAAAvd,EAAAkX,YACAlX,EAAAkX,UACAwG,EAAAxG,IACA,GAEAhqB,IAAA,CAAA8S,EAAAkX,EAAA2H,IACApB,GAAAzd,EAAAkX,GACA,IA8CA,SAAAlX,EAAAkX,EAAA2H,GACA,MAAAJ,OAAAA,EAAAC,SAAAA,EAAAC,UAAAA,EAAA1c,aAAAR,GAAAzB,EACA,IAAAlc,EAAA26B,EAAAvH,GACA9V,GAAAtd,IAAA2d,EAAAqd,aAAA5H,KACApzB,EAUA,SAAAozB,EAAApzB,EAAAkc,EAAA6e,GACA,MAAAJ,OAAAA,EAAAC,SAAAA,EAAAC,UAAAA,EAAA9F,OAAAA,GAAA7Y,EACA,GAAA6Y,EAAAtX,IAAA2V,GACA,MAAA,IAAAh5B,MAAA,uBAAAkC,MAAA6H,KAAA4wB,GAAAkG,KAAA,MAAA,KAAA7H,GAEA2B,EAAA9I,IAAAmH,GACApzB,EAAAA,EAAA46B,EAAAC,GAAAE,GACAhG,EAAA9qB,OAAAmpB,GACAvY,EAAA7a,KACAA,EAAAg6B,GAAAW,EAAAvB,QAAAuB,EAAAvH,EAAApzB,IAEA,OAAAA,EArBAk7B,CAAA9H,EAAApzB,EAAAkc,EAAA6e,IAEAx+B,EAAAyD,IAAAA,EAAAvF,SACAuF,EAoBA,SAAAozB,EAAApzB,EAAAkc,EAAAif,GACA,MAAAR,OAAAA,EAAAC,SAAAA,EAAAC,UAAAA,EAAA1c,aAAAR,GAAAzB,EACA,GAAAmB,GAAAud,EAAAj9B,QAAAw9B,EAAA/H,GACApzB,EAAAA,EAAA46B,EAAAj9B,MAAAqC,EAAAvF,aACA,GAAAogB,EAAA7a,EAAA,IAAA,CACA,MAAAsD,EAAAtD,EACA64B,EAAA8B,EAAAvB,QAAAhF,QAAAtoB,GAAAA,IAAAxI,IACAtD,EAAA,GACA,IAAA,MAAA4I,KAAAtF,EAAA,CACA,MAAA83B,EAAApB,GAAAnB,EAAA8B,EAAAvH,EAAAxqB,GACA5I,EAAA2J,KAAA6wB,GAAAY,EAAAR,EAAAC,GAAAA,EAAAzH,GAAAzV,KAGA,OAAA3d,EAjCAq7B,CAAAjI,EAAApzB,EAAAkc,EAAAyB,EAAAwd,cAEApB,GAAA3G,EAAApzB,KACAA,EAAAw6B,GAAAx6B,EAAA46B,EAAAC,GAAAA,EAAAzH,GAAAzV,IAEA,OAAA3d,EA1DAs7B,CAAApf,EAAAkX,EAAA2H,KAEAb,yBAAA,CAAAhe,EAAAkX,IACAlX,EAAAiC,aAAAod,QACApB,QAAA1c,IAAAmc,EAAAxG,GAAA,CAAA9S,YAAA,EAAAkL,cAAA,QAAA1vB,EACAq+B,QAAAD,yBAAAN,EAAAxG,GAEAgH,eAAA,IACAD,QAAAC,eAAAR,GAEAnc,IAAA,CAAAvB,EAAAkX,IACA+G,QAAA1c,IAAAmc,EAAAxG,GAEAkH,QAAA,IACAH,QAAAG,QAAAV,GAEArwB,IAAA,CAAA2S,EAAAkX,EAAApzB,KACA45B,EAAAxG,GAAApzB,SACAkc,EAAAkX,IACA,KAIA,SAAAjV,GAAAyb,EAAA1b,EAAA,CAAAsd,YAAA,EAAAC,WAAA,IACA,MAAAjb,YAAAA,EAAAtC,EAAAsd,WAAA9a,WAAAA,EAAAxC,EAAAud,UAAAC,SAAAA,EAAAxd,EAAAqd,SAAA3B,EACA,MAAA,CACA2B,QAAAG,EACAF,WAAAhb,EACAib,UAAA/a,EACAsa,aAAA1d,GAAAkD,GAAAA,EAAA,IAAAA,EACA2a,YAAA7d,GAAAoD,GAAAA,EAAA,IAAAA,GAGA,MAAAoZ,GAAA,CAAAD,EAAAt0B,IAAAs0B,EAAAA,EAAA1c,GAAA5X,GAAAA,EACAw0B,GAAA,CAAA3G,EAAApzB,IAAA6a,EAAA7a,IAAA,aAAAozB,EACA,SAAAuG,GAAAzd,EAAAkX,EAAAO,GACA,IAAA3zB,EAAAkc,EAAAkX,GACA,OAAA/V,GAAArd,KAGAA,EAAA2zB,IACAtW,GAAArd,KACAkc,EAAAkX,GAAApzB,IAJAA,EAkDA,SAAA27B,GAAAlI,EAAAL,EAAApzB,GACA,OAAAsd,GAAAmW,GAAAA,EAAAL,EAAApzB,GAAAyzB,EAEA,MAAAmI,GAAA,CAAAh+B,EAAAyuB,KAAA,IAAAzuB,EAAAyuB,EACA,iBAAAzuB,EAAAqf,GAAAoP,EAAAzuB,QAAA9B,EACA,SAAA+/B,GAAAtyB,EAAAuyB,EAAAl+B,EAAAm+B,GACA,IAAA,MAAA1P,KAAAyP,EAAA,CACA,MAAA9d,EAAA4d,GAAAh+B,EAAAyuB,GACA,GAAArO,EAAA,CACAzU,EAAA0iB,IAAAjO,GACA,MAAAyV,EAAAkI,GAAA3d,EAAA2C,UAAA/iB,EAAAogB,GACA,GAAAX,GAAAoW,IAAAA,IAAA71B,GAAA61B,IAAAsI,EACA,OAAAtI,OAEA,IAAA,IAAAzV,GAAAX,GAAA0e,IAAAn+B,IAAAm+B,EACA,OAAA,KAGA,OAAA,EAEA,SAAA/B,GAAA8B,EAAAV,EAAAhI,EAAApzB,GACA,MAAA+4B,EAAAqC,EAAA/B,YACA5F,EAAAkI,GAAAP,EAAAza,UAAAyS,EAAApzB,GACAg8B,EAAA,IAAAF,KAAA/C,GACAxvB,EAAA,IAAAyiB,IACAziB,EAAA0iB,IAAAjsB,GACA,IAAApC,EAAAq+B,GAAA1yB,EAAAyyB,EAAA5I,EAAAK,GAAAL,GACA,OAAA,OAAAx1B,MAGAyf,GAAAoW,IAAAA,IAAAL,IACAx1B,EAAAq+B,GAAA1yB,EAAAyyB,EAAAvI,EAAA71B,GACA,OAAAA,KAIAg7B,GAAAt8B,MAAA6H,KAAAoF,GAAA,CAAA,IAAAwvB,EAAAtF,GACA,IAQA,SAAA2H,EAAAhI,EAAApzB,GACA,MAAAqsB,EAAA+O,EAAA9B,aACAlG,KAAA/G,IACAA,EAAA+G,GAAA,IAEA,MAAAlX,EAAAmQ,EAAA+G,GACA,GAAA72B,EAAA2f,IAAArB,EAAA7a,GACA,OAAAA,EAEA,OAAAkc,EAjBAggB,CAAAd,EAAAhI,EAAApzB,MAEA,SAAAi8B,GAAA1yB,EAAAyyB,EAAAp+B,EAAA61B,GACA,KAAA71B,GACAA,EAAAi+B,GAAAtyB,EAAAyyB,EAAAp+B,EAAA61B,GAEA,OAAA71B,EAwBA,SAAAq7B,GAAAr7B,EAAAi7B,GACA,IAAA,MAAA7a,KAAA6a,EAAA,CACA,IAAA7a,EACA,SAEA,MAAAhe,EAAAge,EAAApgB,GACA,GAAAyf,GAAArd,GACA,OAAAA,GAIA,SAAAq6B,GAAAne,GACA,IAAAnE,EAAAmE,EAAAwd,MAIA,OAHA3hB,IACAA,EAAAmE,EAAAwd,MAIA,SAAAb,GACA,MAAAtvB,EAAA,IAAAyiB,IACA,IAAA,MAAAhO,KAAA6a,EACA,IAAA,MAAAj7B,KAAApB,OAAAub,KAAAiG,GAAAoW,QAAAroB,IAAAA,EAAA0U,WAAA,OACAlX,EAAA0iB,IAAAruB,GAGA,OAAAtB,MAAA6H,KAAAoF,GAXA4yB,CAAAjgB,EAAAkd,UAEArhB,EAYA,MAAAqkB,GAAAz8B,OAAAy8B,SAAA,MACAC,GAAA,CAAAC,EAAAxiC,IAAAA,EAAAwiC,EAAA7hC,SAAA6hC,EAAAxiC,GAAAq3B,MAAAmL,EAAAxiC,GACAyiC,GAAAx+B,GAAA,MAAAA,EAAA,IAAA,IACA,SAAAy+B,GAAAC,EAAAC,EAAAC,EAAA/iC,GACA,MAAAquB,EAAAwU,EAAAtL,KAAAuL,EAAAD,EACAG,EAAAF,EACAG,EAAAF,EAAAxL,KAAAuL,EAAAC,EACAG,EAAApZ,GAAAkZ,EAAA3U,GACA8U,EAAArZ,GAAAmZ,EAAAD,GACA,IAAAI,EAAAF,GAAAA,EAAAC,GACAE,EAAAF,GAAAD,EAAAC,GACAC,EAAAp9B,MAAAo9B,GAAA,EAAAA,EACAC,EAAAr9B,MAAAq9B,GAAA,EAAAA,EACA,MAAAC,EAAAtjC,EAAAojC,EACAG,EAAAvjC,EAAAqjC,EACA,MAAA,CACAhV,SAAA,CACA/a,EAAA0vB,EAAA1vB,EAAAgwB,GAAAL,EAAA3vB,EAAA+a,EAAA/a,GACAkV,EAAAwa,EAAAxa,EAAA8a,GAAAL,EAAAza,EAAA6F,EAAA7F,IAEAya,KAAA,CACA3vB,EAAA0vB,EAAA1vB,EAAAiwB,GAAAN,EAAA3vB,EAAA+a,EAAA/a,GACAkV,EAAAwa,EAAAxa,EAAA+a,GAAAN,EAAAza,EAAA6F,EAAA7F,KAuDA,SAAAgb,GAAAd,EAAAv+B,EAAA,KACA,MAAAs/B,EAAAd,GAAAx+B,GACAu/B,EAAAhB,EAAA7hC,OACA8iC,EAAAjhC,MAAAghC,GAAAjW,KAAA,GACAmW,EAAAlhC,MAAAghC,GACA,IAAAxjC,EAAA2jC,EAAAC,EACAC,EAAAtB,GAAAC,EAAA,GACA,IAAAxiC,EAAA,EAAAA,EAAAwjC,IAAAxjC,EAIA,GAHA2jC,EAAAC,EACAA,EAAAC,EACAA,EAAAtB,GAAAC,EAAAxiC,EAAA,GACA4jC,EAAA,CAGA,GAAAC,EAAA,CACA,MAAAC,EAAAD,EAAA5/B,GAAA2/B,EAAA3/B,GACAw/B,EAAAzjC,GAAA,IAAA8jC,GAAAD,EAAAN,GAAAK,EAAAL,IAAAO,EAAA,EAEAJ,EAAA1jC,GAAA2jC,EACAE,EACArc,GAAAic,EAAAzjC,EAAA,MAAAwnB,GAAAic,EAAAzjC,IAAA,GACAyjC,EAAAzjC,EAAA,GAAAyjC,EAAAzjC,IAAA,EAFAyjC,EAAAzjC,EAAA,GADAyjC,EAAAzjC,IArEA,SAAAwiC,EAAAiB,EAAAC,GACA,MAAAF,EAAAhB,EAAA7hC,OACA,IAAAojC,EAAAC,EAAAC,EAAAC,EAAAN,EACAC,EAAAtB,GAAAC,EAAA,GACA,IAAA,IAAAxiC,EAAA,EAAAA,EAAAwjC,EAAA,IAAAxjC,EACA4jC,EAAAC,EACAA,EAAAtB,GAAAC,EAAAxiC,EAAA,GACA4jC,GAAAC,IAGAjc,GAAA6b,EAAAzjC,GAAA,EAAAsiC,IACAoB,EAAA1jC,GAAA0jC,EAAA1jC,EAAA,GAAA,GAGA+jC,EAAAL,EAAA1jC,GAAAyjC,EAAAzjC,GACAgkC,EAAAN,EAAA1jC,EAAA,GAAAyjC,EAAAzjC,GACAkkC,EAAAv/B,KAAAmjB,IAAAic,EAAA,GAAAp/B,KAAAmjB,IAAAkc,EAAA,GACAE,GAAA,IAGAD,EAAA,EAAAt/B,KAAAwjB,KAAA+b,GACAR,EAAA1jC,GAAA+jC,EAAAE,EAAAR,EAAAzjC,GACA0jC,EAAA1jC,EAAA,GAAAgkC,EAAAC,EAAAR,EAAAzjC,MAoDAmkC,CAAA3B,EAAAiB,EAAAC,GAjDA,SAAAlB,EAAAkB,EAAAz/B,EAAA,KACA,MAAAs/B,EAAAd,GAAAx+B,GACAu/B,EAAAhB,EAAA7hC,OACA,IAAAyjC,EAAAT,EAAAC,EACAC,EAAAtB,GAAAC,EAAA,GACA,IAAA,IAAAxiC,EAAA,EAAAA,EAAAwjC,IAAAxjC,EAAA,CAIA,GAHA2jC,EAAAC,EACAA,EAAAC,EACAA,EAAAtB,GAAAC,EAAAxiC,EAAA,IACA4jC,EACA,SAEA,MAAAS,EAAAT,EAAA3/B,GACAqgC,EAAAV,EAAAL,GACAI,IACAS,GAAAC,EAAAV,EAAA1/B,IAAA,EACA2/B,EAAA,MAAA3/B,KAAAogC,EAAAD,EACAR,EAAA,MAAAL,KAAAe,EAAAF,EAAAV,EAAA1jC,IAEA6jC,IACAO,GAAAP,EAAA5/B,GAAAogC,GAAA,EACAT,EAAA,MAAA3/B,KAAAogC,EAAAD,EACAR,EAAA,MAAAL,KAAAe,EAAAF,EAAAV,EAAA1jC,KA4BAukC,CAAA/B,EAAAkB,EAAAz/B,GAEA,SAAAugC,GAAAC,EAAAl/B,EAAAd,GACA,OAAAE,KAAAF,IAAAE,KAAAY,IAAAk/B,EAAAhgC,GAAAc,GAuBA,SAAAm/B,GAAAlC,EAAAh/B,EAAAmqB,EAAAgX,EAAA1gC,GACA,IAAAjE,EAAA8hB,EAAA4L,EAAAkX,EAIA,GAHAphC,EAAAqhC,WACArC,EAAAA,EAAAlI,QAAAmK,IAAAA,EAAApN,QAEA,aAAA7zB,EAAAshC,uBACAxB,GAAAd,EAAAv+B,OACA,CACA,IAAA8gC,EAAAJ,EAAAnC,EAAAA,EAAA7hC,OAAA,GAAA6hC,EAAA,GACA,IAAAxiC,EAAA,EAAA8hB,EAAA0gB,EAAA7hC,OAAAX,EAAA8hB,IAAA9hB,EACA0tB,EAAA8U,EAAAxiC,GACA4kC,EAAAlC,GACAqC,EACArX,EACA8U,EAAA79B,KAAAY,IAAAvF,EAAA,EAAA8hB,GAAA6iB,EAAA,EAAA,IAAA7iB,GACAte,EAAAwhC,SAEAtX,EAAAc,KAAAoW,EAAAzW,SAAA/a,EACAsa,EAAAgB,KAAAkW,EAAAzW,SAAA7F,EACAoF,EAAAe,KAAAmW,EAAA7B,KAAA3vB,EACAsa,EAAAiB,KAAAiW,EAAA7B,KAAAza,EACAyc,EAAArX,EAGAlqB,EAAAyhC,iBA7CA,SAAAzC,EAAA7U,GACA,IAAA3tB,EAAA8hB,EAAA4L,EAAAwX,EAAAC,EACAC,EAAA3X,GAAA+U,EAAA,GAAA7U,GACA,IAAA3tB,EAAA,EAAA8hB,EAAA0gB,EAAA7hC,OAAAX,EAAA8hB,IAAA9hB,EACAmlC,EAAAD,EACAA,EAAAE,EACAA,EAAAplC,EAAA8hB,EAAA,GAAA2L,GAAA+U,EAAAxiC,EAAA,GAAA2tB,GACAuX,IAGAxX,EAAA8U,EAAAxiC,GACAmlC,IACAzX,EAAAc,KAAAgW,GAAA9W,EAAAc,KAAAb,EAAAtgB,KAAAsgB,EAAArgB,OACAogB,EAAAgB,KAAA8V,GAAA9W,EAAAgB,KAAAf,EAAAE,IAAAF,EAAAG,SAEAsX,IACA1X,EAAAe,KAAA+V,GAAA9W,EAAAe,KAAAd,EAAAtgB,KAAAsgB,EAAArgB,OACAogB,EAAAiB,KAAA6V,GAAA9W,EAAAiB,KAAAhB,EAAAE,IAAAF,EAAAG,UA6BAmX,CAAAzC,EAAA7U,GAIA,MAAA0X,GAAAvlC,GAAA,IAAAA,GAAA,IAAAA,EACAwlC,GAAA,CAAAxlC,EAAAkS,EAAAxR,KAAAmE,KAAAmjB,IAAA,EAAA,IAAAhoB,GAAA,IAAA6E,KAAAuoB,KAAAptB,EAAAkS,GAAA+U,GAAAvmB,GACA+kC,GAAA,CAAAzlC,EAAAkS,EAAAxR,IAAAmE,KAAAmjB,IAAA,GAAA,GAAAhoB,GAAA6E,KAAAuoB,KAAAptB,EAAAkS,GAAA+U,GAAAvmB,GAAA,EACAglC,GAAA,CACAC,OAAA3lC,GAAAA,EACA4lC,WAAA5lC,GAAAA,EAAAA,EACA6lC,YAAA7lC,IAAAA,GAAAA,EAAA,GACA8lC,cAAA9lC,IAAAA,GAAA,IAAA,EACA,GAAAA,EAAAA,GACA,MAAAA,GAAAA,EAAA,GAAA,GACA+lC,YAAA/lC,GAAAA,EAAAA,EAAAA,EACAgmC,aAAAhmC,IAAAA,GAAA,GAAAA,EAAAA,EAAA,EACAimC,eAAAjmC,IAAAA,GAAA,IAAA,EACA,GAAAA,EAAAA,EAAAA,EACA,KAAAA,GAAA,GAAAA,EAAAA,EAAA,GACAkmC,YAAAlmC,GAAAA,EAAAA,EAAAA,EAAAA,EACAmmC,aAAAnmC,MAAAA,GAAA,GAAAA,EAAAA,EAAAA,EAAA,GACAomC,eAAApmC,IAAAA,GAAA,IAAA,EACA,GAAAA,EAAAA,EAAAA,EAAAA,GACA,KAAAA,GAAA,GAAAA,EAAAA,EAAAA,EAAA,GACAqmC,YAAArmC,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EACAsmC,aAAAtmC,IAAAA,GAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAA,EACAumC,eAAAvmC,IAAAA,GAAA,IAAA,EACA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EACA,KAAAA,GAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAA,GACAwmC,WAAAxmC,GAAA,EAAA6E,KAAAwoB,IAAArtB,EAAAsnB,IACAmf,YAAAzmC,GAAA6E,KAAAuoB,IAAAptB,EAAAsnB,IACAof,cAAA1mC,IAAA,IAAA6E,KAAAwoB,IAAArG,GAAAhnB,GAAA,GACA2mC,WAAA3mC,GAAA,IAAAA,EAAA,EAAA6E,KAAAmjB,IAAA,EAAA,IAAAhoB,EAAA,IACA4mC,YAAA5mC,GAAA,IAAAA,EAAA,EAAA,EAAA6E,KAAAmjB,IAAA,GAAA,GAAAhoB,GACA6mC,cAAA7mC,GAAAulC,GAAAvlC,GAAAA,EAAAA,EAAA,GACA,GAAA6E,KAAAmjB,IAAA,EAAA,IAAA,EAAAhoB,EAAA,IACA,IAAA,EAAA6E,KAAAmjB,IAAA,GAAA,IAAA,EAAAhoB,EAAA,KACA8mC,WAAA9mC,GAAAA,GAAA,EAAAA,IAAA6E,KAAAwjB,KAAA,EAAAroB,EAAAA,GAAA,GACA+mC,YAAA/mC,GAAA6E,KAAAwjB,KAAA,GAAAroB,GAAA,GAAAA,GACAgnC,cAAAhnC,IAAAA,GAAA,IAAA,GACA,IAAA6E,KAAAwjB,KAAA,EAAAroB,EAAAA,GAAA,GACA,IAAA6E,KAAAwjB,KAAA,GAAAroB,GAAA,GAAAA,GAAA,GACAinC,cAAAjnC,GAAAulC,GAAAvlC,GAAAA,EAAAwlC,GAAAxlC,EAAA,KAAA,IACAknC,eAAAlnC,GAAAulC,GAAAvlC,GAAAA,EAAAylC,GAAAzlC,EAAA,KAAA,IACA2N,iBAAA3N,GACA,MAAAkS,EAAA,MAEA,OAAAqzB,GAAAvlC,GAAAA,EACAA,EAAA,GACA,GAAAwlC,GAAA,EAAAxlC,EAAAkS,EAHA,KAIA,GAAA,GAAAuzB,GAAA,EAAAzlC,EAAA,EAAAkS,EAJA,MAMAvE,WAAA3N,GACA,MAAAkS,EAAA,QACA,OAAAlS,EAAAA,IAAAkS,EAAA,GAAAlS,EAAAkS,IAEAvE,YAAA3N,GACA,MAAAkS,EAAA,QACA,OAAAlS,GAAA,GAAAA,IAAAkS,EAAA,GAAAlS,EAAAkS,GAAA,GAEAvE,cAAA3N,GACA,IAAAkS,EAAA,QACA,OAAAlS,GAAA,IAAA,EACAA,EAAAA,IAAA,GAAAkS,GAAA,QAAAlS,EAAAkS,GAAA,GAEA,KAAAlS,GAAA,GAAAA,IAAA,GAAAkS,GAAA,QAAAlS,EAAAkS,GAAA,IAEAi1B,aAAAnnC,GAAA,EAAA0lC,GAAA0B,cAAA,EAAApnC,GACA2N,cAAA3N,GACA,MAAA+S,EAAA,OACAhC,EAAA,KACA,OAAA/Q,EAAA,EAAA+Q,EACAgC,EAAA/S,EAAAA,EAEAA,EAAA,EAAA+Q,EACAgC,GAAA/S,GAAA,IAAA+Q,GAAA/Q,EAAA,IAEAA,EAAA,IAAA+Q,EACAgC,GAAA/S,GAAA,KAAA+Q,GAAA/Q,EAAA,MAEA+S,GAAA/S,GAAA,MAAA+Q,GAAA/Q,EAAA,SAEAqnC,gBAAArnC,GAAAA,EAAA,GACA,GAAA0lC,GAAAyB,aAAA,EAAAnnC,GACA,GAAA0lC,GAAA0B,cAAA,EAAApnC,EAAA,GAAA,IAGA,SAAAsnC,GAAAr0B,EAAAC,EAAAlT,EAAAulB,GACA,MAAA,CACAjS,EAAAL,EAAAK,EAAAtT,GAAAkT,EAAAI,EAAAL,EAAAK,GACAkV,EAAAvV,EAAAuV,EAAAxoB,GAAAkT,EAAAsV,EAAAvV,EAAAuV,IAGA,SAAA+e,GAAAt0B,EAAAC,EAAAlT,EAAAulB,GACA,MAAA,CACAjS,EAAAL,EAAAK,EAAAtT,GAAAkT,EAAAI,EAAAL,EAAAK,GACAkV,EAAA,WAAAjD,EAAAvlB,EAAA,GAAAiT,EAAAuV,EAAAtV,EAAAsV,EACA,UAAAjD,EAAAvlB,EAAA,EAAAiT,EAAAuV,EAAAtV,EAAAsV,EACAxoB,EAAA,EAAAkT,EAAAsV,EAAAvV,EAAAuV,GAGA,SAAAgf,GAAAv0B,EAAAC,EAAAlT,EAAAulB,GACA,MAAAkiB,EAAA,CAAAn0B,EAAAL,EAAA0b,KAAAnG,EAAAvV,EAAA4b,MACA6Y,EAAA,CAAAp0B,EAAAJ,EAAAwb,KAAAlG,EAAAtV,EAAA0b,MACAruB,EAAA+mC,GAAAr0B,EAAAw0B,EAAAznC,GACA8Q,EAAAw2B,GAAAG,EAAAC,EAAA1nC,GACAI,EAAAknC,GAAAI,EAAAx0B,EAAAlT,GACA+Q,EAAAu2B,GAAA/mC,EAAAuQ,EAAA9Q,GACAF,EAAAwnC,GAAAx2B,EAAA1Q,EAAAJ,GACA,OAAAsnC,GAAAv2B,EAAAjR,EAAAE,GAGA,MAAA2nC,GAAA,IAAA75B,IAWA,SAAA85B,GAAAC,EAAAC,EAAApkC,GACA,OAXA,SAAAokC,EAAApkC,GACAA,EAAAA,GAAA,GACA,MAAAqkC,EAAAD,EAAAE,KAAAC,UAAAvkC,GACA,IAAA0E,EAAAu/B,GAAAn4B,IAAAu4B,GAKA,OAJA3/B,IACAA,EAAA,IAAA8/B,KAAAC,aAAAL,EAAApkC,GACAikC,GAAAh4B,IAAAo4B,EAAA3/B,IAEAA,EAGAggC,CAAAN,EAAApkC,GAAA2kC,OAAAR,GA2CA,SAAAS,GAAA76B,EAAA86B,EAAArd,GACA,OAAAzd,EAzCA,SAAA86B,EAAArd,GACA,MAAA,CACA5X,EAAAA,GACAi1B,EAAAA,EAAArd,EAAA5X,EAEA3F,SAAA2E,GACA4Y,EAAA5Y,GAEAid,UAAA3mB,GACA,WAAAA,EACAA,EAEA,UAAAA,EAAA,OAAA,QAEA4/B,MAAA,CAAAl1B,EAAAlN,IACAkN,EAAAlN,EAEAqiC,WAAA,CAAAn1B,EAAAo1B,IACAp1B,EAAAo1B,GAuBAC,CAAAJ,EAAArd,GAlBA,CACA5X,EAAAA,GACAA,EAEA3F,SAAA2E,KAEAid,UAAA3mB,GACAA,EAEA4/B,MAAA,CAAAl1B,EAAAlN,IACAkN,EAAAlN,EAEAqiC,WAAA,CAAAn1B,EAAAs1B,IACAt1B,GAOA,SAAAu1B,GAAA1jB,EAAA2jB,GACA,IAAA/jB,EAAAgkB,EACA,QAAAD,GAAA,QAAAA,IACA/jB,EAAAI,EAAAriB,OAAAiiB,MACAgkB,EAAA,CACAhkB,EAAAoO,iBAAA,aACApO,EAAAikB,oBAAA,cAEAjkB,EAAAkkB,YAAA,YAAAH,EAAA,aACA3jB,EAAA+jB,kBAAAH,GAGA,SAAAI,GAAAhkB,EAAA4jB,QACA7mC,IAAA6mC,WACA5jB,EAAA+jB,kBACA/jB,EAAAriB,OAAAiiB,MAAAkkB,YAAA,YAAAF,EAAA,GAAAA,EAAA,KAIA,SAAAK,GAAArgB,GACA,MAAA,UAAAA,EACA,CACAsgB,QAAAlf,GACAmf,QAAArf,GACAsf,UAAArf,IAGA,CACAmf,QAAA,CAAAtpC,EAAAmS,EAAApS,IAAAC,GAAA8E,KAAAY,IAAAyM,EAAApS,IAAAC,GAAA8E,KAAAF,IAAA7E,EAAAoS,GACAo3B,QAAA,CAAA/oC,EAAAuQ,IAAAvQ,EAAAuQ,EACAy4B,UAAAj2B,GAAAA,GAGA,SAAAk2B,IAAAp8B,MAAAA,EAAAC,IAAAA,EAAA+tB,MAAAA,EAAAyJ,KAAAA,EAAA9f,MAAAA,IACA,MAAA,CACA3X,MAAAA,EAAAguB,EACA/tB,IAAAA,EAAA+tB,EACAyJ,KAAAA,IAAAx3B,EAAAD,EAAA,GAAAguB,GAAA,EACArW,MAAAA,GA2BA,SAAA0kB,GAAAC,EAAAhH,EAAAiH,GACA,IAAAA,EACA,MAAA,CAAAD,GAEA,MAAA3gB,SAAAA,EAAA3b,MAAAw8B,EAAAv8B,IAAAw8B,GAAAF,EACAvO,EAAAsH,EAAA7hC,QACAyoC,QAAAA,EAAAD,QAAAA,EAAAE,UAAAA,GAAAH,GAAArgB,IACA3b,MAAAA,EAAAC,IAAAA,EAAAw3B,KAAAA,EAAA9f,MAAAA,GA/BA,SAAA2kB,EAAAhH,EAAAiH,GACA,MAAA5gB,SAAAA,EAAA3b,MAAAw8B,EAAAv8B,IAAAw8B,GAAAF,GACAN,QAAAA,EAAAE,UAAAA,GAAAH,GAAArgB,GACAqS,EAAAsH,EAAA7hC,OACA,IACAX,EAAA8hB,GADA5U,MAAAA,EAAAC,IAAAA,EAAAw3B,KAAAA,GAAA6E,EAEA,GAAA7E,EAAA,CAGA,IAFAz3B,GAAAguB,EACA/tB,GAAA+tB,EACAl7B,EAAA,EAAA8hB,EAAAoZ,EAAAl7B,EAAA8hB,GACAqnB,EAAAE,EAAA7G,EAAAt1B,EAAAguB,GAAArS,IAAA6gB,EAAAC,KADA3pC,EAIAkN,IACAC,IAEAD,GAAAguB,EACA/tB,GAAA+tB,EAKA,OAHA/tB,EAAAD,IACAC,GAAA+tB,GAEA,CAAAhuB,MAAAA,EAAAC,IAAAA,EAAAw3B,KAAAA,EAAA9f,MAAA2kB,EAAA3kB,OASA+kB,CAAAJ,EAAAhH,EAAAiH,GACAvhB,EAAA,GACA,IAEAhiB,EAAAwnB,EAAAmc,EAFAC,GAAA,EACAC,EAAA,KAEA,MAEAC,EAAA,IAAAF,GAFAX,EAAAO,EAAAG,EAAA3jC,IAAA,IAAAkjC,EAAAM,EAAAG,GAGAI,EAAA,KAAAH,GAFA,IAAAV,EAAAO,EAAAzjC,IAAAijC,EAAAQ,EAAAE,EAAA3jC,GAGA,IAAA,IAAAlG,EAAAkN,EAAA63B,EAAA73B,EAAAlN,GAAAmN,IAAAnN,EACA0tB,EAAA8U,EAAAxiC,EAAAk7B,GACAxN,EAAA2J,OAGAnxB,EAAAmjC,EAAA3b,EAAA7E,IACA3iB,IAAA2jC,IAGAC,EAAAX,EAAAjjC,EAAAwjC,EAAAC,GACA,OAAAI,GAAAC,MACAD,EAAA,IAAAX,EAAAljC,EAAAwjC,GAAA1pC,EAAA+kC,GAEA,OAAAgF,GAAAE,MACA/hB,EAAArY,KAAAy5B,GAAA,CAAAp8B,MAAA68B,EAAA58B,IAAAnN,EAAA2kC,KAAAA,EAAAzJ,MAAAA,EAAArW,MAAAA,KACAklB,EAAA,MAEAhF,EAAA/kC,EACA6pC,EAAA3jC,IAKA,OAHA,OAAA6jC,GACA7hB,EAAArY,KAAAy5B,GAAA,CAAAp8B,MAAA68B,EAAA58B,IAAAA,EAAAw3B,KAAAA,EAAAzJ,MAAAA,EAAArW,MAAAA,KAEAqD,EAEA,SAAAgiB,GAAAhb,EAAAua,GACA,MAAAvhB,EAAA,GACAiiB,EAAAjb,EAAAib,SACA,IAAA,IAAAnqC,EAAA,EAAAA,EAAAmqC,EAAAxpC,OAAAX,IAAA,CACA,MAAAoqC,EAAAb,GAAAY,EAAAnqC,GAAAkvB,EAAAsT,OAAAiH,GACAW,EAAAzpC,QACAunB,EAAArY,QAAAu6B,GAGA,OAAAliB,EAkDA,SAAAmiB,GAAAnb,EAAAob,GACA,MAAA9H,EAAAtT,EAAAsT,OACAqC,EAAA3V,EAAA1rB,QAAAqhC,SACA3J,EAAAsH,EAAA7hC,OACA,IAAAu6B,EACA,MAAA,GAEA,MAAAyJ,IAAAzV,EAAAqb,OACAr9B,MAAAA,EAAAC,IAAAA,GAxDA,SAAAq1B,EAAAtH,EAAAyJ,EAAAE,GACA,IAAA33B,EAAA,EACAC,EAAA+tB,EAAA,EACA,GAAAyJ,IAAAE,EACA,KAAA33B,EAAAguB,IAAAsH,EAAAt1B,GAAAmqB,MACAnqB,IAGA,KAAAA,EAAAguB,GAAAsH,EAAAt1B,GAAAmqB,MACAnqB,IAMA,IAJAA,GAAAguB,EACAyJ,IACAx3B,GAAAD,GAEAC,EAAAD,GAAAs1B,EAAAr1B,EAAA+tB,GAAA7D,MACAlqB,IAGA,OADAA,GAAA+tB,EACA,CAAAhuB,MAAAA,EAAAC,IAAAA,GAqCAq9B,CAAAhI,EAAAtH,EAAAyJ,EAAAE,GACA,IAAA,IAAAA,EACA,OAAA4F,GAAAvb,EAAA,CAAA,CAAAhiB,MAAAA,EAAAC,IAAAA,EAAAw3B,KAAAA,IAAAnC,EAAA8H,GAIA,OAAAG,GAAAvb,EAzCA,SAAAsT,EAAAt1B,EAAAzI,EAAAkgC,GACA,MAAAzJ,EAAAsH,EAAA7hC,OACAunB,EAAA,GACA,IAEA/a,EAFAu9B,EAAAx9B,EACA63B,EAAAvC,EAAAt1B,GAEA,IAAAC,EAAAD,EAAA,EAAAC,GAAA1I,IAAA0I,EAAA,CACA,MAAA6C,EAAAwyB,EAAAr1B,EAAA+tB,GACAlrB,EAAAqnB,MAAArnB,EAAA26B,KACA5F,EAAA1N,OACAsN,GAAA,EACAzc,EAAArY,KAAA,CAAA3C,MAAAA,EAAAguB,EAAA/tB,KAAAA,EAAA,GAAA+tB,EAAAyJ,KAAAA,IACAz3B,EAAAw9B,EAAA16B,EAAA26B,KAAAx9B,EAAA,OAGAu9B,EAAAv9B,EACA43B,EAAA1N,OACAnqB,EAAAC,IAGA43B,EAAA/0B,EAKA,OAHA,OAAA06B,GACAxiB,EAAArY,KAAA,CAAA3C,MAAAA,EAAAguB,EAAA/tB,IAAAu9B,EAAAxP,EAAAyJ,KAAAA,IAEAzc,EAgBA0iB,CAAApI,EAAAt1B,EAFAC,EAAAD,EAAAC,EAAA+tB,EAAA/tB,IACA+hB,EAAA2b,WAAA,IAAA39B,GAAAC,IAAA+tB,EAAA,GACAsH,EAAA8H,GAEA,SAAAG,GAAAvb,EAAAib,EAAA3H,EAAA8H,GACA,OAAAA,GAAAA,EAAAtJ,YAAAwB,EAKA,SAAAtT,EAAAib,EAAA3H,EAAA8H,GACA,MAAAQ,EAAAC,GAAA7b,EAAA1rB,SACA03B,EAAAsH,EAAA7hC,OACAunB,EAAA,GACA,IAAAhb,EAAAi9B,EAAA,GAAAj9B,MACAlN,EAAAkN,EACA,IAAA,MAAAs8B,KAAAW,EAAA,CACA,IAEAtlB,EAFAmmB,EAAAF,EACA/F,EAAAvC,EAAAt1B,EAAAguB,GAEA,IAAAl7B,EAAAkN,EAAA,EAAAlN,GAAAwpC,EAAAr8B,IAAAnN,IAAA,CACA,MAAAykC,EAAAjC,EAAAxiC,EAAAk7B,GACArW,EAAAkmB,GAAAT,EAAAtJ,WAAA,CACA39B,KAAA,UACA4nC,GAAAlG,EACAhyB,GAAA0xB,EACAyG,aAAAlrC,EAAA,GAAAk7B,EACAiQ,YAAAnrC,EAAAk7B,EACAjZ,aAAAiN,EAAAkc,iBAEAC,GAAAxmB,EAAAmmB,KACA9iB,EAAArY,KAAA,CAAA3C,MAAAA,EAAAC,IAAAnN,EAAA,EAAA2kC,KAAA6E,EAAA7E,KAAA9f,MAAAmmB,IACAA,EAAAnmB,EACA3X,EAAAlN,EAAA,GAEA+kC,EAAAN,EACAuG,EAAAnmB,EAEA3X,EAAAlN,EAAA,IACAkoB,EAAArY,KAAA,CAAA3C,MAAAA,EAAAC,IAAAnN,EAAA,EAAA2kC,KAAA6E,EAAA7E,KAAA9f,MAAAA,IACA3X,EAAAlN,EAAA,GAGA,OAAAkoB,EAnCAojB,CAAApc,EAAAib,EAAA3H,EAAA8H,GAFAH,EAuCA,SAAAY,GAAAvnC,GACA,MAAA,CACA4E,gBAAA5E,EAAA4E,gBACAmjC,eAAA/nC,EAAA+nC,eACAC,WAAAhoC,EAAAgoC,WACAC,iBAAAjoC,EAAAioC,iBACAC,gBAAAloC,EAAAkoC,gBACA3nC,YAAAP,EAAAO,YACAsE,YAAA7E,EAAA6E,aAGA,SAAAgjC,GAAAxmB,EAAAmmB,GACA,OAAAA,GAAAlD,KAAAC,UAAAljB,KAAAijB,KAAAC,UAAAiD,GAGA,IAAAW,GAAAjpC,OAAAg8B,OAAA,CACAkN,UAAA,KACAC,cAAArG,GACAj9B,MAAAA,EACAgY,cAAAA,EACAG,KAAAA,EACAC,IAAAA,EACAE,cAAAA,EACApe,QAAAA,EACAse,SAAAA,EACAE,SAAAD,EACAE,gBAAAA,EACAE,eAAAA,EACAC,aAAAA,EACAG,YAAAA,EACAvb,SAAAA,EACA9D,KAAAA,EACAwf,eAAAA,GACAO,MAAAA,GACAO,QAAAA,GACAG,MAAAA,GACAG,QAAAA,GACAC,UAAAA,GACA8oB,YAprEA,SAAA5nB,EAAAhe,EAAAioB,EAAA2U,QACA9gC,IAAAkE,GACA2C,QAAA+wB,KAAA1V,EAAA,MAAAiK,EACA,gCAAA2U,EAAA,cAkrEA3f,iBAAAA,GACAE,YAAAA,GACAE,QAAAA,GACAC,WAAAA,GACAC,UAAAA,GACAgH,aAAAA,GACAC,aAAAA,GACAO,aAAAA,GACAW,YAAAA,GACAI,YAAAA,GACAI,UAAAA,GACAqB,eAAAA,GACAM,SAAAA,GACAE,WAAAA,GACAC,eAAAA,GACAI,eAAAA,GACAM,WAAAA,GACA2B,mBAAAA,GACAK,QAAAA,GACAM,aAAAA,GACAC,cAAAA,GACAC,eAAAA,GACAE,kBAAAA,GACAS,oBAAAA,GACAE,aAAAA,GACA6M,gBAAAA,GACA4B,eAAAA,GACArc,aAAAA,GACAqe,YAAAA,GACAY,oBAAAA,GACAoB,2BAAAA,GACAtS,gBAAAA,GACAC,eAAAA,GACAW,SAAAA,GACAqD,oBAAA/C,GACAkB,eAAAA,GACAc,YAAAA,GACAO,6BAAAA,GACAK,aAAAA,GACA6V,WAzlGA,SAAAC,EAAAC,EAAAC,GACA,OAAAD,EAAA,IAAAD,EAAA,MAAAE,GAylGAhgC,iBAAAA,EACAE,UAAAA,EACAO,SAAAA,EACAK,mBAAAA,EACAC,eAAAA,EACAG,OAAAA,EACAg6B,aAAAA,GACAC,sBAAAA,GACAC,qBAAAA,GACAI,aAAAA,GACAzO,aAAAA,GACAC,kBAAAA,GACAK,OAAAA,GACAC,cAAAA,GACAC,UAAAA,GACAC,OAAAA,GACAG,QAAAA,GACAI,UAAAA,GACAnT,GAAAA,GACAC,IAAAA,GACAC,MAAAA,GACAC,SAAAA,GACAE,YAAAA,GACAC,QAAAA,GACAC,WAAAA,GACAC,cAAAA,GACAC,MAAAA,GACAC,KAAAA,GACAC,QAAAA,GACAQ,WAAAA,GACAI,SAAAA,GACAT,aAAAA,GACAa,YAAAA,GACAE,mBAAAA,GACAG,UAAAA,GACAE,UAAAA,GACAE,eAAAA,GACAC,kBAAAA,GACAS,sBAAAA,GACAG,WAAAA,GACAC,gBAAAA,GACAC,cAAAA,GACAM,YAAAA,GACAC,YAAAA,GACA4d,cAAAA,GACAO,sBAAAA,GACAM,qBAAAA,GACAM,cAAAA,GACAW,eAAAA,GACAG,iBAAAA,KAGA,MAAA8B,GACA1+B,eAAA7K,EAAA+xB,IACAlnB,eAAAxK,GACA,OAAA,EAEAwK,iBAAA1E,EAAA1F,EAAAkuB,IACA9jB,oBAAA1E,EAAA1F,EAAAkuB,IACA9jB,sBACA,OAAA,EAEAA,eAAAslB,EAAA/H,EAAAmB,EAAAwI,GAGA,OAFA3J,EAAArmB,KAAAF,IAAA,EAAAumB,GAAA+H,EAAA/H,OACAmB,EAAAA,GAAA4G,EAAA5G,OACA,CACAnB,MAAAA,EACAmB,OAAAxnB,KAAAF,IAAA,EAAAkwB,EAAAhwB,KAAAojB,MAAAiD,EAAA2J,GAAAxI,IAGA1e,WAAA7K,GACA,OAAA,GAIA,MAAAwpC,WAAAD,GACA1+B,eAAAqB,GACA,OAAAA,GAAAA,EAAA5L,YAAA4L,EAAA5L,WAAA,OAAA,MAIA,MACAmpC,GAAA,CACAC,WAAA,YACAC,UAAA,YACAC,SAAA,UACAC,aAAA,aACAC,YAAA,YACAC,YAAA,YACAC,UAAA,UACAC,aAAA,WACAC,WAAA,YAEAC,GAAA7mC,GAAA,OAAAA,GAAA,KAAAA,EAoCA,MAAA8mC,KAAAnX,IAAA,CAAAE,SAAA,GAIA,SAAAkX,GAAAlkC,EAAA1F,EAAAkuB,GACAxoB,EAAAnG,OAAAqzB,oBAAA5yB,EAAAkuB,EAAAyb,IAaA,SAAAE,GAAAnkC,EAAA1F,EAAAkuB,GACA,MAAA3uB,EAAAmG,EAAAnG,OAEAmwB,EADAnwB,GAAAyvB,GAAAzvB,IACAA,EACAuqC,EAAA,IAAAC,kBAAAC,IACA,MAAA9a,EAAAF,GAAAU,GACAsa,EAAAzpC,SAAA0pC,IACA,IAAA,IAAAttC,EAAA,EAAAA,EAAAstC,EAAAC,WAAA5sC,OAAAX,IAAA,CACA,MAAAwtC,EAAAF,EAAAC,WAAAvtC,GACAwtC,IAAAza,GAAAya,IAAAjb,GACAhB,EAAA+b,EAAAlrB,eAMA,OADA+qB,EAAAM,QAAA3qC,SAAA,CAAA4qC,WAAA,EAAAC,SAAA,IACAR,EAEA,SAAAS,GAAA7kC,EAAA1F,EAAAkuB,GACA,MAAA3uB,EAAAmG,EAAAnG,OACAmyB,EAAAnyB,GAAAyvB,GAAAzvB,GACA,IAAAmyB,EACA,OAEA,MAAAoY,EAAA,IAAAC,kBAAAC,IACAA,EAAAzpC,SAAA0pC,IACA,IAAA,IAAAttC,EAAA,EAAAA,EAAAstC,EAAAO,aAAAltC,OAAAX,IACA,GAAAstC,EAAAO,aAAA7tC,KAAA4C,EAAA,CACA2uB,IACA,aAMA,OADA4b,EAAAM,QAAA1Y,EAAA,CAAA2Y,WAAA,IACAP,EAEA,MAAAW,GAAA,IAAAlgC,IACA,IAAAmgC,GAAA,EACA,SAAAC,KACA,MAAAC,EAAA1sC,OAAAgjB,iBACA0pB,IAAAF,KAGAA,GAAAE,EACAH,GAAAlqC,SAAA,CAAAsqC,EAAAnlC,KACAA,EAAA+iB,0BAAAmiB,GACAC,QAgBA,SAAAC,GAAAplC,EAAA1F,EAAAkuB,GACA,MAAA3uB,EAAAmG,EAAAnG,OACAmyB,EAAAnyB,GAAAyvB,GAAAzvB,GACA,IAAAmyB,EACA,OAEA,MAAAmZ,EAAA9hC,GAAA,CAAA4e,EAAAmB,KACA,MAAA/Z,EAAA2iB,EAAAI,YACA5D,EAAAvG,EAAAmB,GACA/Z,EAAA2iB,EAAAI,aACA5D,MAEAhwB,QACA4rC,EAAA,IAAAiB,gBAAAf,IACA,MAAAC,EAAAD,EAAA,GACAriB,EAAAsiB,EAAAe,YAAArjB,MACAmB,EAAAmhB,EAAAe,YAAAliB,OACA,IAAAnB,GAAA,IAAAmB,GAGA+hB,EAAAljB,EAAAmB,MAIA,OAFAghB,EAAAM,QAAA1Y,GAlCA,SAAAhsB,EAAAmlC,GACAJ,GAAApqB,MACAniB,OAAAy0B,iBAAA,SAAAgY,IAEAF,GAAAr+B,IAAA1G,EAAAmlC,GA+BAI,CAAAvlC,EAAAmlC,GACAf,EAEA,SAAAoB,GAAAxlC,EAAA1F,EAAA8pC,GACAA,GACAA,EAAAqB,aAEA,WAAAnrC,GApCA,SAAA0F,GACA+kC,GAAA39B,OAAApH,GACA+kC,GAAApqB,MACAniB,OAAA00B,oBAAA,SAAA+X,IAkCAS,CAAA1lC,GAGA,SAAA2lC,GAAA3lC,EAAA1F,EAAAkuB,GACA,MAAA3uB,EAAAmG,EAAAnG,OACAk9B,EAAA1zB,GAAAsD,IACA,OAAA3G,EAAAkc,KACAsM,EAhHA,SAAA7hB,EAAA3G,GACA,MAAA1F,EAAAgpC,GAAA38B,EAAArM,OAAAqM,EAAArM,MACA+P,EAAAA,EAAAkV,EAAAA,GAAAgL,GAAA5jB,EAAA3G,GACA,MAAA,CACA1F,KAAAA,EACA0F,MAAAA,EACA8qB,OAAAnkB,EACA0D,OAAApR,IAAAoR,EAAAA,EAAA,KACAkV,OAAAtmB,IAAAsmB,EAAAA,EAAA,MAwGAqmB,CAAAj/B,EAAA3G,MAEAA,GAAAyD,IACA,MAAAkD,EAAAlD,EAAA,GACA,MAAA,CAAAkD,EAAAA,EAAAqkB,QAAArkB,EAAAskB,YAGA,OA7HA,SAAAjQ,EAAA1gB,EAAAkuB,GACAxN,EAAAiS,iBAAA3yB,EAAAkuB,EAAAyb,IA2HA4B,CAAAhsC,EAAAS,EAAAy8B,GACAA,EAEA,MAAA+O,WAAA1C,GACA1+B,eAAA7K,EAAA+xB,GACA,MAAA1xB,EAAAL,GAAAA,EAAAM,YAAAN,EAAAM,WAAA,MACA,OAAAD,GAAAA,EAAAL,SAAAA,GAtKA,SAAAA,EAAA+xB,GACA,MAAA9P,EAAAjiB,EAAAiiB,MACAiqB,EAAAlsC,EAAAmsC,aAAA,UACAC,EAAApsC,EAAAmsC,aAAA,SAcA,GAbAnsC,EAAA,SAAA,CACAwL,QAAA,CACA+d,OAAA2iB,EACA9jB,MAAAgkB,EACAnqB,MAAA,CACA4Z,QAAA5Z,EAAA4Z,QACAtS,OAAAtH,EAAAsH,OACAnB,MAAAnG,EAAAmG,SAIAnG,EAAA4Z,QAAA5Z,EAAA4Z,SAAA,QACA5Z,EAAA4O,UAAA5O,EAAA4O,WAAA,aACAsZ,GAAAiC,GAAA,CACA,MAAAC,EAAA/Y,GAAAtzB,EAAA,cACAZ,IAAAitC,IACArsC,EAAAooB,MAAAikB,GAGA,GAAAlC,GAAA+B,GACA,GAAA,KAAAlsC,EAAAiiB,MAAAsH,OACAvpB,EAAAupB,OAAAvpB,EAAAooB,OAAA2J,GAAA,OACA,CACA,MAAAua,EAAAhZ,GAAAtzB,EAAA,eACAZ,IAAAktC,IACAtsC,EAAAupB,OAAA+iB,IA0IAC,CAAAvsC,EAAA+xB,GACA1xB,GAEA,KAEAwK,eAAAxK,GACA,MAAAL,EAAAK,EAAAL,OACA,IAAAA,EAAA,SACA,OAAA,EAEA,MAAAwL,EAAAxL,EAAA,SAAAwL,QACA,CAAA,SAAA,SAAAxK,SAAA01B,IACA,MAAApzB,EAAAkI,EAAAkrB,GACAzY,EAAA3a,GACAtD,EAAAwsC,gBAAA9V,GAEA12B,EAAAysC,aAAA/V,EAAApzB,MAGA,MAAA2e,EAAAzW,EAAAyW,OAAA,GAMA,OALAniB,OAAAub,KAAA4G,GAAAjhB,SAAAE,IACAlB,EAAAiiB,MAAA/gB,GAAA+gB,EAAA/gB,MAEAlB,EAAAooB,MAAApoB,EAAAooB,aACApoB,EAAA,UACA,EAEA6K,iBAAA1E,EAAA1F,EAAAkuB,GACArvB,KAAA+zB,oBAAAltB,EAAA1F,GACA,MAAAisC,EAAAvmC,EAAAwmC,WAAAxmC,EAAAwmC,SAAA,IAMArY,EALA,CACAsY,OAAAtC,GACAuC,OAAA7B,GACAM,OAAAC,IAEA9qC,IAAAqrC,GACAY,EAAAjsC,GAAA6zB,EAAAnuB,EAAA1F,EAAAkuB,GAEA9jB,oBAAA1E,EAAA1F,GACA,MAAAisC,EAAAvmC,EAAAwmC,WAAAxmC,EAAAwmC,SAAA,IACAzP,EAAAwP,EAAAjsC,GACA,IAAAy8B,EACA,QAEA,CACA0P,OAAAjB,GACAkB,OAAAlB,GACAL,OAAAK,IAEAlrC,IAAA4pC,IACAlkC,EAAA1F,EAAAy8B,GACAwP,EAAAjsC,QAAArB,EAEAyL,sBACA,OAAAlM,OAAAgjB,iBAEA9W,eAAA7K,EAAAooB,EAAAmB,EAAAwI,GACA,OAAAH,GAAA5xB,EAAAooB,EAAAmB,EAAAwI,GAEAlnB,WAAA7K,GACA,MAAAmyB,EAAA1C,GAAAzvB,GACA,SAAAmyB,IAAAA,EAAA2a,cAIA,SAAAC,GAAA/sC,GACA,OAAAwvB,MAAA,oBAAAwd,iBAAAhtC,aAAAgtC,gBACAxD,GAEAyC,GAGA,IAAAgB,GAAAntC,OAAAg8B,OAAA,CACAkN,UAAA,KACA+D,gBAAAA,GACAxD,aAAAA,GACAC,cAAAA,GACAyC,YAAAA,KAGA,MAAApwB,GAAA,cACAqxB,GAAA,CACAC,QAAA,CAAA1lC,EAAA2lC,EAAAvU,IACAA,EAAA,GAAAuU,EAAA3lC,EAEAoD,MAAApD,EAAA2lC,EAAAvU,GACA,MAAAwU,EAAA1nC,EAAA8B,GAAAoU,IACAmB,EAAAqwB,EAAAxwB,OAAAlX,EAAAynC,GAAAvxB,IACA,OAAAmB,GAAAA,EAAAH,MACAG,EAAAswB,IAAAD,EAAAxU,GAAAvqB,YACA8+B,GAEAG,OAAA,CAAA9lC,EAAA2lC,EAAAvU,IACApxB,GAAA2lC,EAAA3lC,GAAAoxB,GAGA,MAAA2U,GACA3iC,YAAA4iC,EAAAjuB,EAAAkX,EAAA0W,GACA,MAAAM,EAAAluB,EAAAkX,GACA0W,EAAAnW,GAAA,CAAAwW,EAAAL,GAAAA,EAAAM,EAAAD,EAAAhmC,OACA,MAAAA,EAAAwvB,GAAA,CAAAwW,EAAAhmC,KAAAimC,EAAAN,IACA9tC,KAAA8M,SAAA,EACA9M,KAAAquC,IAAAF,EAAAzuC,IAAAkuC,GAAAO,EAAAhtC,aAAAgH,GACAnI,KAAAsuC,QAAAhL,GAAA6K,EAAAI,SAAAjL,GAAAC,OACAvjC,KAAAwuC,OAAA/rC,KAAAojB,MAAAtZ,KAAAC,OAAA2hC,EAAAzjC,OAAA,IACA1K,KAAA+N,UAAA/N,KAAA+M,OAAAtK,KAAAojB,MAAAsoB,EAAAliC,UACAjM,KAAAqoC,QAAA8F,EAAA1L,KACAziC,KAAAyuC,QAAAvuB,EACAlgB,KAAA0uC,MAAAtX,EACAp3B,KAAA2uC,MAAAxmC,EACAnI,KAAA4uC,IAAAd,EACA9tC,KAAA6uC,eAAA/uC,EAEAyL,SACA,OAAAvL,KAAA8M,QAEAvB,OAAA4iC,EAAAL,EAAAhiC,GACA,MAAAM,EAAApM,KACA,GAAAoM,EAAAU,QAAA,CACAV,EAAAc,SAAA,GACA,MAAAkhC,EAAAhiC,EAAAqiC,QAAAriC,EAAAsiC,OACAI,EAAAhjC,EAAAM,EAAAoiC,OACAO,EAAA3iC,EAAA2B,UAAA+gC,EACA1iC,EAAAoiC,OAAA1iC,EACAM,EAAA2B,UAAAtL,KAAAojB,MAAApjB,KAAAF,IAAAwsC,EAAAZ,EAAAliC,WACAG,EAAAW,QAAA+hC,EACA1iC,EAAAi8B,QAAA8F,EAAA1L,KACAr2B,EAAAwiC,IAAAjX,GAAA,CAAAwW,EAAAL,GAAAA,EAAAM,EAAAD,EAAAhmC,OACAiE,EAAAuiC,MAAAhX,GAAA,CAAAwW,EAAAhmC,KAAAimC,EAAAN,KAGAviC,SACA,MAAAa,EAAApM,KACAoM,EAAAU,UACAV,EAAAY,KAAAT,KAAAC,OACAJ,EAAAU,SAAA,EACAV,EAAAc,SAAA,IAGA3B,KAAAO,GACA,MAAAM,EAAApM,KACA8uC,EAAAhjC,EAAAM,EAAAoiC,OACAviC,EAAAG,EAAA2B,UACAqpB,EAAAhrB,EAAAsiC,MACAvmC,EAAAiE,EAAAuiC,MACAlM,EAAAr2B,EAAAi8B,MACAyF,EAAA1hC,EAAAwiC,IACA,IAAArV,EAEA,GADAntB,EAAAU,QAAA3E,IAAA2lC,IAAArL,GAAAqM,EAAA7iC,IACAG,EAAAU,QAGA,OAFAV,EAAAqiC,QAAArX,GAAA0W,OACA1hC,EAAAc,SAAA,GAGA4hC,EAAA,EACA1iC,EAAAqiC,QAAArX,GAAAjvB,GAGAoxB,EAAAuV,EAAA7iC,EAAA,EACAstB,EAAAkJ,GAAAlJ,EAAA,EAAA,EAAAA,EAAAA,EACAA,EAAAntB,EAAAkiC,QAAA7rC,KAAAY,IAAA,EAAAZ,KAAAF,IAAA,EAAAg3B,KACAntB,EAAAqiC,QAAArX,GAAAhrB,EAAAiiC,IAAAlmC,EAAA2lC,EAAAvU,IAEAhuB,OACA,MAAAyjC,EAAAhvC,KAAA6uC,YAAA7uC,KAAA6uC,UAAA,IACA,OAAA,IAAAI,SAAA,CAAAtf,EAAAuf,KACAF,EAAArhC,KAAA,CAAAgiB,IAAAA,EAAAuf,IAAAA,OAGA3jC,QAAA4jC,GACA,MAAA1f,EAAA0f,EAAA,MAAA,MACAH,EAAAhvC,KAAA6uC,WAAA,GACA,IAAA,IAAA/wC,EAAA,EAAAA,EAAAkxC,EAAAvwC,OAAAX,IACAkxC,EAAAlxC,GAAA2xB,MAOAvN,GAAA3U,IAAA,YAAA,CACA7C,WAAA5K,EACAmM,SAAA,IACAsiC,OAAA,eACA7uC,QAAAI,EACAqI,UAAArI,EACA2iC,UAAA3iC,EACAguC,QAAAhuC,EACAqB,UAAArB,IAEA,MAAAsvC,GAAA5uC,OAAAub,KAAAmG,GAAAE,WACAF,GAAA4B,SAAA,YAAA,CACAa,WAAA,EACAD,YAAA,EACAF,YAAAjb,GAAA,eAAAA,GAAA,eAAAA,GAAA,OAAAA,IAEA2Y,GAAA3U,IAAA,aAAA,CACA8hC,OAAA,CACAluC,KAAA,QACAmuC,WApBA,CAAA,QAAA,cAAA,oBAsBAC,QAAA,CACApuC,KAAA,SACAmuC,WAzBA,CAAA,IAAA,IAAA,cAAA,SAAA,cA4BAptB,GAAA4B,SAAA,aAAA,CACAa,UAAA,cAEAzC,GAAA3U,IAAA,cAAA,CACAiiC,OAAA,CACAptB,UAAA,CACAnW,SAAA,MAGA+/B,OAAA,CACA5pB,UAAA,CACAnW,SAAA,IAGA7H,KAAA,CACAqrC,WAAA,CACAJ,OAAA,CACAlnC,KAAA,eAEAunC,QAAA,CACAvuC,KAAA,UACA8K,SAAA,KAIA0jC,KAAA,CACAF,WAAA,CACAJ,OAAA,CACAvB,GAAA,eAEA4B,QAAA,CACAvuC,KAAA,UACAotC,OAAA,SACA7uC,GAAAuP,GAAA,EAAAA,OAKA,MAAA2gC,GACArkC,YAAA1E,EAAAjH,GACAI,KAAAjB,OAAA8H,EACA7G,KAAA6vC,YAAA,IAAAnkC,IACA1L,KAAA8vC,UAAAlwC,GAEA2L,UAAA3L,GACA,IAAAif,EAAAjf,GACA,OAEA,MAAAmwC,EAAA/vC,KAAA6vC,YACArvC,OAAAwvC,oBAAApwC,GAAA8B,SAAAE,IACA,MAAAusC,EAAAvuC,EAAAgC,GACA,IAAAid,EAAAsvB,GACA,OAEA,MAAAgB,EAAA,GACA,IAAA,MAAAc,KAAAb,GACAD,EAAAc,GAAA9B,EAAA8B,IAEA1vC,EAAA4tC,EAAAmB,aAAAnB,EAAAmB,YAAA,CAAA1tC,IAAAF,SAAA01B,IACAA,IAAAx1B,GAAAmuC,EAAAtuB,IAAA2V,IACA2Y,EAAAxiC,IAAA6pB,EAAA+X,SAKA5jC,gBAAA2U,EAAA+B,GACA,MAAAiuB,EAAAjuB,EAAA3gB,QACAA,EAwEA,SAAA4e,EAAAgwB,GACA,IAAAA,EACA,OAEA,IAAA5uC,EAAA4e,EAAA5e,QACA,IAAAA,EAEA,YADA4e,EAAA5e,QAAA4uC,GAGA5uC,EAAA6uC,UACAjwB,EAAA5e,QAAAA,EAAAd,OAAAC,OAAA,GAAAa,EAAA,CAAA6uC,SAAA,EAAAC,YAAA,MAEA,OAAA9uC,EApFA+uC,CAAAnwB,EAAAgwB,GACA,IAAA5uC,EACA,MAAA,GAEA,MAAAmuC,EAAAzvC,KAAAswC,kBAAAhvC,EAAA4uC,GAOA,OANAA,EAAAC,SAwDA,SAAAV,EAAAH,GACA,MAAA5iC,EAAA,GACAqP,EAAAvb,OAAAub,KAAAuzB,GACA,IAAA,IAAAxxC,EAAA,EAAAA,EAAAie,EAAAtd,OAAAX,IAAA,CACA,MAAAyyC,EAAAd,EAAA1zB,EAAAje,IACAyyC,GAAAA,EAAAf,UACA9iC,EAAAiB,KAAA4iC,EAAAC,QAGA,OAAAvB,QAAAwB,IAAA/jC,GAhEAgkC,CAAAxwB,EAAA5e,QAAA8uC,YAAAF,GAAAS,MAAA,KACAzwB,EAAA5e,QAAA4uC,KACA,SAGAT,EAEAlkC,kBAAA2U,EAAA+B,GACA,MAAA8tB,EAAA/vC,KAAA6vC,YACAJ,EAAA,GACA/iC,EAAAwT,EAAAkwB,cAAAlwB,EAAAkwB,YAAA,IACAnZ,EAAAz2B,OAAAub,KAAAkG,GACAnW,EAAAS,KAAAC,MACA,IAAA1O,EACA,IAAAA,EAAAm5B,EAAAx4B,OAAA,EAAAX,GAAA,IAAAA,EAAA,CACA,MAAAs5B,EAAAH,EAAAn5B,GACA,GAAA,MAAAs5B,EAAAna,OAAA,GACA,SAEA,GAAA,YAAAma,EAAA,CACAqY,EAAA9hC,QAAA3N,KAAA4wC,gBAAA1wB,EAAA+B,IACA,SAEA,MAAAje,EAAAie,EAAAmV,GACA,IAAAhV,EAAA1V,EAAA0qB,GACA,MAAA+W,EAAA4B,EAAA3iC,IAAAgqB,GACA,GAAAhV,EAAA,CACA,GAAA+rB,GAAA/rB,EAAAotB,SAAA,CACAptB,EAAA4Y,OAAAmT,EAAAnqC,EAAA8H,GACA,SAEAsW,EAAApU,SAGAmgC,GAAAA,EAAAliC,UAIAS,EAAA0qB,GAAAhV,EAAA,IAAA8rB,GAAAC,EAAAjuB,EAAAkX,EAAApzB,GACAyrC,EAAA9hC,KAAAyU,IAJAlC,EAAAkX,GAAApzB,EAMA,OAAAyrC,EAEAlkC,OAAA2U,EAAA+B,GACA,GAAA,IAAAjiB,KAAA6vC,YAAAruB,KAEA,YADAhhB,OAAAC,OAAAyf,EAAA+B,GAGA,MAAAwtB,EAAAzvC,KAAAswC,kBAAApwB,EAAA+B,GACA,OAAAwtB,EAAAhxC,QACA6M,EAAA2kB,IAAAjwB,KAAAjB,OAAA0wC,IACA,QAFA,GAgCA,SAAAoB,GAAAltB,EAAAmtB,GACA,MAAAlkB,EAAAjJ,GAAAA,EAAAriB,SAAA,GACAke,EAAAoN,EAAApN,QACAnc,OAAAvD,IAAA8sB,EAAAvpB,IAAAytC,EAAA,EACAvuC,OAAAzC,IAAA8sB,EAAArqB,IAAAuuC,EAAA,EACA,MAAA,CACA9lC,MAAAwU,EAAAjd,EAAAc,EACA4H,IAAAuU,EAAAnc,EAAAd,GAkCA,SAAAwuC,GAAAlqC,EAAAmqC,GACA,MAAAj1B,EAAA,GACAkZ,EAAApuB,EAAAoqC,uBAAAD,GACA,IAAAlzC,EAAA8hB,EACA,IAAA9hB,EAAA,EAAA8hB,EAAAqV,EAAAx2B,OAAAX,EAAA8hB,IAAA9hB,EACAie,EAAApO,KAAAsnB,EAAAn3B,GAAA6D,OAEA,OAAAoa,EAEA,SAAAm1B,GAAAtY,EAAA50B,EAAAmtC,EAAA7vC,GACA,MAAAya,EAAA6c,EAAA7c,KACAq1B,EAAA,WAAA9vC,EAAA6hB,KACA,IAAArlB,EAAA8hB,EAAAG,EAAAsxB,EACA,GAAA,OAAArtC,EAAA,CAGA,IAAAlG,EAAA,EAAA8hB,EAAA7D,EAAAtd,OAAAX,EAAA8hB,IAAA9hB,EAAA,CAEA,GADAiiB,GAAAhE,EAAAje,GACAiiB,IAAAoxB,EAAA,CACA,GAAA7vC,EAAAmvC,IACA,SAEA,MAEAY,EAAAzY,EAAA3W,OAAAlC,GACAjB,EAAAuyB,KAAAD,GAAA,IAAAptC,GAAAshB,GAAAthB,KAAAshB,GAAA+rB,MACArtC,GAAAqtC,GAGA,OAAArtC,GAeA,SAAAstC,GAAA3tB,EAAA8S,GACA,MAAA8a,EAAA5tB,GAAAA,EAAAriB,QAAAiwC,QACA,OAAAA,QAAAzxC,IAAAyxC,QAAAzxC,IAAA22B,EAAAmC,MAYA,SAAA4Y,GAAA9Y,EAAA+Y,EAAAC,GACA,MAAAC,EAAAjZ,EAAA+Y,KAAA/Y,EAAA+Y,GAAA,IACA,OAAAE,EAAAD,KAAAC,EAAAD,GAAA,IAEA,SAAAE,GAAAhZ,EAAAiZ,EAAAC,GACA,IAAA,MAAArb,KAAAob,EAAAE,wBAAA,OAAAvyB,UAAA,CACA,MAAAxb,EAAA40B,EAAAnC,EAAA90B,OACA,GAAAmwC,GAAA9tC,EAAA,IAAA8tC,GAAA9tC,EAAA,EACA,OAAAyyB,EAAA90B,MAGA,OAAA,KAEA,SAAAqwC,GAAA1d,EAAAvvB,GACA,MAAA8B,MAAAA,EAAA4tB,YAAAgC,GAAAnC,EACAoE,EAAA7xB,EAAAorC,UAAAprC,EAAAorC,QAAA,KACAzd,OAAAA,EAAAqd,OAAAA,EAAAlwC,MAAAoe,GAAA0W,EACAyb,EAAA1d,EAAAxyB,KACAmwC,EAAAN,EAAA7vC,KACAJ,EA7BA,SAAAwwC,EAAAC,EAAA5b,GACA,MAAA,GAAA2b,EAAA1zB,MAAA2zB,EAAA3zB,MAAA+X,EAAAmC,OAAAnC,EAAAt1B,OA4BAmxC,CAAA9d,EAAAqd,EAAApb,GACA7W,EAAA7a,EAAAtG,OACA,IAAAm6B,EACA,IAAA,IAAA96B,EAAA,EAAAA,EAAA8hB,IAAA9hB,EAAA,CACA,MAAA8O,EAAA7H,EAAAjH,IACAyN,CAAA2mC,GAAAvwC,EAAA4J,CAAA4mC,GAAAnuC,GAAA4I,EAEAgsB,GADAhsB,EAAAqlC,UAAArlC,EAAAqlC,QAAA,KACAE,GAAAX,GAAA9Y,EAAA92B,EAAAD,GACAi3B,EAAA7Y,GAAA/b,EACA40B,EAAA2Z,KAAAX,GAAAhZ,EAAAiZ,GAAA,GACAjZ,EAAA4Z,QAAAZ,GAAAhZ,EAAAiZ,GAAA,IAGA,SAAAY,GAAA5rC,EAAA7E,GACA,MAAA4hB,EAAA/c,EAAA+c,OACA,OAAApjB,OAAAub,KAAA6H,GAAAwU,QAAAx2B,GAAAgiB,EAAAhiB,GAAAI,OAAAA,IAAA0wC,QA0BA,SAAAC,GAAAlc,EAAA9pB,GACA,MAAAoT,EAAA0W,EAAAnC,WAAA3yB,MACAK,EAAAy0B,EAAAob,QAAApb,EAAAob,OAAA7vC,KACA,GAAAA,EAAA,CAGA2K,EAAAA,GAAA8pB,EAAAmc,QACA,IAAA,MAAA7tC,KAAA4H,EAAA,CACA,MAAA+rB,EAAA3zB,EAAAktC,QACA,IAAAvZ,QAAA54B,IAAA44B,EAAA12B,SAAAlC,IAAA44B,EAAA12B,GAAA+d,GACA,cAEA2Y,EAAA12B,GAAA+d,KAGA,MAAA8yB,GAAA1vB,GAAA,UAAAA,GAAA,SAAAA,EACA2vB,GAAA,CAAAC,EAAAC,IAAAA,EAAAD,EAAAvyC,OAAAC,OAAA,GAAAsyC,GACA,MAAAE,GACA1nC,YAAA1E,EAAAkZ,GACA/f,KAAA6G,MAAAA,EACA7G,KAAAkzC,KAAArsC,EAAAkc,IACA/iB,KAAA2B,MAAAoe,EACA/f,KAAAmzC,gBAAA,GACAnzC,KAAAy0B,YAAAz0B,KAAAozC,UACApzC,KAAAqzC,MAAArzC,KAAAy0B,YAAAtzB,KACAnB,KAAAsB,aAAAxB,EACAE,KAAAszC,UAAA,EACAtzC,KAAAgF,WAAAlF,EACAE,KAAAuzC,iBAAAzzC,EACAE,KAAA40B,oBAAA90B,EACAE,KAAAwzC,gBAAA1zC,EACAE,KAAAyzC,gBAAA3zC,EACAE,KAAA0zC,qBAAA,EACA1zC,KAAA2zC,cAAA7zC,EACAE,KAAA4zC,UAAA,GACA5zC,KAAA6zC,aAEAtoC,aACA,MAAAa,EAAApM,KACAy2B,EAAArqB,EAAAqoB,YACAroB,EAAA0jC,YACA1jC,EAAA0nC,aACArd,EAAAsd,SAAAzC,GAAA7a,EAAAob,OAAApb,GACArqB,EAAA4nC,cAEAzoC,YAAAwU,GACA/f,KAAA2B,QAAAoe,GACA4yB,GAAA3yC,KAAAy0B,aAEAz0B,KAAA2B,MAAAoe,EAEAxU,aACA,MAAAa,EAAApM,KACA6G,EAAAuF,EAAAvF,MACA4vB,EAAArqB,EAAAqoB,YACA3vB,EAAAsH,EAAA6nC,aACAC,EAAA,CAAAlyC,EAAAkP,EAAAkV,EAAA3oB,IAAA,MAAAuE,EAAAkP,EAAA,MAAAlP,EAAAvE,EAAA2oB,EACA+tB,EAAA1d,EAAA2d,QAAAl1B,EAAApa,EAAAsvC,QAAA3B,GAAA5rC,EAAA,MACAwtC,EAAA5d,EAAA6d,QAAAp1B,EAAApa,EAAAwvC,QAAA7B,GAAA5rC,EAAA,MACA0tC,EAAA9d,EAAA+d,QAAAt1B,EAAApa,EAAA0vC,QAAA/B,GAAA5rC,EAAA,MACA9E,EAAA00B,EAAA10B,UACA0yC,EAAAhe,EAAAie,QAAAR,EAAAnyC,EAAAoyC,EAAAE,EAAAE,GACAI,EAAAle,EAAAme,QAAAV,EAAAnyC,EAAAsyC,EAAAF,EAAAI,GACA9d,EAAAoe,OAAAzoC,EAAA0oC,cAAAX,GACA1d,EAAAse,OAAA3oC,EAAA0oC,cAAAT,GACA5d,EAAAue,OAAA5oC,EAAA0oC,cAAAP,GACA9d,EAAAjC,OAAApoB,EAAA0oC,cAAAL,GACAhe,EAAAob,OAAAzlC,EAAA0oC,cAAAH,GAEAppC,aACA,OAAAvL,KAAA6G,MAAAxG,KAAAY,SAAAjB,KAAA2B,OAEA4J,UACA,OAAAvL,KAAA6G,MAAA6vB,eAAA12B,KAAA2B,OAEA4J,cAAA0pC,GACA,OAAAj1C,KAAA6G,MAAA+c,OAAAqxB,GAEA1pC,eAAAoY,GACA,MAAA8S,EAAAz2B,KAAAy0B,YACA,OAAA9Q,IAAA8S,EAAAjC,OACAiC,EAAAob,OACApb,EAAAjC,OAEAjpB,QACAvL,KAAAqM,QAAA,SAEAd,WACA,MAAAkrB,EAAAz2B,KAAAy0B,YACAz0B,KAAAgF,OACA6qB,GAAA7vB,KAAAgF,MAAAhF,MAEAy2B,EAAAsd,UACApB,GAAAlc,GAGAlrB,aACA,MAAAa,EAAApM,KACA8E,EAAAsH,EAAA6nC,aACA5zC,EAAAyE,EAAAzE,OAAAyE,EAAAzE,KAAA,IACA2E,EAAAoH,EAAApH,MACA,GAAA6Z,EAAAxe,GACA+L,EAAApH,MA7LA,SAAA3E,GACA,MAAA0b,EAAAvb,OAAAub,KAAA1b,GACA60C,EAAA,IAAA50C,MAAAyb,EAAAtd,QACA,IAAAX,EAAA8hB,EAAAhe,EACA,IAAA9D,EAAA,EAAA8hB,EAAA7D,EAAAtd,OAAAX,EAAA8hB,IAAA9hB,EACA8D,EAAAma,EAAAje,GACAo3C,EAAAp3C,GAAA,CACAoT,EAAAtP,EACAwkB,EAAA/lB,EAAAuB,IAGA,OAAAszC,EAkLAC,CAAA90C,QACA,GAAA2E,IAAA3E,EAAA,CACA,GAAA2E,EAAA,CACA6qB,GAAA7qB,EAAAoH,GACA,MAAAqqB,EAAArqB,EAAAqoB,YACAke,GAAAlc,GACAA,EAAAmc,QAAA,GAEAvyC,GAAAG,OAAA40C,aAAA/0C,IACA+uB,GAAA/uB,EAAA+L,GAEAA,EAAAwnC,UAAA,GACAxnC,EAAApH,MAAA3E,GAGAkL,cACA,MAAAa,EAAApM,KACAy2B,EAAArqB,EAAAqoB,YACAroB,EAAAipC,aACAjpC,EAAAkpC,qBACA7e,EAAA3xB,QAAA,IAAAsH,EAAAkpC,oBAGA/pC,sBAAAgqC,GACA,MAAAnpC,EAAApM,KACAy2B,EAAArqB,EAAAqoB,YACA3vB,EAAAsH,EAAA6nC,aACA,IAAAuB,GAAA,EACAppC,EAAAipC,aACA,MAAAI,EAAAhf,EAAAsd,SACAtd,EAAAsd,SAAAzC,GAAA7a,EAAAob,OAAApb,GACAA,EAAAmC,QAAA9zB,EAAA8zB,QACA4c,GAAA,EACA7C,GAAAlc,GACAA,EAAAmC,MAAA9zB,EAAA8zB,OAEAxsB,EAAAspC,gBAAAH,IACAC,GAAAC,IAAAhf,EAAAsd,WACA/B,GAAA5lC,EAAAqqB,EAAAmc,SAGArnC,YACA,MAAAa,EAAApM,KACAJ,EAAAwM,EAAAvF,MAAAjH,OACA+1C,EAAA/1C,EAAAg2C,iBAAAxpC,EAAAinC,OACAxW,EAAAj9B,EAAAi2C,gBAAAzpC,EAAA6nC,aAAA0B,GAAA,GACAvpC,EAAA9K,QAAA1B,EAAAk2C,eAAAjZ,EAAAzwB,EAAApL,cACAoL,EAAAknC,SAAAlnC,EAAA9K,QAAAkiB,QAEAjY,MAAAP,EAAAguB,GACA,MAAA5sB,EAAApM,MACAy0B,YAAAgC,EAAAzxB,MAAA3E,GAAA+L,GACAooB,OAAAA,EAAAuf,SAAAA,GAAAtd,EACAyb,EAAA1d,EAAAxyB,KACA,IAEAlE,EAAAgQ,EAAA/I,EAFAgxC,EAAA,IAAA/qC,GAAAguB,IAAA34B,EAAA5B,QAAAg4B,EAAAlC,QACAsO,EAAA73B,EAAA,GAAAyrB,EAAAmc,QAAA5nC,EAAA,GAEA,IAAA,IAAAoB,EAAAknC,SACA7c,EAAAmc,QAAAvyC,EACAo2B,EAAAlC,SAAA,EACAxvB,EAAA1E,MACA,CAEA0E,EADAxE,EAAAF,EAAA2K,IACAoB,EAAA4pC,eAAAvf,EAAAp2B,EAAA2K,EAAAguB,GACAna,EAAAxe,EAAA2K,IACAoB,EAAA6pC,gBAAAxf,EAAAp2B,EAAA2K,EAAAguB,GAEA5sB,EAAA8pC,mBAAAzf,EAAAp2B,EAAA2K,EAAAguB,GAEA,MAAAmd,EAAA,IAAA,OAAAroC,EAAAokC,IAAArP,GAAA/0B,EAAAokC,GAAArP,EAAAqP,GACA,IAAAp0C,EAAA,EAAAA,EAAAk7B,IAAAl7B,EACA24B,EAAAmc,QAAA90C,EAAAkN,GAAA8C,EAAA/I,EAAAjH,GACAi4C,IACAI,MACAJ,GAAA,GAEAlT,EAAA/0B,GAGA2oB,EAAAlC,QAAAwhB,EAEAhC,GACA/B,GAAA5lC,EAAArH,GAGAwG,mBAAAkrB,EAAAp2B,EAAA2K,EAAAguB,GACA,MAAAxE,OAAAA,EAAAqd,OAAAA,GAAApb,EACAyb,EAAA1d,EAAAxyB,KACAmwC,EAAAN,EAAA7vC,KACAX,EAAAmzB,EAAA4hB,YACAC,EAAA7hB,IAAAqd,EACA9sC,EAAA,IAAAzE,MAAA04B,GACA,IAAAl7B,EAAA8hB,EAAAje,EACA,IAAA7D,EAAA,EAAA8hB,EAAAoZ,EAAAl7B,EAAA8hB,IAAA9hB,EACA6D,EAAA7D,EAAAkN,EACAjG,EAAAjH,GAAA,CACAyN,CAAA2mC,GAAAmE,GAAA7hB,EAAA8hB,MAAAj1C,EAAAM,GAAAA,GACA4J,CAAA4mC,GAAAN,EAAAyE,MAAAj2C,EAAAsB,GAAAA,IAGA,OAAAoD,EAEAwG,eAAAkrB,EAAAp2B,EAAA2K,EAAAguB,GACA,MAAA6b,OAAAA,EAAAE,OAAAA,GAAAte,EACA1xB,EAAA,IAAAzE,MAAA04B,GACA,IAAAl7B,EAAA8hB,EAAAje,EAAAiL,EACA,IAAA9O,EAAA,EAAA8hB,EAAAoZ,EAAAl7B,EAAA8hB,IAAA9hB,EACA6D,EAAA7D,EAAAkN,EACA4B,EAAAvM,EAAAsB,GACAoD,EAAAjH,GAAA,CACAoT,EAAA2jC,EAAAyB,MAAA1pC,EAAA,GAAAjL,GACAykB,EAAA2uB,EAAAuB,MAAA1pC,EAAA,GAAAjL,IAGA,OAAAoD,EAEAwG,gBAAAkrB,EAAAp2B,EAAA2K,EAAAguB,GACA,MAAA6b,OAAAA,EAAAE,OAAAA,GAAAte,GACA8f,SAAAA,EAAA,IAAAC,SAAAA,EAAA,KAAAx2C,KAAAszC,SACAvuC,EAAA,IAAAzE,MAAA04B,GACA,IAAAl7B,EAAA8hB,EAAAje,EAAAiL,EACA,IAAA9O,EAAA,EAAA8hB,EAAAoZ,EAAAl7B,EAAA8hB,IAAA9hB,EACA6D,EAAA7D,EAAAkN,EACA4B,EAAAvM,EAAAsB,GACAoD,EAAAjH,GAAA,CACAoT,EAAA2jC,EAAAyB,MAAAr1B,GAAArU,EAAA2pC,GAAA50C,GACAykB,EAAA2uB,EAAAuB,MAAAr1B,GAAArU,EAAA4pC,GAAA70C,IAGA,OAAAoD,EAEAwG,UAAA5J,GACA,OAAA3B,KAAAy0B,YAAAme,QAAAjxC,GAEA4J,eAAA5J,GACA,OAAA3B,KAAAy0B,YAAAp0B,KAAAsB,GAEA4J,WAAAoY,EAAA5e,EAAAoe,GACA,MAAAtc,EAAA7G,KAAA6G,MACA4vB,EAAAz2B,KAAAy0B,YACAzwB,EAAAe,EAAA4e,EAAA3hB,MAKA,OAAAkvC,GAJA,CACAn1B,KAAAg1B,GAAAlqC,GAAA,GACAob,OAAAld,EAAAktC,QAAAtuB,EAAA3hB,OAEAgC,EAAAyyB,EAAA90B,MAAA,CAAAwhB,KAAAA,IAEA5X,sBAAAia,EAAA7B,EAAA5e,EAAA6zB,GACA,MAAA6d,EAAA1xC,EAAA4e,EAAA3hB,MACA,IAAAgC,EAAA,OAAAyyC,EAAAC,IAAAD,EACA,MAAAx0B,EAAA2W,GAAA7zB,EAAAktC,QAAAtuB,EAAA3hB,MACA42B,GAAA3W,IACA2W,EAAA3W,OAAAA,EACAuD,EAAAniB,IAAAZ,KAAAY,IAAAmiB,EAAAniB,IAAAW,GACAwhB,EAAAjjB,IAAAE,KAAAF,IAAAijB,EAAAjjB,IAAAyB,GACAA,EAAAktC,GAAAtY,EAAA6d,EAAAz2C,KAAAy0B,YAAA9yB,MAAA,CAAA8uC,KAAA,KAEAjrB,EAAAniB,IAAAZ,KAAAY,IAAAmiB,EAAAniB,IAAAW,GACAwhB,EAAAjjB,IAAAE,KAAAF,IAAAijB,EAAAjjB,IAAAyB,GAEAuH,UAAAoY,EAAAgzB,GACA,MAAAvqC,EAAApM,KACAy2B,EAAArqB,EAAAqoB,YACAme,EAAAnc,EAAAmc,QACAmD,EAAAtf,EAAAlC,SAAA5Q,IAAA8S,EAAAjC,OACA5U,EAAAgzB,EAAAn0C,OACAm4C,EAAAxqC,EAAAyqC,eAAAlzB,GACAiV,EAAA+d,GAAAlgB,EAAAsd,UAAA,CAAAh4B,KAAAg1B,GAAA3kC,EAAAvF,OAAA,GAAAob,OAAA,MACAuD,EAAA,CAAAniB,IAAAM,OAAAqhB,kBAAAziB,IAAAoB,OAAAmzC,oBACAzzC,IAAA0zC,EAAAx0C,IAAAy0C,GAlVA,SAAArzB,GACA,MAAAtgB,IAAAA,EAAAd,IAAAA,EAAA00C,WAAAA,EAAAC,WAAAA,GAAAvzB,EAAAwzB,gBACA,MAAA,CACA9zC,IAAA4zC,EAAA5zC,EAAAM,OAAAmzC,kBACAv0C,IAAA20C,EAAA30C,EAAAoB,OAAAqhB,mBA8UAmyB,CAAAP,GACA,IAAA94C,EAAAkG,EAAAe,EAAAssC,EACA,SAAA+F,IAIA,OAHAryC,EAAA6tC,EAAA90C,GACAkG,EAAAe,EAAA4e,EAAA3hB,MACAqvC,EAAAtsC,EAAA6xC,EAAA50C,OACA8c,EAAA9a,IAAA+yC,EAAA1F,GAAA2F,EAAA3F,EAEA,IAAAvzC,EAAA,EAAAA,EAAA8hB,IACAw3B,MAGAhrC,EAAAirC,sBAAA7xB,EAAA7B,EAAA5e,EAAA6zB,IACAmd,MALAj4C,GASA,GAAAi4C,EACA,IAAAj4C,EAAA8hB,EAAA,EAAA9hB,GAAA,IAAAA,EACA,IAAAs5C,IAAA,CAGAhrC,EAAAirC,sBAAA7xB,EAAA7B,EAAA5e,EAAA6zB,GACA,MAGA,OAAApT,EAEAja,mBAAAoY,GACA,MAAA5e,EAAA/E,KAAAy0B,YAAAme,QACA3wB,EAAA,GACA,IAAAnkB,EAAA8hB,EAAA5b,EACA,IAAAlG,EAAA,EAAA8hB,EAAA7a,EAAAtG,OAAAX,EAAA8hB,IAAA9hB,EACAkG,EAAAe,EAAAjH,GAAA6lB,EAAA3hB,MACA8c,EAAA9a,IACAie,EAAAtU,KAAA3J,GAGA,OAAAie,EAEA1W,iBACA,OAAA,EAEAA,iBAAA5J,GACA,MACA80B,EADAz2B,KACAy0B,YACAD,EAAAiC,EAAAjC,OACAqd,EAAApb,EAAAob,OACA9sC,EAJA/E,KAIAs3C,UAAA31C,GACA,MAAA,CACAkD,MAAA2vB,EAAA,GAAAA,EAAA+iB,iBAAAxyC,EAAAyvB,EAAAxyB,OAAA,GACAgC,MAAA6tC,EAAA,GAAAA,EAAA0F,iBAAAxyC,EAAA8sC,EAAA7vC,OAAA,IAGAuJ,QAAA4X,GACA,MAAA/W,EAAApM,KACAy2B,EAAArqB,EAAAqoB,YACAroB,EAAA0jC,YACA1jC,EAAA+mC,gBAAA,GACA/mC,EAAA4uB,OAAA7X,GAAA,WACAsT,EAAA+gB,MAndA,SAAAxzC,GACA,IAAApG,EAAAH,EAAAiR,EAAAW,EASA,OARAwP,EAAA7a,IACApG,EAAAoG,EAAA2nB,IACAluB,EAAAuG,EAAAoH,MACAsD,EAAA1K,EAAA4nB,OACAvc,EAAArL,EAAAmH,MAEAvN,EAAAH,EAAAiR,EAAAW,EAAArL,EAEA,CACA2nB,IAAA/tB,EACAwN,MAAA3N,EACAmuB,OAAAld,EACAvD,KAAAkE,EACAooC,UAAA,IAAAzzC,GAocA0zC,CAAAx4B,EAAA9S,EAAA9K,QAAAwqB,KAheA,SAAA+oB,EAAAE,EAAAjE,GACA,IAAA,IAAAA,EACA,OAAA,EAEA,MAAA5/B,EAAA2/B,GAAAgE,EAAA/D,GACA1qB,EAAAyqB,GAAAkE,EAAAjE,GACA,MAAA,CACAnlB,IAAAvF,EAAAnb,IACAG,MAAA8F,EAAAjG,IACA2gB,OAAAxF,EAAApb,MACAG,KAAA+F,EAAAlG,OAsdA2sC,CAAAlhB,EAAAoe,OAAApe,EAAAse,OAAA3oC,EAAAwrC,oBAEArsC,OAAA4X,IACA5X,OACA,MAAAa,EAAApM,KACA+iB,EAAA3W,EAAA8mC,KACArsC,EAAAuF,EAAAvF,MACA4vB,EAAArqB,EAAAqoB,YACAjS,EAAAiU,EAAAp2B,MAAA,GACAorB,EAAA5kB,EAAAyuB,UACAka,EAAA,GACAxkC,EAAAoB,EAAAonC,YAAA,EACAxa,EAAA5sB,EAAAqnC,YAAAjxB,EAAA/jB,OAAAuM,EACA,IAAAlN,EAIA,IAHA24B,EAAA3xB,SACA2xB,EAAA3xB,QAAA+H,KAAAkW,EAAA0I,EAAAzgB,EAAAguB,GAEAl7B,EAAAkN,EAAAlN,EAAAkN,EAAAguB,IAAAl7B,EAAA,CACA,MAAA+yB,EAAArO,EAAA1kB,GACA+yB,EAAAgnB,SAGAhnB,EAAA2e,OACAA,EAAA7hC,KAAAkjB,GAEAA,EAAAhkB,KAAAkW,EAAA0I,IAGA,IAAA3tB,EAAA,EAAAA,EAAA0xC,EAAA/wC,SAAAX,EACA0xC,EAAA1xC,GAAA+O,KAAAkW,EAAA0I,GAGAlgB,SAAA5J,EAAA6tC,GACA,MAAArsB,EAAAqsB,EAAA,SAAA,UACA,YAAA1vC,IAAA6B,GAAA3B,KAAAy0B,YAAA3vB,QACA9E,KAAA83C,6BAAA30B,GACAnjB,KAAA+3C,0BAAAp2C,GAAA,EAAAwhB,GAEA5X,WAAA5J,EAAA6tC,EAAArsB,GACA,MAAA/W,EAAApM,KACA8E,EAAAsH,EAAA6nC,aACA,IAAAlzC,EACA,GAAAY,GAAA,GAAAA,EAAAyK,EAAAqoB,YAAAp0B,KAAA5B,OAAA,CACA,MAAAoyB,EAAAzkB,EAAAqoB,YAAAp0B,KAAAsB,GACAZ,EAAA8vB,EAAA8iB,WACA9iB,EAAA8iB,SApYA,SAAAtjB,EAAA1uB,EAAAkvB,GACA,OAAArwB,OAAAC,OAAAD,OAAA2f,OAAAkQ,GAAA,CACAmf,QAAA,EACAvqC,UAAAtD,EACAoD,YAAAjF,EACAk4C,SAAAl4C,EACA+wB,QAAAA,EACAlvB,MAAAA,EACAwhB,KAAA,UACAhiB,KAAA,SA2XA82C,CAAA7rC,EAAApL,aAAAW,EAAAkvB,IACA9vB,EAAAgE,OAAAqH,EAAAkrC,UAAA31C,GACAZ,EAAAi3C,IAAAlzC,EAAAzE,KAAAsB,GACAZ,EAAAY,MAAAZ,EAAAkE,UAAAtD,OAEAZ,EAAAqL,EAAAunC,WACAvnC,EAAAunC,SAtZA,SAAAtjB,EAAA1uB,GACA,OAAAnB,OAAAC,OAAAD,OAAA2f,OAAAkQ,GACA,CACAmf,QAAA,EACA1qC,aAAAhF,EACAigB,aAAApe,EACAA,MAAAA,EACAwhB,KAAA,UACAhiB,KAAA,YA8YA+2C,CAAA9rC,EAAAvF,MAAA7F,aAAAoL,EAAAzK,QACAZ,EAAA+D,QAAAA,EACA/D,EAAAY,MAAAZ,EAAAgf,aAAA3T,EAAAzK,MAIA,OAFAZ,EAAAyuC,SAAAA,EACAzuC,EAAAoiB,KAAAA,EACApiB,EAEAwK,6BAAA4X,GACA,OAAAnjB,KAAAm4C,uBAAAn4C,KAAAs1C,mBAAA52B,GAAAyE,GAEA5X,0BAAA5J,EAAAwhB,GACA,OAAAnjB,KAAAm4C,uBAAAn4C,KAAAo4C,gBAAA15B,GAAAyE,EAAAxhB,GAEA4J,uBAAA8sC,EAAAl1B,EAAA,UAAAxhB,GACA,MAAAyK,EAAApM,KACAwvC,EAAA,WAAArsB,EACA8F,EAAA7c,EAAA+mC,gBACAxN,EAAA0S,EAAA,IAAAl1B,EACA4vB,EAAA9pB,EAAA0c,GACA2S,EAAAlsC,EAAAsnC,qBAAAryB,GAAA1f,GACA,GAAAoxC,EACA,OAAAD,GAAAC,EAAAuF,GAEA,MAAA14C,EAAAwM,EAAAvF,MAAAjH,OACA+1C,EAAA/1C,EAAA24C,wBAAAnsC,EAAAinC,MAAAgF,GACAvb,EAAA0S,EAAA,CAAA,GAAA6I,SAAA,QAAAA,EAAA,IAAA,CAAAA,EAAA,IACAxb,EAAAj9B,EAAAi2C,gBAAAzpC,EAAA6nC,aAAA0B,GACApjC,EAAA/R,OAAAub,KAAAmG,GAAAM,SAAA61B,IAEAp2B,EAAAriB,EAAA44C,oBAAA3b,EAAAtqB,GADA,IAAAnG,EAAApL,WAAAW,EAAA6tC,IACA1S,GAKA,OAJA7a,EAAAkuB,UACAluB,EAAAkuB,QAAAmI,EACArvB,EAAA0c,GAAAnlC,OAAAg8B,OAAAsW,GAAA7wB,EAAAq2B,KAEAr2B,EAEA1W,mBAAA5J,EAAA82C,EAAAjJ,GACA,MAAApjC,EAAApM,KACA6G,EAAAuF,EAAAvF,MACAoiB,EAAA7c,EAAA+mC,gBACAxN,EAAA,aAAA8S,IACA1F,EAAA9pB,EAAA0c,GACA,GAAAoN,EACA,OAAAA,EAEA,IAAAzxC,EACA,IAAA,IAAAuF,EAAAvF,QAAA8gB,UAAA,CACA,MAAAxiB,EAAAwM,EAAAvF,MAAAjH,OACA+1C,EAAA/1C,EAAA84C,0BAAAtsC,EAAAinC,MAAAoF,GACA5b,EAAAj9B,EAAAi2C,gBAAAzpC,EAAA6nC,aAAA0B,GACAr0C,EAAA1B,EAAAk2C,eAAAjZ,EAAAzwB,EAAApL,WAAAW,EAAA6tC,EAAAiJ,IAEA,MAAAhJ,EAAA,IAAAG,GAAA/oC,EAAAvF,GAAAA,EAAAmuC,YAIA,OAHAnuC,GAAAA,EAAA67B,aACAlU,EAAA0c,GAAAnlC,OAAAg8B,OAAAiT,IAEAA,EAEAlkC,iBAAAjK,GACA,GAAAA,EAAA6uC,QAGA,OAAAnwC,KAAA40B,iBAAA50B,KAAA40B,eAAAp0B,OAAAC,OAAA,GAAAa,IAEAiK,eAAA4X,EAAAw1B,GACA,OAAAA,GAAA9F,GAAA1vB,IAAAnjB,KAAA6G,MAAA+xC,oBAEArtC,cAAAslB,EAAAlvB,EAAA2tC,EAAAnsB,GACA0vB,GAAA1vB,GACA3iB,OAAAC,OAAAowB,EAAAye,GAEAtvC,KAAA64C,mBAAAl3C,EAAAwhB,GAAA6X,OAAAnK,EAAAye,GAGA/jC,oBAAAotC,EAAAx1B,EAAA+sB,GACAyI,IAAA9F,GAAA1vB,IACAnjB,KAAA64C,wBAAA/4C,EAAAqjB,GAAA6X,OAAA2d,EAAAzI,GAGA3kC,UAAAslB,EAAAlvB,EAAAwhB,EAAAqsB,GACA3e,EAAA2e,OAAAA,EACA,MAAAluC,EAAAtB,KAAA8wB,SAAAnvB,EAAA6tC,GACAxvC,KAAA64C,mBAAAl3C,EAAAwhB,EAAAqsB,GAAAxU,OAAAnK,EAAA,CACAvvB,SAAAkuC,GAAAxvC,KAAA84C,iBAAAx3C,IAAAA,IAGAiK,iBAAAslB,EAAA9Q,EAAApe,GACA3B,KAAA+4C,UAAAloB,EAAAlvB,EAAA,UAAA,GAEA4J,cAAAslB,EAAA9Q,EAAApe,GACA3B,KAAA+4C,UAAAloB,EAAAlvB,EAAA,UAAA,GAEA4J,2BACA,MAAAslB,EAAA7wB,KAAAy0B,YAAA3vB,QACA+rB,GACA7wB,KAAA+4C,UAAAloB,OAAA/wB,EAAA,UAAA,GAGAyL,wBACA,MAAAslB,EAAA7wB,KAAAy0B,YAAA3vB,QACA+rB,GACA7wB,KAAA+4C,UAAAloB,OAAA/wB,EAAA,UAAA,GAGAyL,gBAAAgqC,GACA,MAAAnpC,EAAApM,KACAK,EAAA+L,EAAApH,MACAwd,EAAApW,EAAAqoB,YAAAp0B,KACA,IAAA,MAAAovB,EAAAupB,EAAAC,KAAA7sC,EAAAwnC,UACAxnC,EAAAqjB,GAAAupB,EAAAC,GAEA7sC,EAAAwnC,UAAA,GACA,MAAAsF,EAAA12B,EAAA/jB,OACA06C,EAAA94C,EAAA5B,OACAu6B,EAAAv2B,KAAAY,IAAA81C,EAAAD,GACAlgB,GACA5sB,EAAAkqC,MAAA,EAAAtd,GAEAmgB,EAAAD,EACA9sC,EAAAgtC,gBAAAF,EAAAC,EAAAD,EAAA3D,GACA4D,EAAAD,GACA9sC,EAAAitC,gBAAAF,EAAAD,EAAAC,GAGA5tC,gBAAAP,EAAAguB,EAAAuc,GAAA,GACA,MAAAnpC,EAAApM,KACAy2B,EAAArqB,EAAAqoB,YACAp0B,EAAAo2B,EAAAp2B,KACA4K,EAAAD,EAAAguB,EACA,IAAAl7B,EACA,MAAAw7C,EAAAhyC,IAEA,IADAA,EAAA7I,QAAAu6B,EACAl7B,EAAAwJ,EAAA7I,OAAA,EAAAX,GAAAmN,EAAAnN,IACAwJ,EAAAxJ,GAAAwJ,EAAAxJ,EAAAk7B,IAIA,IADAsgB,EAAAj5C,GACAvC,EAAAkN,EAAAlN,EAAAmN,IAAAnN,EACAuC,EAAAvC,GAAA,IAAAsO,EAAAgsC,gBAEAhsC,EAAAknC,UACAgG,EAAA7iB,EAAAmc,SAEAxmC,EAAAkqC,MAAAtrC,EAAAguB,GACAuc,GACAnpC,EAAAmtC,eAAAl5C,EAAA2K,EAAAguB,EAAA,SAGAztB,eAAAslB,EAAA7lB,EAAAguB,EAAA7V,IACA5X,gBAAAP,EAAAguB,GACA,MACAvC,EADAz2B,KACAy0B,YACA,GAFAz0B,KAEAszC,SAAA,CACA,MAAAkG,EAAA/iB,EAAAmc,QAAAnpB,OAAAze,EAAAguB,GACAvC,EAAAsd,UACApB,GAAAlc,EAAA+iB,GAGA/iB,EAAAp2B,KAAAopB,OAAAze,EAAAguB,GAEAztB,MAAAjB,GACA,GAAAtK,KAAAszC,SACAtzC,KAAA4zC,UAAAjmC,KAAArD,OACA,CACA,MAAAmlB,EAAAupB,EAAAC,GAAA3uC,EACAtK,KAAAyvB,GAAAupB,EAAAC,IAGA1tC,cACA,MAAAytB,EAAAn5B,UAAApB,OACAuB,KAAAy5C,MAAA,CAAA,kBAAAz5C,KAAAi0C,aAAA5zC,KAAA5B,OAAAu6B,EAAAA,IAEAztB,aACAvL,KAAAy5C,MAAA,CAAA,kBAAAz5C,KAAAy0B,YAAAp0B,KAAA5B,OAAA,EAAA,IAEA8M,eACAvL,KAAAy5C,MAAA,CAAA,kBAAA,EAAA,IAEAluC,cAAAP,EAAAguB,GACAh5B,KAAAy5C,MAAA,CAAA,kBAAAzuC,EAAAguB,IACAh5B,KAAAy5C,MAAA,CAAA,kBAAAzuC,EAAAnL,UAAApB,OAAA,IAEA8M,iBACAvL,KAAAy5C,MAAA,CAAA,kBAAA,EAAA55C,UAAApB,UAGAw0C,GAAA/wB,SAAA,GACA+wB,GAAA/pC,UAAAosC,mBAAA,KACArC,GAAA/pC,UAAAkvC,gBAAA,KAEA,MAAAsB,GACAnuC,cACAvL,KAAAkR,OAAApR,EACAE,KAAAomB,OAAAtmB,EACAE,KAAAwvC,QAAA,EACAxvC,KAAAsB,aAAAxB,EACAE,KAAAowC,iBAAAtwC,EAEAyL,gBAAA8pB,GACA,MAAAnkB,EAAAA,EAAAkV,EAAAA,GAAApmB,KAAA25C,SAAA,CAAA,IAAA,KAAAtkB,GACA,MAAA,CAAAnkB,EAAAA,EAAAkV,EAAAA,GAEA7a,WACA,OAAA4a,GAAAnmB,KAAAkR,IAAAiV,GAAAnmB,KAAAomB,GAEA7a,SAAA0rB,EAAA2iB,GACA,MAAAxtC,EAAApM,KACA6L,EAAA7L,KAAAowC,YACA,IAAAwJ,IAAA/tC,EACA,OAAAO,EAEA,MAAAgR,EAAA,GAIA,OAHA6Z,EAAAv1B,SAAA01B,IACAha,EAAAga,GAAAvrB,EAAAurB,IAAAvrB,EAAAurB,GAAAoY,SAAA3jC,EAAAurB,GAAAwX,IAAAxiC,EAAAgrB,MAEAha,GAGAs8B,GAAAx3B,SAAA,GACAw3B,GAAAG,mBAAA/5C,EAEA,MAAAg6C,GAAA,CACA73B,OAAAje,GACAzD,EAAAyD,GAAAA,EAAA,GAAAA,EAEAuH,QAAAwuC,EAAAp4C,EAAAq4C,GACA,GAAA,IAAAD,EACA,MAAA,IAEA,MAAArU,EAAA1lC,KAAA6G,MAAAvF,QAAAokC,OACA,IAAAuU,EACA/X,EAAA6X,EACA,GAAAC,EAAAv7C,OAAA,EAAA,CACA,MAAAy7C,EAAAz3C,KAAAF,IAAAE,KAAA6jB,IAAA0zB,EAAA,GAAAh2C,OAAAvB,KAAA6jB,IAAA0zB,EAAAA,EAAAv7C,OAAA,GAAAuF,SACAk2C,EAAA,MAAAA,EAAA,QACAD,EAAA,cAEA/X,EAmBA,SAAA6X,EAAAC,GACA,IAAA9X,EAAA8X,EAAAv7C,OAAA,EAAAu7C,EAAA,GAAAh2C,MAAAg2C,EAAA,GAAAh2C,MAAAg2C,EAAA,GAAAh2C,MAAAg2C,EAAA,GAAAh2C,MACAvB,KAAA6jB,IAAA4b,IAAA,GAAA6X,IAAAt3C,KAAAojB,MAAAk0B,KACA7X,EAAA6X,EAAAt3C,KAAAojB,MAAAk0B,IAEA,OAAA7X,EAxBAiY,CAAAJ,EAAAC,GAEA,MAAAI,EAAA/0B,GAAA5iB,KAAA6jB,IAAA4b,IACAmY,EAAA53C,KAAAF,IAAAE,KAAAY,KAAA,EAAAZ,KAAAojB,MAAAu0B,GAAA,IAAA,GACA94C,EAAA,CAAA24C,SAAAA,EAAAK,sBAAAD,EAAAE,sBAAAF,GAEA,OADA75C,OAAAC,OAAAa,EAAAtB,KAAAsB,QAAA04C,MAAA/T,QACAT,GAAAuU,EAAArU,EAAApkC,IAEAiK,YAAAwuC,EAAAp4C,EAAAq4C,GACA,GAAA,IAAAD,EACA,MAAA,IAEA,MAAAhL,EAAAgL,EAAAt3C,KAAAmjB,IAAA,GAAAnjB,KAAAojB,MAAAR,GAAA00B,KACA,OAAA,IAAAhL,GAAA,IAAAA,GAAA,IAAAA,EACA+K,GAAAU,QAAAh8C,KAAAwB,KAAA+5C,EAAAp4C,EAAAq4C,GAEA,KAUA,IAAAS,GAAA,CAAAX,WAAAA,IAqEA,SAAAY,GAAA/2B,EAAAq2B,GACA,MAAAW,EAAAh3B,EAAAriB,QAAA04C,MACAY,EAAAD,EAAAE,eAwBA,SAAAl3B,GACA,MAAAjd,EAAAid,EAAAriB,QAAAoF,OACAo0C,EAAAn3B,EAAAo3B,YACAC,EAAAr3B,EAAAs3B,QAAAH,GAAAp0C,EAAA,EAAA,GACAw0C,EAAAv3B,EAAAw3B,WAAAL,EACA,OAAAr4C,KAAAojB,MAAApjB,KAAAY,IAAA23C,EAAAE,IA7BAE,CAAAz3B,GACA03B,EAAAV,EAAAW,MAAAC,QA6CA,SAAAvB,GACA,MAAAh0B,EAAA,GACA,IAAAloB,EAAA8hB,EACA,IAAA9hB,EAAA,EAAA8hB,EAAAo6B,EAAAv7C,OAAAX,EAAA8hB,EAAA9hB,IACAk8C,EAAAl8C,GAAAw9C,OACAt1B,EAAArY,KAAA7P,GAGA,OAAAkoB,EArDAw1B,CAAAxB,GAAA,GACAyB,EAAAJ,EAAA58C,OACAi9C,EAAAL,EAAA,GACA7S,EAAA6S,EAAAI,EAAA,GACAE,EAAA,GACA,GAAAF,EAAAb,EAEA,OAgDA,SAAAZ,EAAA2B,EAAAN,EAAAO,GACA,IAEA99C,EAFAk7B,EAAA,EACA6H,EAAAwa,EAAA,GAGA,IADAO,EAAAn5C,KAAAo5C,KAAAD,GACA99C,EAAA,EAAAA,EAAAk8C,EAAAv7C,OAAAX,IACAA,IAAA+iC,IACA8a,EAAAhuC,KAAAqsC,EAAAl8C,IACAk7B,IACA6H,EAAAwa,EAAAriB,EAAA4iB,IA1DAE,CAAA9B,EAAA2B,EAAAN,EAAAI,EAAAb,GACAe,EAEA,MAAAC,EAqBA,SAAAP,EAAArB,EAAAY,GACA,MAAAmB,EA4DA,SAAAz0C,GACA,MAAAC,EAAAD,EAAA7I,OACA,IAAAX,EAAAk+C,EACA,GAAAz0C,EAAA,EACA,OAAA,EAEA,IAAAy0C,EAAA10C,EAAA,GAAAxJ,EAAA,EAAAA,EAAAyJ,IAAAzJ,EACA,GAAAwJ,EAAAxJ,GAAAwJ,EAAAxJ,EAAA,KAAAk+C,EACA,OAAA,EAGA,OAAAA,EAvEAC,CAAAZ,GACAO,EAAA5B,EAAAv7C,OAAAm8C,EACA,IAAAmB,EACA,OAAAt5C,KAAAF,IAAAq5C,EAAA,GAEA,MAAAM,EAAAn2B,GAAAg2B,GACA,IAAA,IAAAj+C,EAAA,EAAA8hB,EAAAs8B,EAAAz9C,OAAA,EAAAX,EAAA8hB,EAAA9hB,IAAA,CACA,MAAAy7B,EAAA2iB,EAAAp+C,GACA,GAAAy7B,EAAAqiB,EACA,OAAAriB,EAGA,OAAA92B,KAAAF,IAAAq5C,EAAA,GAlCAO,CAAAd,EAAArB,EAAAY,GACA,GAAAa,EAAA,EAAA,CACA,IAAA39C,EAAA8hB,EACA,MAAAw8B,EAAAX,EAAA,EAAAh5C,KAAAqB,OAAA0kC,EAAAkT,IAAAD,EAAA,IAAA,KAEA,IADAtmB,GAAA6kB,EAAA2B,EAAAC,EAAAj9B,EAAAy9B,GAAA,EAAAV,EAAAU,EAAAV,GACA59C,EAAA,EAAA8hB,EAAA67B,EAAA,EAAA39C,EAAA8hB,EAAA9hB,IACAq3B,GAAA6kB,EAAA2B,EAAAC,EAAAP,EAAAv9C,GAAAu9C,EAAAv9C,EAAA,IAGA,OADAq3B,GAAA6kB,EAAA2B,EAAAC,EAAApT,EAAA7pB,EAAAy9B,GAAApC,EAAAv7C,OAAA+pC,EAAA4T,GACAT,EAGA,OADAxmB,GAAA6kB,EAAA2B,EAAAC,GACAD,EA+CA,SAAAxmB,GAAA6kB,EAAA2B,EAAAC,EAAAS,EAAAC,GACA,MAAAtxC,EAAAkU,EAAAm9B,EAAA,GACApxC,EAAAxI,KAAAY,IAAA6b,EAAAo9B,EAAAtC,EAAAv7C,QAAAu7C,EAAAv7C,QACA,IACAA,EAAAX,EAAA+iC,EADA7H,EAAA,EAQA,IANA4iB,EAAAn5C,KAAAo5C,KAAAD,GACAU,IACA79C,EAAA69C,EAAAD,EACAT,EAAAn9C,EAAAgE,KAAAojB,MAAApnB,EAAAm9C,IAEA/a,EAAA71B,EACA61B,EAAA,GACA7H,IACA6H,EAAAp+B,KAAAqB,MAAAkH,EAAAguB,EAAA4iB,GAEA,IAAA99C,EAAA2E,KAAAF,IAAAyI,EAAA,GAAAlN,EAAAmN,EAAAnN,IACAA,IAAA+iC,IACA8a,EAAAhuC,KAAAqsC,EAAAl8C,IACAk7B,IACA6H,EAAAp+B,KAAAqB,MAAAkH,EAAAguB,EAAA4iB,IA7JA15B,GAAA3U,IAAA,QAAA,CACAgvB,SAAA,EACA71B,QAAA,EACA8Y,SAAA,EACA+8B,aAAA,EACAhV,OAAA,QACAtP,MAAA,EACAukB,KAAA,CACAjgB,SAAA,EACAhP,UAAA,EACAkvB,YAAA,EACAC,iBAAA,EACAC,WAAA,EACA7B,WAAA,EACA8B,UAAA,CAAA1J,EAAA5xC,IAAAA,EAAAisB,UACAsvB,UAAA,CAAA3J,EAAA5xC,IAAAA,EAAA+E,MACAK,QAAA,EACA4iC,WAAA,GACAC,iBAAA,EACA1nC,YAAA,GAEAi7C,MAAA,CACAvgB,SAAA,EACA5P,KAAA,GACApmB,QAAA,CACAolB,IAAA,EACAC,OAAA,IAGAouB,MAAA,CACA+C,YAAA,EACAC,YAAA,GACAC,QAAA,EACAC,gBAAA,EACAC,gBAAA,GACA52C,QAAA,EACAg2B,SAAA,EACAme,UAAA,EACA0C,gBAAA,EACAC,YAAA,EACAt5C,SAAA02C,GAAAX,WAAA73B,OACAq7B,MAAA,GACAhC,MAAA,GACA90C,MAAA,SACA+2C,WAAA,OACAC,mBAAA,EACAC,cAAA,4BACAC,gBAAA,KAGAx7B,GAAAy7B,MAAA,cAAA,QAAA,GAAA,SACAz7B,GAAAy7B,MAAA,aAAA,QAAA,GAAA,eACAz7B,GAAAy7B,MAAA,aAAA,cAAA,GAAA,eACAz7B,GAAAy7B,MAAA,cAAA,QAAA,GAAA,SACAz7B,GAAA4B,SAAA,QAAA,CACAa,WAAA,EACAH,YAAAjb,IAAAA,EAAAkb,WAAA,YAAAlb,EAAAkb,WAAA,UAAA,aAAAlb,GAAA,WAAAA,EACAmb,WAAAnb,GAAA,eAAAA,GAAA,mBAAAA,IAEA2Y,GAAA4B,SAAA,SAAA,CACAa,UAAA,UAEAzC,GAAA4B,SAAA,cAAA,CACAU,YAAAjb,GAAA,oBAAAA,GAAA,aAAAA,EACAmb,WAAAnb,GAAA,oBAAAA,IA+GA,MACAq0C,GAAA,CAAAj6B,EAAAk6B,EAAAn3C,IAAA,QAAAm3C,GAAA,SAAAA,EAAAl6B,EAAAk6B,GAAAn3C,EAAAid,EAAAk6B,GAAAn3C,EACA,SAAAo3C,GAAAx2C,EAAAy2C,GACA,MAAA/3B,EAAA,GACAg4B,EAAA12C,EAAA7I,OAAAs/C,EACAx2C,EAAAD,EAAA7I,OACA,IAAAX,EAAA,EACA,KAAAA,EAAAyJ,EAAAzJ,GAAAkgD,EACAh4B,EAAArY,KAAArG,EAAA7E,KAAAojB,MAAA/nB,KAEA,OAAAkoB,EAEA,SAAAi4B,GAAAt6B,EAAAhiB,EAAAu8C,GACA,MAAAz/C,EAAAklB,EAAAq2B,MAAAv7C,OACA0/C,EAAA17C,KAAAY,IAAA1B,EAAAlD,EAAA,GACAuM,EAAA2Y,EAAAy6B,YACAnzC,EAAA0Y,EAAA06B,UACAh4B,EAAA,KACA,IACA3f,EADA43C,EAAA36B,EAAA46B,gBAAAJ,GAEA,KAAAD,IAEAx3C,EADA,IAAAjI,EACAgE,KAAAF,IAAA+7C,EAAAtzC,EAAAC,EAAAqzC,GACA,IAAA38C,GACAgiB,EAAA46B,gBAAA,GAAAD,GAAA,GAEAA,EAAA36B,EAAA46B,gBAAAJ,EAAA,IAAA,EAEAG,GAAAH,EAAAx8C,EAAA+E,GAAAA,EACA43C,EAAAtzC,EAAAqb,GAAAi4B,EAAArzC,EAAAob,IAIA,OAAAi4B,EAeA,SAAAE,GAAAl9C,GACA,OAAAA,EAAAq7C,UAAAr7C,EAAAw5C,WAAA,EAEA,SAAA2D,GAAAn9C,EAAAm2B,GACA,IAAAn2B,EAAAi7B,QACA,OAAA,EAEA,MAAAj2B,EAAAkxB,GAAAl2B,EAAAgF,KAAAmxB,GACAlxB,EAAAgxB,GAAAj2B,EAAAiF,SAEA,OADAhG,EAAAe,EAAAqrB,MAAArrB,EAAAqrB,KAAAluB,OAAA,GACA6H,EAAAsc,WAAArc,EAAA0jB,OAeA,SAAAy0B,GAAAl4C,EAAAuuB,EAAAvV,GACA,IAAApC,EAAAtS,EAAAtE,GAIA,OAHAgZ,GAAA,UAAAuV,IAAAvV,GAAA,UAAAuV,KACA3X,EA5EA,CAAA5W,GAAA,SAAAA,EAAA,QAAA,UAAAA,EAAA,OAAAA,EA4EAm4C,CAAAvhC,IAEAA,EAoCA,MAAAwhC,WAAAlF,GACAnuC,YAAA4iC,GACA0Q,QACA7+C,KAAA0e,GAAAyvB,EAAAzvB,GACA1e,KAAAmB,KAAAgtC,EAAAhtC,KACAnB,KAAAsB,aAAAxB,EACAE,KAAA+iB,IAAAorB,EAAAprB,IACA/iB,KAAA6G,MAAAsnC,EAAAtnC,MACA7G,KAAA2rB,SAAA7rB,EACAE,KAAA4rB,YAAA9rB,EACAE,KAAAmL,UAAArL,EACAE,KAAAoL,WAAAtL,EACAE,KAAA8oB,WAAAhpB,EACAE,KAAAiqB,YAAAnqB,EACAE,KAAA8+C,SAAA,CACA3zC,KAAA,EACAC,MAAA,EACAugB,IAAA,EACAC,OAAA,GAEA5rB,KAAAytB,cAAA3tB,EACAE,KAAA2yB,eAAA7yB,EACAE,KAAA++C,gBAAAj/C,EACAE,KAAAg/C,mBAAAl/C,EACAE,KAAAi/C,iBAAAn/C,EACAE,KAAAk/C,kBAAAp/C,EACAE,KAAAgC,UAAAlC,EACAE,KAAAm/C,mBAAAr/C,EACAE,KAAAqD,SAAAvD,EACAE,KAAAuC,SAAAzC,EACAE,KAAAo/C,YAAAt/C,EACAE,KAAAg6C,MAAA,GACAh6C,KAAAq/C,eAAA,KACAr/C,KAAAs/C,YAAA,KACAt/C,KAAAu/C,YAAA,KACAv/C,KAAAi7C,QAAA,EACAj7C,KAAAm7C,WAAA,EACAn7C,KAAAw/C,kBAAA,GACAx/C,KAAAo+C,iBAAAt+C,EACAE,KAAAq+C,eAAAv+C,EACAE,KAAA20B,gBAAA,EACA30B,KAAAy/C,cAAA3/C,EACAE,KAAA0/C,cAAA5/C,EACAE,KAAA2/C,mBAAA7/C,EACAE,KAAA4/C,mBAAA9/C,EACAE,KAAA6/C,aAAA,EACA7/C,KAAA8/C,aAAA,EACA9/C,KAAA+/C,OAAA,GACA//C,KAAAggD,mBAAA,EACAhgD,KAAA2zC,cAAA7zC,EAEAyL,KAAAjK,GACA,MAAA8K,EAAApM,KACAoM,EAAA9K,QAAAA,EAAAw9B,WAAA1yB,EAAApL,cACAoL,EAAApK,KAAAV,EAAAU,KACAoK,EAAAszC,SAAAtzC,EAAAkqC,MAAAh1C,EAAA+B,KACA+I,EAAAqzC,SAAArzC,EAAAkqC,MAAAh1C,EAAAiB,KACA6J,EAAAwzC,cAAAxzC,EAAAkqC,MAAAh1C,EAAA2+C,cACA7zC,EAAAuzC,cAAAvzC,EAAAkqC,MAAAh1C,EAAA4+C,cAEA30C,MAAAysC,EAAAr2C,GACA,OAAAq2C,EAEAzsC,gBACA,IAAAm0C,SAAAA,EAAAD,SAAAA,EAAAG,cAAAA,EAAAD,cAAAA,GAAA3/C,KAKA,OAJA0/C,EAAA1gC,EAAA0gC,EAAA/7C,OAAAqhB,mBACAy6B,EAAAzgC,EAAAygC,EAAA97C,OAAAmzC,mBACA8I,EAAA5gC,EAAA4gC,EAAAj8C,OAAAqhB,mBACA26B,EAAA3gC,EAAA2gC,EAAAh8C,OAAAmzC,mBACA,CACAzzC,IAAA2b,EAAA0gC,EAAAE,GACAr9C,IAAAyc,EAAAygC,EAAAE,GACA1I,WAAAn4B,EAAA4gC,GACAxI,WAAAp4B,EAAA2gC,IAGAl0C,UAAAorC,GACA,MAAAvqC,EAAApM,KACA,IACAwlB,GADAniB,IAAAA,EAAAd,IAAAA,EAAA00C,WAAAA,EAAAC,WAAAA,GAAA9qC,EAAA+qC,gBAEA,GAAAF,GAAAC,EACA,MAAA,CAAA7zC,IAAAA,EAAAd,IAAAA,GAEA,MAAA49C,EAAA/zC,EAAA2lC,0BACA,IAAA,IAAAj0C,EAAA,EAAA8hB,EAAAugC,EAAA1hD,OAAAX,EAAA8hB,IAAA9hB,EACA0nB,EAAA26B,EAAAriD,GAAAw2B,WAAA8rB,UAAAh0C,EAAAuqC,GACAM,IACA5zC,EAAAZ,KAAAY,IAAAA,EAAAmiB,EAAAniB,MAEA6zC,IACA30C,EAAAE,KAAAF,IAAAA,EAAAijB,EAAAjjB,MAGA,MAAA,CACAc,IAAA2b,EAAA3b,EAAA2b,EAAAzc,EAAAc,IACAd,IAAAyc,EAAAzc,EAAAyc,EAAA3b,EAAAd,KAGAgJ,aACA,MAAAa,EAAApM,KACA,MAAA,CACAmL,KAAAiB,EAAA6yC,aAAA,EACAtzB,IAAAvf,EAAA2yC,YAAA,EACA3zC,MAAAgB,EAAA8yC,cAAA,EACAtzB,OAAAxf,EAAA4yC,eAAA,GAGAzzC,WACA,OAAAvL,KAAAg6C,MAEAzuC,YACA,MAAAlL,EAAAL,KAAA6G,MAAAxG,KACA,OAAAL,KAAAsB,QAAAD,SAAArB,KAAAy7B,eAAAp7B,EAAAggD,QAAAhgD,EAAAigD,UAAAjgD,EAAAgB,QAAA,GAEAkK,eACAvL,KAAA+/C,OAAA,GACA//C,KAAAggD,mBAAA,EAEAz0C,eACAxH,EAAA/D,KAAAsB,QAAAi/C,aAAA,CAAAvgD,OAEAuL,OAAAkiB,EAAAkF,EAAAD,GACA,MAAAtmB,EAAApM,KACA26C,EAAAvuC,EAAA9K,QAAA04C,MACAwG,EAAA7F,EAAA6F,WACAp0C,EAAAm0C,eACAn0C,EAAAqhB,SAAAA,EACArhB,EAAAumB,UAAAA,EACAvmB,EAAA0yC,SAAApsB,EAAAlyB,OAAAC,OAAA,CACA0K,KAAA,EACAC,MAAA,EACAugB,IAAA,EACAC,OAAA,GACA8G,GACAtmB,EAAA4tC,MAAA,KACA5tC,EAAAmzC,YAAA,KACAnzC,EAAAizC,eAAA,KACAjzC,EAAAkzC,YAAA,KACAlzC,EAAAq0C,sBACAr0C,EAAAs0C,gBACAt0C,EAAAu0C,qBACAv0C,EAAA+uC,WAAA/uC,EAAAqvB,eACArvB,EAAA0c,MAAA4J,EAAAvnB,KAAAunB,EAAAtnB,MACAgB,EAAA6d,OAAAyI,EAAA/G,IAAA+G,EAAA9G,OACAxf,EAAA4zC,oBACA5zC,EAAAw0C,mBACAx0C,EAAAy0C,sBACAz0C,EAAA00C,kBACA10C,EAAAgzC,OAAArnB,GAAA3rB,EAAAA,EAAA9K,QAAA22B,OACA7rB,EAAA4zC,mBAAA,GAEA5zC,EAAA20C,mBACA30C,EAAA4tC,MAAA5tC,EAAA40C,cAAA,GACA50C,EAAA60C,kBACA,MAAAC,EAAAV,EAAAp0C,EAAA4tC,MAAAv7C,OACA2N,EAAA+0C,sBAAAD,EAAApD,GAAA1xC,EAAA4tC,MAAAwG,GAAAp0C,EAAA4tC,OACA5tC,EAAA0jC,YACA1jC,EAAAg1C,+BACAh1C,EAAAi1C,yBACAj1C,EAAAk1C,8BACA3G,EAAApe,UAAAoe,EAAAD,UAAA,SAAAC,EAAA16B,UACA7T,EAAA4tC,MAAAU,GAAAtuC,EAAAA,EAAA4tC,OACA5tC,EAAAmzC,YAAA,MAEA2B,GACA90C,EAAA+0C,sBAAA/0C,EAAA4tC,OAEA5tC,EAAAm1C,YACAn1C,EAAAo1C,MACAp1C,EAAAq1C,WACAr1C,EAAAs1C,cAEAn2C,YACA,MAAAa,EAAApM,KACA,IACA2hD,EAAAC,EADAC,EAAAz1C,EAAA9K,QAAAke,QAEApT,EAAAqvB,gBACAkmB,EAAAv1C,EAAAjB,KACAy2C,EAAAx1C,EAAAhB,QAEAu2C,EAAAv1C,EAAAuf,IACAi2B,EAAAx1C,EAAAwf,OACAi2B,GAAAA,GAEAz1C,EAAAgyC,YAAAuD,EACAv1C,EAAAiyC,UAAAuD,EACAx1C,EAAAuoB,eAAAktB,EACAz1C,EAAA6uC,QAAA2G,EAAAD,EACAv1C,EAAA01C,eAAA11C,EAAA9K,QAAAygD,cAEAx2C,cACAxH,EAAA/D,KAAAsB,QAAAogD,YAAA,CAAA1hD,OAEAuL,sBACAxH,EAAA/D,KAAAsB,QAAAm/C,oBAAA,CAAAzgD,OAEAuL,gBACA,MAAAa,EAAApM,KACAoM,EAAAqvB,gBACArvB,EAAA0c,MAAA1c,EAAAqhB,SACArhB,EAAAjB,KAAA,EACAiB,EAAAhB,MAAAgB,EAAA0c,QAEA1c,EAAA6d,OAAA7d,EAAAumB,UACAvmB,EAAAuf,IAAA,EACAvf,EAAAwf,OAAAxf,EAAA6d,QAEA7d,EAAA6yC,YAAA,EACA7yC,EAAA2yC,WAAA,EACA3yC,EAAA8yC,aAAA,EACA9yC,EAAA4yC,cAAA,EAEAzzC,qBACAxH,EAAA/D,KAAAsB,QAAAq/C,mBAAA,CAAA3gD,OAEAuL,WAAAhC,GACA,MAAA6C,EAAApM,KACAoM,EAAAvF,MAAAm7C,cAAAz4C,EAAA6C,EAAApL,cACA+C,EAAAqI,EAAA9K,QAAAiI,GAAA,CAAA6C,IAEAb,mBACAvL,KAAAiiD,WAAA,oBAEA12C,uBACAA,kBACAvL,KAAAiiD,WAAA,mBAEA12C,mBACAvL,KAAAiiD,WAAA,oBAEA12C,aACA,MAAA,GAEAA,kBACAvL,KAAAiiD,WAAA,mBAEA12C,8BACAxH,EAAA/D,KAAAsB,QAAA4gD,4BAAA,CAAAliD,OAEAuL,mBAAAyuC,GACA,MAAA5tC,EAAApM,KACA26C,EAAAvuC,EAAA9K,QAAA04C,MACA,IAAAl8C,EAAA8hB,EAAA5S,EACA,IAAAlP,EAAA,EAAA8hB,EAAAo6B,EAAAv7C,OAAAX,EAAA8hB,EAAA9hB,IACAkP,EAAAgtC,EAAAl8C,GACAkP,EAAAnI,MAAAd,EAAA42C,EAAA52C,SAAA,CAAAiJ,EAAAhJ,MAAAlG,EAAAk8C,GAAA5tC,GAGAb,6BACAxH,EAAA/D,KAAAsB,QAAA6gD,2BAAA,CAAAniD,OAEAuL,+BACAxH,EAAA/D,KAAAsB,QAAA8/C,6BAAA,CAAAphD,OAEAuL,yBACA,MAAAa,EAAApM,KACAsB,EAAA8K,EAAA9K,QACAq5C,EAAAr5C,EAAA04C,MACAoI,EAAAh2C,EAAA4tC,MAAAv7C,OACAs+C,EAAApC,EAAAoC,aAAA,EACAC,EAAArC,EAAAqC,YACA,IACAJ,EAAAjqB,EAAA0vB,EADAlD,EAAApC,EAEA,IAAA3wC,EAAAk2C,eAAA3H,EAAApe,SAAAwgB,GAAAC,GAAAoF,GAAA,IAAAh2C,EAAAqvB,eAEA,YADArvB,EAAA+yC,cAAApC,GAGA,MAAAwF,EAAAn2C,EAAAo2C,iBACAC,EAAAF,EAAAG,OAAA55B,MACA65B,EAAAJ,EAAAK,QAAA34B,OACAwD,EAAApF,GAAAjc,EAAAvF,MAAAiiB,MAAA25B,EAAA,EAAAr2C,EAAAqhB,UACAmvB,EAAAt7C,EAAAoF,OAAA0F,EAAAqhB,SAAA20B,EAAA30B,GAAA20B,EAAA,GACAK,EAAA,EAAA7F,IACAA,EAAAnvB,GAAA20B,GAAA9gD,EAAAoF,OAAA,GAAA,IACAisB,EAAAvmB,EAAAumB,UAAA6rB,GAAAl9C,EAAAk7C,MACA7B,EAAAp0C,QAAAk4C,GAAAn9C,EAAAw7C,MAAA1wC,EAAAvF,MAAAvF,QAAAgF,MACA+7C,EAAA5/C,KAAAwjB,KAAAw8B,EAAAA,EAAAE,EAAAA,GACAxD,EAAAr4B,GAAArkB,KAAAY,IACAZ,KAAAogD,KAAAx6B,IAAAk6B,EAAAK,QAAA34B,OAAA,GAAA2yB,GAAA,EAAA,IACAn6C,KAAAogD,KAAAx6B,GAAAsK,EAAA0vB,GAAA,EAAA,IAAA5/C,KAAAogD,KAAAx6B,GAAAs6B,EAAAN,GAAA,EAAA,MAEAlD,EAAA18C,KAAAF,IAAAw6C,EAAAt6C,KAAAY,IAAA25C,EAAAmC,KAEA/yC,EAAA+yC,cAAAA,EAEA5zC,8BACAxH,EAAA/D,KAAAsB,QAAAggD,4BAAA,CAAAthD,OAEAuL,YACAxH,EAAA/D,KAAAsB,QAAAigD,UAAA,CAAAvhD,OAEAuL,MACA,MAAAa,EAAApM,KACA8iD,EAAA,CACAh6B,MAAA,EACAmB,OAAA,IAEApjB,MAAAA,EAAAvF,SAAA04C,MAAAW,EAAAmC,MAAAiG,EAAAvG,KAAAwG,IAAA52C,EACAmwB,EAAAnwB,EAAAk2C,aACA7mB,EAAArvB,EAAAqvB,eACA,GAAAc,EAAA,CACA,MAAA0mB,EAAAxE,GAAAsE,EAAAl8C,EAAAvF,QAAAgF,MAQA,GAPAm1B,GACAqnB,EAAAh6B,MAAA1c,EAAAqhB,SACAq1B,EAAA74B,OAAAu0B,GAAAwE,GAAAC,IAEAH,EAAA74B,OAAA7d,EAAAumB,UACAmwB,EAAAh6B,MAAA01B,GAAAwE,GAAAC,GAEAtI,EAAApe,SAAAnwB,EAAA4tC,MAAAv7C,OAAA,CACA,MAAAi9C,MAAAA,EAAAlT,KAAAA,EAAAka,OAAAA,EAAAE,QAAAA,GAAAx2C,EAAAo2C,iBACAU,EAAA,EAAAvI,EAAAp0C,QACA48C,EAAAv8B,GAAAxa,EAAA+yC,eACAl0B,EAAAxoB,KAAAwoB,IAAAk4B,GACAn4B,EAAAvoB,KAAAuoB,IAAAm4B,GACA,GAAA1nB,EAAA,CACA,MAAA2nB,EAAAzI,EAAAsC,OAAA,EAAAjyB,EAAA03B,EAAA55B,MAAAmC,EAAA23B,EAAA34B,OACA64B,EAAA74B,OAAAxnB,KAAAY,IAAA+I,EAAAumB,UAAAmwB,EAAA74B,OAAAm5B,EAAAF,OACA,CACA,MAAAG,EAAA1I,EAAAsC,OAAA,EAAAhyB,EAAAy3B,EAAA55B,MAAAkC,EAAA43B,EAAA34B,OACA64B,EAAAh6B,MAAArmB,KAAAY,IAAA+I,EAAAqhB,SAAAq1B,EAAAh6B,MAAAu6B,EAAAH,GAEA92C,EAAAk3C,kBAAA5H,EAAAlT,EAAAxd,EAAAC,IAGA7e,EAAAm3C,iBACA9nB,GACArvB,EAAA0c,MAAA1c,EAAA6uC,QAAAp0C,EAAAiiB,MAAA1c,EAAA0yC,SAAA3zC,KAAAiB,EAAA0yC,SAAA1zC,MACAgB,EAAA6d,OAAA64B,EAAA74B,SAEA7d,EAAA0c,MAAAg6B,EAAAh6B,MACA1c,EAAA6d,OAAA7d,EAAA6uC,QAAAp0C,EAAAojB,OAAA7d,EAAA0yC,SAAAnzB,IAAAvf,EAAA0yC,SAAAlzB,QAGArgB,kBAAAmwC,EAAAlT,EAAAxd,EAAAC,GACA,MAAA7e,EAAApM,MACAg6C,OAAAxzC,MAAAA,EAAAD,QAAAA,GAAAwuB,SAAAA,GAAA3oB,EAAA9K,QACAkiD,EAAA,IAAAp3C,EAAA+yC,cACAsE,EAAA,QAAA1uB,GAAA,MAAA3oB,EAAApK,KACA,GAAAoK,EAAAqvB,eAAA,CACA,MAAAioB,EAAAt3C,EAAAmyC,gBAAA,GAAAnyC,EAAAjB,KACAw4C,EAAAv3C,EAAAhB,MAAAgB,EAAAmyC,gBAAAnyC,EAAA4tC,MAAAv7C,OAAA,GACA,IAAAwgD,EAAA,EACAC,EAAA,EACAsE,EACAC,GACAxE,EAAAh0B,EAAAywB,EAAA5yB,MACAo2B,EAAAl0B,EAAAwd,EAAAve,SAEAg1B,EAAAj0B,EAAA0wB,EAAAzxB,OACAi1B,EAAAj0B,EAAAud,EAAA1f,OAEA,UAAAtiB,EACA04C,EAAA1W,EAAA1f,MACA,QAAAtiB,EACAy4C,EAAAvD,EAAA5yB,OAEAm2B,EAAAvD,EAAA5yB,MAAA,EACAo2B,EAAA1W,EAAA1f,MAAA,GAEA1c,EAAA6yC,YAAAx8C,KAAAF,KAAA08C,EAAAyE,EAAAn9C,GAAA6F,EAAA0c,OAAA1c,EAAA0c,MAAA46B,GAAA,GACAt3C,EAAA8yC,aAAAz8C,KAAAF,KAAA28C,EAAAyE,EAAAp9C,GAAA6F,EAAA0c,OAAA1c,EAAA0c,MAAA66B,GAAA,OACA,CACA,IAAA5E,EAAAvW,EAAAve,OAAA,EACA+0B,EAAAtD,EAAAzxB,OAAA,EACA,UAAAzjB,GACAu4C,EAAA,EACAC,EAAAtD,EAAAzxB,QACA,QAAAzjB,IACAu4C,EAAAvW,EAAAve,OACA+0B,EAAA,GAEA5yC,EAAA2yC,WAAAA,EAAAx4C,EACA6F,EAAA4yC,cAAAA,EAAAz4C,GAGAgF,iBACA,MAAAa,EAAApM,KACAoM,EAAA0yC,WACA1yC,EAAA0yC,SAAA3zC,KAAA1I,KAAAF,IAAA6J,EAAA6yC,YAAA7yC,EAAA0yC,SAAA3zC,MACAiB,EAAA0yC,SAAAnzB,IAAAlpB,KAAAF,IAAA6J,EAAA2yC,WAAA3yC,EAAA0yC,SAAAnzB,KACAvf,EAAA0yC,SAAA1zC,MAAA3I,KAAAF,IAAA6J,EAAA8yC,aAAA9yC,EAAA0yC,SAAA1zC,OACAgB,EAAA0yC,SAAAlzB,OAAAnpB,KAAAF,IAAA6J,EAAA4yC,cAAA5yC,EAAA0yC,SAAAlzB,SAGArgB,WACAxH,EAAA/D,KAAAsB,QAAAmgD,SAAA,CAAAzhD,OAEAuL,eACA,MAAAvJ,KAAAA,EAAA+yB,SAAAA,GAAA/0B,KAAAsB,QACA,MAAA,QAAAyzB,GAAA,WAAAA,GAAA,MAAA/yB,EAEAuJ,aACA,OAAAvL,KAAAsB,QAAAg4B,SAEA/tB,sBAAAyuC,GACA,MAAA5tC,EAAApM,KAGA,IAAAlC,EAAA8hB,EACA,IAHAxT,EAAA81C,8BACA91C,EAAAw3C,mBAAA5J,GAEAl8C,EAAA,EAAA8hB,EAAAo6B,EAAAv7C,OAAAX,EAAA8hB,EAAA9hB,IACA6gB,EAAAq7B,EAAAl8C,GAAA+G,SACAm1C,EAAAvwB,OAAA3rB,EAAA,GACA8hB,IACA9hB,KAGAsO,EAAA+1C,6BAEA52C,iBACA,MAAAa,EAAApM,KACA,IAAAuiD,EAAAn2C,EAAAmzC,YACA,IAAAgD,EAAA,CACA,MAAA/B,EAAAp0C,EAAA9K,QAAA04C,MAAAwG,WACA,IAAAxG,EAAA5tC,EAAA4tC,MACAwG,EAAAxG,EAAAv7C,SACAu7C,EAAA8D,GAAA9D,EAAAwG,IAEAp0C,EAAAmzC,YAAAgD,EAAAn2C,EAAAy3C,mBAAA7J,EAAAA,EAAAv7C,QAEA,OAAA8jD,EAEAh3C,mBAAAyuC,EAAAv7C,GACA,MAAAskB,IAAAA,EAAAy8B,kBAAAsE,GAAA9jD,KACA+jD,EAAA,GACAC,EAAA,GACA,IAEAlmD,EAAAme,EAAAmN,EAAAvkB,EAAAo/C,EAAApa,EAAA5gB,EAAArG,EAAAkG,EAAAmB,EAAAi6B,EAFAC,EAAA,EACAC,EAAA,EAEA,IAAAtmD,EAAA,EAAAA,EAAAW,IAAAX,EAAA,CAOA,GANA+G,EAAAm1C,EAAAl8C,GAAA+G,MACAo/C,EAAAjkD,KAAAqkD,wBAAAvmD,GACAilB,EAAAzc,KAAAujC,EAAAoa,EAAAt7B,OACAM,EAAA66B,EAAAja,GAAAia,EAAAja,IAAA,CAAAxpC,KAAA,GAAAooB,GAAA,IACA7F,EAAAqhC,EAAArhC,WACAkG,EAAAmB,EAAA,EACAtL,EAAA9Z,IAAAtE,EAAAsE,IAGA,GAAAtE,EAAAsE,GACA,IAAAoX,EAAA,EAAAmN,EAAAvkB,EAAApG,OAAAwd,EAAAmN,IAAAnN,EACAioC,EAAAr/C,EAAAoX,GACA0C,EAAAulC,IAAA3jD,EAAA2jD,KACAp7B,EAAAN,GAAAzF,EAAAkG,EAAA5oB,KAAA4oB,EAAAR,GAAAK,EAAAo7B,GACAj6B,GAAArH,QAPAkG,EAAAN,GAAAzF,EAAAkG,EAAA5oB,KAAA4oB,EAAAR,GAAAK,EAAAjkB,GACAolB,EAAArH,EAUAmhC,EAAAp2C,KAAAmb,GACAk7B,EAAAr2C,KAAAsc,GACAk6B,EAAA1hD,KAAAF,IAAAumB,EAAAq7B,GACAC,EAAA3hD,KAAAF,IAAA0nB,EAAAm6B,IAlhBA,SAAAN,EAAArlD,GACAwB,EAAA6jD,GAAA76B,IACA,MAAAR,EAAAQ,EAAAR,GACAe,EAAAf,EAAAhqB,OAAA,EACA,IAAAX,EACA,GAAA0rB,EAAA/qB,EAAA,CACA,IAAAX,EAAA,EAAAA,EAAA0rB,IAAA1rB,SACAmrB,EAAA5oB,KAAAooB,EAAA3qB,IAEA2qB,EAAAgB,OAAA,EAAAD,OA2gBAN,CAAA46B,EAAArlD,GACA,MAAAikD,EAAAqB,EAAAzjC,QAAA6jC,GACAvB,EAAAoB,EAAA1jC,QAAA8jC,GACAE,EAAA5gD,IAAA,CAAAolB,MAAAi7B,EAAArgD,IAAA,EAAAumB,OAAA+5B,EAAAtgD,IAAA,IACA,MAAA,CACAg4C,MAAA4I,EAAA,GACA9b,KAAA8b,EAAA7lD,EAAA,GACAikD,OAAA4B,EAAA5B,GACAE,QAAA0B,EAAA1B,GACAmB,OAAAA,EACAC,QAAAA,GAGAz4C,iBAAAvH,GACA,OAAAA,EAEAuH,iBAAAvH,EAAArC,GACA,OAAA+0C,IAEAnrC,iBAAAoe,IACApe,gBAAA5J,GACA,MAAAq4C,EAAAh6C,KAAAg6C,MACA,OAAAr4C,EAAA,GAAAA,EAAAq4C,EAAAv7C,OAAA,EACA,KAEAuB,KAAAukD,iBAAAvK,EAAAr4C,GAAAqC,OAEAuH,mBAAAi5C,GACA,MAAAp4C,EAAApM,KACAoM,EAAAuoB,iBACA6vB,EAAA,EAAAA,GAEA,MAAA76B,EAAAvd,EAAAgyC,YAAAoG,EAAAp4C,EAAA6uC,QACA,OAAA3yB,GAAAlc,EAAA01C,eAAAp4B,GAAAtd,EAAAvF,MAAA8iB,EAAA,GAAAA,GAEApe,mBAAAoe,GACA,MAAA66B,GAAA76B,EAAA3pB,KAAAo+C,aAAAp+C,KAAAi7C,QACA,OAAAj7C,KAAA20B,eAAA,EAAA6vB,EAAAA,EAEAj5C,eACA,OAAAvL,KAAAukD,iBAAAvkD,KAAAykD,gBAEAl5C,eACA,MAAAlI,IAAAA,EAAAd,IAAAA,GAAAvC,KACA,OAAAqD,EAAA,GAAAd,EAAA,EAAAA,EACAc,EAAA,GAAAd,EAAA,EAAAc,EACA,EAEAkI,WAAA5J,GACA,MAAAyK,EAAApM,KACAg6C,EAAA5tC,EAAA4tC,OAAA,GACA,GAAAr4C,GAAA,GAAAA,EAAAq4C,EAAAv7C,OAAA,CACA,MAAAuO,EAAAgtC,EAAAr4C,GACA,OAAAqL,EAAA2mC,WACA3mC,EAAA2mC,SA3iBA,SAAAtjB,EAAA1uB,EAAAqL,GACA,OAAAxM,OAAAC,OAAAD,OAAA2f,OAAAkQ,GAAA,CACArjB,KAAAA,EACArL,MAAAA,EACAR,KAAA,SAuiBAujD,CAAAt4C,EAAApL,aAAAW,EAAAqL,IAEA,OAAAZ,EAAAunC,WACAvnC,EAAAunC,UApjBAtjB,EAojBAjkB,EAAAvF,MAAA7F,aApjBA2iB,EAojBAvX,EAnjBA5L,OAAAC,OAAAD,OAAA2f,OAAAkQ,GAAA,CACA1M,MAAAA,EACAxiB,KAAA,YAHA,IAAAkvB,EAAA1M,EAsjBApY,YACA,MAAAa,EAAApM,KACA2kD,EAAAv4C,EAAA9K,QAAA04C,MACA4K,EAAAh+B,GAAAxa,EAAA+yC,eACAl0B,EAAAxoB,KAAA6jB,IAAA7jB,KAAAwoB,IAAA25B,IACA55B,EAAAvoB,KAAA6jB,IAAA7jB,KAAAuoB,IAAA45B,IACArC,EAAAn2C,EAAAo2C,iBACAj8C,EAAAo+C,EAAAvH,iBAAA,EACAltC,EAAAqyC,EAAAA,EAAAG,OAAA55B,MAAAviB,EAAA,EACA+I,EAAAizC,EAAAA,EAAAK,QAAA34B,OAAA1jB,EAAA,EACA,OAAA6F,EAAAqvB,eACAnsB,EAAA2b,EAAA/a,EAAA8a,EAAA9a,EAAA+a,EAAA3b,EAAA0b,EACA1b,EAAA0b,EAAA9a,EAAA+a,EAAA3b,EAAA2b,EAAA/a,EAAA8a,EAEAzf,aACA,MAAAgxB,EAAAv8B,KAAAsB,QAAAi7B,QACA,MAAA,SAAAA,IACAA,EAEAv8B,KAAA+xC,0BAAAtzC,OAAA,EAEA8M,sBAAA+pB,GACA,MAAAlpB,EAAApM,KACAgC,EAAAoK,EAAApK,KACA6E,EAAAuF,EAAAvF,MACAvF,EAAA8K,EAAA9K,SACAk7C,KAAAA,EAAAznB,SAAAA,GAAAzzB,EACAoF,EAAA81C,EAAA91C,OACA+0B,EAAArvB,EAAAqvB,eAEAopB,EADAz4C,EAAA4tC,MACAv7C,QAAAiI,EAAA,EAAA,GACAo+C,EAAAtG,GAAAhC,GACA7vC,EAAA,GACAo4C,EAAAvI,EAAA1d,WAAA1yB,EAAApL,cACAgkD,EAAAD,EAAAtI,WAAAsI,EAAAljD,YAAA,EACAojD,EAAAD,EAAA,EACAE,EAAA,SAAAv7B,GACA,OAAAD,GAAA7iB,EAAA8iB,EAAAq7B,IAEA,IAAAG,EAAArnD,EAAAwgD,EAAA8G,EACAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACA,GAAA,QAAA7wB,EACAowB,EAAAD,EAAA94C,EAAAwf,QACA05B,EAAAl5C,EAAAwf,OAAAk5B,EACAU,EAAAL,EAAAF,EACAS,EAAAR,EAAA5vB,EAAA3J,KAAAs5B,EACAW,EAAAtwB,EAAA1J,YACA,GAAA,WAAAmJ,EACAowB,EAAAD,EAAA94C,EAAAuf,KACA+5B,EAAApwB,EAAA3J,IACAi6B,EAAAV,EAAA5vB,EAAA1J,QAAAq5B,EACAK,EAAAH,EAAAF,EACAO,EAAAp5C,EAAAuf,IAAAm5B,OACA,GAAA,SAAA/vB,EACAowB,EAAAD,EAAA94C,EAAAhB,OACAi6C,EAAAj5C,EAAAhB,MAAA05C,EACAS,EAAAJ,EAAAF,EACAQ,EAAAP,EAAA5vB,EAAAnqB,MAAA85C,EACAU,EAAArwB,EAAAlqB,WACA,GAAA,UAAA2pB,EACAowB,EAAAD,EAAA94C,EAAAjB,MACAs6C,EAAAnwB,EAAAnqB,KACAw6C,EAAAT,EAAA5vB,EAAAlqB,OAAA65C,EACAI,EAAAF,EAAAF,EACAM,EAAAn5C,EAAAjB,KAAA25C,OACA,GAAA,MAAA9iD,EAAA,CACA,GAAA,WAAA+yB,EACAowB,EAAAD,GAAA5vB,EAAA3J,IAAA2J,EAAA1J,QAAA,EAAA,SACA,GAAA/M,EAAAkW,GAAA,CACA,MAAA8wB,EAAArlD,OAAAub,KAAAgZ,GAAA,GACA/wB,EAAA+wB,EAAA8wB,GACAV,EAAAD,EAAA94C,EAAAvF,MAAA+c,OAAAiiC,GAAAtB,iBAAAvgD,IAEA0hD,EAAApwB,EAAA3J,IACAi6B,EAAAtwB,EAAA1J,OACA05B,EAAAH,EAAAF,EACAO,EAAAF,EAAAR,OACA,GAAA,MAAA9iD,EAAA,CACA,GAAA,WAAA+yB,EACAowB,EAAAD,GAAA5vB,EAAAnqB,KAAAmqB,EAAAlqB,OAAA,QACA,GAAAyT,EAAAkW,GAAA,CACA,MAAA8wB,EAAArlD,OAAAub,KAAAgZ,GAAA,GACA/wB,EAAA+wB,EAAA8wB,GACAV,EAAAD,EAAA94C,EAAAvF,MAAA+c,OAAAiiC,GAAAtB,iBAAAvgD,IAEAqhD,EAAAF,EAAAF,EACAM,EAAAF,EAAAP,EACAW,EAAAnwB,EAAAnqB,KACAw6C,EAAArwB,EAAAlqB,MAEA,MAAA06C,EAAA5mC,EAAA5d,EAAA04C,MAAAa,cAAAgK,GACAkB,EAAAtjD,KAAAF,IAAA,EAAAE,KAAAo5C,KAAAgJ,EAAAiB,IACA,IAAAhoD,EAAA,EAAAA,EAAA+mD,EAAA/mD,GAAAioD,EAAA,CACA,MAAAC,EAAAxJ,EAAA1d,WAAA1yB,EAAApL,WAAAlD,IACAyvB,EAAAy4B,EAAAz4B,UACA04B,EAAAD,EAAA3/C,MACAijC,EAAAkT,EAAAlT,YAAA,GACAC,EAAAyc,EAAAzc,iBACAqT,EAAAoJ,EAAApJ,UACAC,EAAAmJ,EAAAnJ,UACAqJ,EAAAF,EAAAE,gBAAA,GACAC,EAAAH,EAAAG,qBACA7H,EAAAL,GAAA7xC,EAAAtO,EAAA4I,QACA5G,IAAAw+C,IAGA8G,EAAA17B,GAAA7iB,EAAAy3C,EAAA/wB,GACAkO,EACA4pB,EAAAE,EAAAE,EAAAE,EAAAP,EAEAE,EAAAE,EAAAE,EAAAE,EAAAR,EAEAz4C,EAAAgB,KAAA,CACA03C,IAAAA,EACAC,IAAAA,EACAC,IAAAA,EACAC,IAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACAC,GAAAA,EACA98B,MAAAyE,EACAlnB,MAAA4/C,EACA3c,WAAAA,EACAC,iBAAAA,EACAqT,UAAAA,EACAC,UAAAA,EACAqJ,eAAAA,EACAC,qBAAAA,KAKA,OAFA/5C,EAAAyzC,aAAAgF,EACAz4C,EAAA0zC,aAAAqF,EACAx4C,EAEApB,mBAAA+pB,GACA,MAAAlpB,EAAApM,KACAgC,EAAAoK,EAAApK,KACAV,EAAA8K,EAAA9K,SACAyzB,SAAAA,EAAAilB,MAAA2K,GAAArjD,EACAm6B,EAAArvB,EAAAqvB,eACAue,EAAA5tC,EAAA4tC,OACAxzC,MAAAA,EAAA+2C,WAAAA,EAAAh3C,QAAAA,EAAA02C,OAAAA,GAAA0H,EACAG,EAAAtG,GAAAl9C,EAAAk7C,MACA4J,EAAAtB,EAAAv+C,EACA8/C,EAAApJ,GAAA12C,EAAA6/C,EACA77B,GAAA3D,GAAAxa,EAAA+yC,eACAxyC,EAAA,GACA,IAAA7O,EAAA8hB,EAAA5S,EAAAnI,EAAAqM,EAAAkV,EAAA+G,EAAAxD,EAAArjB,EAAAsc,EAAA0jC,EAAAC,EACAn5B,EAAA,SACA,GAAA,QAAA2H,EACA3O,EAAAha,EAAAwf,OAAAy6B,EACAl5B,EAAA/gB,EAAAo6C,+BACA,GAAA,WAAAzxB,EACA3O,EAAAha,EAAAuf,IAAA06B,EACAl5B,EAAA/gB,EAAAo6C,+BACA,GAAA,SAAAzxB,EAAA,CACA,MAAA3X,EAAAhR,EAAAq6C,wBAAA3B,GACA33B,EAAA/P,EAAA+P,UACAjc,EAAAkM,EAAAlM,OACA,GAAA,UAAA6jB,EAAA,CACA,MAAA3X,EAAAhR,EAAAq6C,wBAAA3B,GACA33B,EAAA/P,EAAA+P,UACAjc,EAAAkM,EAAAlM,OACA,GAAA,MAAAlP,EAAA,CACA,GAAA,WAAA+yB,EACA3O,GAAAkP,EAAA3J,IAAA2J,EAAA1J,QAAA,EAAAw6B,OACA,GAAAvnC,EAAAkW,GAAA,CACA,MAAA8wB,EAAArlD,OAAAub,KAAAgZ,GAAA,GACA/wB,EAAA+wB,EAAA8wB,GACAz/B,EAAAha,EAAAvF,MAAA+c,OAAAiiC,GAAAtB,iBAAAvgD,GAAAoiD,EAEAj5B,EAAA/gB,EAAAo6C,+BACA,GAAA,MAAAxkD,EAAA,CACA,GAAA,WAAA+yB,EACA7jB,GAAAokB,EAAAnqB,KAAAmqB,EAAAlqB,OAAA,EAAAg7C,OACA,GAAAvnC,EAAAkW,GAAA,CACA,MAAA8wB,EAAArlD,OAAAub,KAAAgZ,GAAA,GACA/wB,EAAA+wB,EAAA8wB,GACA30C,EAAA9E,EAAAvF,MAAA+c,OAAAiiC,GAAAtB,iBAAAvgD,GAEAmpB,EAAA/gB,EAAAq6C,wBAAA3B,GAAA33B,UAEA,MAAAnrB,IACA,UAAAwE,EACA4mB,EAAA,MACA,QAAA5mB,IACA4mB,EAAA,WAGA,MAAAm1B,EAAAn2C,EAAAo2C,iBACA,IAAA1kD,EAAA,EAAA8hB,EAAAo6B,EAAAv7C,OAAAX,EAAA8hB,IAAA9hB,EAAA,CACAkP,EAAAgtC,EAAAl8C,GACA+G,EAAAmI,EAAAnI,MACA,MAAAmhD,EAAArB,EAAA7lB,WAAA1yB,EAAApL,WAAAlD,IACA6rB,EAAAvd,EAAAmyC,gBAAAzgD,GAAA6mD,EAAAtH,YACA/2C,EAAA8F,EAAAi4C,wBAAAvmD,GACA8kB,EAAAtc,EAAAsc,WACA0jC,EAAA/lD,EAAAsE,GAAAA,EAAApG,OAAA,EACA,MAAAioD,EAAAJ,EAAA,EACAjgD,EAAA2/C,EAAA3/C,MACA0mB,EAAAi5B,EAAA7I,gBACArwB,EAAAk5B,EAAA9I,gBA2BA,IAAAyJ,EACA,GA3BAlrB,GACAvqB,EAAAyY,EAGA48B,EAFA,QAAAxxB,EACA,SAAAwoB,GAAA,IAAAhzB,GACA+7B,EAAA1jC,EAAAA,EAAA,EACA,WAAA26B,GACAgF,EAAAK,QAAA34B,OAAA,EAAAy8B,EAAA9jC,EAAAA,GAEA2/B,EAAAK,QAAA34B,OAAArH,EAAA,EAGA,SAAA26B,GAAA,IAAAhzB,EACA3H,EAAA,EACA,WAAA26B,EACAgF,EAAAK,QAAA34B,OAAA,EAAAy8B,EAAA9jC,EAEA2/B,EAAAK,QAAA34B,OAAAq8B,EAAA1jC,EAGAq6B,IACAsJ,IAAA,KAGAngC,EAAAuD,EACA48B,GAAA,EAAAD,GAAA1jC,EAAA,GAGAojC,EAAAxI,kBAAA,CACA,MAAAoJ,EAAArvB,GAAAyuB,EAAAtI,iBACAzzB,EAAAs4B,EAAAyB,QAAAlmD,GACAgrB,EAAAy5B,EAAAwB,OAAAjmD,GACA,IAAA6tB,EAAAvF,EAAAmgC,EAAAK,EAAAj7B,IACAxgB,EAAA+F,EAAA01C,EAAAz7C,KACA,OAAAiiB,GACA,IAAA,SACAzB,GAAA1B,EAAA,EACA,MACA,IAAA,SACA0B,GAAA1B,EAGA,OAAAkD,GACA,IAAA,SACAhiB,GAAA2d,EAAA,EACA,MACA,IAAA,QACA3d,GAAA2d,EAGA69B,EAAA,CACAx7C,KAAAA,EACAwgB,IAAAA,EACA7C,MAAAA,EAAA89B,EAAA99B,MACAmB,OAAAA,EAAA28B,EAAA38B,OACA5jB,MAAA2/C,EAAAvI,eAGA9wC,EAAAgB,KAAA,CACA4c,SAAAA,EACA1lB,MAAAA,EACAyB,KAAAA,EACAD,MAAAA,EACA0mB,YAAAA,EACAD,YAAAA,EACAy5B,WAAAA,EACAp5B,UAAAA,EACAC,aAAAA,EACAH,YAAA,CAAA/b,EAAAkV,GACAugC,SAAAA,IAGA,OAAAh6C,EAEApB,0BACA,MACAwpB,SAAAA,EAAAilB,MAAAA,GADAh6C,KACAsB,QAEA,IADAslB,GAFA5mB,KAEAm/C,eAEA,MAAA,QAAApqB,EAAA,OAAA,QAEA,IAAAvuB,EAAA,SAMA,MALA,UAAAwzC,EAAAxzC,MACAA,EAAA,OACA,QAAAwzC,EAAAxzC,QACAA,EAAA,SAEAA,EAEA+E,wBAAAu5C,GACA,MAAA14C,EAAApM,MACA+0B,SAAAA,EAAAilB,OAAAuD,WAAAA,EAAAN,OAAAA,EAAA12C,QAAAA,IAAA6F,EAAA9K,QAEA8kD,EAAAtB,EAAAv+C,EACAm8C,EAFAt2C,EAAAo2C,iBAEAE,OAAA55B,MACA,IAAAqE,EACAjc,EAoDA,MAnDA,SAAA6jB,EACAkoB,GACA/rC,EAAA9E,EAAAhB,MAAA7E,EACA,SAAAg3C,EACApwB,EAAA,OACA,WAAAowB,GACApwB,EAAA,SACAjc,GAAAwxC,EAAA,IAEAv1B,EAAA,QACAjc,GAAAwxC,KAGAxxC,EAAA9E,EAAAhB,MAAAg7C,EACA,SAAA7I,EACApwB,EAAA,QACA,WAAAowB,GACApwB,EAAA,SACAjc,GAAAwxC,EAAA,IAEAv1B,EAAA,OACAjc,EAAA9E,EAAAjB,OAGA,UAAA4pB,EACAkoB,GACA/rC,EAAA9E,EAAAjB,KAAA5E,EACA,SAAAg3C,EACApwB,EAAA,QACA,WAAAowB,GACApwB,EAAA,SACAjc,GAAAwxC,EAAA,IAEAv1B,EAAA,OACAjc,GAAAwxC,KAGAxxC,EAAA9E,EAAAjB,KAAAi7C,EACA,SAAA7I,EACApwB,EAAA,OACA,WAAAowB,GACApwB,EAAA,SACAjc,GAAAwxC,EAAA,IAEAv1B,EAAA,QACAjc,EAAA9E,EAAAhB,QAIA+hB,EAAA,QAEA,CAAAA,UAAAA,EAAAjc,EAAAA,GAEA3F,oBACA,MAAAa,EAAApM,KACA,GAAAoM,EAAA9K,QAAA04C,MAAAiD,OACA,OAEA,MAAAp2C,EAAAuF,EAAAvF,MACAkuB,EAAA3oB,EAAA9K,QAAAyzB,SACA,MAAA,SAAAA,GAAA,UAAAA,EACA,CAAApJ,IAAA,EAAAxgB,KAAAiB,EAAAjB,KAAAygB,OAAA/kB,EAAAojB,OAAA7e,MAAAgB,EAAAhB,OACA,QAAA2pB,GAAA,WAAAA,EACA,CAAApJ,IAAAvf,EAAAuf,IAAAxgB,KAAA,EAAAygB,OAAAxf,EAAAwf,OAAAxgB,MAAAvE,EAAAiiB,YADA,EAIAvd,iBACA,MAAAwX,IAAAA,EAAAzhB,SAAA4E,gBAAAA,GAAAiF,KAAAA,EAAAwgB,IAAAA,EAAA7C,MAAAA,EAAAmB,OAAAA,GAAAjqB,KACAkG,IACA6c,EAAAoG,OACApG,EAAAmK,UAAAhnB,EACA6c,EAAA8jC,SAAA17C,EAAAwgB,EAAA7C,EAAAmB,GACAlH,EAAAwG,WAGAhe,qBAAAvH,GACA,MAAAoI,EAAApM,KACAw8C,EAAApwC,EAAA9K,QAAAk7C,KACA,IAAApwC,EAAAk2C,eAAA9F,EAAAjgB,QACA,OAAA,EAEA,MACA56B,EADAyK,EAAA4tC,MACA8M,WAAAlpD,GAAAA,EAAAoG,QAAAA,IACA,GAAArC,GAAA,EAAA,CAEA,OADA66C,EAAA1d,WAAA1yB,EAAApL,WAAAW,IACA4rB,UAEA,OAAA,EAEAhiB,SAAA+pB,GACA,MAAAlpB,EAAApM,KACAw8C,EAAApwC,EAAA9K,QAAAk7C,KACAz5B,EAAA3W,EAAA2W,IACApW,EAAAP,EAAAizC,iBAAAjzC,EAAAizC,eAAAjzC,EAAA26C,sBAAAzxB,IACA,IAAAx3B,EAAA8hB,EACA,MAAAonC,EAAA,CAAAn2C,EAAAC,EAAA6R,KACAA,EAAAmG,OAAAnG,EAAAtc,QAGA0c,EAAAoG,OACApG,EAAAwK,UAAA5K,EAAAmG,MACA/F,EAAAuK,YAAA3K,EAAAtc,MACA0c,EAAAkkC,YAAAtkC,EAAA2mB,YAAA,IACAvmB,EAAAmkC,eAAAvkC,EAAA4mB,iBACAxmB,EAAA6H,YACA7H,EAAAgI,OAAAla,EAAAK,EAAAL,EAAAuV,GACArD,EAAAmI,OAAApa,EAAAI,EAAAJ,EAAAsV,GACArD,EAAAuI,SACAvI,EAAAwG,YAEA,GAAAizB,EAAAjgB,QACA,IAAAz+B,EAAA,EAAA8hB,EAAAjT,EAAAlO,OAAAX,EAAA8hB,IAAA9hB,EAAA,CACA,MAAA8O,EAAAD,EAAA7O,GACA0+C,EAAAE,iBACAsK,EACA,CAAA91C,EAAAtE,EAAA64C,GAAAr/B,EAAAxZ,EAAA84C,IACA,CAAAx0C,EAAAtE,EAAA+4C,GAAAv/B,EAAAxZ,EAAAg5C,IACAh5C,GAGA4vC,EAAAG,WACAqK,EACA,CAAA91C,EAAAtE,EAAAy4C,IAAAj/B,EAAAxZ,EAAA04C,KACA,CAAAp0C,EAAAtE,EAAA24C,IAAAn/B,EAAAxZ,EAAA44C,KACA,CACAn/C,MAAAuG,EAAAiwC,UACA/zB,MAAAlc,EAAAgwC,UACAtT,WAAA18B,EAAAs5C,eACA3c,iBAAA38B,EAAAu5C,wBAOA56C,aACA,MAAAa,EAAApM,MACA6G,MAAAA,EAAAkc,IAAAA,EAAAzhB,SAAAk7C,KAAAA,IAAApwC,EACA24C,EAAAvI,EAAA1d,WAAA1yB,EAAApL,cACAgkD,EAAAxI,EAAAC,WAAAsI,EAAAljD,YAAA,EACA,IAAAmjD,EACA,OAEA,MAAAmC,EAAA3K,EAAA1d,WAAA1yB,EAAApL,WAAA,IAAAusB,UACA43B,EAAA/4C,EAAA0zC,aACA,IAAA2F,EAAAE,EAAAD,EAAAE,EACAx5C,EAAAqvB,gBACAgqB,EAAA/7B,GAAA7iB,EAAAuF,EAAAjB,KAAA65C,GAAAA,EAAA,EACAW,EAAAj8B,GAAA7iB,EAAAuF,EAAAhB,MAAA+7C,GAAAA,EAAA,EACAzB,EAAAE,EAAAT,IAEAO,EAAAh8B,GAAA7iB,EAAAuF,EAAAuf,IAAAq5B,GAAAA,EAAA,EACAY,EAAAl8B,GAAA7iB,EAAAuF,EAAAwf,OAAAu7B,GAAAA,EAAA,EACA1B,EAAAE,EAAAR,GAEApiC,EAAAoG,OACApG,EAAAwK,UAAAw3B,EAAAljD,YACAkhB,EAAAuK,YAAAy3B,EAAA5+C,YACA4c,EAAA6H,YACA7H,EAAAgI,OAAA06B,EAAAC,GACA3iC,EAAAmI,OAAAy6B,EAAAC,GACA7iC,EAAAuI,SACAvI,EAAAwG,UAEAhe,WAAA+pB,GACA,MAAAlpB,EAAApM,KAEA,IADAoM,EAAA9K,QAAA04C,MACAzd,QACA,OAEA,MAAAxZ,EAAA3W,EAAA2W,IACA0I,EAAArf,EAAAg7C,oBACA37B,GACAI,GAAA9I,EAAA0I,GAEA,MAAA9e,EAAAP,EAAAkzC,cAAAlzC,EAAAkzC,YAAAlzC,EAAAi7C,mBAAA/xB,IACA,IAAAx3B,EAAA8hB,EACA,IAAA9hB,EAAA,EAAA8hB,EAAAjT,EAAAlO,OAAAX,EAAA8hB,IAAA9hB,EAAA,CACA,MAAA8O,EAAAD,EAAA7O,GACAmmD,EAAAr3C,EAAAtG,KACAzB,EAAA+H,EAAA/H,MACA+H,EAAA+5C,WACA5jC,EAAAmK,UAAAtgB,EAAA+5C,SAAAtgD,MACA0c,EAAA8jC,SAAAj6C,EAAA+5C,SAAAx7C,KAAAyB,EAAA+5C,SAAAh7B,IAAA/e,EAAA+5C,SAAA79B,MAAAlc,EAAA+5C,SAAA18B,SAGAyC,GAAA3J,EAAAle,EAAA,EADA+H,EAAA25C,WACAtC,EAAAr3C,GAEA6e,GACAM,GAAAhJ,GAGAxX,YACA,MAAAwX,IAAAA,EAAAzhB,SAAAyzB,SAAAA,EAAA+nB,MAAAA,EAAAt9B,QAAAA,IAAAxf,KACA,IAAA88C,EAAAvgB,QACA,OAEA,MAAAj2B,EAAAkxB,GAAAslB,EAAAx2C,MACAC,EAAAgxB,GAAAulB,EAAAv2C,SACAC,EAAAs2C,EAAAt2C,MACA,IAAAE,EAAAJ,EAAAsc,WAAA,EACA,WAAAmS,GAAA,WAAAA,GAAAlW,EAAAkW,IACAruB,GAAAH,EAAAqlB,OACArrB,EAAAu8C,EAAAnwB,QACAjmB,GAAAJ,EAAAsc,YAAAk6B,EAAAnwB,KAAAluB,OAAA,KAGAiI,GAAAH,EAAAolB,IAEA,MAAA27B,OAAAA,EAAAC,OAAAA,EAAA95B,SAAAA,EAAAlD,SAAAA,GA9hCA,SAAA5G,EAAAjd,EAAAquB,EAAAvuB,GACA,MAAAmlB,IAAAA,EAAAxgB,KAAAA,EAAAygB,OAAAA,EAAAxgB,MAAAA,EAAAvE,MAAAA,GAAA8c,GACA2R,UAAAA,EAAA1R,OAAAA,GAAA/c,EACA,IACA4mB,EAAA65B,EAAAC,EADAh9B,EAAA,EAEA,MAAAN,EAAA2B,EAAAD,EACA7C,EAAA1d,EAAAD,EACA,GAAAwY,EAAA8X,eAAA,CAEA,GADA6rB,EAAAv8C,EAAAvE,EAAA2E,EAAAC,GACAyT,EAAAkW,GAAA,CACA,MAAA8wB,EAAArlD,OAAAub,KAAAgZ,GAAA,GACA/wB,EAAA+wB,EAAA8wB,GACA0B,EAAA3jC,EAAAiiC,GAAAtB,iBAAAvgD,GAAAimB,EAAAvjB,OAEA6gD,EADA,WAAAxyB,GACAO,EAAA1J,OAAA0J,EAAA3J,KAAA,EAAA1B,EAAAvjB,EAEAk3C,GAAAj6B,EAAAoR,EAAAruB,GAEA+mB,EAAAriB,EAAAD,MACA,CACA,GAAA0T,EAAAkW,GAAA,CACA,MAAA8wB,EAAArlD,OAAAub,KAAAgZ,GAAA,GACA/wB,EAAA+wB,EAAA8wB,GACAyB,EAAA1jC,EAAAiiC,GAAAtB,iBAAAvgD,GAAA8kB,EAAApiB,OAEA4gD,EADA,WAAAvyB,GACAO,EAAAnqB,KAAAmqB,EAAAlqB,OAAA,EAAA0d,EAAApiB,EAEAk3C,GAAAj6B,EAAAoR,EAAAruB,GAEA6gD,EAAAx8C,EAAAvE,EAAAolB,EAAAD,GACApB,EAAA,SAAAwK,GAAA7P,GAAAA,GAEA,MAAA,CAAAoiC,OAAAA,EAAAC,OAAAA,EAAA95B,SAAAA,EAAAlD,SAAAA,GA8/BAi9B,CAAAxnD,KAAA0G,EAAAquB,EAAAvuB,GACAkmB,GAAA3J,EAAA+5B,EAAAnwB,KAAA,EAAA,EAAArmB,EAAA,CACAD,MAAAy2C,EAAAz2C,MACAonB,SAAAA,EACAlD,SAAAA,EACA4C,UAAAuxB,GAAAl4C,EAAAuuB,EAAAvV,GACA4N,aAAA,SACAH,YAAA,CAAAq6B,EAAAC,KAGAh8C,KAAA+pB,GACA,MAAAlpB,EAAApM,KACAoM,EAAAk2C,eAGAl2C,EAAAq7C,iBACAr7C,EAAAs7C,SAAApyB,GACAlpB,EAAAqwC,aACArwC,EAAAu7C,YACAv7C,EAAAw7C,WAAAtyB,IAEA/pB,UACA,MAAAa,EAAApM,KACA4sB,EAAAxgB,EAAA9K,QACAumD,EAAAj7B,EAAAotB,OAAAptB,EAAAotB,MAAA3e,GAAA,EACAysB,EAAA5oC,EAAA0N,EAAA4vB,MAAA5vB,EAAA4vB,KAAAnhB,GAAA,GACA,OAAAjvB,EAAAk2C,cAAAl2C,EAAAS,OAAA+xC,GAAA11C,UAAA2D,KAQA,CAAA,CACAwuB,EAAAysB,EACAv8C,KAAA+pB,GACAlpB,EAAAq7C,iBACAr7C,EAAAs7C,SAAApyB,GACAlpB,EAAAu7C,cAEA,CACAtsB,EAAAysB,EAAA,EACAv8C,OACAa,EAAAqwC,eAEA,CACAphB,EAAAwsB,EACAt8C,KAAA+pB,GACAlpB,EAAAw7C,WAAAtyB,MAtBA,CAAA,CACA+F,EAAAwsB,EACAt8C,KAAA+pB,GACAlpB,EAAAS,KAAAyoB,MAuBA/pB,wBAAApK,GACA,MAAAiL,EAAApM,KACAmgD,EAAA/zC,EAAAvF,MAAAquB,+BACA6yB,EAAA37C,EAAApK,KAAA,SACAgkB,EAAA,GACA,IAAAloB,EAAA8hB,EACA,IAAA9hB,EAAA,EAAA8hB,EAAAugC,EAAA1hD,OAAAX,EAAA8hB,IAAA9hB,EAAA,CACA,MAAA24B,EAAA0pB,EAAAriD,GACA24B,EAAAsxB,KAAA37C,EAAAsS,IAAAvd,GAAAs1B,EAAAt1B,OAAAA,GACA6kB,EAAArY,KAAA8oB,GAGA,OAAAzQ,EAEAza,wBAAA5J,GAEA,OAAA61B,GADAx3B,KAAAsB,QAAA04C,MAAAlb,WAAA9+B,KAAAgB,WAAAW,IACA2E,MAEAiF,aACA,MAAAa,EAAApM,KACAgoD,EAAA57C,EAAAi4C,wBAAA,GAAAzhC,WACA,OAAAxW,EAAAqvB,eAAArvB,EAAA0c,MAAA1c,EAAA6d,QAAA+9B,GAIA,MAAAC,GACA18C,YAAApK,EAAA6gB,EAAAub,GACAv9B,KAAAmB,KAAAA,EACAnB,KAAAgiB,MAAAA,EACAhiB,KAAAu9B,SAAAA,EACAv9B,KAAA2M,MAAAnM,OAAA2f,OAAA,MAEA5U,UAAApK,GACA,OAAAX,OAAA0I,UAAAg/C,cAAA1pD,KAAAwB,KAAAmB,KAAA+H,UAAA/H,EAAA+H,WAEAqC,SAAAqB,GACA,MAAAR,EAAApM,KACA6c,EAAArc,OAAA49B,eAAAxxB,GACA,IAAAu7C,GA+DA,SAAAtrC,GACA,MAAA,OAAAA,GAAA,aAAAA,GA/DAurC,CAAAvrC,KACAsrC,EAAA/7C,EAAAhN,SAAAyd,IAEA,MAAAlQ,EAAAP,EAAAO,MACA+R,EAAA9R,EAAA8R,GACAsD,EAAA5V,EAAA4V,MAAA,IAAAtD,EACA,IAAAA,EACA,MAAA,IAAAtgB,MAAA,2BAAAwO,GAEA,OAAA8R,KAAA/R,IAGAA,EAAA+R,GAAA9R,EAyBA,SAAAA,EAAAoV,EAAAmmC,GACA,MAAAE,EAAA3nC,GAAAlgB,OAAA2f,OAAA,MAAA,CACAgoC,EAAAjmC,GAAA9U,IAAA+6C,GAAA,GACAjmC,GAAA9U,IAAA4U,GACApV,EAAAsV,WAEAA,GAAA3U,IAAAyU,EAAAqmC,GACAz7C,EAAAitC,eAOA,SAAA73B,EAAAsmC,GACA9nD,OAAAub,KAAAusC,GAAA5mD,SAAAilB,IACA,MAAA4hC,EAAA5hC,EAAA7E,MAAA,KACA0mC,EAAAD,EAAAt7C,MACAw7C,EAAA,CAAAzmC,GAAA8Z,OAAAysB,GAAAtpB,KAAA,KACAypB,EAAAJ,EAAA3hC,GAAA7E,MAAA,KACAkC,EAAA0kC,EAAAz7C,MACA8W,EAAA2kC,EAAAzpB,KAAA,KACA/c,GAAAy7B,MAAA8K,EAAAD,EAAAzkC,EAAAC,MAdA2kC,CAAA3mC,EAAApV,EAAAitC,eAEAjtC,EAAA+U,aACAO,GAAA4B,SAAA9B,EAAApV,EAAA+U,aAnCAinC,CAAAh8C,EAAAoV,EAAAmmC,GACA/7C,EAAAmxB,UACArb,GAAAqb,SAAA3wB,EAAA8R,GAAA9R,EAAA8U,YALAM,EASAzW,IAAAmT,GACA,OAAA1e,KAAA2M,MAAA+R,GAEAnT,WAAAqB,GACA,MAAAD,EAAA3M,KAAA2M,MACA+R,EAAA9R,EAAA8R,GACAsD,EAAAhiB,KAAAgiB,MACAtD,KAAA/R,UACAA,EAAA+R,GAEAsD,GAAAtD,KAAAwD,GAAAF,YACAE,GAAAF,GAAAtD,GACA1e,KAAAu9B,iBACA7b,GAAAhD,KAyHA,IAAAmqC,GAAA,IAvFA,MACAt9C,cACAvL,KAAA8oD,YAAA,IAAAb,GAAAhV,GAAA,YAAA,GACAjzC,KAAAwiB,SAAA,IAAAylC,GAAAvO,GAAA,YACA15C,KAAAyjB,QAAA,IAAAwkC,GAAAznD,OAAA,WACAR,KAAA4jB,OAAA,IAAAqkC,GAAArJ,GAAA,UACA5+C,KAAA+oD,iBAAA,CAAA/oD,KAAA8oD,YAAA9oD,KAAA4jB,OAAA5jB,KAAAwiB,UAEAjX,OAAAjB,GACAtK,KAAAgpD,MAAA,WAAA1+C,GAEAiB,UAAAjB,GACAtK,KAAAgpD,MAAA,aAAA1+C,GAEAiB,kBAAAjB,GACAtK,KAAAgpD,MAAA,WAAA1+C,EAAAtK,KAAA8oD,aAEAv9C,eAAAjB,GACAtK,KAAAgpD,MAAA,WAAA1+C,EAAAtK,KAAAwiB,UAEAjX,cAAAjB,GACAtK,KAAAgpD,MAAA,WAAA1+C,EAAAtK,KAAAyjB,SAEAlY,aAAAjB,GACAtK,KAAAgpD,MAAA,WAAA1+C,EAAAtK,KAAA4jB,QAEArY,cAAAmT,GACA,OAAA1e,KAAAf,KAAAyf,EAAA1e,KAAA8oD,YAAA,cAEAv9C,WAAAmT,GACA,OAAA1e,KAAAf,KAAAyf,EAAA1e,KAAAwiB,SAAA,WAEAjX,UAAAmT,GACA,OAAA1e,KAAAf,KAAAyf,EAAA1e,KAAAyjB,QAAA,UAEAlY,SAAAmT,GACA,OAAA1e,KAAAf,KAAAyf,EAAA1e,KAAA4jB,OAAA,SAEArY,qBAAAjB,GACAtK,KAAAgpD,MAAA,aAAA1+C,EAAAtK,KAAA8oD,aAEAv9C,kBAAAjB,GACAtK,KAAAgpD,MAAA,aAAA1+C,EAAAtK,KAAAwiB,UAEAjX,iBAAAjB,GACAtK,KAAAgpD,MAAA,aAAA1+C,EAAAtK,KAAAyjB,SAEAlY,gBAAAjB,GACAtK,KAAAgpD,MAAA,aAAA1+C,EAAAtK,KAAA4jB,QAEArY,MAAAkkB,EAAAnlB,EAAA2+C,GACA,MAAA78C,EAAApM,KACA,IAAAsK,GAAA5I,SAAAwnD,IACA,MAAAC,EAAAF,GAAA78C,EAAAg9C,oBAAAF,GACAD,GAAAE,EAAAE,UAAAH,IAAAC,IAAA/8C,EAAAqX,SAAAylC,EAAAxqC,GACAtS,EAAAk9C,MAAA75B,EAAA05B,EAAAD,GAEAjpD,EAAAipD,GAAAt8C,IACA,MAAA28C,EAAAN,GAAA78C,EAAAg9C,oBAAAx8C,GACAR,EAAAk9C,MAAA75B,EAAA85B,EAAA38C,SAKArB,MAAAkkB,EAAAo5B,EAAAW,GACA,MAAAC,EAAAtoC,GAAAsO,GACA1rB,EAAAylD,EAAA,SAAAC,GAAA,GAAAD,GACAX,EAAAp5B,GAAA+5B,GACAzlD,EAAAylD,EAAA,QAAAC,GAAA,GAAAD,GAEAj+C,oBAAApK,GACA,IAAA,IAAArD,EAAA,EAAAA,EAAAkC,KAAA+oD,iBAAAtqD,OAAAX,IAAA,CACA,MAAAqrD,EAAAnpD,KAAA+oD,iBAAAjrD,GACA,GAAAqrD,EAAAE,UAAAloD,GACA,OAAAgoD,EAGA,OAAAnpD,KAAAyjB,QAEAlY,KAAAmT,EAAAuqC,EAAA9nD,GACA,MAAAyL,EAAAq8C,EAAA77C,IAAAsR,GACA,QAAA5e,IAAA8M,EACA,MAAA,IAAAxO,MAAA,IAAAsgB,EAAA,yBAAAvd,EAAA,KAEA,OAAAyL,IAKA,MAAA88C,GACAn+C,cACAvL,KAAA2pD,MAAA,GAEAp+C,OAAA1E,EAAA+iD,EAAAt/C,EAAA8tB,GACA,MAAAhsB,EAAApM,KACA,eAAA4pD,IACAx9C,EAAAu9C,MAAAv9C,EAAAy9C,mBAAAhjD,GAAA,GACAuF,EAAAc,QAAAd,EAAAu9C,MAAA9iD,EAAA,YAEA,MAAA8a,EAAAyW,EAAAhsB,EAAA+V,aAAAtb,GAAAuxB,OAAAA,GAAAhsB,EAAA+V,aAAAtb,GACAmf,EAAA5Z,EAAAc,QAAAyU,EAAA9a,EAAA+iD,EAAAt/C,GAKA,MAJA,YAAAs/C,IACAx9C,EAAAc,QAAAyU,EAAA9a,EAAA,QACAuF,EAAAc,QAAAd,EAAAu9C,MAAA9iD,EAAA,cAEAmf,EAEAza,QAAAoW,EAAA9a,EAAA+iD,EAAAt/C,GACAA,EAAAA,GAAA,GACA,IAAA,MAAAw/C,KAAAnoC,EAAA,CACA,MAAAooC,EAAAD,EAAAC,OAGA,IAAA,IAAAhmD,EAFAgmD,EAAAH,GACA,CAAA/iD,EAAAyD,EAAAw/C,EAAAxoD,SACAyoD,IAAAz/C,EAAA0/C,WACA,OAAA,EAGA,OAAA,EAEAz+C,aACAoT,EAAA3e,KAAA+/C,UACA//C,KAAAiqD,UAAAjqD,KAAA+/C,OACA//C,KAAA+/C,YAAAjgD,GAGAyL,aAAA1E,GACA,GAAA7G,KAAA+/C,OACA,OAAA//C,KAAA+/C,OAEA,MAAAp+B,EAAA3hB,KAAA+/C,OAAA//C,KAAA6pD,mBAAAhjD,GAEA,OADA7G,KAAAkqD,oBAAArjD,GACA8a,EAEApW,mBAAA1E,EAAA4pC,GACA,MAAA7wC,EAAAiH,GAAAA,EAAAjH,OACA0B,EAAA4d,EAAAtf,EAAA0B,SAAA1B,EAAA0B,QAAAmiB,QAAA,IACAA,EAWA,SAAA7jB,GACA,MAAA6jB,EAAA,GACA1H,EAAAvb,OAAAub,KAAA8sC,GAAAplC,QAAA9W,OACA,IAAA,IAAA7O,EAAA,EAAAA,EAAAie,EAAAtd,OAAAX,IACA2lB,EAAA9V,KAAAk7C,GAAAsB,UAAApuC,EAAAje,KAEA,MAAAymB,EAAA3kB,EAAA6jB,SAAA,GACA,IAAA,IAAA3lB,EAAA,EAAAA,EAAAymB,EAAA9lB,OAAAX,IAAA,CACA,MAAAisD,EAAAxlC,EAAAzmB,IACA,IAAA2lB,EAAAnD,QAAAypC,IACAtmC,EAAA9V,KAAAo8C,GAGA,OAAAtmC,EAxBA2mC,CAAAxqD,GACA,OAAA,IAAA0B,GAAAmvC,EAkCA,SAAA5pC,EAAA4c,EAAAniB,EAAAmvC,GACA,MAAAzqB,EAAA,GACAjlB,EAAA8F,EAAA7F,aACA,IAAA,IAAAlD,EAAA,EAAAA,EAAA2lB,EAAAhlB,OAAAX,IAAA,CACA,MAAAisD,EAAAtmC,EAAA3lB,GAEA8uB,EAAAy9B,GAAA/oD,EADAyoD,EAAArrC,IACA+xB,GACA,OAAA7jB,GAGA5G,EAAArY,KAAA,CACAo8C,OAAAA,EACAzoD,QAAAgpD,GAAAzjD,EAAAjH,OAAAmqD,EAAAn9B,EAAA7rB,KAGA,OAAAilB,EAjDAukC,CAAA1jD,EAAA4c,EAAAniB,EAAAmvC,GAAA,GAEAllC,oBAAA1E,GACA,MAAA2jD,EAAAxqD,KAAAiqD,WAAA,GACAtoC,EAAA3hB,KAAA+/C,OACA/D,EAAA,CAAA79C,EAAAuQ,IAAAvQ,EAAAi6B,QAAAlnB,IAAAxC,EAAA+7C,MAAArkC,GAAAlV,EAAA64C,OAAArrC,KAAA0H,EAAA2jC,OAAArrC,OACA1e,KAAAkN,QAAA8uC,EAAAwO,EAAA7oC,GAAA9a,EAAA,QACA7G,KAAAkN,QAAA8uC,EAAAr6B,EAAA6oC,GAAA3jD,EAAA,UAkBA,SAAAwjD,GAAA/oD,EAAAmvC,GACA,OAAAA,IAAA,IAAAnvC,GAGA,IAAAA,EACA,GAEAA,EALA,KAwBA,SAAAgpD,GAAA1qD,EAAAmqD,EAAAn9B,EAAA7rB,GACA,MAAAgb,EAAAnc,EAAA8qD,gBAAAX,GACAltB,EAAAj9B,EAAAi2C,gBAAAjpB,EAAA7Q,GACA,OAAAnc,EAAAk2C,eAAAjZ,EAAA97B,EAAA,CAAA,IAAA,CAAAy+B,YAAA,EAAAC,WAAA,EAAAF,SAAA,IAGA,SAAAorB,GAAAxpD,EAAAG,GACA,MAAAspD,EAAA1oC,GAAAjhB,SAAAE,IAAA,GAEA,QADAG,EAAAL,UAAA,IAAAE,IAAA,IACAY,WAAAT,EAAAS,WAAA6oD,EAAA7oD,WAAA,IAsBA,SAAA8oD,GAAAnsC,EAAAosC,GACA,MAAA,MAAApsC,GAAA,MAAAA,EACAA,EAEAosC,EAAA9oD,OAXA,SADA+yB,EAYA+1B,EAAA/1B,WAXA,WAAAA,EACA,IAEA,SAAAA,GAAA,UAAAA,EACA,SADA,IAQArW,EAAAzB,OAAA,GAAAT,cAZA,IAAAuY,EA8CA,SAAAg2B,GAAAnrD,GACA,MAAA0B,EAAA1B,EAAA0B,UAAA1B,EAAA0B,QAAA,IACAA,EAAAmiB,QAAAvE,EAAA5d,EAAAmiB,QAAA,IACAniB,EAAAsiB,OAnCA,SAAAhkB,EAAA0B,GACA,MAAA0pD,EAAAtpC,GAAA9hB,EAAAuB,OAAA,CAAAyiB,OAAA,IACAqnC,EAAA3pD,EAAAsiB,QAAA,GACAsnC,EAAAP,GAAA/qD,EAAAuB,KAAAG,GACA6pD,EAAA3qD,OAAA2f,OAAA,MACAyD,EAAApjB,OAAA2f,OAAA,MAyBA,OAxBA3f,OAAAub,KAAAkvC,GAAAvpD,SAAAgd,IACA,MAAA0sC,EAAAH,EAAAvsC,GACA1c,EAAA6oD,GAAAnsC,EAAA0sC,GACAC,EA1BA,SAAArpD,EAAAD,GACA,OAAAC,IAAAD,EAAA,UAAA,UAyBAupD,CAAAtpD,EAAAkpD,GACAK,EAAAP,EAAApnC,QAAA,GACAunC,EAAAnpD,GAAAmpD,EAAAnpD,IAAA0c,EACAkF,EAAAlF,GAAAmC,GAAArgB,OAAA2f,OAAA,MAAA,CAAA,CAAAne,KAAAA,GAAAopD,EAAAG,EAAAvpD,GAAAupD,EAAAF,QAEAzrD,EAAAS,KAAAY,SAAAS,SAAAoD,IACA,MAAA3D,EAAA2D,EAAA3D,MAAAvB,EAAAuB,KACAY,EAAA+C,EAAA/C,WAAA4oD,GAAAxpD,EAAAG,GAEAiqD,GADA7pC,GAAAvgB,IAAA,IACAyiB,QAAA,GACApjB,OAAAub,KAAAwvC,GAAA7pD,SAAA8pD,IACA,MAAAxpD,EA9CA,SAAA0c,EAAA3c,GACA,IAAAC,EAAA0c,EAMA,MALA,YAAAA,EACA1c,EAAAD,EACA,YAAA2c,IACA1c,EAAA,MAAAD,EAAA,IAAA,KAEAC,EAuCAypD,CAAAD,EAAAzpD,GACA2c,EAAA5Z,EAAA9C,EAAA,WAAAmpD,EAAAnpD,IAAAA,EACA4hB,EAAAlF,GAAAkF,EAAAlF,IAAAle,OAAA2f,OAAA,MACAU,GAAA+C,EAAAlF,GAAA,CAAA,CAAA1c,KAAAA,GAAAipD,EAAAvsC,GAAA6sC,EAAAC,WAGAhrD,OAAAub,KAAA6H,GAAAliB,SAAAE,IACA,MAAA+hB,EAAAC,EAAAhiB,GACAif,GAAA8C,EAAA,CAAAzB,GAAA0B,OAAAD,EAAAxiB,MAAA+gB,GAAAyB,WAEAC,EAKA8nC,CAAA9rD,EAAA0B,GAEA,SAAAqqD,GAAAtrD,GAIA,OAHAA,EAAAA,GAAA,IACAY,SAAAZ,EAAAY,UAAA,GACAZ,EAAAgB,OAAAhB,EAAAgB,QAAA,GACAhB,EAQA,MAAAurD,GAAA,IAAAlgD,IACAmgD,GAAA,IAAA77B,IACA,SAAA87B,GAAAnmB,EAAAomB,GACA,IAAAhwC,EAAA6vC,GAAAx+C,IAAAu4B,GAMA,OALA5pB,IACAA,EAAAgwC,IACAH,GAAAr+C,IAAAo4B,EAAA5pB,GACA8vC,GAAA57B,IAAAlU,IAEAA,EAEA,MAAAiwC,GAAA,CAAAz+C,EAAAzF,EAAAlG,KACA,MAAAgrB,EAAA3L,GAAAnZ,EAAAlG,QACA9B,IAAA8sB,GACArf,EAAA0iB,IAAArD,IAGA,MAAAq/B,GACA1gD,YAAA3L,GACAI,KAAAksD,QAzBA,SAAAtsD,GAIA,OAHAA,EAAAA,GAAA,IACAS,KAAAsrD,GAAA/rD,EAAAS,MACA0qD,GAAAnrD,GACAA,EAqBAusD,CAAAvsD,GACAI,KAAAosD,YAAA,IAAA1gD,IACA1L,KAAAqsD,eAAA,IAAA3gD,IAEA4W,eACA,OAAAtiB,KAAAksD,QAAA5pC,SAEAnhB,WACA,OAAAnB,KAAAksD,QAAA/qD,KAEAA,SAAAA,GACAnB,KAAAksD,QAAA/qD,KAAAA,EAEAd,WACA,OAAAL,KAAAksD,QAAA7rD,KAEAA,SAAAA,GACAL,KAAAksD,QAAA7rD,KAAAsrD,GAAAtrD,GAEAiB,cACA,OAAAtB,KAAAksD,QAAA5qD,QAEAA,YAAAA,GACAtB,KAAAksD,QAAA5qD,QAAAA,EAEAmiB,cACA,OAAAzjB,KAAAksD,QAAAzoC,QAEAlY,SACA,MAAA3L,EAAAI,KAAAksD,QACAlsD,KAAAssD,aACAvB,GAAAnrD,GAEA2L,aACAvL,KAAAosD,YAAAG,QACAvsD,KAAAqsD,eAAAE,QAEAhhD,iBAAAihD,GACA,OAAAV,GAAAU,GACA,IAAA,CAAA,CACA,YAAAA,IACA,OAGAjhD,0BAAAihD,EAAA/T,GACA,OAAAqT,GAAA,GAAAU,gBAAA/T,KACA,IAAA,CACA,CACA,YAAA+T,iBAAA/T,IACA,eAAAA,KAEA,CACA,YAAA+T,IACA,OAIAjhD,wBAAAihD,EAAAnU,GACA,OAAAyT,GAAA,GAAAU,KAAAnU,KACA,IAAA,CAAA,CACA,YAAAmU,cAAAnU,IACA,YAAAmU,IACA,YAAAnU,IACA,OAGA9sC,gBAAAw+C,GACA,MAAArrC,EAAAqrC,EAAArrC,GAEA,OAAAotC,GAAA,GADA9rD,KAAAmB,eACAud,KACA,IAAA,CAAA,CACA,WAAAA,OACAqrC,EAAA0C,wBAAA,OAGAlhD,cAAAmhD,EAAAC,GACA,MAAAP,EAAApsD,KAAAosD,YACA,IAAAnjC,EAAAmjC,EAAAh/C,IAAAs/C,GAKA,OAJAzjC,IAAA0jC,IACA1jC,EAAA,IAAAvd,IACA0gD,EAAA7+C,IAAAm/C,EAAAzjC,IAEAA,EAEA1d,gBAAAmhD,EAAAE,EAAAD,GACA,MAAArrD,QAAAA,EAAAH,KAAAA,GAAAnB,KACAipB,EAAAjpB,KAAA6sD,cAAAH,EAAAC,GACA5Z,EAAA9pB,EAAA7b,IAAAw/C,GACA,GAAA7Z,EACA,OAAAA,EAEA,MAAAlW,EAAA,IAAA7M,IACA48B,EAAAlrD,SAAAqa,IACA2wC,IACA7vB,EAAA5M,IAAAy8B,GACA3wC,EAAAra,SAAAE,GAAAoqD,GAAAnvB,EAAA6vB,EAAA9qD,MAEAma,EAAAra,SAAAE,GAAAoqD,GAAAnvB,EAAAv7B,EAAAM,KACAma,EAAAra,SAAAE,GAAAoqD,GAAAnvB,EAAAnb,GAAAvgB,IAAA,GAAAS,KACAma,EAAAra,SAAAE,GAAAoqD,GAAAnvB,EAAA3a,GAAAtgB,KACAma,EAAAra,SAAAE,GAAAoqD,GAAAnvB,EAAAlb,GAAA/f,QAEA,MAAA8kB,EAAApmB,MAAA6H,KAAA00B,GAOA,OANA,IAAAnW,EAAAjoB,QACAioB,EAAA/Y,KAAAnN,OAAA2f,OAAA,OAEA0rC,GAAApqC,IAAAmrC,IACA3jC,EAAA1b,IAAAq/C,EAAAlmC,GAEAA,EAEAnb,oBACA,MAAAjK,QAAAA,EAAAH,KAAAA,GAAAnB,KACA,MAAA,CACAsB,EACAogB,GAAAvgB,IAAA,GACA+gB,GAAAjhB,SAAAE,IAAA,GACA,CAAAA,KAAAA,GACA+gB,GACAP,IAGApW,oBAAAsxB,EAAAtqB,EAAAxR,EAAA+7B,EAAA,CAAA,KACA,MAAA9W,EAAA,CAAAmqB,SAAA,IACA/Q,SAAAA,EAAA0tB,YAAAA,GAAAC,GAAA/sD,KAAAqsD,eAAAxvB,EAAAC,GACA,IAAAx7B,EAAA89B,EACA,GAoCA,SAAAxB,EAAArrB,GACA,MAAAysB,aAAAA,EAAAG,YAAAA,GAAAhd,GAAAyb,GACA,IAAA,MAAAxG,KAAA7kB,EACA,GAAAysB,EAAA5H,IAAA9V,GAAAsc,EAAAxG,KACA+H,EAAA/H,IAAA72B,EAAAq9B,EAAAxG,IACA,OAAA,EAGA,OAAA,EA5CA41B,CAAA5tB,EAAA7sB,GAAA,CACAyT,EAAAmqB,SAAA,EAGA7uC,EAAAk9B,GAAAY,EAFAr+B,EAAAugB,GAAAvgB,GAAAA,IAAAA,EACAf,KAAA81C,eAAAjZ,EAAA97B,EAAA+rD,IAGA,IAAA,MAAA11B,KAAA7kB,EACAyT,EAAAoR,GAAA91B,EAAA81B,GAEA,OAAApR,EAEAza,eAAAsxB,EAAA97B,EAAA+7B,EAAA,CAAA,IAAA4B,GACA,MAAAU,SAAAA,GAAA2tB,GAAA/sD,KAAAqsD,eAAAxvB,EAAAC,GACA,OAAAje,EAAA9d,GACAy9B,GAAAY,EAAAr+B,OAAAjB,EAAA4+B,GACAU,GAGA,SAAA2tB,GAAAE,EAAApwB,EAAAC,GACA,IAAA7T,EAAAgkC,EAAA7/C,IAAAyvB,GACA5T,IACAA,EAAA,IAAAvd,IACAuhD,EAAA1/C,IAAAsvB,EAAA5T,IAEA,MAAA0c,EAAA7I,EAAAmC,OACA,IAAA8T,EAAA9pB,EAAA7b,IAAAu4B,GACA,IAAAoN,EAAA,CAEAA,EAAA,CACA3T,SAFAxC,GAAAC,EAAAC,GAGAgwB,YAAAhwB,EAAA1E,QAAA95B,IAAAA,EAAAke,cAAAsc,SAAA,YAEA7P,EAAA1b,IAAAo4B,EAAAoN,GAEA,OAAAA,EAeA,MAAAma,GAAA,CAAA,MAAA,SAAA,OAAA,QAAA,aACA,SAAAC,GAAAp4B,EAAA/yB,GACA,MAAA,QAAA+yB,GAAA,WAAAA,IAAA,IAAAm4B,GAAA5sC,QAAAyU,IAAA,MAAA/yB,EAEA,SAAAorD,GAAAC,EAAAC,GACA,OAAA,SAAAnvD,EAAAuQ,GACA,OAAAvQ,EAAAkvD,KAAA3+C,EAAA2+C,GACAlvD,EAAAmvD,GAAA5+C,EAAA4+C,GACAnvD,EAAAkvD,GAAA3+C,EAAA2+C,IAGA,SAAAE,GAAAxsD,GACA,MAAA8F,EAAA9F,EAAA8F,MACAuoC,EAAAvoC,EAAAvF,QAAA8gB,UACAvb,EAAAm7C,cAAA,eACAj+C,EAAAqrC,GAAAA,EAAAoe,WAAA,CAAAzsD,GAAA8F,GAEA,SAAA4mD,GAAA1sD,GACA,MAAA8F,EAAA9F,EAAA8F,MACAuoC,EAAAvoC,EAAAvF,QAAA8gB,UACAre,EAAAqrC,GAAAA,EAAAse,WAAA,CAAA3sD,GAAA8F,GAEA,SAAA8mD,GAAA/gD,GASA,OARAsjB,MAAA,iBAAAtjB,EACAA,EAAAhM,SAAAgtD,eAAAhhD,GACAA,GAAAA,EAAAnO,SACAmO,EAAAA,EAAA,IAEAA,GAAAA,EAAAlM,SACAkM,EAAAA,EAAAlM,QAEAkM,EAEA,MAAAihD,GAAA,GACAC,GAAAlsD,IACA,MAAAlB,EAAAitD,GAAA/rD,GACA,OAAApB,OAAAyhB,OAAA4rC,IAAAz1B,QAAAp6B,GAAAA,EAAA0C,SAAAA,IAAAuM,OAEA,MAAA1N,GACAgM,YAAAqB,EAAAmhD,GACA,MAAA3hD,EAAApM,KACAJ,EAAAI,KAAAJ,OAAA,IAAAqsD,GAAA8B,GACAC,EAAAL,GAAA/gD,GACAqhD,EAAAH,GAAAE,GACA,GAAAC,EACA,MAAA,IAAA7vD,MACA,4CAAA6vD,EAAAvvC,GAAA,wDAIA,MAAApd,EAAA1B,EAAAk2C,eAAAl2C,EAAAsuD,oBAAA9hD,EAAApL,cACAhB,KAAAsiB,SAAA,IAAA1iB,EAAA0iB,UAAAmrB,GAAAugB,IACA,MAAAjtD,EAAAqL,EAAAkW,SAAA6rC,eAAAH,EAAA1sD,EAAAmxB,aACA/xB,EAAAK,GAAAA,EAAAL,OACAupB,EAAAvpB,GAAAA,EAAAupB,OACAnB,EAAApoB,GAAAA,EAAAooB,MACA9oB,KAAA0e,GAAAD,IACAze,KAAA+iB,IAAAhiB,EACAf,KAAAU,OAAAA,EACAV,KAAA8oB,MAAAA,EACA9oB,KAAAiqB,OAAAA,EACAjqB,KAAAouD,SAAA9sD,EACAtB,KAAAquD,aAAAruD,KAAAyyB,YACAzyB,KAAAo7B,QAAA,GACAp7B,KAAAsuD,UAAA,GACAtuD,KAAAiyC,aAAAnyC,EACAE,KAAA46B,MAAA,GACA56B,KAAA4pB,6BAAA9pB,EACAE,KAAAs1B,eAAAx1B,EACAE,KAAA8M,QAAA,GACA9M,KAAAuuD,gBAAAzuD,EACAE,KAAAwuD,WAAA,GACAxuD,KAAAyuD,0BAAA3uD,EACAE,KAAA0uD,gBAAA,GACA1uD,KAAA4jB,OAAA,GACA5jB,KAAA2uD,SAAA,IAAAjF,GACA1pD,KAAAqtC,SAAA,GACArtC,KAAA4uD,eAAA,GACA5uD,KAAA6uD,UAAA,EACA7uD,KAAA44C,yBAAA94C,EACAE,KAAA2zC,cAAA7zC,EACAE,KAAA8uD,UAAArkD,GAAA,IAAAzK,KAAAg7B,OAAA,WAAA15B,EAAAytD,aAAA,GACAlB,GAAAzhD,EAAAsS,IAAAtS,EACArL,GAAAL,GAIA4K,EAAA0jD,OAAA5iD,EAAA,WAAAmhD,IACAjiD,EAAA0jD,OAAA5iD,EAAA,WAAAqhD,IACArhD,EAAA6iD,cACA7iD,EAAAyiD,UACAziD,EAAA4uB,UAPAr0B,QAAAuoD,MAAA,qEAUAz8B,kBACA,MAAAnxB,SAAAmxB,YAAAA,EAAApP,oBAAAA,GAAAyF,MAAAA,EAAAmB,OAAAA,EAAAokC,aAAAA,GAAAruD,KACA,OAAA2e,EAAA8T,GAGApP,GAAAgrC,EACAA,EAEApkC,EAAAnB,EAAAmB,EAAA,KALAwI,EAOApyB,WACA,OAAAL,KAAAJ,OAAAS,KAEAA,SAAAA,GACAL,KAAAJ,OAAAS,KAAAA,EAEAiB,cACA,OAAAtB,KAAAouD,SAEA9sD,YAAAA,GACAtB,KAAAJ,OAAA0B,QAAAA,EAEAiK,cACA,MAAAa,EAAApM,KASA,OARAoM,EAAA41C,cAAA,cACA51C,EAAA9K,QAAAoiB,WACAtX,EAAA4/B,SAEA5Y,GAAAhnB,EAAAA,EAAA9K,QAAA+gB,kBAEAjW,EAAA+iD,aACA/iD,EAAA41C,cAAA,aACA51C,EAEAb,QAEA,OADAue,GAAA9pB,KAAAU,OAAAV,KAAA+iB,KACA/iB,KAEAuL,OAEA,OADAD,EAAAm9B,KAAAzoC,MACAA,KAEAuL,OAAAud,EAAAmB,GACA3e,EAAAoB,QAAA1M,MAGAA,KAAAovD,kBAAA,CAAAtmC,MAAAA,EAAAmB,OAAAA,GAFAjqB,KAAAqvD,QAAAvmC,EAAAmB,GAKA1e,QAAAud,EAAAmB,GACA,MAAA7d,EAAApM,KACAsB,EAAA8K,EAAA9K,QACAZ,EAAA0L,EAAA1L,OACA+xB,EAAAnxB,EAAA+hB,qBAAAjX,EAAAqmB,YACA68B,EAAAljD,EAAAkW,SAAAgQ,eAAA5xB,EAAAooB,EAAAmB,EAAAwI,GACA88B,EAAAjuD,EAAA+gB,kBAAAjW,EAAAkW,SAAAC,sBACAnW,EAAA0c,MAAAwmC,EAAAxmC,MACA1c,EAAA6d,OAAAqlC,EAAArlC,OACA7d,EAAAiiD,aAAAjiD,EAAAqmB,YACAW,GAAAhnB,EAAAmjD,GAAA,KAGAnjD,EAAA41C,cAAA,SAAA,CAAAxgC,KAAA8tC,IACAvrD,EAAAzC,EAAAkuD,SAAA,CAAApjD,EAAAkjD,GAAAljD,GACAA,EAAAyiD,UACAziD,EAAA0iD,aACA1iD,EAAAqjD,UAIAlkD,sBAGAtL,EAFAD,KAAAsB,QACAsiB,QAAA,IACA,CAAA8rC,EAAA3H,KACA2H,EAAAhxC,GAAAqpC,KAGAx8C,sBACA,MAAAa,EAAApM,KACAsB,EAAA8K,EAAA9K,QACAquD,EAAAruD,EAAAsiB,OACAA,EAAAxX,EAAAwX,OACAgsC,EAAApvD,OAAAub,KAAA6H,GAAAhW,QAAA,CAAA9F,EAAA4W,KACA5W,EAAA4W,IAAA,EACA5W,IACA,IACA,IAAA6E,EAAA,GACAgjD,IACAhjD,EAAAA,EAAAmvB,OACAt7B,OAAAub,KAAA4zC,GAAAr/C,KAAAoO,IACA,MAAAosC,EAAA6E,EAAAjxC,GACA1c,EAAA6oD,GAAAnsC,EAAAosC,GACA+E,EAAA,MAAA7tD,EACAy5B,EAAA,MAAAz5B,EACA,MAAA,CACAV,QAAAwpD,EACAgF,UAAAD,EAAA,YAAAp0B,EAAA,SAAA,OACAs0B,MAAAF,EAAA,eAAAp0B,EAAA,WAAA,eAKAx7B,EAAA0M,GAAAC,IACA,MAAAk+C,EAAAl+C,EAAAtL,QACAod,EAAAosC,EAAApsC,GACA1c,EAAA6oD,GAAAnsC,EAAAosC,GACAkF,EAAA9wC,EAAA4rC,EAAA3pD,KAAAyL,EAAAmjD,YACAjwD,IAAAgrD,EAAA/1B,UAAAo4B,GAAArC,EAAA/1B,SAAA/yB,KAAAmrD,GAAAvgD,EAAAkjD,aACAhF,EAAA/1B,SAAAnoB,EAAAkjD,WAEAF,EAAAlxC,IAAA,EACA,IAAAiF,EAAA,KACA,GAAAjF,KAAAkF,GAAAA,EAAAlF,GAAAvd,OAAA6uD,EACArsC,EAAAC,EAAAlF,OACA,CAEAiF,EAAA,IADAklC,GAAAoH,SAAAD,GACA,CAAA,CACAtxC,GAAAA,EACAvd,KAAA6uD,EACAjtC,IAAA3W,EAAA2W,IACAlc,MAAAuF,IAEAwX,EAAAD,EAAAjF,IAAAiF,EAEAA,EAAAusC,KAAApF,EAAAxpD,MAEArB,EAAA2vD,GAAA,CAAAO,EAAAzxC,KACAyxC,UACAvsC,EAAAlF,MAGAze,EAAA2jB,GAAAD,IACA6U,GAAAsX,UAAA1jC,EAAAuX,EAAAA,EAAAriB,SACAk3B,GAAA43B,OAAAhkD,EAAAuX,MAGApY,kBACA,MAAAa,EAAApM,KACAi1B,EAAA7oB,EAAAkiD,UACAnV,EAAA/sC,EAAA/L,KAAAY,SAAAxC,OACAy6C,EAAAjkB,EAAAx2B,OAEA,GADAw2B,EAAA/O,MAAA,CAAA/nB,EAAAuQ,IAAAvQ,EAAAwD,MAAA+M,EAAA/M,QACAu3C,EAAAC,EAAA,CACA,IAAA,IAAAr7C,EAAAq7C,EAAAr7C,EAAAo7C,IAAAp7C,EACAsO,EAAAikD,oBAAAvyD,GAEAm3B,EAAAxL,OAAA0vB,EAAAD,EAAAC,GAEA/sC,EAAAsiD,gBAAAz5B,EAAA3rB,MAAA,GAAA4c,KAAAknC,GAAA,QAAA,UAEA7hD,8BACA,MAAAa,EAAApM,MACAsuD,UAAAr5B,EAAA50B,MAAAY,SAAAA,IAAAmL,EACA6oB,EAAAx2B,OAAAwC,EAAAxC,eACA2N,EAAA6lC,QAEAhd,EAAAvzB,SAAA,CAAA+0B,EAAA90B,KACA,IAAAV,EAAAm3B,QAAAlnB,GAAAA,IAAAulB,EAAA65B,WAAA7xD,QACA2N,EAAAikD,oBAAA1uD,MAIA4J,2BACA,MAAAa,EAAApM,KACAuwD,EAAA,GACAtvD,EAAAmL,EAAA/L,KAAAY,SACA,IAAAnD,EAAA8hB,EAEA,IADAxT,EAAAokD,8BACA1yD,EAAA,EAAA8hB,EAAA3e,EAAAxC,OAAAX,EAAA8hB,EAAA9hB,IAAA,CACA,MAAAgH,EAAA7D,EAAAnD,GACA,IAAA24B,EAAArqB,EAAAsqB,eAAA54B,GACA,MAAAqD,EAAA2D,EAAA3D,MAAAiL,EAAAxM,OAAAuB,KAWA,GAVAs1B,EAAAt1B,MAAAs1B,EAAAt1B,OAAAA,IACAiL,EAAAikD,oBAAAvyD,GACA24B,EAAArqB,EAAAsqB,eAAA54B,IAEA24B,EAAAt1B,KAAAA,EACAs1B,EAAA10B,UAAA+C,EAAA/C,WAAA4oD,GAAAxpD,EAAAiL,EAAA9K,SACAm1B,EAAAg6B,MAAA3rD,EAAA2rD,OAAA,EACAh6B,EAAA90B,MAAA7D,EACA24B,EAAA5xB,MAAA,GAAAC,EAAAD,MACA4xB,EAAAiZ,QAAAtjC,EAAAskD,iBAAA5yD,GACA24B,EAAAnC,WACAmC,EAAAnC,WAAAq8B,YAAA7yD,GACA24B,EAAAnC,WAAAwf,iBACA,CACA,MAAA8c,EAAA/H,GAAAgI,cAAA1vD,IACAm0C,mBAAAA,EAAA8C,gBAAAA,GAAAl2B,GAAAjhB,SAAAE,GACAX,OAAAC,OAAAmwD,EAAA1nD,UAAA,CACAkvC,gBAAAyQ,GAAAiI,WAAA1Y,GACA9C,mBAAAA,GAAAuT,GAAAiI,WAAAxb,KAEA7e,EAAAnC,WAAA,IAAAs8B,EAAAxkD,EAAAtO,GACAyyD,EAAA5iD,KAAA8oB,EAAAnC,aAIA,OADAloB,EAAA2kD,kBACAR,EAEAhlD,iBACA,MAAAa,EAAApM,KACAC,EAAAmM,EAAA/L,KAAAY,UAAA,CAAA6D,EAAAib,KACA3T,EAAAsqB,eAAA3W,GAAAuU,WAAA08B,UACA5kD,GAEAb,QACAvL,KAAAixD,iBACAjxD,KAAAgiD,cAAA,SAEAz2C,OAAA4X,GACA,MAAA/W,EAAApM,KACAJ,EAAAwM,EAAAxM,OACAA,EAAAo7B,SACA5uB,EAAAgiD,SAAAxuD,EAAAk2C,eAAAl2C,EAAAsuD,oBAAA9hD,EAAApL,cACAf,EAAAmM,EAAAwX,QAAAD,IACA6U,GAAA04B,UAAA9kD,EAAAuX,MAEA,MAAAwtC,EAAA/kD,EAAAwsC,qBAAAxsC,EAAA9K,QAAA8gB,UACAhW,EAAAglD,sBACAhlD,EAAAilD,sBACA,MAAAC,EAAA,IAAAthC,IAAAxvB,OAAAub,KAAA3P,EAAAoiD,aACA+C,EAAA,IAAAvhC,IAAA5jB,EAAA9K,QAAAmhB,QAMA,GALAlB,GAAA+vC,EAAAC,MAAAvxD,KAAAyuD,uBAAAriD,EAAA9K,QAAAoiB,aACAtX,EAAAolD,eACAplD,EAAA+iD,cAEA/iD,EAAAuiD,SAAA8C,cACA,IAAArlD,EAAA41C,cAAA,eAAA,CAAA7+B,KAAAA,EAAA6mC,YAAA,IACA,OAEA,MAAAuG,EAAAnkD,EAAAslD,2BACAtlD,EAAA41C,cAAA,wBACA,IAAAzmB,EAAA,EACA,IAAA,IAAAz9B,EAAA,EAAA8hB,EAAAxT,EAAA/L,KAAAY,SAAAxC,OAAAX,EAAA8hB,EAAA9hB,IAAA,CACA,MAAAw2B,WAAAA,GAAAloB,EAAAsqB,eAAA54B,GACAkzD,GAAAG,IAAA,IAAAZ,EAAAjwC,QAAAgU,GACAA,EAAAq9B,sBAAAX,GACAz1B,EAAA94B,KAAAF,KAAA+xB,EAAAsjB,iBAAArc,GAEAnvB,EAAAmpB,YAAAgG,EACAnvB,EAAAwlD,cAAAr2B,GACA41B,GACAlxD,EAAAswD,GAAAj8B,IACAA,EAAA08B,WAGA5kD,EAAAylD,gBAAA1uC,GACA/W,EAAA41C,cAAA,cAAA,CAAA7+B,KAAAA,IACA/W,EAAAgvB,QAAAlV,KAAAknC,GAAA,IAAA,SACAhhD,EAAAmiD,YACAniD,EAAA0lD,cAAA1lD,EAAAmiD,YAAA,GAEAniD,EAAAqjD,SAEAlkD,cAAAgwB,GACA,MAAAnvB,EAAApM,KACA,IAAA,IAAAoM,EAAA41C,cAAA,eAAA,CAAAgI,YAAA,IACA,OAEAxxB,GAAAwC,OAAA5uB,EAAAA,EAAA0c,MAAA1c,EAAA6d,OAAAsR,GACA,MAAA9P,EAAArf,EAAAkpB,UACAy8B,EAAAtmC,EAAA3C,OAAA,GAAA2C,EAAAxB,QAAA,EACA7d,EAAAgvB,QAAA,GACAn7B,EAAAmM,EAAAwuB,OAAAlJ,IACAqgC,GAAA,cAAArgC,EAAAqD,WAGArD,EAAAoe,WACApe,EAAAoe,YAEA1jC,EAAAgvB,QAAAztB,QAAA+jB,EAAA0J,cACAhvB,GACAA,EAAAgvB,QAAA15B,SAAA,CAAAkL,EAAAjL,KACAiL,EAAAolD,KAAArwD,KAEAyK,EAAA41C,cAAA,eAEAz2C,gBAAA4X,GACA,MAAA/W,EAAApM,KACAshB,EAAA,mBAAA6B,EACA,IAAA,IAAA/W,EAAA41C,cAAA,uBAAA,CAAA7+B,KAAAA,EAAA6mC,YAAA,IAAA,CAGA,IAAA,IAAAlsD,EAAA,EAAA8hB,EAAAxT,EAAA/L,KAAAY,SAAAxC,OAAAX,EAAA8hB,IAAA9hB,EACAsO,EAAA6lD,eAAAn0D,EAAAwjB,EAAA6B,EAAA,CAAApD,aAAAjiB,IAAAqlB,GAEA/W,EAAA41C,cAAA,sBAAA,CAAA7+B,KAAAA,KAEA5X,eAAA5J,EAAAwhB,GACA,MAAA/W,EAAApM,KACAy2B,EAAArqB,EAAAsqB,eAAA/0B,GACA2I,EAAA,CAAAmsB,KAAAA,EAAA90B,MAAAA,EAAAwhB,KAAAA,EAAA6mC,YAAA,IACA,IAAA59C,EAAA41C,cAAA,sBAAA13C,KAGAmsB,EAAAnC,WAAAjoB,QAAA8W,GACA7Y,EAAA0/C,YAAA,EACA59C,EAAA41C,cAAA,qBAAA13C,IAEAiB,SACA,MAAAa,EAAApM,MACA,IAAAoM,EAAA41C,cAAA,eAAA,CAAAgI,YAAA,MAGA1+C,EAAAmW,IAAArV,GACAA,EAAAyiD,WAAAvjD,EAAAoB,QAAAN,IACAd,EAAAN,MAAAoB,IAGAA,EAAAS,OACA0gD,GAAA,CAAA1mD,MAAAuF,MAGAb,OACA,MAAAa,EAAApM,KACA,IAAAlC,EACA,GAAAsO,EAAAgjD,kBAAA,CACA,MAAAtmC,MAAAA,EAAAmB,OAAAA,GAAA7d,EAAAgjD,kBACAhjD,EAAAijD,QAAAvmC,EAAAmB,GACA7d,EAAAgjD,kBAAA,KAGA,GADAhjD,EAAAmgD,QACAngD,EAAA0c,OAAA,GAAA1c,EAAA6d,QAAA,EACA,OAEA,IAAA,IAAA7d,EAAA41C,cAAA,aAAA,CAAAgI,YAAA,IACA,OAEA,MAAAkI,EAAA9lD,EAAAgvB,QACA,IAAAt9B,EAAA,EAAAA,EAAAo0D,EAAAzzD,QAAAyzD,EAAAp0D,GAAAu9B,GAAA,IAAAv9B,EACAo0D,EAAAp0D,GAAA+O,KAAAT,EAAAkpB,WAGA,IADAlpB,EAAA+lD,gBACAr0D,EAAAo0D,EAAAzzD,SAAAX,EACAo0D,EAAAp0D,GAAA+O,KAAAT,EAAAkpB,WAEAlpB,EAAA41C,cAAA,aAEAz2C,uBAAAylC,GACA,MACA/b,EADAj1B,KACA0uD,gBACA1oC,EAAA,GACA,IAAAloB,EAAA8hB,EACA,IAAA9hB,EAAA,EAAA8hB,EAAAqV,EAAAx2B,OAAAX,EAAA8hB,IAAA9hB,EAAA,CACA,MAAA24B,EAAAxB,EAAAn3B,GACAkzC,IAAAva,EAAAiZ,SACA1pB,EAAArY,KAAA8oB,GAGA,OAAAzQ,EAEAza,+BACA,OAAAvL,KAAAixC,wBAAA,GAEA1lC,gBACA,MAAAa,EAAApM,KACA,IAAA,IAAAoM,EAAA41C,cAAA,qBAAA,CAAAgI,YAAA,IACA,OAEA,MAAA/0B,EAAA7oB,EAAA8oB,+BACA,IAAA,IAAAp3B,EAAAm3B,EAAAx2B,OAAA,EAAAX,GAAA,IAAAA,EACAsO,EAAAgmD,aAAAn9B,EAAAn3B,IAEAsO,EAAA41C,cAAA,qBAEAz2C,aAAAkrB,GACA,MAAArqB,EAAApM,KACA+iB,EAAA3W,EAAA2W,IACA+I,EAAA2K,EAAA+gB,MACA6a,GAAAvmC,EAAA2rB,SACAhsB,EAAArf,EAAAkpB,UACAhrB,EAAA,CACAmsB,KAAAA,EACA90B,MAAA80B,EAAA90B,MACAqoD,YAAA,IAEA,IAAA59C,EAAA41C,cAAA,oBAAA13C,KAGA+nD,GACAxmC,GAAA9I,EAAA,CACA5X,MAAA,IAAA2gB,EAAA3gB,KAAA,EAAAsgB,EAAAtgB,KAAA2gB,EAAA3gB,KACAC,OAAA,IAAA0gB,EAAA1gB,MAAAgB,EAAA0c,MAAA2C,EAAArgB,MAAA0gB,EAAA1gB,MACAugB,KAAA,IAAAG,EAAAH,IAAA,EAAAF,EAAAE,IAAAG,EAAAH,IACAC,QAAA,IAAAE,EAAAF,OAAAxf,EAAA6d,OAAAwB,EAAAG,OAAAE,EAAAF,SAGA6K,EAAAnC,WAAAznB,OACAwlD,GACAtmC,GAAAhJ,GAEAzY,EAAA0/C,YAAA,EACA59C,EAAA41C,cAAA,mBAAA13C,IAEAiB,0BAAA7N,EAAAylB,EAAA7hB,EAAA+zB,GACA,MAAA5F,EAAA8G,GAAAC,MAAArT,GACA,MAAA,mBAAAsM,EACAA,EAAAzvB,KAAAtC,EAAA4D,EAAA+zB,GAEA,GAEA9pB,eAAAwU,GACA,MACAjb,EADA9E,KACAK,KAAAY,SAAA8e,GACAkV,EAFAj1B,KAEAsuD,UACA,IAAA73B,EAAAxB,EAAAmD,QAAAlnB,GAAAA,GAAAA,EAAAo/C,WAAAxrD,IAAAmI,MAkBA,OAjBAwpB,IACAA,EAAA,CACAt1B,KAAA,KACAd,KAAA,GACAyE,QAAA,KACAwvB,WAAA,KACAujB,OAAA,KACAzD,QAAA,KACAE,QAAA,KACAmc,MAAA3rD,GAAAA,EAAA2rD,OAAA,EACA9uD,MAAAoe,EACAuwC,SAAAxrD,EACA8tC,QAAA,GACAre,SAAA,GAEAU,EAAAtnB,KAAA8oB,IAEAA,EAEAlrB,aACA,OAAAvL,KAAA2zC,WAAA3zC,KAAA2zC,SAAA,CAAA9sC,MAAA7G,KAAAmB,KAAA,UAEAoK,yBACA,OAAAvL,KAAAk1B,+BAAAz2B,OAEA8M,iBAAAwU,GACA,MAAAjb,EAAA9E,KAAAK,KAAAY,SAAA8e,GACA,IAAAjb,EACA,OAAA,EAEA,MAAA2xB,EAAAz2B,KAAA02B,eAAA3W,GACA,MAAA,kBAAA0W,EAAAohB,QAAAphB,EAAAohB,QAAA/yC,EAAA+yC,OAEAtsC,qBAAAwU,EAAA2vB,GACA1vC,KAAA02B,eAAA3W,GACA83B,QAAAnI,EAEAnkC,qBAAA5J,GACA3B,KAAA4uD,eAAAjtD,IAAA3B,KAAA4uD,eAAAjtD,GAEA4J,kBAAA5J,GACA,OAAA3B,KAAA4uD,eAAAjtD,GAEA4J,kBAAAwU,EAAA9a,EAAAyqC,GACA,MAAAtjC,EAAApM,KACAmjB,EAAAusB,EAAA,OAAA,OACAjZ,EAAArqB,EAAAsqB,eAAA3W,GACAlU,EAAA4qB,EAAAnC,WAAAukB,wBAAA/4C,EAAAqjB,GACA9B,GAAApc,IACAwxB,EAAAp2B,KAAA4E,GAAA4yC,QAAAnI,EACAtjC,EAAA4uB,WAEA5uB,EAAAkmD,qBAAAvyC,EAAA2vB,GACA7jC,EAAAmvB,OAAAvE,EAAA,CAAAiZ,QAAAA,IACAtjC,EAAA4uB,QAAAjY,GAAAA,EAAAhD,eAAAA,EAAAoD,OAAArjB,KAGAyL,KAAAwU,EAAA9a,GACAjF,KAAAuyD,kBAAAxyC,EAAA9a,GAAA,GAEAsG,KAAAwU,EAAA9a,GACAjF,KAAAuyD,kBAAAxyC,EAAA9a,GAAA,GAEAsG,oBAAAwU,GACA,MAAA3T,EAAApM,KACAy2B,EAAArqB,EAAAkiD,WAAAliD,EAAAkiD,UAAAvuC,GACA0W,GAAAA,EAAAnC,aACAmC,EAAAnC,WAAAk+B,kBACApmD,EAAAkiD,UAAAvuC,IAGAxU,UACA,MAAAa,EAAApM,MACAU,OAAAA,EAAAqiB,IAAAA,GAAA3W,EACA,IAAAtO,EAAA8hB,EAGA,IAFAxT,EAAAq8B,OACAn9B,EAAAmnD,OAAArmD,GACAtO,EAAA,EAAA8hB,EAAAxT,EAAA/L,KAAAY,SAAAxC,OAAAX,EAAA8hB,IAAA9hB,EACAsO,EAAAikD,oBAAAvyD,GAEAsO,EAAAxM,OAAA0sD,aACA5rD,IACA0L,EAAAolD,eACA1nC,GAAAppB,EAAAqiB,GACA3W,EAAAkW,SAAAowC,eAAA3vC,GACA3W,EAAA1L,OAAA,KACA0L,EAAA2W,IAAA,MAEA3W,EAAA41C,cAAA,kBACA6L,GAAAzhD,EAAAsS,IAEAnT,iBAAAjB,GACA,OAAAtK,KAAAU,OAAAiyD,aAAAroD,GAEAiB,aACAvL,KAAA4yD,iBACA5yD,KAAAsB,QAAAoiB,WACA1jB,KAAA6yD,uBAEA7yD,KAAA6uD,UAAA,EAGAtjD,iBACA,MAAAa,EAAApM,KACA+L,EAAAK,EAAAoiD,WACAlsC,EAAAlW,EAAAkW,SAKA+M,EAAA,SAAA3xB,EAAAwT,EAAAkV,GACA1oB,EAAAm0B,QAAA3gB,EACAxT,EAAAo0B,QAAA1L,EACAha,EAAA0lD,cAAAp0D,IAEAuC,EAAAmM,EAAA9K,QAAAmhB,QAAAthB,GATA,EAAAA,EAAAkuB,KACA/M,EAAAwR,iBAAA1nB,EAAAjL,EAAAkuB,GACAtjB,EAAA5K,GAAAkuB,GAOAyjC,CAAA3xD,EAAAkuB,KAEA9jB,uBACA,MAAAa,EAAApM,KACAoM,EAAAqiD,uBACAriD,EAAAqiD,qBAAA,IAEA,MAAA1iD,EAAAK,EAAAqiD,qBACAnsC,EAAAlW,EAAAkW,SACAwwC,EAAA,CAAA3xD,EAAAkuB,KACA/M,EAAAwR,iBAAA1nB,EAAAjL,EAAAkuB,GACAtjB,EAAA5K,GAAAkuB,GAEA0jC,EAAA,CAAA5xD,EAAAkuB,KACAtjB,EAAA5K,KACAmhB,EAAAyR,oBAAA3nB,EAAAjL,EAAAkuB,UACAtjB,EAAA5K,KAGAkuB,EAAA,CAAAvG,EAAAmB,KACA7d,EAAA1L,QACA0L,EAAA4/B,OAAAljB,EAAAmB,IAGA,IAAA+oC,EACA,MAAAnE,EAAA,KACAkE,EAAA,SAAAlE,GACAziD,EAAAyiD,UAAA,EACAziD,EAAA4/B,SACA8mB,EAAA,SAAAzjC,GACAyjC,EAAA,SAAAE,IAEAA,EAAA,KACA5mD,EAAAyiD,UAAA,EACAkE,EAAA,SAAA1jC,GACAyjC,EAAA,SAAAjE,IAEAvsC,EAAA2wC,WAAA7mD,EAAA1L,QACAmuD,IAEAmE,IAGAznD,eACA,MAAAa,EAAApM,KACAC,EAAAmM,EAAAoiD,YAAA,CAAAn/B,EAAAluB,KACAiL,EAAAkW,SAAAyR,oBAAA3nB,EAAAjL,EAAAkuB,MAEAjjB,EAAAoiD,WAAA,GACAvuD,EAAAmM,EAAAqiD,sBAAA,CAAAp/B,EAAAluB,KACAiL,EAAAkW,SAAAyR,oBAAA3nB,EAAAjL,EAAAkuB,MAEAjjB,EAAAqiD,0BAAA3uD,EAEAyL,iBAAAoB,EAAAwW,EAAAo4B,GACA,MAAA1d,EAAA0d,EAAA,MAAA,SACA,IAAA9kB,EAAA7pB,EAAA9O,EAAA8hB,EAKA,IAJA,YAAAuD,IACAsT,EAAAz2B,KAAA02B,eAAA/pB,EAAA,GAAAoT,cACA0W,EAAAnC,WAAA,IAAAuJ,EAAA,wBAEA//B,EAAA,EAAA8hB,EAAAjT,EAAAlO,OAAAX,EAAA8hB,IAAA9hB,EAAA,CACA8O,EAAAD,EAAA7O,GACA,MAAAw2B,EAAA1nB,GAAA5M,KAAA02B,eAAA9pB,EAAAmT,cAAAuU,WACAA,GACAA,EAAAuJ,EAAA,cAAAjxB,EAAAikB,QAAAjkB,EAAAmT,aAAAnT,EAAAjL,QAIA4J,oBACA,OAAAvL,KAAA8M,SAAA,GAEAvB,kBAAA2nD,GACA,MAAA9mD,EAAApM,KACAmzD,EAAA/mD,EAAAU,SAAA,GACA0iC,EAAA0jB,EAAA5iD,KAAA,EAAAyP,aAAAA,EAAApe,MAAAA,MACA,MAAA80B,EAAArqB,EAAAsqB,eAAA3W,GACA,IAAA0W,EACA,MAAA,IAAAr4B,MAAA,6BAAA2hB,GAEA,MAAA,CACAA,aAAAA,EACA8Q,QAAA4F,EAAAp2B,KAAAsB,GACAA,MAAAA,OAGA8d,GAAA+vB,EAAA2jB,KAEA/mD,EAAAU,QAAA0iC,EACApjC,EAAAgnD,mBAAA5jB,EAAA2jB,IAGA5nD,cAAAq+C,EAAAt/C,EAAA8tB,GACA,OAAAp4B,KAAA2uD,SAAA0E,OAAArzD,KAAA4pD,EAAAt/C,EAAA8tB,GAEA7sB,mBAAAikC,EAAA2jB,EAAAG,GACA,MAAAlnD,EAAApM,KACAuzD,EAAAnnD,EAAA9K,QAAAuhB,MACAm5B,EAAA,CAAA79C,EAAAuQ,IAAAvQ,EAAAi6B,QAAAlnB,IAAAxC,EAAA+7C,MAAArkC,GAAAlV,EAAA6O,eAAAqG,EAAArG,cAAA7O,EAAAvP,QAAAykB,EAAAzkB,UACA6xD,EAAAxX,EAAAmX,EAAA3jB,GACAikB,EAAAH,EAAA9jB,EAAAwM,EAAAxM,EAAA2jB,GACAK,EAAA/0D,QACA2N,EAAAsnD,iBAAAF,EAAAD,EAAApwC,MAAA,GAEAswC,EAAAh1D,QAAA80D,EAAApwC,MACA/W,EAAAsnD,iBAAAD,EAAAF,EAAApwC,MAAA,GAGA5X,cAAA7N,EAAA41D,GACA,MAAAlnD,EAAApM,KACAsK,EAAA,CAAAkD,MAAA9P,EAAA41D,OAAAA,EAAAtJ,YAAA,GACA2J,EAAA5J,IAAAA,EAAAzoD,QAAAmhB,QAAAziB,KAAAsB,QAAAmhB,QAAAqW,SAAAp7B,EAAAyD,MACA,IAAA,IAAAiL,EAAA41C,cAAA,cAAA13C,EAAAqpD,GACA,OAEA,MAAA54B,EAAA3uB,EAAAwnD,aAAAl2D,EAAA41D,GAMA,OALAhpD,EAAA0/C,YAAA,EACA59C,EAAA41C,cAAA,aAAA13C,EAAAqpD,IACA54B,GAAAzwB,EAAAywB,UACA3uB,EAAAqjD,SAEArjD,EAEAb,aAAA7N,EAAA41D,GACA,MAAAlnD,EAAApM,MACA8M,QAAAqmD,EAAA,GAAA7xD,QAAAA,GAAA8K,EACAmnD,EAAAjyD,EAAAuhB,MACAwS,EAAAi+B,EACA,IAAA9jB,EAAA,GACAzU,GAAA,EACA84B,EAAA,KAkBA,MAjBA,aAAAn2D,EAAAyD,OACAquC,EAAApjC,EAAA0nD,0BAAAp2D,EAAA61D,EAAApwC,KAAAowC,EAAAl+B,GACAw+B,EAAA,UAAAn2D,EAAAyD,KAAAiL,EAAAmiD,WAAA7wD,GAEA0O,EAAAmiD,WAAA,KACAhjC,GAAA7tB,EAAA0O,EAAAkpB,UAAAlpB,EAAAmpB,eACAxxB,EAAAzC,EAAAgiB,QAAA,CAAA5lB,EAAA8xC,EAAApjC,GAAAA,GACA,YAAA1O,EAAAyD,MAAA,UAAAzD,EAAAyD,MAAA,gBAAAzD,EAAAyD,MACA4C,EAAAzC,EAAAiiB,QAAA,CAAA7lB,EAAA8xC,EAAApjC,GAAAA,IAGA2uB,GAAAtb,GAAA+vB,EAAA2jB,IACAp4B,GAAAu4B,KACAlnD,EAAAU,QAAA0iC,EACApjC,EAAAgnD,mBAAA5jB,EAAA2jB,EAAAG,IAEAlnD,EAAAmiD,WAAAsF,EACA94B,GAGA,MAAAg5B,GAAA,IAAA9zD,EAAAV,GAAAsuD,WAAAhnD,GAAAA,EAAA8nD,SAAA8C,eACAntC,IAAA,EA0CA,SAAA0vC,KACA,MAAA,IAAA51D,MAAA,mFA1CAoC,OAAA4jB,iBAAA7kB,GAAA,CACA2iB,SAAA,CACAoC,WAAAA,GACAtgB,MAAAke,IAEA2rC,UAAA,CACAvpC,WAAAA,GACAtgB,MAAA6pD,IAEAnsC,UAAA,CACA4C,WAAAA,GACAtgB,MAAA0d,IAEAmnC,SAAA,CACAvkC,WAAAA,GACAtgB,MAAA6kD,IAEAoL,QAAA,CACA3vC,WAAAA,GACAtgB,MArxBA,SAuxBA8pD,SAAA,CACAxpC,WAAAA,GACAtgB,MAAA8pD,IAEA1uD,SAAA,CACAklB,WAAAA,GACAtgB,MAAA,IAAA2I,KACAk8C,GAAA54B,OAAAtjB,GACAonD,OAGAG,WAAA,CACA5vC,WAAAA,GACAtgB,MAAA,IAAA2I,KACAk8C,GAAA4J,UAAA9lD,GACAonD,SAQA,MAAAI,GACA5oD,YAAAjK,GACAtB,KAAAsB,QAAAA,GAAA,GAEAiK,UACA,OAAAyoD,KAEAzoD,MAAAvH,EAAAiiC,GACA,OAAA+tB,KAEAzoD,OAAA6oD,EAAAnuB,GACA,OAAA+tB,KAEAzoD,IAAA6oD,EAAAC,EAAAC,GACA,OAAAN,KAEAzoD,KAAApN,EAAAuQ,EAAA4lD,GACA,OAAAN,KAEAzoD,QAAA6oD,EAAAE,EAAAC,GACA,OAAAP,KAEAzoD,MAAA6oD,EAAAE,GACA,OAAAN,MAGAG,GAAA52B,SAAA,SAAAi3B,GACAh0D,OAAAC,OAAA0zD,GAAAjrD,UAAAsrD,IAEA,IAAAC,GAAA,CACAC,MAAAP,IAcA,SAAAQ,GAAAhxC,GACA,MAAA1B,EAZA,SAAA0B,GACA,IAAAA,EAAAo8B,OAAA6U,KAAA,CACA,MAAAzU,EAAAx8B,EAAAouB,wBAAA,OACA,IAAA9vB,EAAA,GACA,IAAA,IAAAnkB,EAAA,EAAA8hB,EAAAugC,EAAA1hD,OAAAX,EAAA8hB,EAAA9hB,IACAmkB,EAAAA,EAAA6Z,OAAAqkB,EAAAriD,GAAAw2B,WAAAugC,mBAAAlxC,IAEAA,EAAAo8B,OAAA6U,KAAA7kC,GAAA9N,EAAAiE,MAAA,CAAA/nB,EAAAuQ,IAAAvQ,EAAAuQ,KAEA,OAAAiV,EAAAo8B,OAAA6U,KAGAE,CAAAnxC,GACA,IACA7lB,EAAA8hB,EAAAm1C,EAAAlyB,EADAx/B,EAAAsgB,EAAAs3B,QAEA,MAAA+Z,EAAA,KACA,QAAAD,IAAA,QAAAA,IAGA1zC,GAAAwhB,KACAx/B,EAAAZ,KAAAY,IAAAA,EAAAZ,KAAA6jB,IAAAyuC,EAAAlyB,IAAAx/B,IAEAw/B,EAAAkyB,IAEA,IAAAj3D,EAAA,EAAA8hB,EAAAqC,EAAAxjB,OAAAX,EAAA8hB,IAAA9hB,EACAi3D,EAAApxC,EAAA4gC,iBAAAtiC,EAAAnkB,IACAk3D,IAGA,IADAnyB,OAAA/iC,EACAhC,EAAA,EAAA8hB,EAAA+D,EAAAq2B,MAAAv7C,OAAAX,EAAA8hB,IAAA9hB,EACAi3D,EAAApxC,EAAA46B,gBAAAzgD,GACAk3D,IAEA,OAAA3xD,EA2DA,SAAA4xD,GAAA7pB,EAAAx+B,EAAAilC,EAAA/zC,GAMA,OALAyC,EAAA6qC,GAtBA,SAAAA,EAAAx+B,EAAAilC,EAAA/zC,GACA,MAAAo3D,EAAArjB,EAAAyE,MAAAlL,EAAA,GAAAttC,GACAq3D,EAAAtjB,EAAAyE,MAAAlL,EAAA,GAAAttC,GACAuF,EAAAZ,KAAAY,IAAA6xD,EAAAC,GACA5yD,EAAAE,KAAAF,IAAA2yD,EAAAC,GACA,IAAAC,EAAA/xD,EACAgyD,EAAA9yD,EACAE,KAAA6jB,IAAAjjB,GAAAZ,KAAA6jB,IAAA/jB,KACA6yD,EAAA7yD,EACA8yD,EAAAhyD,GAEAuJ,EAAAilC,EAAA7vC,MAAAqzD,EACAzoD,EAAA0oD,QAAA,CACAF,SAAAA,EACAC,OAAAA,EACArqD,MAAAkqD,EACAjqD,IAAAkqD,EACA9xD,IAAAA,EACAd,IAAAA,GAKAgzD,CAAAnqB,EAAAx+B,EAAAilC,EAAA/zC,GAEA8O,EAAAilC,EAAA7vC,MAAA6vC,EAAAyE,MAAAlL,EAAAttC,GAEA8O,EAEA,SAAA4oD,GAAA/+B,EAAAp2B,EAAA2K,EAAAguB,GACA,MAAAxE,EAAAiC,EAAAjC,OACAqd,EAAApb,EAAAob,OACAxwC,EAAAmzB,EAAA4hB,YACAC,EAAA7hB,IAAAqd,EACA9sC,EAAA,GACA,IAAAjH,EAAA8hB,EAAAhT,EAAAw+B,EACA,IAAAttC,EAAAkN,EAAA4U,EAAA5U,EAAAguB,EAAAl7B,EAAA8hB,IAAA9hB,EACAstC,EAAA/qC,EAAAvC,GACA8O,EAAA,GACAA,EAAA4nB,EAAAxyB,MAAAq0C,GAAA7hB,EAAA8hB,MAAAj1C,EAAAvD,GAAAA,GACAiH,EAAA4I,KAAAsnD,GAAA7pB,EAAAx+B,EAAAilC,EAAA/zC,IAEA,OAAAiH,EAEA,SAAA0wD,GAAAC,GACA,OAAAA,QAAA51D,IAAA41D,EAAAN,eAAAt1D,IAAA41D,EAAAL,OA4BA,SAAAM,GAAArmB,EAAAhuC,EAAAs3B,EAAAj3B,GACA,IAAAk8C,EAAAv8C,EAAAs0D,cACA,MAAAjmC,EAAA,GACA,IAAAkuB,EAEA,YADAvO,EAAAsmB,cAAAjmC,GAGA,MAAA3kB,MAAAA,EAAAC,IAAAA,EAAAuU,QAAAA,EAAAmM,IAAAA,EAAAC,OAAAA,GA3BA,SAAA0jB,GACA,IAAA9vB,EAAAxU,EAAAC,EAAA0gB,EAAAC,EAiBA,OAhBA0jB,EAAA9V,YACAha,EAAA8vB,EAAA5f,KAAA4f,EAAAp+B,EACAlG,EAAA,OACAC,EAAA,UAEAuU,EAAA8vB,EAAA5f,KAAA4f,EAAAlpB,EACApb,EAAA,SACAC,EAAA,OAEAuU,GACAmM,EAAA,MACAC,EAAA,UAEAD,EAAA,QACAC,EAAA,OAEA,CAAA5gB,MAAAA,EAAAC,IAAAA,EAAAuU,QAAAA,EAAAmM,IAAAA,EAAAC,OAAAA,GASAiqC,CAAAvmB,GACA,WAAAuO,GAAAjlB,IACA0W,EAAAwmB,oBAAA,GACAl9B,EAAA2Z,MAAA,KAAA5wC,EACAk8C,EAAAlyB,GACAiN,EAAA4Z,SAAA,KAAA7wC,EACAk8C,EAAAjyB,GAEA+D,EAAAomC,GAAAnqC,EAAA5gB,EAAAC,EAAAuU,KAAA,EACAq+B,EAAAlyB,IAGAgE,EAAAomC,GAAAlY,EAAA7yC,EAAAC,EAAAuU,KAAA,EACA8vB,EAAAsmB,cAAAjmC,EAEA,SAAAomC,GAAAlY,EAAA1/C,EAAAuQ,EAAA8Q,GASA,IAAAw2C,EAAAl2C,EAAAm2C,EAFA,OANAz2C,GAQAy2C,EAPAvnD,EACAmvC,EAAAqY,GADArY,GAOAmY,EAPAnY,MAOA/9B,EAPA3hB,GAQA83D,EAAAD,IAAAC,EAAAn2C,EAAAk2C,EAPAtnD,EAAAvQ,IAEA0/C,EAAAqY,GAAArY,EAAA1/C,EAAAuQ,GAEAmvC,EAKA,SAAAqY,GAAAjnD,EAAAjE,EAAAC,GACA,MAAA,UAAAgE,EAAAjE,EAAA,QAAAiE,EAAAhE,EAAAgE,EAEA,MAAAknD,WAAAljB,GACA1nC,mBAAAkrB,EAAAp2B,EAAA2K,EAAAguB,GACA,OAAAw8B,GAAA/+B,EAAAp2B,EAAA2K,EAAAguB,GAEAztB,eAAAkrB,EAAAp2B,EAAA2K,EAAAguB,GACA,OAAAw8B,GAAA/+B,EAAAp2B,EAAA2K,EAAAguB,GAEAztB,gBAAAkrB,EAAAp2B,EAAA2K,EAAAguB,GACA,MAAAxE,OAAAA,EAAAqd,OAAAA,GAAApb,GACA8f,SAAAA,EAAA,IAAAC,SAAAA,EAAA,KAAAx2C,KAAAszC,SACA8iB,EAAA,MAAA5hC,EAAAxyB,KAAAu0C,EAAAC,EACA6f,EAAA,MAAAxkB,EAAA7vC,KAAAu0C,EAAAC,EACAzxC,EAAA,GACA,IAAAjH,EAAA8hB,EAAAhT,EAAA9E,EACA,IAAAhK,EAAAkN,EAAA4U,EAAA5U,EAAAguB,EAAAl7B,EAAA8hB,IAAA9hB,EACAgK,EAAAzH,EAAAvC,GACA8O,EAAA,GACAA,EAAA4nB,EAAAxyB,MAAAwyB,EAAA8hB,MAAAr1B,GAAAnZ,EAAAsuD,GAAAt4D,GACAiH,EAAA4I,KAAAsnD,GAAAh0C,GAAAnZ,EAAAuuD,GAAAzpD,EAAAilC,EAAA/zC,IAEA,OAAAiH,EAEAwG,sBAAAia,EAAA7B,EAAA5e,EAAA6zB,GACAimB,MAAAxH,sBAAA7xB,EAAA7B,EAAA5e,EAAA6zB,GACA,MAAA88B,EAAA3wD,EAAAuwD,QACAI,GAAA/xC,IAAA3jB,KAAAy0B,YAAAod,SACArsB,EAAAniB,IAAAZ,KAAAY,IAAAmiB,EAAAniB,IAAAqyD,EAAAryD,KACAmiB,EAAAjjB,IAAAE,KAAAF,IAAAijB,EAAAjjB,IAAAmzD,EAAAnzD,MAGAgJ,iBACA,OAAA,EAEAA,iBAAA5J,GACA,MACA80B,EADAz2B,KACAy0B,aACAD,OAAAA,EAAAqd,OAAAA,GAAApb,EACA1xB,EAHA/E,KAGAs3C,UAAA31C,GACA+zD,EAAA3wD,EAAAuwD,QACAtxD,EAAAyxD,GAAAC,GACA,IAAAA,EAAA1qD,MAAA,KAAA0qD,EAAAzqD,IAAA,IACA,GAAA4mC,EAAA0F,iBAAAxyC,EAAA8sC,EAAA7vC,OACA,MAAA,CACA6C,MAAA,GAAA2vB,EAAA+iB,iBAAAxyC,EAAAyvB,EAAAxyB,OACAgC,MAAAA,GAGAuH,aACA,MAAAa,EAAApM,KACAoM,EAAAsnC,qBAAA,EACAmL,MAAAhL,aACAznC,EAAAqoB,YACAmE,MAAAxsB,EAAA6nC,aAAArb,MAEArtB,OAAA4X,GACA,MACAsT,EADAz2B,KACAy0B,YADAz0B,KAEAu5C,eAAA9iB,EAAAp2B,KAAA,EAAAo2B,EAAAp2B,KAAA5B,OAAA0kB,GAEA5X,eAAA+qD,EAAAtrD,EAAAguB,EAAA7V,GACA,MAAA/W,EAAApM,KACAgxD,EAAA,UAAA7tC,GACAxhB,MAAAA,EAAA8yB,aAAAod,OAAAA,IAAAzlC,EACAsjB,EAAAmiB,EAAA0kB,eACA/8B,EAAAqY,EAAApW,eACA+6B,EAAApqD,EAAAqqD,YACAC,EAAAtqD,EAAA2rC,0BAAA/sC,EAAAmY,GACAw1B,EAAAvsC,EAAA0sC,iBAAA4d,GACAC,EAAAvqD,EAAAuqD,eAAAxzC,EAAAw1B,GACAvsC,EAAAwqD,oBAAAje,EAAAx1B,EAAAuzC,GACA,IAAA,IAAA54D,EAAAkN,EAAAlN,EAAAkN,EAAAguB,EAAAl7B,IAAA,CACA,MAAAiH,EAAAqH,EAAAkrC,UAAAx5C,GACA+4D,EAAA7F,GAAAryC,EAAA5Z,EAAA8sC,EAAA7vC,OAAA,CAAA0tB,KAAAA,EAAAonC,KAAApnC,GAAAtjB,EAAA2qD,yBAAAj5D,GACAk5D,EAAA5qD,EAAA6qD,yBAAAn5D,EAAA04D,GACA59B,GAAA7zB,EAAAktC,SAAA,IAAAJ,EAAA7vC,MACAstC,EAAA,CACA9V,WAAAA,EACA9J,KAAAmnC,EAAAnnC,KACAomC,oBAAAl9B,GAAA68B,GAAA1wD,EAAAuwD,UAAA3zD,IAAAi3B,EAAA2Z,MAAA5wC,IAAAi3B,EAAA4Z,QACAthC,EAAAsoB,EAAAq9B,EAAAC,KAAAE,EAAA/gC,OACA7P,EAAAoT,EAAAw9B,EAAA/gC,OAAA4gC,EAAAC,KACA7sC,OAAAuP,EAAAw9B,EAAAx1C,KAAA/e,KAAA6jB,IAAAuwC,EAAAr1C,MACAsH,MAAA0Q,EAAA/2B,KAAA6jB,IAAAuwC,EAAAr1C,MAAAw1C,EAAAx1C,MAEAm1C,IACArnB,EAAAhuC,QAAAq3C,GAAAvsC,EAAA2rC,0BAAAj6C,EAAAw4D,EAAAx4D,GAAA0xC,OAAA,SAAArsB,IAEAwyC,GAAArmB,EAAAA,EAAAhuC,SAAAg1D,EAAAx4D,GAAAwD,QAAAs3B,EAAAj3B,GACAyK,EAAA8qD,cAAAZ,EAAAx4D,GAAAA,EAAAwxC,EAAAnsB,IAGA5X,WAAAi9B,EAAAvjC,GACA,MAEAuvB,EAFAx0B,KACAy0B,YACAD,OACAS,EAAAT,EAAAud,wBAHA/xC,KAGAqzC,OACA9B,EAAA/c,EAAAlzB,QAAAiwC,QACA3xB,EAAAqV,EAAAx2B,OACAi6B,EAAA,GACA,IAAA56B,EAAA8O,EACA,IAAA9O,EAAA,EAAAA,EAAA8hB,IAAA9hB,EAEA,GADA8O,EAAAqoB,EAAAn3B,GACA8O,EAAA0nB,WAAAhzB,QAAA61D,QAAA,CAGA,QAAA,IAAAlyD,EAAA,CACA,MAAA6Y,EAAAlR,EAAA0nB,WAAAgjB,UAAAryC,GACA2H,EAAA0nB,WAAAG,YAAAod,OAAA7vC,MAEA,GAAA2c,EAAAb,IAAAla,MAAAka,GACA,SAOA,KAJA,IAAAyzB,IAAA,IAAA7Y,EAAApY,QAAA1T,EAAAgsB,aACA94B,IAAAyxC,QAAAzxC,IAAA8M,EAAAgsB,QACAF,EAAA/qB,KAAAf,EAAAgsB,OAEAhsB,EAAAjL,QAAA6mC,EACA,MAMA,OAHA9P,EAAAj6B,QACAi6B,EAAA/qB,UAAA7N,GAEA44B,EAEAntB,eAAA5J,GACA,OAAA3B,KAAAo3D,gBAAAt3D,EAAA6B,GAAAlD,OAEA8M,eAAAwU,EAAAxW,EAAAtE,GACA,MAAAyzB,EAAA14B,KAAAo3D,WAAAr3C,EAAA9a,GACAtD,OAAA7B,IAAAyJ,EACAmvB,EAAApY,QAAA/W,IACA,EACA,OAAA,IAAA5H,EACA+2B,EAAAj6B,OAAA,EACAkD,EAEA4J,YACA,MAAAa,EAAApM,KACA4sB,EAAAxgB,EAAA9K,QACAm1B,EAAArqB,EAAAqoB,YACAD,EAAAiC,EAAAjC,OACA6iC,EAAA,GACA,IAAAv5D,EAAA8hB,EACA,IAAA9hB,EAAA,EAAA8hB,EAAA6W,EAAAp2B,KAAA5B,OAAAX,EAAA8hB,IAAA9hB,EACAu5D,EAAA1pD,KAAA6mB,EAAA+vB,iBAAAn4C,EAAAkrC,UAAAx5C,GAAA02B,EAAAxyB,MAAAlE,IAEA,MAAAw5D,EAAA1qC,EAAA0qC,aAEA,MAAA,CACAj0D,IAFAi0D,GAAA3C,GAAAngC,GAGA6iC,OAAAA,EACArsD,MAAAwpB,EAAA4pB,YACAnzC,IAAAupB,EAAA6pB,UACAkZ,WAAAnrD,EAAAorD,iBACA7zC,MAAA6Q,EACA2iC,QAAAvqC,EAAAuqC,QACAz6C,MAAA46C,EAAA,EAAA1qC,EAAA6qC,mBAAA7qC,EAAA8qC,eAGAnsD,yBAAA5J,GACA,MAAAyK,EAAApM,MACAy0B,aAAAod,OAAAA,EAAAkC,SAAAA,GAAAzyC,SAAAouB,KAAAioC,EAAAC,aAAAA,IAAAxrD,EACAyrD,EAAAF,GAAA,EACA5yD,EAAAqH,EAAAkrC,UAAA31C,GACA+zD,EAAA3wD,EAAAuwD,QACAwC,EAAArC,GAAAC,GACA,IAGAoB,EAAAt1C,EAHAxd,EAAAe,EAAA8sC,EAAA7vC,MACAgJ,EAAA,EACAvM,EAAAs1C,EAAA3nC,EAAA8kC,WAAAW,EAAA9sC,EAAAgvC,GAAA/vC,EAEAvF,IAAAuF,IACAgH,EAAAvM,EAAAuF,EACAvF,EAAAuF,GAEA8zD,IACA9zD,EAAA0xD,EAAAN,SACA32D,EAAAi3D,EAAAL,OAAAK,EAAAN,SACA,IAAApxD,GAAAshB,GAAAthB,KAAAshB,GAAAowC,EAAAL,UACArqD,EAAA,GAEAA,GAAAhH,GAEA,MAAAkxD,EAAAv2C,EAAAg5C,IAAAG,EAAA9sD,EAAA2sD,EACA,IAAAjoC,EAAAmiB,EAAA0S,iBAAA2Q,GAcA,GAZA4B,EADA1qD,EAAAvF,MAAAkxD,kBAAAp2D,GACAkwC,EAAA0S,iBAAAv5C,EAAAvM,GAEAixB,EAEAlO,EAAAs1C,EAAApnC,EACAjtB,KAAA6jB,IAAA9E,GAAAo2C,IACAp2C,EAhQA,SAAAA,EAAAqwB,EAAAgmB,GACA,OAAA,IAAAr2C,EACA8D,GAAA9D,IAEAqwB,EAAApW,eAAA,GAAA,IAAAoW,EAAAxuC,KAAAw0D,EAAA,GAAA,GA4PAG,CAAAx2C,EAAAqwB,EAAAgmB,GAAAD,EACA5zD,IAAA6zD,IACAnoC,GAAAlO,EAAA,GAEAs1C,EAAApnC,EAAAlO,GAEAkO,IAAAmiB,EAAA0S,iBAAAsT,GAAA,CACA,MAAAI,EAAA3yC,GAAA9D,GAAAqwB,EAAAqmB,qBAAAL,GAAA,EACAnoC,GAAAuoC,EACAz2C,GAAAy2C,EAEA,MAAA,CACAz2C,KAAAA,EACAkO,KAAAA,EACAonC,KAAAA,EACA7gC,OAAA6gC,EAAAt1C,EAAA,GAGAjW,yBAAA5J,EAAA60D,GACA,MAAApqD,EAAApM,KACA2jB,EAAA6yC,EAAA7yC,MACAriB,EAAA8K,EAAA9K,QACA62D,EAAA72D,EAAA62D,SACAC,EAAAl5C,EAAA5d,EAAA82D,gBAAAC,EAAAA,GACA,IAAApiC,EAAAzU,EACA,GAAAg1C,EAAAW,QAAA,CACA,MAAAI,EAAAY,EAAA/rD,EAAAorD,eAAA71D,GAAA60D,EAAAe,WACA/xC,EAAA,SAAAlkB,EAAAg2D,aA9VA,SAAA31D,EAAA60D,EAAAl1D,EAAAi2D,GACA,MAAAF,EAAAb,EAAAa,OACAtC,EAAAsC,EAAA11D,GACA,IAAAkhC,EAAAlhC,EAAA,EAAA01D,EAAA11D,EAAA,GAAA,KACAk/B,EAAAl/B,EAAA01D,EAAA54D,OAAA,EAAA44D,EAAA11D,EAAA,GAAA,KACA,MAAA22D,EAAAh3D,EAAAm2D,mBACA,OAAA50B,IACAA,EAAAkyB,GAAA,OAAAl0B,EAAA21B,EAAAvrD,IAAAurD,EAAAxrD,MAAA61B,EAAAk0B,IAEA,OAAAl0B,IACAA,EAAAk0B,EAAAA,EAAAlyB,GAEA,MAAA73B,EAAA+pD,GAAAA,EAAAtyD,KAAAY,IAAAw/B,EAAAhC,IAAA,EAAAy3B,EAEA,MAAA,CACAC,MAFA91D,KAAA6jB,IAAAua,EAAAgC,GAAA,EAAAy1B,EAEAf,EACA76C,MAAApb,EAAAo2D,cACA1sD,MAAAA,GA8UAwtD,CAAA72D,EAAA60D,EAAAl1D,EAAAi2D,GA/WA,SAAA51D,EAAA60D,EAAAl1D,EAAAi2D,GACA,MAAAkB,EAAAn3D,EAAAg2D,aACA,IAAA91C,EAAA9E,EAQA,OAPAiC,EAAA85C,IACAj3C,EAAAg1C,EAAAnzD,IAAA/B,EAAAm2D,mBACA/6C,EAAApb,EAAAo2D,gBAEAl2C,EAAAi3C,EAAAlB,EACA76C,EAAA,GAEA,CACA67C,MAAA/2C,EAAA+1C,EACA76C,MAAAA,EACA1R,MAAAwrD,EAAAa,OAAA11D,GAAA6f,EAAA,GAmWAk3C,CAAA/2D,EAAA60D,EAAAl1D,EAAAi2D,GACAoB,EAAAvsD,EAAAwsD,eAAAxsD,EAAAzK,MAAAyK,EAAAqoB,YAAAmE,MAAAu/B,EAAAx2D,OAAA7B,GACAm2B,EAAAzQ,EAAAxa,MAAAwa,EAAA+yC,MAAAI,EAAAnzC,EAAA+yC,MAAA,EACA/2C,EAAA/e,KAAAY,IAAA+0D,EAAA5yC,EAAA+yC,MAAA/yC,EAAA9I,YAEAuZ,EAAAtS,EAAA4gC,iBAAAn4C,EAAAkrC,UAAA31C,GAAAgiB,EAAA3hB,MAAAL,GACA6f,EAAA/e,KAAAY,IAAA+0D,EAAA5B,EAAAnzD,IAAAmzD,EAAA95C,OAEA,MAAA,CACAgT,KAAAuG,EAAAzU,EAAA,EACAs1C,KAAA7gC,EAAAzU,EAAA,EACAyU,OAAAA,EACAzU,KAAAA,GAGAjW,OACA,MAAAa,EAAApM,KACAy2B,EAAArqB,EAAAqoB,YACAod,EAAApb,EAAAob,OACAgnB,EAAApiC,EAAAp2B,KACAuf,EAAAi5C,EAAAp6D,OACA,IAAAX,EAAA,EACA,KAAAA,EAAA8hB,IAAA9hB,EACA,OAAAsO,EAAAkrC,UAAAx5C,GAAA+zC,EAAA7vC,OACA62D,EAAA/6D,GAAA+O,KAAAT,EAAA8mC,OAKAijB,GAAAz3C,GAAA,MACAy3C,GAAAj0C,SAAA,CACAozB,oBAAA,EACA8C,gBAAA,MACAqf,mBAAA,GACAC,cAAA,GACAP,SAAA,EACA1nB,WAAA,CACAF,QAAA,CACApuC,KAAA,SACAmuC,WAAA,CAAA,IAAA,IAAA,OAAA,QAAA,aAIA6mB,GAAAz0C,UAAA,CACAkC,OAAA,CACAk1C,QAAA,CACA33D,KAAA,WACAuF,QAAA,EACA81C,KAAA,CACA91C,QAAA,IAGAqyD,QAAA,CACA53D,KAAA,SACAo7C,aAAA,KAKA,MAAAyc,WAAA/lB,GACA1nC,aACAvL,KAAA0zC,qBAAA,EACAmL,MAAAhL,aAEAtoC,gBAAAkrB,EAAAp2B,EAAA2K,EAAAguB,GACA,MAAA6b,OAAAA,EAAAE,OAAAA,GAAAte,GACA8f,SAAAA,EAAA,IAAAC,SAAAA,EAAA,KAAAx2C,KAAAszC,SACAvuC,EAAA,GACA,IAAAjH,EAAA8hB,EAAAhT,EACA,IAAA9O,EAAAkN,EAAA4U,EAAA5U,EAAAguB,EAAAl7B,EAAA8hB,IAAA9hB,EACA8O,EAAAvM,EAAAvC,GACAiH,EAAA4I,KAAA,CACAuD,EAAA2jC,EAAAyB,MAAAr1B,GAAArU,EAAA2pC,GAAAz4C,GACAsoB,EAAA2uB,EAAAuB,MAAAr1B,GAAArU,EAAA4pC,GAAA14C,GACAw3D,QAAA1oD,GAAAA,EAAAnP,IAAAmP,EAAAnP,IAGA,OAAAsH,EAEAwG,iBACA,MAAAlL,KAAAA,EAAAuyC,QAAAA,GAAA5yC,KAAAy0B,YACA,IAAAlyB,EAAA,EACA,IAAA,IAAAzE,EAAAuC,EAAA5B,OAAA,EAAAX,GAAA,IAAAA,EACAyE,EAAAE,KAAAF,IAAAA,EAAAlC,EAAAvC,GAAA0jB,OAAA,EAAAoxB,EAAA90C,GAAAw3D,SAEA,OAAA/yD,EAAA,GAAAA,EAEAgJ,iBAAA5J,GACA,MACA80B,EADAz2B,KACAy0B,aACAogB,OAAAA,EAAAE,OAAAA,GAAAte,EACA1xB,EAHA/E,KAGAs3C,UAAA31C,GACAuP,EAAA2jC,EAAA0C,iBAAAxyC,EAAAmM,GACAkV,EAAA2uB,EAAAwC,iBAAAxyC,EAAAqhB,GACA3oB,EAAAsH,EAAAuwD,QACA,MAAA,CACAzwD,MAAA4xB,EAAA5xB,MACAb,MAAA,IAAAkN,EAAA,KAAAkV,GAAA3oB,EAAA,KAAAA,EAAA,IAAA,KAGA8N,OAAA4X,GACA,MACAmd,EADAtgC,KACAy0B,YAAAp0B,KADAL,KAEAu5C,eAAAjZ,EAAA,EAAAA,EAAA7hC,OAAA0kB,GAEA5X,eAAA+0B,EAAAt1B,EAAAguB,EAAA7V,GACA,MAAA/W,EAAApM,KACAgxD,EAAA,UAAA7tC,GACAqR,OAAAA,EAAAqd,OAAAA,GAAAzlC,EAAAqoB,YACAiiC,EAAAtqD,EAAA2rC,0BAAA/sC,EAAAmY,GACAw1B,EAAAvsC,EAAA0sC,iBAAA4d,GACAC,EAAAvqD,EAAAuqD,eAAAxzC,EAAAw1B,GACAzG,EAAA1d,EAAAxyB,KACAmwC,EAAAN,EAAA7vC,KACA,IAAA,IAAAlE,EAAAkN,EAAAlN,EAAAkN,EAAAguB,EAAAl7B,IAAA,CACA,MAAA0tB,EAAA8U,EAAAxiC,GACAiH,GAAAisD,GAAA5kD,EAAAkrC,UAAAx5C,GACAwxC,EAAA,GACAnN,EAAAmN,EAAA4C,GAAA8e,EAAAx8B,EAAAykC,mBAAA,IAAAzkC,EAAA+vB,iBAAAx/C,EAAAmtC,IACA9P,EAAAkN,EAAA6C,GAAA6e,EAAAnf,EAAA0kB,eAAA1kB,EAAA0S,iBAAAx/C,EAAAotC,IACA7C,EAAAna,KAAAvxB,MAAAu+B,IAAAv+B,MAAAw+B,GACAu0B,IACArnB,EAAAhuC,QAAA8K,EAAA2rC,0BAAAj6C,EAAA0tB,EAAAgkB,OAAA,SAAArsB,GACA6tC,IACA1hB,EAAAhuC,QAAAkpB,OAAA,IAGApe,EAAA8qD,cAAA1rC,EAAA1tB,EAAAwxC,EAAAnsB,GAEA/W,EAAAwqD,oBAAAje,EAAAx1B,EAAAuzC,GAEAnrD,0BAAA5J,EAAAwhB,GACA,MAAApe,EAAA/E,KAAAs3C,UAAA31C,GACA,IAAAsgB,EAAA48B,MAAA9G,0BAAAp2C,EAAAwhB,GACAlB,EAAAkuB,UACAluB,EAAAzhB,OAAAC,OAAA,GAAAwhB,EAAA,CAAAkuB,SAAA,KAEA,MAAA3lB,EAAAvI,EAAAuI,OAKA,MAJA,WAAArH,IACAlB,EAAAuI,OAAA,GAEAvI,EAAAuI,QAAAtL,EAAAna,GAAAA,EAAAuwD,QAAA9qC,GACAvI,GAGA+2C,GAAAt6C,GAAA,SACAs6C,GAAA92C,SAAA,CACAozB,oBAAA,EACA8C,gBAAA,QACA3I,WAAA,CACAF,QAAA,CACApuC,KAAA,SACAmuC,WAAA,CAAA,IAAA,IAAA,cAAA,aAIA0pB,GAAAt3C,UAAA,CACAkC,OAAA,CACA1S,EAAA,CACA/P,KAAA,UAEAilB,EAAA,CACAjlB,KAAA,WAGAsiB,QAAA,CACAy1C,QAAA,CACAv0D,UAAA,CACAm4C,MAAA,IACA,OAgCA,MAAAqc,WAAAlmB,GACA1nC,YAAA1E,EAAAkZ,GACA8+B,MAAAh4C,EAAAkZ,GACA/f,KAAA0zC,qBAAA,EACA1zC,KAAAo5D,iBAAAt5D,EACAE,KAAAq5D,iBAAAv5D,EACAE,KAAA6xB,aAAA/xB,EACAE,KAAA8xB,aAAAhyB,EAEAyL,cACAA,MAAAP,EAAAguB,GACA,MAAA34B,EAAAL,KAAAi0C,aAAA5zC,KACAo2B,EAAAz2B,KAAAy0B,YACA,IAAA32B,EAAA8hB,EACA,IAAA9hB,EAAAkN,EAAA4U,EAAA5U,EAAAguB,EAAAl7B,EAAA8hB,IAAA9hB,EACA24B,EAAAmc,QAAA90C,IAAAuC,EAAAvC,GAGAyN,eACA,OAAAqb,GAAA5mB,KAAAsB,QAAAipB,SAAA,IAEAhf,oBACA,OAAAqb,GAAA5mB,KAAAsB,QAAAg4D,eAEA/tD,sBACA,IAAAlI,EAAAwhB,GACAtiB,GAAAsiB,GACA,MAAAzY,EAAApM,KACA,IAAA,IAAAlC,EAAA,EAAAA,EAAAsO,EAAAvF,MAAAxG,KAAAY,SAAAxC,SAAAX,EACA,GAAAsO,EAAAvF,MAAA6pD,iBAAA5yD,GAAA,CACA,MAAAw2B,EAAAloB,EAAAvF,MAAA6vB,eAAA54B,GAAAw2B,WACA/J,EAAA+J,EAAAilC,eACAD,EAAAhlC,EAAAklC,oBACAn2D,EAAAZ,KAAAY,IAAAA,EAAAknB,GACAhoB,EAAAE,KAAAF,IAAAA,EAAAgoB,EAAA+uC,GAGA,MAAA,CACA/uC,SAAAlnB,EACAi2D,cAAA/2D,EAAAc,GAGAkI,OAAA4X,GACA,MAAA/W,EAAApM,KACA6G,EAAAuF,EAAAvF,OACAyuB,UAAAA,GAAAzuB,EACA4vB,EAAArqB,EAAAqoB,YACAglC,EAAAhjC,EAAAp2B,KACAu7C,EAAAxvC,EAAAstD,oBAAAttD,EAAAutD,aAAAF,GAAArtD,EAAA9K,QAAAs6C,QACAge,EAAAn3D,KAAAF,KAAAE,KAAAY,IAAAiyB,EAAAxM,MAAAwM,EAAArL,QAAA2xB,GAAA,EAAA,GACAie,EAAAp3D,KAAAY,IAAA8b,EAAA/S,EAAA9K,QAAAu4D,OAAAD,GAAA,GACAE,EAAA1tD,EAAA2tD,eAAA3tD,EAAAzK,QACA23D,cAAAA,EAAA/uC,SAAAA,GAAAne,EAAA4tD,uBACAC,OAAAA,EAAAC,OAAAA,EAAAroC,QAAAA,EAAAC,QAAAA,GA9EA,SAAAvH,EAAA+uC,EAAAO,GACA,IAAAI,EAAA,EACAC,EAAA,EACAroC,EAAA,EACAC,EAAA,EACA,GAAAwnC,EAAAz0C,GAAA,CACA,MAAAs1C,EAAA5vC,EACA6vC,EAAAD,EAAAb,EACAe,EAAA53D,KAAAwoB,IAAAkvC,GACAG,EAAA73D,KAAAuoB,IAAAmvC,GACAI,EAAA93D,KAAAwoB,IAAAmvC,GACAI,EAAA/3D,KAAAuoB,IAAAovC,GACAK,EAAA,CAAAlzC,EAAAppB,EAAAuQ,IAAAqZ,GAAAR,EAAA4yC,EAAAC,GAAA,GAAA,EAAA33D,KAAAF,IAAApE,EAAAA,EAAA07D,EAAAnrD,EAAAA,EAAAmrD,GACAa,EAAA,CAAAnzC,EAAAppB,EAAAuQ,IAAAqZ,GAAAR,EAAA4yC,EAAAC,GAAA,IAAA,EAAA33D,KAAAY,IAAAlF,EAAAA,EAAA07D,EAAAnrD,EAAAA,EAAAmrD,GACAc,EAAAF,EAAA,EAAAJ,EAAAE,GACAK,EAAAH,EAAAv1C,GAAAo1C,EAAAE,GACAK,EAAAH,EAAA91C,GAAAy1C,EAAAE,GACAO,EAAAJ,EAAA91C,GAAAM,GAAAo1C,EAAAE,GACAP,GAAAU,EAAAE,GAAA,EACAX,GAAAU,EAAAE,GAAA,EACAjpC,IAAA8oC,EAAAE,GAAA,EACA/oC,IAAA8oC,EAAAE,GAAA,EAEA,MAAA,CAAAb,OAAAA,EAAAC,OAAAA,EAAAroC,QAAAA,EAAAC,QAAAA,GAuDAipC,CAAAxwC,EAAA+uC,EAAAO,GACApsC,GAAA6H,EAAAxM,MAAA8yB,GAAAqe,EACAtnC,GAAA2C,EAAArL,OAAA2xB,GAAAse,EACAc,EAAAv4D,KAAAF,IAAAE,KAAAY,IAAAoqB,EAAAkF,GAAA,EAAA,GACA0mC,EAAA/5C,EAAAlT,EAAA9K,QAAAkpB,OAAAwwC,GAEAC,GAAA5B,EADA52D,KAAAF,IAAA82D,EAAAQ,EAAA,IACAztD,EAAA8uD,gCACA9uD,EAAAylB,QAAAA,EAAAwnC,EACAjtD,EAAA0lB,QAAAA,EAAAunC,EACA5iC,EAAA6F,MAAAlwB,EAAA+uD,iBACA/uD,EAAAitD,YAAAA,EAAA4B,EAAA7uD,EAAAgvD,qBAAAhvD,EAAAzK,OACAyK,EAAAgtD,YAAA32D,KAAAF,IAAA6J,EAAAitD,YAAA4B,EAAAnB,EAAA,GACA1tD,EAAAmtC,eAAAkgB,EAAA,EAAAA,EAAAh7D,OAAA0kB,GAEA5X,eAAAzN,EAAAkzD,GACA,MAAA5kD,EAAApM,KACA4sB,EAAAxgB,EAAA9K,QACAm1B,EAAArqB,EAAAqoB,YACA6kC,EAAAltD,EAAAotD,oBACA,OAAAxI,GAAApkC,EAAAxK,UAAAi5C,gBAAAr7D,KAAA6G,MAAAkxD,kBAAAj6D,IAAA,OAAA24B,EAAAmc,QAAA90C,IAAA24B,EAAAp2B,KAAAvC,GAAA+5C,OACA,EAEAzrC,EAAAkvD,uBAAA7kC,EAAAmc,QAAA90C,GAAAw7D,EAAAz0C,IAEAtZ,eAAAkuD,EAAAzuD,EAAAguB,EAAA7V,GACA,MAAA/W,EAAApM,KACAgxD,EAAA,UAAA7tC,EACAtc,EAAAuF,EAAAvF,MACAyuB,EAAAzuB,EAAAyuB,UAEAimC,EADA10D,EAAAvF,QACA8gB,UACAo5C,GAAAlmC,EAAAnqB,KAAAmqB,EAAAlqB,OAAA,EACAqwD,GAAAnmC,EAAA3J,IAAA2J,EAAA1J,QAAA,EACA8vC,EAAA1K,GAAAuK,EAAAG,aACAtC,EAAAsC,EAAA,EAAAtvD,EAAAgtD,YACAC,EAAAqC,EAAA,EAAAtvD,EAAAitD,YACA3C,EAAAtqD,EAAA2rC,0BAAA/sC,EAAAmY,GACAw1B,EAAAvsC,EAAA0sC,iBAAA4d,GACAC,EAAAvqD,EAAAuqD,eAAAxzC,EAAAw1B,GACA,IACA76C,EADAq8D,EAAA/tD,EAAAmtD,eAEA,IAAAz7D,EAAA,EAAAA,EAAAkN,IAAAlN,EACAq8D,GAAA/tD,EAAAuvD,eAAA79D,EAAAkzD,GAEA,IAAAlzD,EAAAkN,EAAAlN,EAAAkN,EAAAguB,IAAAl7B,EAAA,CACA,MAAAw7D,EAAAltD,EAAAuvD,eAAA79D,EAAAkzD,GACAnmC,EAAA4uC,EAAA37D,GACAwxC,EAAA,CACAp+B,EAAAsqD,EAAApvD,EAAAylB,QACAzL,EAAAq1C,EAAArvD,EAAA0lB,QACAqoC,WAAAA,EACAC,SAAAD,EAAAb,EACAA,cAAAA,EACAD,YAAAA,EACAD,YAAAA,GAEAzC,IACArnB,EAAAhuC,QAAAq3C,GAAAvsC,EAAA2rC,0BAAAj6C,EAAA+sB,EAAA2kB,OAAA,SAAArsB,IAEAg3C,GAAAb,EACAltD,EAAA8qD,cAAArsC,EAAA/sB,EAAAwxC,EAAAnsB,GAEA/W,EAAAwqD,oBAAAje,EAAAx1B,EAAAuzC,GAEAnrD,iBACA,MAAAkrB,EAAAz2B,KAAAy0B,YACAmnC,EAAAnlC,EAAAp2B,KACA,IACAvC,EADAw+B,EAAA,EAEA,IAAAx+B,EAAA,EAAAA,EAAA89D,EAAAn9D,OAAAX,IAAA,CACA,MAAAkG,EAAAyyB,EAAAmc,QAAA90C,GACA,OAAAkG,GAAAJ,MAAAI,KAAAhE,KAAA6G,MAAAkxD,kBAAAj6D,IAAA89D,EAAA99D,GAAA+5C,SACAvb,GAAA75B,KAAA6jB,IAAAtiB,IAGA,OAAAs4B,EAEA/wB,uBAAAvH,GACA,MAAAs4B,EAAAt8B,KAAAy0B,YAAA6H,MACA,OAAAA,EAAA,IAAA14B,MAAAI,GACA6gB,IAAApiB,KAAA6jB,IAAAtiB,GAAAs4B,GAEA,EAEA/wB,iBAAA5J,GACA,MACA80B,EADAz2B,KACAy0B,YACA5tB,EAFA7G,KAEA6G,MACAxF,EAAAwF,EAAAxG,KAAAgB,QAAA,GACA2C,EAAAwhC,GAAA/O,EAAAmc,QAAAjxC,GAAAkF,EAAAvF,QAAAokC,QACA,MAAA,CACA7gC,MAAAxD,EAAAM,IAAA,GACAqC,MAAAA,GAGAuH,kBAAAkuD,GACA,MAAArtD,EAAApM,KACA,IAAAuC,EAAA,EACA,MAAAsE,EAAAuF,EAAAvF,MACA,IAAA/I,EAAA8hB,EAAA6W,EAAAnC,EAAAhzB,EACA,IAAAm4D,EACA,IAAA37D,EAAA,EAAA8hB,EAAA/Y,EAAAxG,KAAAY,SAAAxC,OAAAX,EAAA8hB,IAAA9hB,EACA,GAAA+I,EAAA6pD,iBAAA5yD,GAAA,CACA24B,EAAA5vB,EAAA6vB,eAAA54B,GACA27D,EAAAhjC,EAAAp2B,KACAi0B,EAAAmC,EAAAnC,WACAA,IAAAloB,GACAkoB,EAAAwb,YAEA,MAIA,IAAA2pB,EACA,OAAA,EAEA,IAAA37D,EAAA,EAAA8hB,EAAA65C,EAAAh7D,OAAAX,EAAA8hB,IAAA9hB,EACAwD,EAAAgzB,EAAAyjB,0BAAAj6C,GACA,UAAAwD,EAAAu6D,cACAt5D,EAAAE,KAAAF,IAAAA,EAAAjB,EAAAO,aAAA,EAAAP,EAAAw6D,kBAAA,IAGA,OAAAv5D,EAEAgJ,aAAAkuD,GACA,IAAAl3D,EAAA,EACA,IAAA,IAAAzE,EAAA,EAAA8hB,EAAA65C,EAAAh7D,OAAAX,EAAA8hB,IAAA9hB,EAAA,CACA,MAAAwD,EAAAtB,KAAA+3C,0BAAAj6C,GACAyE,EAAAE,KAAAF,IAAAA,EAAAjB,EAAAoF,QAAA,EAAApF,EAAAy6D,aAAA,GAEA,OAAAx5D,EAEAgJ,qBAAAwU,GACA,IAAAi8C,EAAA,EACA,IAAA,IAAAl+D,EAAA,EAAAA,EAAAiiB,IAAAjiB,EACAkC,KAAA6G,MAAA6pD,iBAAA5yD,KACAk+D,GAAAh8D,KAAA+5D,eAAAj8D,IAGA,OAAAk+D,EAEAzwD,eAAAwU,GACA,OAAAtd,KAAAF,IAAA2c,EAAAlf,KAAA6G,MAAAxG,KAAAY,SAAA8e,GAAAtC,OAAA,GAAA,GAEAlS,gCACA,OAAAvL,KAAAo7D,qBAAAp7D,KAAA6G,MAAAxG,KAAAY,SAAAxC,SAAA,GAGA06D,GAAAz6C,GAAA,WACAy6C,GAAAj3C,SAAA,CACAozB,oBAAA,EACA8C,gBAAA,MACAh2B,UAAA,CACAi5C,eAAA,EACAK,cAAA,GAEAjsB,WAAA,CACAF,QAAA,CACApuC,KAAA,SACAmuC,WAAA,CAAA,gBAAA,WAAA,cAAA,cAAA,aAAA,IAAA,IAAA,SAAA,cAAA,aAGAuqB,OAAA,MACAtvC,SAAA,EACA+uC,cAAA,IACA9uC,OAAA,OACAoxB,QAAA,EACA75C,UAAA,KAEAo3D,GAAAx3C,YAAA,CACA6C,YAAAjb,GAAA,YAAAA,EACAmb,WAAAnb,GAAA,YAAAA,GAEA4vD,GAAAz3C,UAAA,CACA+Q,YAAA,EACAhP,QAAA,CACAw4C,OAAA,CACA56D,OAAA,CACAkK,eAAA1E,GACA,MAAAxG,EAAAwG,EAAAxG,KACA,GAAAA,EAAAgB,OAAA5C,QAAA4B,EAAAY,SAAAxC,OAAA,CACA,MAAA4C,QAAAipB,WAAAA,IAAAzjB,EAAAo1D,OAAA36D,QACA,OAAAjB,EAAAgB,OAAAiP,KAAA,CAAAzL,EAAA/G,KACA,MACA6kB,EADA9b,EAAA6vB,eAAA,GACApC,WAAAxD,SAAAhzB,GACA,MAAA,CACA6uB,KAAA9nB,EACAqoB,UAAAvK,EAAAzc,gBACAonB,YAAA3K,EAAAxc,YACAonB,UAAA5K,EAAA9gB,YACAyoB,WAAAA,EACAutB,QAAAhxC,EAAAkxD,kBAAAj6D,GACA6D,MAAA7D,MAIA,MAAA,KAGAyN,QAAA7N,EAAAw+D,EAAAD,GACAA,EAAAp1D,MAAAs1D,qBAAAD,EAAAv6D,OACAs6D,EAAAp1D,MAAAm0B,WAGAk+B,QAAA,CACAv0D,UAAA,CACAm4C,MAAA,IACA,GAEAvxC,MAAA6wD,GACA,IAAAC,EAAAD,EAAAv3D,MACA,MAAAb,EAAA,KAAAo4D,EAAAE,eAOA,OANA/7D,EAAA87D,IACAA,EAAAA,EAAA/yD,QACA+yD,EAAA,IAAAr4D,GAEAq4D,GAAAr4D,EAEAq4D,OAOA,MAAAE,WAAAtpB,GACA1nC,aACAvL,KAAA0zC,qBAAA,EACAmL,MAAAhL,aAEAtoC,OAAA4X,GACA,MAAA/W,EAAApM,KACAy2B,EAAArqB,EAAAqoB,aACA3vB,QAAAkoB,EAAA3sB,KAAAigC,EAAA,GAAAgwB,SAAAA,GAAA75B,EACA+lC,EAAApwD,EAAAvF,MAAA+xC,oBACA,IAAA5tC,MAAAA,EAAAguB,MAAAA,GA0FA,SAAAvC,EAAA6J,EAAAk8B,GACA,MAAAC,EAAAn8B,EAAA7hC,OACA,IAAAuM,EAAA,EACAguB,EAAAyjC,EACA,GAAAhmC,EAAAlC,QAAA,CACA,MAAAC,OAAAA,EAAAoe,QAAAA,GAAAnc,EACAz0B,EAAAwyB,EAAAxyB,MACAqB,IAAAA,EAAAd,IAAAA,EAAA00C,WAAAA,EAAAC,WAAAA,GAAA1iB,EAAA2iB,gBACAF,IACAjsC,EAAAqd,GAAA5lB,KAAAY,IACA2rB,GAAA4jB,EAAApe,EAAAxyB,KAAAqB,GAAA0rB,GACAytC,EAAAC,EAAAztC,GAAAsR,EAAAt+B,EAAAwyB,EAAA+vB,iBAAAlhD,IAAA0rB,IACA,EAAA0tC,EAAA,IAGAzjC,EADAke,EACA7uB,GAAA5lB,KAAAF,IACAysB,GAAA4jB,EAAApe,EAAAxyB,KAAAO,GAAAusB,GAAA,EACA0tC,EAAA,EAAAxtC,GAAAsR,EAAAt+B,EAAAwyB,EAAA+vB,iBAAAhiD,IAAAusB,GAAA,GACA9jB,EAAAyxD,GAAAzxD,EAEAyxD,EAAAzxD,EAGA,MAAA,CAAAA,MAAAA,EAAAguB,MAAAA,GAjHA0jC,CAAAjmC,EAAA6J,EAAAk8B,GACApwD,EAAAonC,WAAAxoC,EACAoB,EAAAqnC,WAAAza,EAiHA,SAAAvC,GACA,MAAAoe,OAAAA,EAAAE,OAAAA,EAAA4nB,aAAAA,GAAAlmC,EACAmmC,EAAA,CACAC,KAAAhoB,EAAAxxC,IACAy5D,KAAAjoB,EAAAtyC,IACAw6D,KAAAhoB,EAAA1xC,IACA25D,KAAAjoB,EAAAxyC,KAEA,IAAAo6D,EAEA,OADAlmC,EAAAkmC,aAAAC,GACA,EAEA,MAAA7hC,EAAA4hC,EAAAE,OAAAhoB,EAAAxxC,KACAs5D,EAAAG,OAAAjoB,EAAAtyC,KACAo6D,EAAAI,OAAAhoB,EAAA1xC,KACAs5D,EAAAK,OAAAjoB,EAAAxyC,IAEA,OADA/B,OAAAC,OAAAk8D,EAAAC,GACA7hC,EAjIAkiC,CAAAxmC,KACAzrB,EAAA,EACAguB,EAAAsH,EAAA7hC,QAEAuuB,EAAAkc,cAAA98B,EAAAzK,MACAqrB,EAAAkwC,aAAA5M,EAAA4M,WACAlwC,EAAAsT,OAAAA,EACA,MAAAh/B,EAAA8K,EAAA0rC,6BAAA30B,GACA/W,EAAA9K,QAAAuiB,WACAviB,EAAAO,YAAA,GAEAP,EAAAgmC,QAAAl7B,EAAA9K,QAAAgmC,QACAl7B,EAAA8qD,cAAAlqC,OAAAltB,EAAA,CACAq9D,UAAAX,EACAl7D,QAAAA,GACA6hB,GACA/W,EAAAmtC,eAAAjZ,EAAAt1B,EAAAguB,EAAA7V,GAEA5X,eAAA+0B,EAAAt1B,EAAAguB,EAAA7V,GACA,MAAA/W,EAAApM,KACAgxD,EAAA,UAAA7tC,GACAqR,OAAAA,EAAAqd,OAAAA,EAAAkC,SAAAA,GAAA3nC,EAAAqoB,YACAiiC,EAAAtqD,EAAA2rC,0BAAA/sC,EAAAmY,GACAw1B,EAAAvsC,EAAA0sC,iBAAA4d,GACAC,EAAAvqD,EAAAuqD,eAAAxzC,EAAAw1B,GACAzG,EAAA1d,EAAAxyB,KACAmwC,EAAAN,EAAA7vC,KACA2gC,EAAAv2B,EAAA9K,QAAAqhC,SACAy6B,EAAAj3C,GAAAwc,GAAAA,EAAAh/B,OAAAqhB,kBACAq4C,EAAAjxD,EAAAvF,MAAA+xC,qBAAAoY,GAAA,SAAA7tC,EACA,IAAAm6C,EAAAtyD,EAAA,GAAAoB,EAAAkrC,UAAAtsC,EAAA,GACA,IAAA,IAAAlN,EAAAkN,EAAAlN,EAAAkN,EAAAguB,IAAAl7B,EAAA,CACA,MAAA0tB,EAAA8U,EAAAxiC,GACAiH,EAAAqH,EAAAkrC,UAAAx5C,GACAwxC,EAAA+tB,EAAA7xC,EAAA,GACA+xC,EAAA5+C,EAAA5Z,EAAAotC,IACAhQ,EAAAmN,EAAA4C,GAAA1d,EAAA+vB,iBAAAx/C,EAAAmtC,GAAAp0C,GACAskC,EAAAkN,EAAA6C,GAAA6e,GAAAuM,EAAA1rB,EAAA0kB,eAAA1kB,EAAA0S,iBAAAxQ,EAAA3nC,EAAA8kC,WAAAW,EAAA9sC,EAAAgvC,GAAAhvC,EAAAotC,GAAAr0C,GACAwxC,EAAAna,KAAAvxB,MAAAu+B,IAAAv+B,MAAAw+B,IAAAm7B,EACAjuB,EAAA7G,KAAA3qC,EAAA,GAAAiH,EAAAmtC,GAAAorB,EAAAprB,GAAAkrB,EACA9tB,EAAAvqC,OAAAA,EACA4xD,IACArnB,EAAAhuC,QAAAq3C,GAAAvsC,EAAA2rC,0BAAAj6C,EAAA0tB,EAAAgkB,OAAA,SAAArsB,IAEAk6C,GACAjxD,EAAA8qD,cAAA1rC,EAAA1tB,EAAAwxC,EAAAnsB,GAEAm6C,EAAAv4D,EAEAqH,EAAAwqD,oBAAAje,EAAAx1B,EAAAuzC,GAEAnrD,iBACA,MAAAa,EAAApM,KACAy2B,EAAArqB,EAAAqoB,YACA3vB,EAAA2xB,EAAA3xB,QACA04D,EAAA14D,EAAAxD,SAAAwD,EAAAxD,QAAAO,aAAA,EACAxB,EAAAo2B,EAAAp2B,MAAA,GACA,IAAAA,EAAA5B,OACA,OAAA++D,EAEA,MAAA/8B,EAAApgC,EAAA,GAAAmhB,KAAApV,EAAA2rC,0BAAA,IACA0lB,EAAAp9D,EAAAA,EAAA5B,OAAA,GAAA+iB,KAAApV,EAAA2rC,0BAAA13C,EAAA5B,OAAA,IACA,OAAAgE,KAAAF,IAAAi7D,EAAA/8B,EAAAg9B,GAAA,EAEAlyD,OACA,MAAAkrB,EAAAz2B,KAAAy0B,YACAgC,EAAA3xB,QAAA44D,oBAAA19D,KAAA6G,MAAAyuB,UAAAmB,EAAAjC,OAAAxyB,MACA68C,MAAAhyC,QAGA0vD,GAAA79C,GAAA,OACA69C,GAAAr6C,SAAA,CACAozB,mBAAA,OACA8C,gBAAA,QACAv0B,UAAA,EACA8e,UAAA,GAEA45B,GAAA76C,UAAA,CACAkC,OAAA,CACAk1C,QAAA,CACA33D,KAAA,YAEA43D,QAAA,CACA53D,KAAA,YAiDA,MAAAw8D,WAAA1qB,GACA1nC,YAAA1E,EAAAkZ,GACA8+B,MAAAh4C,EAAAkZ,GACA/f,KAAAo5D,iBAAAt5D,EACAE,KAAAq5D,iBAAAv5D,EAEAyL,iBAAA5J,GACA,MACA80B,EADAz2B,KACAy0B,YACA5tB,EAFA7G,KAEA6G,MACAxF,EAAAwF,EAAAxG,KAAAgB,QAAA,GACA2C,EAAAwhC,GAAA/O,EAAAmc,QAAAjxC,GAAAlE,EAAAoJ,EAAAvF,QAAAokC,QACA,MAAA,CACA7gC,MAAAxD,EAAAM,IAAA,GACAqC,MAAAA,GAGAuH,OAAA4X,GACA,MAAAs2C,EAAAz5D,KAAAy0B,YAAAp0B,KACAL,KAAA49D,gBACA59D,KAAAu5C,eAAAkgB,EAAA,EAAAA,EAAAh7D,OAAA0kB,GAEA5X,gBACA,MAAAa,EAAApM,KACA6G,EAAAuF,EAAAvF,MACAyuB,EAAAzuB,EAAAyuB,UACA1I,EAAA/lB,EAAAvF,QACAwhD,EAAArgD,KAAAY,IAAAiyB,EAAAlqB,MAAAkqB,EAAAnqB,KAAAmqB,EAAA1J,OAAA0J,EAAA3J,KACA0tC,EAAA52D,KAAAF,IAAAugD,EAAA,EAAA,GAEAmY,GAAA5B,EADA52D,KAAAF,IAAAqqB,EAAAixC,iBAAAxE,EAAA,IAAAzsC,EAAA,iBAAA,EAAA,IACA/lB,EAAAi3D,yBACA1xD,EAAAitD,YAAAA,EAAA4B,EAAA7uD,EAAAzK,MACAyK,EAAAgtD,YAAAhtD,EAAAitD,YAAA4B,EAEA1vD,eAAAkuD,EAAAzuD,EAAAguB,EAAA7V,GACA,MAAA/W,EAAApM,KACAgxD,EAAA,UAAA7tC,EACAtc,EAAAuF,EAAAvF,MACA/B,EAAAsH,EAAA6nC,aAEAsnB,EADA10D,EAAAvF,QACA8gB,UACAuB,EAAAvX,EAAAqoB,YAAAugB,OACAwmB,EAAA73C,EAAAo6C,QACAtC,EAAA93C,EAAAq6C,QACAC,EAAAt6C,EAAAu6C,cAAA,GAAA,GAAAt5C,GACA,IACA9mB,EADAypB,EAAA02C,EAEA,MAAAE,EAAA,IAAA/xD,EAAAgyD,uBACA,IAAAtgE,EAAA,EAAAA,EAAAkN,IAAAlN,EACAypB,GAAAnb,EAAAiyD,cAAAvgE,EAAAqlB,EAAAg7C,GAEA,IAAArgE,EAAAkN,EAAAlN,EAAAkN,EAAAguB,EAAAl7B,IAAA,CACA,MAAA+sB,EAAA4uC,EAAA37D,GACA,IAAAq8D,EAAA5yC,EACA6yC,EAAA7yC,EAAAnb,EAAAiyD,cAAAvgE,EAAAqlB,EAAAg7C,GACA9E,EAAAxyD,EAAAkxD,kBAAAj6D,GAAA6lB,EAAA26C,8BAAAx5D,EAAAzE,KAAAvC,IAAA,EACAypB,EAAA6yC,EACApJ,IACAuK,EAAAG,eACArC,EAAA,GAEAkC,EAAAF,gBACAlB,EAAAC,EAAA6D,IAGA,MAAA3uB,EAAA,CACAp+B,EAAAsqD,EACAp1C,EAAAq1C,EACArC,YAAA,EACAC,YAAAA,EACAc,WAAAA,EACAC,SAAAA,EACA94D,QAAA8K,EAAA2rC,0BAAAj6C,EAAA+sB,EAAA2kB,OAAA,SAAArsB,IAEA/W,EAAA8qD,cAAArsC,EAAA/sB,EAAAwxC,EAAAnsB,IAGA5X,uBACA,MAAAzG,EAAA9E,KAAAi0C,aACAxd,EAAAz2B,KAAAy0B,YACA,IAAAuE,EAAA,EAMA,OALAvC,EAAAp2B,KAAAqB,SAAA,CAAAmvB,EAAAlvB,MACAiC,MAAAkB,EAAAzE,KAAAsB,KAAA3B,KAAA6G,MAAAkxD,kBAAAp2D,IACAq3B,OAGAA,EAEAztB,cAAA5J,EAAAwhB,EAAAg7C,GACA,OAAAn+D,KAAA6G,MAAAkxD,kBAAAp2D,GACAilB,GAAA5mB,KAAA+3C,0BAAAp2C,EAAAwhB,GAAAoE,OAAA42C,GACA,GAGAR,GAAAj/C,GAAA,YACAi/C,GAAAz7C,SAAA,CACAk2B,gBAAA,MACAh2B,UAAA,CACAi5C,eAAA,EACAK,cAAA,GAEAjsB,WAAA,CACAF,QAAA,CACApuC,KAAA,SACAmuC,WAAA,CAAA,IAAA,IAAA,aAAA,WAAA,cAAA,iBAGAvtC,UAAA,IACAo4D,WAAA,GAEAwD,GAAAj8C,UAAA,CACA+Q,YAAA,EACAhP,QAAA,CACAw4C,OAAA,CACA56D,OAAA,CACAkK,eAAA1E,GACA,MAAAxG,EAAAwG,EAAAxG,KACA,GAAAA,EAAAgB,OAAA5C,QAAA4B,EAAAY,SAAAxC,OAAA,CACA,MAAA4C,QAAAipB,WAAAA,IAAAzjB,EAAAo1D,OAAA36D,QACA,OAAAjB,EAAAgB,OAAAiP,KAAA,CAAAzL,EAAA/G,KACA,MACA6kB,EADA9b,EAAA6vB,eAAA,GACApC,WAAAxD,SAAAhzB,GACA,MAAA,CACA6uB,KAAA9nB,EACAqoB,UAAAvK,EAAAzc,gBACAonB,YAAA3K,EAAAxc,YACAonB,UAAA5K,EAAA9gB,YACAyoB,WAAAA,EACAutB,QAAAhxC,EAAAkxD,kBAAAj6D,GACA6D,MAAA7D,MAIA,MAAA,KAGAyN,QAAA7N,EAAAw+D,EAAAD,GACAA,EAAAp1D,MAAAs1D,qBAAAD,EAAAv6D,OACAs6D,EAAAp1D,MAAAm0B,WAGAk+B,QAAA,CACAv0D,UAAA,CACAm4C,MAAA,IACA,GAEAj4C,MAAA9D,GACAA,EAAA8F,MAAAxG,KAAAgB,OAAAN,EAAAkE,WAAA,KAAAlE,EAAAu7D,kBAKA14C,OAAA,CACAnmB,EAAA,CACA0D,KAAA,eACAo9D,WAAA,CACAhiC,SAAA,GAEAggB,aAAA,EACAC,KAAA,CACAgiB,UAAA,GAEAC,YAAA,CACAliC,SAAA,GAEA49B,WAAA,KAKA,MAAAuE,WAAAvF,IAEAuF,GAAAhgD,GAAA,MACAggD,GAAAx8C,SAAA,CACA23C,OAAA,EACAtvC,SAAA,EACA+uC,cAAA,IACA9uC,OAAA,QAGA,MAAAm0C,WAAA1rB,GACA1nC,iBAAA5J,GACA,MACAkwC,EADA7xC,KACAy0B,YAAAod,OACA9sC,EAFA/E,KAEAs3C,UAAA31C,GACA,MAAA,CACAkD,MAAAgtC,EAAAuE,YAAAz0C,GACAqC,MAAA,GAAA6tC,EAAA0F,iBAAAxyC,EAAA8sC,EAAA7vC,QAGAuJ,OAAA4X,GACA,MAAA/W,EAAApM,KACAy2B,EAAArqB,EAAAqoB,YACAzH,EAAAyJ,EAAA3xB,QACAw7B,EAAA7J,EAAAp2B,MAAA,GACAgB,EAAAo1B,EAAAjC,OAAA4hB,YAEA,GADAppB,EAAAsT,OAAAA,EACA,WAAAnd,EAAA,CACA,MAAA7hB,EAAA8K,EAAA0rC,6BAAA30B,GACA/W,EAAA9K,QAAAuiB,WACAviB,EAAAO,YAAA,GAEA,MAAAytC,EAAA,CACAjH,OAAA,EACAM,UAAAtnC,EAAA5C,SAAA6hC,EAAA7hC,OACA6C,QAAAA,GAEA8K,EAAA8qD,cAAAlqC,OAAAltB,EAAAwvC,EAAAnsB,GAEA/W,EAAAmtC,eAAAjZ,EAAA,EAAAA,EAAA7hC,OAAA0kB,GAEA5X,eAAA+0B,EAAAt1B,EAAAguB,EAAA7V,GACA,MAAA/W,EAAApM,KACA8E,EAAAsH,EAAA6nC,aACAtwB,EAAAvX,EAAAqoB,YAAAugB,OACAgc,EAAA,UAAA7tC,EACA,IAAA,IAAArlB,EAAAkN,EAAAlN,EAAAkN,EAAAguB,EAAAl7B,IAAA,CACA,MAAA0tB,EAAA8U,EAAAxiC,GACAwD,EAAA8K,EAAA2rC,0BAAAj6C,EAAA0tB,EAAAgkB,OAAA,SAAArsB,GACAy7C,EAAAj7C,EAAAk7C,yBAAA/gE,EAAAgH,EAAAzE,KAAAvC,IACAoT,EAAA8/C,EAAArtC,EAAAo6C,QAAAa,EAAA1tD,EACAkV,EAAA4qC,EAAArtC,EAAAq6C,QAAAY,EAAAx4C,EACAkpB,EAAA,CACAp+B,EAAAA,EACAkV,EAAAA,EACAmB,MAAAq3C,EAAAr3C,MACA4N,KAAAvxB,MAAAsN,IAAAtN,MAAAwiB,GACA9kB,QAAAA,GAEA8K,EAAA8qD,cAAA1rC,EAAA1tB,EAAAwxC,EAAAnsB,KAIAw7C,GAAAjgD,GAAA,QACAigD,GAAAz8C,SAAA,CACAozB,mBAAA,OACA8C,gBAAA,QACAr2C,UAAA,IACA8hB,UAAA,EACArB,SAAA,CACAwK,KAAA,CACA3B,KAAA,WAIAszC,GAAAj9C,UAAA,CACA+Q,YAAA,EACA7O,OAAA,CACAnmB,EAAA,CACA0D,KAAA,kBAKA,MAAA29D,WAAAvC,IAEAuC,GAAApgD,GAAA,UACAogD,GAAA58C,SAAA,CACA2B,UAAA,EACAwH,MAAA,GAEAyzC,GAAAp9C,UAAA,CACAwB,YAAA,CACAC,KAAA,SAEAM,QAAA,CACAy1C,QAAA,CACAv0D,UAAA,CACAm4C,MAAA,IACA,GAEAj4C,MAAA+H,GACA,IAAAA,EAAA/H,MAAA,KAAA+H,EAAA0vD,eAAA,OAKA14C,OAAA,CACA1S,EAAA,CACA/P,KAAA,UAEAilB,EAAA,CACAjlB,KAAA,YAKA,IAAA2nD,GAAAtoD,OAAAg8B,OAAA,CACAkN,UAAA,KACAysB,cAAAA,GACA6C,iBAAAA,GACAG,mBAAAA,GACAoD,eAAAA,GACAoB,oBAAAA,GACAe,cAAAA,GACAC,gBAAAA,GACAG,kBAAAA,KAGA,SAAAC,GAAAh8C,EAAA8N,EAAAupC,GACA,MAAAD,WAAAA,EAAA6E,YAAAA,EAAA9tD,EAAAA,EAAAkV,EAAAA,EAAAizC,YAAAA,EAAAD,YAAAA,GAAAvoC,EACA,IAAAouC,EAAAD,EAAA3F,EACAt2C,EAAA6H,YACA7H,EAAA8H,IAAA3Z,EAAAkV,EAAAizC,EAAAc,EAAA8E,EAAA7E,EAAA6E,GACA7F,EAAA4F,GACAC,EAAAD,EAAA5F,EACAr2C,EAAA8H,IAAA3Z,EAAAkV,EAAAgzC,EAAAgB,EAAA6E,EAAA9E,EAAA8E,GAAA,IAEAl8C,EAAA8H,IAAA3Z,EAAAkV,EAAA44C,EAAA5E,EAAAl1C,GAAAi1C,EAAAj1C,IAEAnC,EAAA+H,YACA/H,EAAA+I,OAKA,SAAAozC,GAAAr0C,EAAAuuC,EAAAC,EAAA8F,GACA,MAAAthE,EAHAm5B,GAGAnM,EAAAvpB,QAAA8E,aAHA,CAAA,aAAA,WAAA,aAAA,aAIA,MAAAg5D,GAAA/F,EAAAD,GAAA,EACAiG,EAAA58D,KAAAY,IAAA+7D,EAAAD,EAAA/F,EAAA,GACAkG,EAAAxhD,IACA,MAAAyhD,GAAAlG,EAAA52D,KAAAY,IAAA+7D,EAAAthD,IAAAqhD,EAAA,EACA,OAAA92C,GAAAvK,EAAA,EAAArb,KAAAY,IAAA+7D,EAAAG,KAEA,MAAA,CACAC,WAAAF,EAAAzhE,EAAA2hE,YACAC,SAAAH,EAAAzhE,EAAA4hE,UACAC,WAAAr3C,GAAAxqB,EAAA6hE,WAAA,EAAAL,GACAM,SAAAt3C,GAAAxqB,EAAA8hE,SAAA,EAAAN,IAGA,SAAAO,GAAAniE,EAAAoiE,EAAA3uD,EAAAkV,GACA,MAAA,CACAlV,EAAAA,EAAAzT,EAAAgF,KAAAwoB,IAAA40C,GACAz5C,EAAAA,EAAA3oB,EAAAgF,KAAAuoB,IAAA60C,IAGA,SAAAC,GAAA/8C,EAAA8N,EAAAnqB,EAAAk1C,EAAA3wC,GACA,MAAAiG,EAAAA,EAAAkV,EAAAA,EAAA+zC,WAAAnvD,EAAAg0D,YAAAA,EAAA5F,YAAA2G,GAAAlvC,EACAwoC,EAAA52D,KAAAF,IAAAsuB,EAAAwoC,YAAAzd,EAAAl1C,EAAAs4D,EAAA,GACA5F,EAAA2G,EAAA,EAAAA,EAAAnkB,EAAAl1C,EAAAs4D,EAAA,EACA,IAAAgB,EAAA,EACA,MAAAC,EAAAh1D,EAAAD,EACA,GAAA4wC,EAAA,CACA,MAEAskB,IAFAH,EAAA,EAAAA,EAAAnkB,EAAA,IACAyd,EAAA,EAAAA,EAAAzd,EAAA,IACA,EAEAokB,GAAAC,GADA,IAAAC,EAAAD,EAAAC,GAAAA,EAAAtkB,GAAAqkB,IACA,EAEA,MACAE,GAAAF,EADAx9D,KAAAF,IAAA,KAAA09D,EAAA5G,EAAA3yD,EAAAke,IAAAy0C,GACA,EACAc,EAAAnvD,EAAAm1D,EAAAH,EACA5F,EAAAnvD,EAAAk1D,EAAAH,GACAR,WAAAA,EAAAC,SAAAA,EAAAC,WAAAA,EAAAC,SAAAA,GAAAT,GAAAruC,EAAAuoC,EAAAC,EAAAe,EAAAD,GACAiG,EAAA/G,EAAAmG,EACAa,EAAAhH,EAAAoG,EACAa,EAAAnG,EAAAqF,EAAAY,EACAG,EAAAnG,EAAAqF,EAAAY,EACAG,EAAApH,EAAAsG,EACAe,EAAArH,EAAAuG,EACAe,EAAAvG,EAAAuF,EAAAc,EACAG,EAAAvG,EAAAuF,EAAAc,EAGA,GAFA19C,EAAA6H,YACA7H,EAAA8H,IAAA3Z,EAAAkV,EAAAizC,EAAAiH,EAAAC,GACAd,EAAA,EAAA,CACA,MAAAmB,EAAAhB,GAAAS,EAAAE,EAAArvD,EAAAkV,GACArD,EAAA8H,IAAA+1C,EAAA1vD,EAAA0vD,EAAAx6C,EAAAq5C,EAAAc,EAAAnG,EAAAl1C,IAEA,MAAA27C,EAAAjB,GAAAa,EAAArG,EAAAlpD,EAAAkV,GAEA,GADArD,EAAAmI,OAAA21C,EAAA3vD,EAAA2vD,EAAAz6C,GACAu5C,EAAA,EAAA,CACA,MAAAiB,EAAAhB,GAAAa,EAAAE,EAAAzvD,EAAAkV,GACArD,EAAA8H,IAAA+1C,EAAA1vD,EAAA0vD,EAAAx6C,EAAAu5C,EAAAvF,EAAAl1C,GAAAy7C,EAAAl+D,KAAAmiB,IAGA,GADA7B,EAAA8H,IAAA3Z,EAAAkV,EAAAgzC,EAAAgB,EAAAuF,EAAAvG,EAAAe,EAAAuF,EAAAtG,GAAA,GACAsG,EAAA,EAAA,CACA,MAAAkB,EAAAhB,GAAAY,EAAAE,EAAAxvD,EAAAkV,GACArD,EAAA8H,IAAA+1C,EAAA1vD,EAAA0vD,EAAAx6C,EAAAs5C,EAAAgB,EAAAj+D,KAAAmiB,GAAAu1C,EAAAj1C,IAEA,MAAA47C,EAAAlB,GAAAQ,EAAAjG,EAAAjpD,EAAAkV,GAEA,GADArD,EAAAmI,OAAA41C,EAAA5vD,EAAA4vD,EAAA16C,GACAo5C,EAAA,EAAA,CACA,MAAAoB,EAAAhB,GAAAQ,EAAAE,EAAApvD,EAAAkV,GACArD,EAAA8H,IAAA+1C,EAAA1vD,EAAA0vD,EAAAx6C,EAAAo5C,EAAArF,EAAAj1C,GAAAo7C,GAEAv9C,EAAA+H,YAwCA,SAAA2xB,GAAA15B,EAAA8N,EAAAnqB,EAAAk1C,EAAAwe,GACA,MAAA94D,QAAAA,GAAAuvB,EACAkwC,EAAA,UAAAz/D,EAAAu6D,YACAv6D,EAAAO,cAGAk/D,GACAh+C,EAAAwK,UAAA,EAAAjsB,EAAAO,YACAkhB,EAAAi+C,SAAA,UAEAj+C,EAAAwK,UAAAjsB,EAAAO,YACAkhB,EAAAi+C,SAAA,SAEAnwC,EAAAowC,aAhCA,SAAAl+C,EAAA8N,EAAAkwC,GACA,MAAA7vD,EAAAA,EAAAkV,EAAAA,EAAA+zC,WAAAA,EAAA6E,YAAAA,EAAAiC,YAAAA,GAAApwC,EACAwoC,EAAA52D,KAAAF,IAAAsuB,EAAAwoC,YAAA2F,EAAA,GACA5F,EAAAvoC,EAAAuoC,YAAA4F,EACA,IAAAlhE,EAMA,IALAijE,GACAhC,GAAAh8C,EAAA8N,EAAAspC,EAAAt1C,IAEA9B,EAAA6H,YACA7H,EAAA8H,IAAA3Z,EAAAkV,EAAAgzC,EAAAe,EAAAt1C,GAAAs1C,GAAA,GACAr8D,EAAA,EAAAA,EAAAmjE,IAAAnjE,EACAilB,EAAAuI,SAIA,IAFAvI,EAAA6H,YACA7H,EAAA8H,IAAA3Z,EAAAkV,EAAAizC,EAAAc,EAAAA,EAAAt1C,IACA/mB,EAAA,EAAAA,EAAAmjE,IAAAnjE,EACAilB,EAAAuI,SAiBA41C,CAAAn+C,EAAA8N,EAAAkwC,GAEAA,GACAhC,GAAAh8C,EAAA8N,EAAAupC,GAEA0F,GAAA/8C,EAAA8N,EAAAnqB,EAAAk1C,EAAAwe,GACAr3C,EAAAuI,UAEA,MAAA61C,WAAAznB,GACAnuC,YAAA4iC,GACA0Q,QACA7+C,KAAAsB,aAAAxB,EACAE,KAAAs5D,mBAAAx5D,EACAE,KAAAm6D,gBAAAr6D,EACAE,KAAAo6D,cAAAt6D,EACAE,KAAAo5D,iBAAAt5D,EACAE,KAAAq5D,iBAAAv5D,EACAE,KAAAg/D,YAAA,EACAh/D,KAAAihE,YAAA,EACA9yB,GACA3tC,OAAAC,OAAAT,KAAAmuC,GAGA5iC,QAAA61D,EAAAC,EAAAhsC,GACA,MAAA7J,EAAAxrB,KAAA25C,SAAA,CAAA,IAAA,KAAAtkB,IACA9N,MAAAA,EAAAE,SAAAA,GAAAR,GAAAuE,EAAA,CAAAta,EAAAkwD,EAAAh7C,EAAAi7C,KACAlH,WAAAA,EAAAC,SAAAA,EAAAhB,YAAAA,EAAAC,YAAAA,EAAAC,cAAAA,GAAAt5D,KAAA25C,SAAA,CACA,aACA,WACA,cACA,cACA,iBACAtkB,GACAisC,EAAAthE,KAAAsB,QAAAs6C,QAAA,EAGA,OAFA0d,GAAAz0C,IAAAkD,GAAAR,EAAA4yC,EAAAC,MACA3yC,GAAA2xC,EAAAkI,GAAA75C,GAAA4xC,EAAAiI,GAGA/1D,eAAA8pB,GACA,MAAAnkB,EAAAA,EAAAkV,EAAAA,EAAA+zC,WAAAA,EAAAC,SAAAA,EAAAhB,YAAAA,EAAAC,YAAAA,GAAAr5D,KAAA25C,SAAA,CACA,IACA,IACA,aACA,WACA,cACA,cACA,iBACAtkB,IACA3uB,OAAAA,EAAAk1C,QAAAA,GAAA57C,KAAAsB,QACAigE,GAAApH,EAAAC,GAAA,EACAoH,GAAApI,EAAAC,EAAAzd,EAAAl1C,GAAA,EACA,MAAA,CACAwK,EAAAA,EAAAzO,KAAAwoB,IAAAs2C,GAAAC,EACAp7C,EAAAA,EAAA3jB,KAAAuoB,IAAAu2C,GAAAC,GAGAj2D,gBAAA8pB,GACA,OAAAr1B,KAAAk2B,eAAAb,GAEA9pB,KAAAwX,GACA,MAAA3W,EAAApM,MACAsB,QAAAA,EAAAg4D,cAAAA,GAAAltD,EACA1F,GAAApF,EAAAoF,QAAA,GAAA,EACAk1C,GAAAt6C,EAAAs6C,SAAA,GAAA,EAGA,GAFAxvC,EAAA4yD,YAAA,UAAA19D,EAAAu6D,YAAA,IAAA,EACAzvD,EAAA60D,YAAA3H,EAAAz0C,GAAApiB,KAAAojB,MAAAyzC,EAAAz0C,IAAA,EACA,IAAAy0C,GAAAltD,EAAAgtD,YAAA,GAAAhtD,EAAAitD,YAAA,EACA,OAEAt2C,EAAAoG,OACA,IAAAs4C,EAAA,EACA,GAAA/6D,EAAA,CACA+6D,EAAA/6D,EAAA,EACA,MAAA66D,GAAAn1D,EAAA+tD,WAAA/tD,EAAAguD,UAAA,EACAr3C,EAAA2H,UAAAjoB,KAAAwoB,IAAAs2C,GAAAE,EAAAh/D,KAAAuoB,IAAAu2C,GAAAE,GACAr1D,EAAAktD,eAAA10C,KACA68C,EAAA/6D,GAGAqc,EAAAmK,UAAA5rB,EAAA4E,gBACA6c,EAAAuK,YAAAhsB,EAAA6E,YACA,MAAAi0D,EArIA,SAAAr3C,EAAA8N,EAAAnqB,EAAAk1C,GACA,MAAAqlB,YAAAA,EAAA9G,WAAAA,EAAAb,cAAAA,GAAAzoC,EACA,IAAAupC,EAAAvpC,EAAAupC,SACA,GAAA6G,EAAA,CACAnB,GAAA/8C,EAAA8N,EAAAnqB,EAAAk1C,EAAAue,EAAAt1C,IACA,IAAA,IAAA/mB,EAAA,EAAAA,EAAAmjE,IAAAnjE,EACAilB,EAAAsI,OAEAznB,MAAA01D,KACAc,EAAAD,EAAAb,EAAAz0C,GACAy0C,EAAAz0C,IAAA,IACAu1C,GAAAv1C,KAMA,OAFAi7C,GAAA/8C,EAAA8N,EAAAnqB,EAAAk1C,EAAAwe,GACAr3C,EAAAsI,OACA+uC,EAoHAsH,CAAA3+C,EAAA3W,EAAAq1D,EAAA7lB,GACAa,GAAA15B,EAAA3W,EAAAq1D,EAAA7lB,EAAAwe,GACAr3C,EAAAwG,WAiBA,SAAAo4C,GAAA5+C,EAAAzhB,EAAAqhB,EAAArhB,GACAyhB,EAAA6+C,QAAA1iD,EAAAyD,EAAA0mB,eAAA/nC,EAAA+nC,gBACAtmB,EAAAkkC,YAAA/nC,EAAAyD,EAAA2mB,WAAAhoC,EAAAgoC,aACAvmB,EAAAmkC,eAAAhoC,EAAAyD,EAAA4mB,iBAAAjoC,EAAAioC,kBACAxmB,EAAAi+C,SAAA9hD,EAAAyD,EAAA6mB,gBAAAloC,EAAAkoC,iBACAzmB,EAAAwK,UAAArO,EAAAyD,EAAA9gB,YAAAP,EAAAO,aACAkhB,EAAAuK,YAAApO,EAAAyD,EAAAxc,YAAA7E,EAAA6E,aAEA,SAAA+kB,GAAAnI,EAAAkJ,EAAA/L,GACA6C,EAAAmI,OAAAhL,EAAAhP,EAAAgP,EAAAkG,GAWA,SAAAy7C,GAAAvhC,EAAAgH,EAAA7O,EAAA,IACA,MAAAO,EAAAsH,EAAA7hC,QACAuM,MAAA82D,EAAA,EAAA72D,IAAA82D,EAAA/oC,EAAA,GAAAP,GACAztB,MAAAg3D,EAAA/2D,IAAAg3D,GAAA36B,EACAt8B,EAAAvI,KAAAF,IAAAu/D,EAAAE,GACA/2D,EAAAxI,KAAAY,IAAA0+D,EAAAE,GACAC,EAAAJ,EAAAE,GAAAD,EAAAC,GAAAF,EAAAG,GAAAF,EAAAE,EACA,MAAA,CACAjpC,MAAAA,EACAhuB,MAAAA,EACAy3B,KAAA6E,EAAA7E,KACA7iB,KAAA3U,EAAAD,IAAAk3D,EAAAlpC,EAAA/tB,EAAAD,EAAAC,EAAAD,GAGA,SAAAm3D,GAAAp/C,EAAAiK,EAAAsa,EAAA7O,GACA,MAAA6H,OAAAA,EAAAh/B,QAAAA,GAAA0rB,GACAgM,MAAAA,EAAAhuB,MAAAA,EAAAy3B,KAAAA,EAAA7iB,KAAAA,GAAAiiD,GAAAvhC,EAAAgH,EAAA7O,GACA2pC,EA1BA,SAAA9gE,GACA,OAAAA,EAAA+gE,QACAr2C,GAEA1qB,EAAAwhC,SAAA,aAAAxhC,EAAAshC,uBACAxW,GAEAlB,GAmBAo3C,CAAAhhE,GACA,IACAxD,EAAA0tB,EAAAqX,GADAyW,KAAAA,GAAA,EAAA95B,QAAAA,GAAAiZ,GAAA,GAEA,IAAA36B,EAAA,EAAAA,GAAA8hB,IAAA9hB,EACA0tB,EAAA8U,GAAAt1B,GAAAwU,EAAAI,EAAA9hB,EAAAA,IAAAk7B,GACAxN,EAAA2J,OAEAmkB,GACAv2B,EAAAgI,OAAAS,EAAAta,EAAAsa,EAAApF,GACAkzB,GAAA,GAEA8oB,EAAAr/C,EAAA8f,EAAArX,EAAAhM,EAAAle,EAAA+gE,SAEAx/B,EAAArX,GAMA,OAJAiX,IACAjX,EAAA8U,GAAAt1B,GAAAwU,EAAAI,EAAA,IAAAoZ,GACAopC,EAAAr/C,EAAA8f,EAAArX,EAAAhM,EAAAle,EAAA+gE,YAEA5/B,EAEA,SAAA8/B,GAAAx/C,EAAAiK,EAAAsa,EAAA7O,GACA,MAAA6H,EAAAtT,EAAAsT,QACAtH,MAAAA,EAAAhuB,MAAAA,EAAA4U,KAAAA,GAAAiiD,GAAAvhC,EAAAgH,EAAA7O,IACA6gB,KAAAA,GAAA,EAAA95B,QAAAA,GAAAiZ,GAAA,GACA,IAEA36B,EAAA0tB,EAAAg3C,EAAA1H,EAAAF,EAAA6H,EAFAC,EAAA,EACAC,EAAA,EAEA,MAAAC,EAAAjhE,IAAAqJ,GAAAwU,EAAAI,EAAAje,EAAAA,IAAAq3B,EACA6pC,EAAA,KACA/H,IAAAF,IACA73C,EAAAmI,OAAAw3C,EAAA9H,GACA73C,EAAAmI,OAAAw3C,EAAA5H,GACA/3C,EAAAmI,OAAAw3C,EAAAD,KAOA,IAJAnpB,IACA9tB,EAAA8U,EAAAsiC,EAAA,IACA7/C,EAAAgI,OAAAS,EAAAta,EAAAsa,EAAApF,IAEAtoB,EAAA,EAAAA,GAAA8hB,IAAA9hB,EAAA,CAEA,GADA0tB,EAAA8U,EAAAsiC,EAAA9kE,IACA0tB,EAAA2J,KACA,SAEA,MAAAjkB,EAAAsa,EAAAta,EACAkV,EAAAoF,EAAApF,EACA08C,EAAA,EAAA5xD,EACA4xD,IAAAN,GACAp8C,EAAA00C,EACAA,EAAA10C,EACAA,EAAAw0C,IACAA,EAAAx0C,GAEAs8C,GAAAC,EAAAD,EAAAxxD,KAAAyxD,IAEAE,IACA9/C,EAAAmI,OAAAha,EAAAkV,GACAo8C,EAAAM,EACAH,EAAA,EACA7H,EAAAF,EAAAx0C,GAEAq8C,EAAAr8C,EAEAy8C,IAEA,SAAAE,GAAA/1C,GACA,MAAAJ,EAAAI,EAAA1rB,QACAgoC,EAAA1c,EAAA0c,YAAA1c,EAAA0c,WAAA7qC,OAEA,QADAuuB,EAAAkwC,YAAAlwC,EAAAqb,OAAAzb,EAAAkW,SAAA,aAAAlW,EAAAgW,wBAAAhW,EAAAy1C,SAAA/4B,GACAi5B,GAAAJ,GAzHAhB,GAAAziD,GAAA,MACAyiD,GAAAj/C,SAAA,CACA25C,YAAA,SACA11D,YAAA,OACAC,aAAA,EACAvE,YAAA,EACA6E,OAAA,EACAk1C,QAAA,EACAr0B,WAAAznB,GAEAqhE,GAAAtnB,cAAA,CACA3zC,gBAAA,mBAgJA,MAAA88D,GAAA,mBAAAC,OACA,SAAAp2D,GAAAkW,EAAAiK,EAAAhiB,EAAAguB,GACAgqC,IAAA,IAAAh2C,EAAAib,SAAAxpC,OAzBA,SAAAskB,EAAAiK,EAAAhiB,EAAAguB,GACA,IAAAkqC,EAAAl2C,EAAAm2C,MACAD,IACAA,EAAAl2C,EAAAm2C,MAAA,IAAAF,OACAj2C,EAAAk2C,KAAAA,EAAAl4D,EAAAguB,IACAkqC,EAAAp4C,aAGA62C,GAAA5+C,EAAAiK,EAAA1rB,SACAyhB,EAAAuI,OAAA43C,GAiBAE,CAAArgD,EAAAiK,EAAAhiB,EAAAguB,GAfA,SAAAjW,EAAAiK,EAAAhiB,EAAAguB,GACA,MAAAiP,SAAAA,EAAA3mC,QAAAA,GAAA0rB,EACAq2C,EAAAN,GAAA/1C,GACA,IAAA,MAAAsa,KAAAW,EACA05B,GAAA5+C,EAAAzhB,EAAAgmC,EAAA3kB,OACAI,EAAA6H,YACAy4C,EAAAtgD,EAAAiK,EAAAsa,EAAA,CAAAt8B,MAAAA,EAAAC,IAAAD,EAAAguB,EAAA,KACAjW,EAAA+H,YAEA/H,EAAAuI,SAQAg4C,CAAAvgD,EAAAiK,EAAAhiB,EAAAguB,GAGA,MAAAuqC,WAAA7pB,GACAnuC,YAAA4iC,GACA0Q,QACA7+C,KAAAm9D,UAAA,EACAn9D,KAAAsB,aAAAxB,EACAE,KAAAqoC,WAAAvoC,EACAE,KAAA2oC,eAAA7oC,EACAE,KAAAmjE,WAAArjE,EACAE,KAAAwjE,aAAA1jE,EACAE,KAAAyjE,eAAA3jE,EACAE,KAAAk9D,YAAA,EACAl9D,KAAA0jE,gBAAA,EACA1jE,KAAAkpC,mBAAAppC,EACAquC,GACA3tC,OAAAC,OAAAT,KAAAmuC,GAGA5iC,oBAAA+pB,EAAAvzB,GACA,MAAAqK,EAAApM,KACAsB,EAAA8K,EAAA9K,QACA,IAAAA,EAAAwhC,SAAA,aAAAxhC,EAAAshC,0BAAAthC,EAAA+gE,UAAAj2D,EAAAs3D,eAAA,CACA,MAAAjhC,EAAAnhC,EAAAqhC,SAAAv2B,EAAAi8B,MAAAj8B,EAAAu8B,UACAnG,GAAAp2B,EAAAo3D,QAAAliE,EAAAg0B,EAAAmN,EAAA1gC,GACAqK,EAAAs3D,gBAAA,GAGApjC,WAAAA,GACA,MAAAl0B,EAAApM,KACAoM,EAAAo3D,QAAAljC,SACAl0B,EAAAq3D,iBACAr3D,EAAA+2D,MACA/2D,EAAAs3D,gBAAA,EAEApjC,aACA,OAAAtgC,KAAAwjE,QAEAv7B,eACA,OAAAjoC,KAAAyjE,YAAAzjE,KAAAyjE,UAAAt7B,GAAAnoC,KAAAA,KAAAsB,QAAAgmC,UAEA/7B,QACA,MAAA08B,EAAAjoC,KAAAioC,SACA3H,EAAAtgC,KAAAsgC,OACA,OAAA2H,EAAAxpC,QAAA6hC,EAAA2H,EAAA,GAAAj9B,OAEAO,OACA,MAAA08B,EAAAjoC,KAAAioC,SACA3H,EAAAtgC,KAAAsgC,OACAtH,EAAAiP,EAAAxpC,OACA,OAAAu6B,GAAAsH,EAAA2H,EAAAjP,EAAA,GAAA/tB,KAEAM,YAAAigB,EAAA7E,GACA,MAAAva,EAAApM,KACAsB,EAAA8K,EAAA9K,QACA0C,EAAAwnB,EAAA7E,GACA2Z,EAAAl0B,EAAAk0B,OACA2H,EAAAD,GAAA57B,EAAA,CAAAua,SAAAA,EAAA3b,MAAAhH,EAAAiH,IAAAjH,IACA,IAAAikC,EAAAxpC,OACA,OAEA,MAAAunB,EAAA,GACA29C,EApGA,SAAAriE,GACA,OAAAA,EAAA+gE,QACAl9B,GAEA7jC,EAAAwhC,SAAA,aAAAxhC,EAAAshC,uBACAwC,GAEAF,GA6FA0+B,CAAAtiE,GACA,IAAAxD,EAAA8hB,EACA,IAAA9hB,EAAA,EAAA8hB,EAAAqoB,EAAAxpC,OAAAX,EAAA8hB,IAAA9hB,EAAA,CACA,MAAAkN,MAAAA,EAAAC,IAAAA,GAAAg9B,EAAAnqC,GACA+S,EAAAyvB,EAAAt1B,GACA8F,EAAAwvB,EAAAr1B,GACA,GAAA4F,IAAAC,EAAA,CACAkV,EAAArY,KAAAkD,GACA,SAEA,MACAgzD,EAAAF,EAAA9yD,EAAAC,EADArO,KAAA6jB,KAAAtiB,EAAA6M,EAAA8V,KAAA7V,EAAA6V,GAAA9V,EAAA8V,KACArlB,EAAA+gE,SACAwB,EAAAl9C,GAAA6E,EAAA7E,GACAX,EAAArY,KAAAk2D,GAEA,OAAA,IAAA79C,EAAAvnB,OAAAunB,EAAA,GAAAA,EAEAza,YAAAwX,EAAAukB,EAAA7O,GAEA,OADAsqC,GAAA/iE,KACAqjE,CAAAtgD,EAAA/iB,KAAAsnC,EAAA7O,GAEAltB,KAAAwX,EAAA/X,EAAAguB,GACA,MAAA5sB,EAAApM,KACAioC,EAAA77B,EAAA67B,SACAo7B,EAAAN,GAAA32D,GACA,IAAAq2B,EAAAr2B,EAAAi8B,MACAr9B,EAAAA,GAAA,EACAguB,EAAAA,GAAA5sB,EAAAk0B,OAAA7hC,OAAAuM,EACA,IAAA,MAAAs8B,KAAAW,EACAxF,GAAA4gC,EAAAtgD,EAAA3W,EAAAk7B,EAAA,CAAAt8B,MAAAA,EAAAC,IAAAD,EAAAguB,EAAA,IAEA,QAAAyJ,EAEAl3B,KAAAwX,EAAAuS,EAAAtqB,EAAAguB,GACA,MAAA5sB,EAAApM,KACAsB,EAAA8K,EAAA9K,SAAA,IACA8K,EAAAk0B,QAAA,IACA7hC,QAAA6C,EAAAO,cAGAkhB,EAAAoG,OACAtc,GAAAkW,EAAA3W,EAAApB,EAAAguB,GACAjW,EAAAwG,UACAnd,EAAA+wD,WACA/wD,EAAAs3D,gBAAA,EACAt3D,EAAA+2D,WAAArjE,KA2BA,SAAAgkE,GAAA5jE,EAAAghB,EAAAlf,EAAAqzB,GACA,MAAA/zB,EAAApB,EAAAoB,SACAiK,CAAAvJ,GAAAgC,GAAA9D,EAAAy5C,SAAA,CAAA33C,GAAAqzB,GACA,OAAA5yB,KAAA6jB,IAAApF,EAAAld,GAAA1C,EAAAkpB,OAAAlpB,EAAAyiE,UA1BAR,GAAA7kD,GAAA,OACA6kD,GAAArhD,SAAA,CACAmnB,eAAA,OACAC,WAAA,GACAC,iBAAA,EACAC,gBAAA,QACA3nC,YAAA,EACAkhC,iBAAA,EACAH,uBAAA,UACAvX,MAAA,EACAsX,UAAA,EACA0/B,SAAA,EACAv/B,QAAA,GAEAygC,GAAA1pB,cAAA,CACA3zC,gBAAA,kBACAC,YAAA,eAEAo9D,GAAA5hD,YAAA,CACA6C,aAAA,EACAE,WAAAnb,GAAA,eAAAA,GAAA,SAAAA,GAQA,MAAAy6D,WAAAtqB,GACAnuC,YAAA4iC,GACA0Q,QACA7+C,KAAAsB,aAAAxB,EACAE,KAAA+E,YAAAjF,EACAE,KAAAm1B,UAAAr1B,EACAE,KAAAyoC,UAAA3oC,EACAquC,GACA3tC,OAAAC,OAAAT,KAAAmuC,GAGA5iC,QAAA04D,EAAAC,EAAA7uC,GACA,MAAA/zB,EAAAtB,KAAAsB,SACA4P,EAAAA,EAAAkV,EAAAA,GAAApmB,KAAA25C,SAAA,CAAA,IAAA,KAAAtkB,GACA,OAAA5yB,KAAAmjB,IAAAq+C,EAAA/yD,EAAA,GAAAzO,KAAAmjB,IAAAs+C,EAAA99C,EAAA,GAAA3jB,KAAAmjB,IAAAtkB,EAAAyiE,UAAAziE,EAAAkpB,OAAA,GAEAjf,SAAA04D,EAAA5uC,GACA,OAAAyuC,GAAA9jE,KAAAikE,EAAA,IAAA5uC,GAEA9pB,SAAA24D,EAAA7uC,GACA,OAAAyuC,GAAA9jE,KAAAkkE,EAAA,IAAA7uC,GAEA9pB,eAAA8pB,GACA,MAAAnkB,EAAAA,EAAAkV,EAAAA,GAAApmB,KAAA25C,SAAA,CAAA,IAAA,KAAAtkB,GACA,MAAA,CAAAnkB,EAAAA,EAAAkV,EAAAA,GAEA7a,KAAAjK,GAEA,IAAAkpB,GADAlpB,EAAAA,GAAAtB,KAAAsB,SAAA,IACAkpB,QAAA,EACAA,EAAA/nB,KAAAF,IAAAioB,EAAAA,GAAAlpB,EAAA6iE,aAAA,GAEA,OAAA,GAAA35C,GADAA,GAAAlpB,EAAAO,aAAA,IAGA0J,KAAAwX,EAAA0I,GACA,MAAArf,EAAApM,KACAsB,EAAA8K,EAAA9K,QACA8K,EAAA+oB,MAAA7zB,EAAAkpB,OAAA,KAAAe,GAAAnf,EAAAqf,EAAArf,EAAAoV,KAAAlgB,GAAA,KAGAyhB,EAAAuK,YAAAhsB,EAAA6E,YACA4c,EAAAwK,UAAAjsB,EAAAO,YACAkhB,EAAAmK,UAAA5rB,EAAA4E,gBACAgkB,GAAAnH,EAAAzhB,EAAA8K,EAAA8E,EAAA9E,EAAAga,IAEA7a,WACA,MAAAjK,EAAAtB,KAAAsB,SAAA,GACA,OAAAA,EAAAkpB,OAAAlpB,EAAAyiE,WAkBA,SAAAK,GAAAC,EAAAhvC,GACA,MAAAnkB,EAAAA,EAAAkV,EAAAA,EAAAsJ,KAAAA,EAAA5G,MAAAA,EAAAmB,OAAAA,GAAAo6C,EAAA1qB,SAAA,CAAA,IAAA,IAAA,OAAA,QAAA,UAAAtkB,GACA,IAAAlqB,EAAAC,EAAAugB,EAAAC,EAAA04C,EAcA,OAbAD,EAAA7qC,YACA8qC,EAAAr6C,EAAA,EACA9e,EAAA1I,KAAAY,IAAA6N,EAAAwe,GACAtkB,EAAA3I,KAAAF,IAAA2O,EAAAwe,GACA/D,EAAAvF,EAAAk+C,EACA14C,EAAAxF,EAAAk+C,IAEAA,EAAAx7C,EAAA,EACA3d,EAAA+F,EAAAozD,EACAl5D,EAAA8F,EAAAozD,EACA34C,EAAAlpB,KAAAY,IAAA+iB,EAAAsJ,GACA9D,EAAAnpB,KAAAF,IAAA6jB,EAAAsJ,IAEA,CAAAvkB,KAAAA,EAAAwgB,IAAAA,EAAAvgB,MAAAA,EAAAwgB,OAAAA,GAEA,SAAA24C,GAAApvC,EAAAnxB,EAAAX,EAAAd,GACA,OAAA4yB,EAAA,EAAA9M,GAAArkB,EAAAX,EAAAd,GA2BA,SAAAiiE,GAAAH,GACA,MAAA98B,EAAA68B,GAAAC,GACAv7C,EAAAye,EAAAn8B,MAAAm8B,EAAAp8B,KACA8e,EAAAsd,EAAA3b,OAAA2b,EAAA5b,IACA6xC,EA7BA,SAAA6G,EAAAI,EAAAC,GACA,MAAA1gE,EAAAqgE,EAAA/iE,QAAAO,YACAszB,EAAAkvC,EAAAzO,cACA/3D,EAAAw5B,GAAArzB,GACA,MAAA,CACApG,EAAA2mE,GAAApvC,EAAAxJ,IAAA9tB,EAAA8tB,IAAA,EAAA+4C,GACAjnE,EAAA8mE,GAAApvC,EAAA/pB,MAAAvN,EAAAuN,MAAA,EAAAq5D,GACA/1D,EAAA61D,GAAApvC,EAAAvJ,OAAA/tB,EAAA+tB,OAAA,EAAA84C,GACAr1D,EAAAk1D,GAAApvC,EAAAhqB,KAAAtN,EAAAsN,KAAA,EAAAs5D,IAqBAE,CAAAN,EAAAv7C,EAAA,EAAAmB,EAAA,GACAO,EAnBA,SAAA65C,EAAAI,EAAAC,GACA,MAAA5O,mBAAAA,GAAAuO,EAAA1qB,SAAA,CAAA,uBACA31C,EAAAqgE,EAAA/iE,QAAA8E,aACAvI,EAAAy5B,GAAAtzB,GACA4gE,EAAAniE,KAAAY,IAAAohE,EAAAC,GACAvvC,EAAAkvC,EAAAzO,cACAiP,EAAA/O,GAAAj3C,EAAA7a,GACA,MAAA,CACAsqB,QAAAi2C,IAAAM,GAAA1vC,EAAAxJ,KAAAwJ,EAAAhqB,KAAAtN,EAAAywB,QAAA,EAAAs2C,GACAn2C,SAAA81C,IAAAM,GAAA1vC,EAAAxJ,KAAAwJ,EAAA/pB,MAAAvN,EAAA4wB,SAAA,EAAAm2C,GACAr2C,WAAAg2C,IAAAM,GAAA1vC,EAAAvJ,QAAAuJ,EAAAhqB,KAAAtN,EAAA0wB,WAAA,EAAAq2C,GACAp2C,YAAA+1C,IAAAM,GAAA1vC,EAAAvJ,QAAAuJ,EAAA/pB,MAAAvN,EAAA2wB,YAAA,EAAAo2C,IAQAE,CAAAT,EAAAv7C,EAAA,EAAAmB,EAAA,GACA,MAAA,CACA86C,MAAA,CACA7zD,EAAAq2B,EAAAp8B,KACAib,EAAAmhB,EAAA5b,IACAzb,EAAA4Y,EACAxZ,EAAA2a,EACAO,OAAAA,GAEAu2C,MAAA,CACA7vD,EAAAq2B,EAAAp8B,KAAAqyD,EAAAnuD,EACA+W,EAAAmhB,EAAA5b,IAAA6xC,EAAA5/D,EACAsS,EAAA4Y,EAAA00C,EAAAnuD,EAAAmuD,EAAA//D,EACA6R,EAAA2a,EAAAuzC,EAAA5/D,EAAA4/D,EAAA9uD,EACA8b,OAAA,CACA8D,QAAA7rB,KAAAF,IAAA,EAAAioB,EAAA8D,QAAA7rB,KAAAF,IAAAi7D,EAAA5/D,EAAA4/D,EAAAnuD,IACAof,SAAAhsB,KAAAF,IAAA,EAAAioB,EAAAiE,SAAAhsB,KAAAF,IAAAi7D,EAAA5/D,EAAA4/D,EAAA//D,IACA8wB,WAAA9rB,KAAAF,IAAA,EAAAioB,EAAA+D,WAAA9rB,KAAAF,IAAAi7D,EAAA9uD,EAAA8uD,EAAAnuD,IACAmf,YAAA/rB,KAAAF,IAAA,EAAAioB,EAAAgE,YAAA/rB,KAAAF,IAAAi7D,EAAA9uD,EAAA8uD,EAAA//D,OAKA,SAAA+3B,GAAA6uC,EAAAnzD,EAAAkV,EAAAiP,GACA,MAAA2vC,EAAA,OAAA9zD,EACA+zD,EAAA,OAAA7+C,EAEAmhB,EAAA88B,KADAW,GAAAC,IACAb,GAAAC,EAAAhvC,GACA,OAAAkS,IACAy9B,GAAA9zD,GAAAq2B,EAAAp8B,MAAA+F,GAAAq2B,EAAAn8B,SACA65D,GAAA7+C,GAAAmhB,EAAA5b,KAAAvF,GAAAmhB,EAAA3b,QAKA,SAAAs5C,GAAAniD,EAAAqI,GACArI,EAAAqI,KAAAA,EAAAla,EAAAka,EAAAhF,EAAAgF,EAAAlb,EAAAkb,EAAA9b,GAEA,SAAA61D,GAAA/5C,EAAAipC,EAAA+Q,EAAA,IACA,MAAAl0D,EAAAka,EAAAla,IAAAk0D,EAAAl0D,GAAAmjD,EAAA,EACAjuC,EAAAgF,EAAAhF,IAAAg/C,EAAAh/C,GAAAiuC,EAAA,EACAnkD,GAAAkb,EAAAla,EAAAka,EAAAlb,IAAAk1D,EAAAl0D,EAAAk0D,EAAAl1D,EAAAmkD,EAAA,GAAAnjD,EACA5B,GAAA8b,EAAAhF,EAAAgF,EAAA9b,IAAA81D,EAAAh/C,EAAAg/C,EAAA91D,EAAA+kD,EAAA,GAAAjuC,EACA,MAAA,CACAlV,EAAAka,EAAAla,EAAAA,EACAkV,EAAAgF,EAAAhF,EAAAA,EACAlW,EAAAkb,EAAAlb,EAAAA,EACAZ,EAAA8b,EAAA9b,EAAAA,EACAkb,OAAAY,EAAAZ,QAlHAw5C,GAAAtlD,GAAA,QACAslD,GAAA9hD,SAAA,CACArgB,YAAA,EACAkiE,UAAA,EACAjI,iBAAA,EACAqI,YAAA,EACA75C,WAAA,SACAE,OAAA,EACAD,SAAA,GAEAy5C,GAAAnqB,cAAA,CACA3zC,gBAAA,kBACAC,YAAA,eAyGA,MAAAk/D,WAAA3rB,GACAnuC,YAAA4iC,GACA0Q,QACA7+C,KAAAsB,aAAAxB,EACAE,KAAAw5B,gBAAA15B,EACAE,KAAA0vB,UAAA5vB,EACAE,KAAA8oB,WAAAhpB,EACAE,KAAAiqB,YAAAnqB,EACAquC,GACA3tC,OAAAC,OAAAT,KAAAmuC,GAGA5iC,KAAAwX,GACA,MAAAzhB,EAAAtB,KAAAsB,SACAy/D,MAAAA,EAAAgE,MAAAA,GAAAP,GAAAxkE,MACAslE,GAlCA96C,EAkCAu6C,EAAAv6C,QAjCA8D,SAAA9D,EAAAiE,UAAAjE,EAAA+D,YAAA/D,EAAAgE,YAiCAH,GAAA62C,GAlCA,IAAA16C,EAmCA,MAAA+6C,EAAA,IACAxiD,EAAAoG,OACA47C,EAAA70D,IAAA6wD,EAAA7wD,GAAA60D,EAAAz1D,IAAAyxD,EAAAzxD,IACAyT,EAAA6H,YACA06C,EAAAviD,EAAAoiD,GAAAJ,EAAAQ,EAAAxE,IACAh+C,EAAA+I,OACAw5C,EAAAviD,EAAAoiD,GAAApE,GAAA,IAAAgE,IACAhiD,EAAAmK,UAAA5rB,EAAA6E,YACA4c,EAAAsI,KAAA,YAEAtI,EAAA6H,YACA06C,EAAAviD,EAAAoiD,GAAApE,EAAAwE,EAAAR,IACAhiD,EAAAmK,UAAA5rB,EAAA4E,gBACA6c,EAAAsI,OACAtI,EAAAwG,UAEAhe,QAAA04D,EAAAC,EAAA7uC,GACA,OAAAG,GAAAx1B,KAAAikE,EAAAC,EAAA7uC,GAEA9pB,SAAA04D,EAAA5uC,GACA,OAAAG,GAAAx1B,KAAAikE,EAAA,KAAA5uC,GAEA9pB,SAAA24D,EAAA7uC,GACA,OAAAG,GAAAx1B,KAAA,KAAAkkE,EAAA7uC,GAEA9pB,eAAA8pB,GACA,MAAAnkB,EAAAA,EAAAkV,EAAAA,EAAAsJ,KAAAA,EAAA8J,WAAAA,GAAAx5B,KAAA25C,SAAA,CAAA,IAAA,IAAA,OAAA,cAAAtkB,GACA,MAAA,CACAnkB,EAAAsoB,GAAAtoB,EAAAwe,GAAA,EAAAxe,EACAkV,EAAAoT,EAAApT,GAAAA,EAAAsJ,GAAA,GAGAnkB,SAAAvJ,GACA,MAAA,MAAAA,EAAAhC,KAAA8oB,MAAA,EAAA9oB,KAAAiqB,OAAA,GAGAo7C,GAAA3mD,GAAA,MACA2mD,GAAAnjD,SAAA,CACA0zC,cAAA,QACA/zD,YAAA,EACAuE,aAAA,EACA0vD,oBAAA,EACAxrC,gBAAAxqB,GAEAulE,GAAAxrB,cAAA,CACA3zC,gBAAA,kBACAC,YAAA,eAGA,IAAAqc,GAAAhiB,OAAAg8B,OAAA,CACAkN,UAAA,KACAy3B,WAAAA,GACAoC,YAAAA,GACAS,aAAAA,GACAqB,WAAAA,KAsGA,SAAAG,GAAA1gE,GACA,GAAAA,EAAAo4D,WAAA,CACA,MAAA78D,EAAAyE,EAAAE,aACAF,EAAAo4D,kBACAp4D,EAAAE,MACAxE,OAAA+uB,eAAAzqB,EAAA,OAAA,CAAAd,MAAA3D,KAGA,SAAAolE,GAAA5+D,GACAA,EAAAxG,KAAAY,SAAAS,SAAAoD,IACA0gE,GAAA1gE,MAmBA,IAAA4gE,GAAA,CACAhnD,GAAA,aACAwD,SAAA,CACAyjD,UAAA,UACApqB,SAAA,GAEAqqB,qBAAA,CAAA/+D,EAAAyD,EAAAhJ,KACA,IAAAA,EAAAi6C,QAEA,YADAkqB,GAAA5+D,GAGA,MAAA4yB,EAAA5yB,EAAAiiB,MACAjiB,EAAAxG,KAAAY,SAAAS,SAAA,CAAAoD,EAAAib,KACA,MAAA/a,MAAAA,EAAAjD,UAAAA,GAAA+C,EACA2xB,EAAA5vB,EAAA6vB,eAAA3W,GACA1f,EAAA2E,GAAAF,EAAAzE,KACA,GAAA,MAAAs3B,GAAA,CAAA51B,EAAA8E,EAAAvF,QAAAS,YACA,OAEA,GAAA,SAAA00B,EAAAt1B,KACA,OAEA,MAAA0kE,EAAAh/D,EAAA+c,OAAA6S,EAAA2d,SACA,GAAA,WAAAyxB,EAAA1kE,MAAA,SAAA0kE,EAAA1kE,KACA,OAEA,GAAA0F,EAAAvF,QAAAkiB,QACA,OAEA,IAAAxY,MAAAA,EAAAguB,MAAAA,GA7CA,SAAAvC,EAAA6J,GACA,MAAAm8B,EAAAn8B,EAAA7hC,OACA,IACAu6B,EADAhuB,EAAA,EAEA,MAAAwpB,OAAAA,GAAAiC,GACApzB,IAAAA,EAAAd,IAAAA,EAAA00C,WAAAA,EAAAC,WAAAA,GAAA1iB,EAAA2iB,gBASA,OARAF,IACAjsC,EAAAqd,GAAA2G,GAAAsR,EAAA9L,EAAAxyB,KAAAqB,GAAA0rB,GAAA,EAAA0tC,EAAA,IAGAzjC,EADAke,EACA7uB,GAAA2G,GAAAsR,EAAA9L,EAAAxyB,KAAAO,GAAAusB,GAAA,EAAA9jB,EAAAyxD,GAAAzxD,EAEAyxD,EAAAzxD,EAEA,CAAAA,MAAAA,EAAAguB,MAAAA,GA+BA8sC,CAAArvC,EAAAp2B,GAEA,GAAA24B,IADA13B,EAAAykE,WAAA,EAAAtsC,GAGA,YADA+rC,GAAA1gE,GAiBA,IAAAkhE,EACA,OAfArnD,EAAA3Z,KACAF,EAAAE,MAAA3E,SACAyE,EAAAzE,KACAG,OAAA+uB,eAAAzqB,EAAA,OAAA,CACA0qB,cAAA,EACAlL,YAAA,EACAlX,IAAA,WACA,OAAApN,KAAAk9D,YAEA3vD,IAAA,SAAAoB,GACA3O,KAAAgF,MAAA2J,MAKArN,EAAAqkE,WACA,IAAA,OACAK,EApLA,SAAA3lE,EAAA2K,EAAAguB,EAAAS,EAAAn4B,GACA,MAAA2kE,EAAA3kE,EAAA2kE,SAAAxsC,EACA,GAAAwsC,GAAAjtC,EACA,OAAA34B,EAAAiJ,MAAA0B,EAAAA,EAAAguB,GAEA,MAAAgtC,EAAA,GACAE,GAAAltC,EAAA,IAAAitC,EAAA,GACA,IAAAE,EAAA,EACA,MAAAC,EAAAp7D,EAAAguB,EAAA,EACA,IACAl7B,EAAAuoE,EAAAC,EAAA76C,EAAA86C,EADApoE,EAAA6M,EAGA,IADAg7D,EAAAG,KAAA9lE,EAAAlC,GACAL,EAAA,EAAAA,EAAAmoE,EAAA,EAAAnoE,IAAA,CACA,IAEAme,EAFAymD,EAAA,EACA8D,EAAA,EAEA,MAAAC,EAAAhkE,KAAAojB,OAAA/nB,EAAA,GAAAooE,GAAA,EAAAl7D,EACA07D,EAAAjkE,KAAAY,IAAAZ,KAAAojB,OAAA/nB,EAAA,GAAAooE,GAAA,EAAAltC,GAAAhuB,EACA27D,EAAAD,EAAAD,EACA,IAAAxqD,EAAAwqD,EAAAxqD,EAAAyqD,EAAAzqD,IACAymD,GAAAriE,EAAA4b,GAAA/K,EACAs1D,GAAAnmE,EAAA4b,GAAAmK,EAEAs8C,GAAAiE,EACAH,GAAAG,EACA,MAAAC,EAAAnkE,KAAAojB,MAAA/nB,EAAAooE,GAAA,EAAAl7D,EACA67D,EAAApkE,KAAAY,IAAAZ,KAAAojB,OAAA/nB,EAAA,GAAAooE,GAAA,EAAAltC,GAAAhuB,GACAkG,EAAA41D,EAAA1gD,EAAA2gD,GAAA1mE,EAAAlC,GAEA,IADAmoE,EAAA76C,GAAA,EACAxP,EAAA2qD,EAAA3qD,EAAA4qD,EAAA5qD,IACAwP,EAAA,GAAAhpB,KAAA6jB,KACAwgD,EAAApE,IAAAriE,EAAA4b,GAAAmK,EAAA2gD,IACAD,EAAAzmE,EAAA4b,GAAA/K,IAAAs1D,EAAAO,IAEAt7C,EAAA66C,IACAA,EAAA76C,EACA46C,EAAAhmE,EAAA4b,GACAsqD,EAAAtqD,GAGA+pD,EAAAG,KAAAE,EACAloE,EAAAooE,EAGA,OADAP,EAAAG,KAAA9lE,EAAA+lE,GACAJ,EAwIAgB,CAAA3mE,EAAA2K,EAAAguB,EAAAS,EAAAn4B,GACA,MACA,IAAA,UACA0kE,EAzIA,SAAA3lE,EAAA2K,EAAAguB,EAAAS,GACA,IAEA37B,EAAA0tB,EAAAta,EAAAkV,EAAAo8C,EAAAyE,EAAAC,EAAAC,EAAArM,EAAAF,EAFA8H,EAAA,EACAC,EAAA,EAEA,MAAAqD,EAAA,GACAI,EAAAp7D,EAAAguB,EAAA,EACAouC,EAAA/mE,EAAA2K,GAAAkG,EAEAm2D,EADAhnE,EAAA+lE,GAAAl1D,EACAk2D,EACA,IAAAtpE,EAAAkN,EAAAlN,EAAAkN,EAAAguB,IAAAl7B,EAAA,CACA0tB,EAAAnrB,EAAAvC,GACAoT,GAAAsa,EAAAta,EAAAk2D,GAAAC,EAAA5tC,EACArT,EAAAoF,EAAApF,EACA,MAAA08C,EAAA,EAAA5xD,EACA,GAAA4xD,IAAAN,EACAp8C,EAAA00C,GACAA,EAAA10C,EACA6gD,EAAAnpE,GACAsoB,EAAAw0C,IACAA,EAAAx0C,EACA8gD,EAAAppE,GAEA4kE,GAAAC,EAAAD,EAAAl3C,EAAAta,KAAAyxD,MACA,CACA,MAAA2E,EAAAxpE,EAAA,EACA,IAAA6gB,EAAAsoD,KAAAtoD,EAAAuoD,GAAA,CACA,MAAAK,EAAA9kE,KAAAY,IAAA4jE,EAAAC,GACAM,EAAA/kE,KAAAF,IAAA0kE,EAAAC,GACAK,IAAAJ,GAAAI,IAAAD,GACAtB,EAAAr4D,KAAA,IACAtN,EAAAknE,GACAr2D,EAAAwxD,IAGA8E,IAAAL,GAAAK,IAAAF,GACAtB,EAAAr4D,KAAA,IACAtN,EAAAmnE,GACAt2D,EAAAwxD,IAIA5kE,EAAA,GAAAwpE,IAAAH,GACAnB,EAAAr4D,KAAAtN,EAAAinE,IAEAtB,EAAAr4D,KAAA6d,GACAg3C,EAAAM,EACAH,EAAA,EACA7H,EAAAF,EAAAx0C,EACA6gD,EAAAC,EAAAC,EAAArpE,GAGA,OAAAkoE,EAsFAyB,CAAApnE,EAAA2K,EAAAguB,EAAAS,GACA,MACA,QACA,MAAA,IAAAr7B,MAAA,qCAAAkD,EAAAqkE,cAEA7gE,EAAAo4D,WAAA8I,MAGAz6D,QAAA1E,GACA4+D,GAAA5+D,KAwBA,SAAA6gE,GAAA16C,EAAArrB,EAAAq3B,GACA,MAAA3N,EAhBA,SAAA2B,GACA,MAAA1rB,EAAA0rB,EAAA1rB,QACAqmE,EAAArmE,EAAA+pB,KACA,IAAAA,EAAAnM,EAAAyoD,GAAAA,EAAAznD,OAAAynD,GAIA,YAHA7nE,IAAAurB,IACAA,IAAA/pB,EAAA4E,kBAEA,IAAAmlB,GAAA,OAAAA,KAGA,IAAAA,EACA,SAEAA,GAGAu8C,CAAA56C,GACA,GAAAnO,EAAAwM,GACA,OAAAznB,MAAAynB,EAAArnB,QAAAqnB,EAEA,IAAAnL,EAAArc,WAAAwnB,GACA,OAAAvM,EAAAoB,IAAAzd,KAAAojB,MAAA3F,KAAAA,GACA,MAAAmL,EAAA,IAAA,MAAAA,EAAA,KACAnL,EAAAve,EAAAue,KAEAA,IAAAve,GAAAue,EAAA,GAAAA,GAAA8Y,IAGA9Y,GAEA,CAAA,SAAA,QAAA,MAAA,QAAA,SAAAI,QAAA+K,IAAA,GAAAA,EAwBA,MAAAw8C,GACAt8D,YAAAqhB,GACA5sB,KAAAkR,EAAA0b,EAAA1b,EACAlR,KAAAomB,EAAAwG,EAAAxG,EACApmB,KAAAwqB,OAAAoC,EAAApC,OAEAjf,YAAAwX,EAAAwkB,EAAA3a,GACA,MAAA1b,EAAAA,EAAAkV,EAAAA,EAAAoE,OAAAA,GAAAxqB,KAGA,OAFAunC,EAAAA,GAAA,CAAAv8B,MAAA,EAAAC,IAAA4Z,IACA9B,EAAA8H,IAAA3Z,EAAAkV,EAAAoE,EAAA+c,EAAAt8B,IAAAs8B,EAAAv8B,OAAA,IACA4hB,EAAA2a,OAEAh8B,YAAAigB,GACA,MAAAta,EAAAA,EAAAkV,EAAAA,EAAAoE,OAAAA,GAAAxqB,KACAunB,EAAAiE,EAAAjE,MACA,MAAA,CACArW,EAAAA,EAAAzO,KAAAwoB,IAAA1D,GAAAiD,EACApE,EAAAA,EAAA3jB,KAAAuoB,IAAAzD,GAAAiD,EACAjD,MAAAA,IAkCA,SAAAugD,GAAA7nD,GAEA,OADAA,EAAA0D,OAAA,IACAk7C,yBAhCA,SAAA5+C,GACA,MAAA0D,MAAAA,EAAA0H,KAAAA,GAAApL,EACA3e,EAAAqiB,EAAAriB,QACA7C,EAAAklB,EAAAyyB,YAAA33C,OACAyhB,EAAA,GACAlV,EAAA1J,EAAAke,QAAAmE,EAAAphB,IAAAohB,EAAAtgB,IACA4H,EAAA3J,EAAAke,QAAAmE,EAAAtgB,IAAAsgB,EAAAphB,IACA,IAAAzE,EAAAm4B,EAAAjyB,EAUA,GARAA,EADA,UAAAqnB,EACArgB,EACA,QAAAqgB,EACApgB,EACA4T,EAAAwM,GACAA,EAAArnB,MAEA2f,EAAA8gC,eAEAnjD,EAAAk7C,KAAAgiB,SAEA,OADAvoC,EAAAtS,EAAAk7C,yBAAA,EAAA7zD,GACA,IAAA68D,GAAA,CACA32D,EAAA+kB,EAAA/kB,EACAkV,EAAA6P,EAAA7P,EACAoE,OAAA7G,EAAA26C,8BAAAt6D,KAGA,IAAAlG,EAAA,EAAAA,EAAAW,IAAAX,EACAoiB,EAAAvS,KAAAgW,EAAAk7C,yBAAA/gE,EAAAkG,IAEA,OAAAkc,EAKA6nD,CAAA9nD,GA7EA,SAAAA,GACA,MAAA0D,MAAAA,EAAA,GAAA0H,KAAAA,GAAApL,EACA,IACAuZ,EADAtZ,EAAA,KAWA,MATA,UAAAmL,EACAnL,EAAAyD,EAAAiI,OACA,QAAAP,EACAnL,EAAAyD,EAAAgI,IACA9M,EAAAwM,GACAnL,EAAAyD,EAAA4gC,iBAAAl5B,EAAArnB,OACA2f,EAAA4yC,eACAr2C,EAAAyD,EAAA4yC,gBAEAz3C,EAAAoB,IACAsZ,EAAA7V,EAAA8X,eACA,CACAvqB,EAAAsoB,EAAAtZ,EAAA,KACAkG,EAAAoT,EAAA,KAAAtZ,IAGA,KA2DA8nD,CAAA/nD,GAEA,SAAAgoD,GAAAj9D,EAAAC,EAAAq1B,GACA,KAAAr1B,EAAAD,EAAAC,IAAA,CACA,MAAAugB,EAAA8U,EAAAr1B,GACA,IAAArH,MAAA4nB,EAAAta,KAAAtN,MAAA4nB,EAAApF,GACA,MAGA,OAAAnb,EAoBA,SAAAi9D,GAAAjoD,GACA,MAAApZ,MAAAA,EAAA8c,MAAAA,EAAAhiB,MAAAA,EAAAqrB,KAAAA,GAAA/M,EACAqgB,EAAA,GACA2H,EAAAjb,EAAAib,SACAkgC,EAAAn7C,EAAAsT,OACA8nC,EAWA,SAAAvhE,EAAAlF,GACA,MAAA0mE,EAAA,GACAloB,EAAAt5C,EAAAquB,+BACA,IAAA,IAAAp3B,EAAA,EAAAA,EAAAqiD,EAAA1hD,OAAAX,IAAA,CACA,MAAA24B,EAAA0pB,EAAAriD,GACA,GAAA24B,EAAA90B,QAAAA,EACA,MAEA2mE,GAAA7xC,IACA4xC,EAAAE,QAAA9xC,EAAA3xB,SAGA,OAAAujE,EAvBAG,CAAA3hE,EAAAlF,GACAymE,EAAAz6D,KAAA86D,GAAA,CAAAv3D,EAAA,KAAAkV,EAAAzC,EAAAiI,QAAAoB,IACA,IAAA,IAAAlvB,EAAA,EAAAA,EAAAmqC,EAAAxpC,OAAAX,IAAA,CACA,MAAAwpC,EAAAW,EAAAnqC,GACA,IAAA,IAAAme,EAAAqrB,EAAAt8B,MAAAiR,GAAAqrB,EAAAr8B,IAAAgR,IACAysD,GAAApoC,EAAA6nC,EAAAlsD,GAAAmsD,GAGA,OAAA,IAAA7E,GAAA,CAAAjjC,OAAAA,EAAAh/B,QAAA,KAEA,MAAAgnE,GAAA7xC,GAAA,SAAAA,EAAAt1B,OAAAs1B,EAAAohB,OAeA,SAAA6wB,GAAApoC,EAAAqoC,EAAAP,GACA,MAAAQ,EAAA,GACA,IAAA,IAAA3sD,EAAA,EAAAA,EAAAmsD,EAAA3pE,OAAAwd,IAAA,CACA,MAAA+Q,EAAAo7C,EAAAnsD,IACAy/B,MAAAA,EAAAlT,KAAAA,EAAAhd,MAAAA,GAAAq9C,GAAA77C,EAAA27C,EAAA,KACA,MAAAn9C,GAAAkwB,GAAAlT,GAGA,GAAAkT,EACAktB,EAAAL,QAAA/8C,QAGA,GADA8U,EAAA3yB,KAAA6d,IACAgd,EACA,MAIAlI,EAAA3yB,QAAAi7D,GAEA,SAAAC,GAAA77C,EAAA27C,EAAAhiD,GACA,MAAA6E,EAAAwB,EAAA87C,YAAAH,EAAAhiD,GACA,IAAA6E,EACA,MAAA,GAEA,MAAAu9C,EAAAv9C,EAAA7E,GACAshB,EAAAjb,EAAAib,SACA+gC,EAAAh8C,EAAAsT,OACA,IAAAob,GAAA,EACAlT,GAAA,EACA,IAAA,IAAA1qC,EAAA,EAAAA,EAAAmqC,EAAAxpC,OAAAX,IAAA,CACA,MAAAwpC,EAAAW,EAAAnqC,GACAmrE,EAAAD,EAAA1hC,EAAAt8B,OAAA2b,GACAuiD,EAAAF,EAAA1hC,EAAAr8B,KAAA0b,GACA,GAAAoiD,GAAAE,GAAAF,GAAAG,EAAA,CACAxtB,EAAAqtB,IAAAE,EACAzgC,EAAAugC,IAAAG,EACA,OAGA,MAAA,CAAAxtB,MAAAA,EAAAlT,KAAAA,EAAAhd,MAAAA,GAmBA,SAAAi9C,GAAAU,EAAAn8C,GACA,IAAAsT,EAAA,GACA+H,GAAA,EAOA,OANA9nC,EAAA4oE,IACA9gC,GAAA,EACA/H,EAAA6oC,GAEA7oC,EAjHA,SAAA6oC,EAAAn8C,GACA,MAAA9b,EAAAA,EAAA,KAAAkV,EAAAA,EAAA,MAAA+iD,GAAA,GACAH,EAAAh8C,EAAAsT,OACAA,EAAA,GAaA,OAZAtT,EAAAib,SAAAvmC,SAAA,EAAAsJ,MAAAA,EAAAC,IAAAA,MACAA,EAAAg9D,GAAAj9D,EAAAC,EAAA+9D,GACA,MAAAttB,EAAAstB,EAAAh+D,GACAw9B,EAAAwgC,EAAA/9D,GACA,OAAAmb,GACAka,EAAA3yB,KAAA,CAAAuD,EAAAwqC,EAAAxqC,EAAAkV,EAAAA,IACAka,EAAA3yB,KAAA,CAAAuD,EAAAs3B,EAAAt3B,EAAAkV,EAAAA,KACA,OAAAlV,IACAovB,EAAA3yB,KAAA,CAAAuD,EAAAA,EAAAkV,EAAAs1B,EAAAt1B,IACAka,EAAA3yB,KAAA,CAAAuD,EAAAA,EAAAkV,EAAAoiB,EAAApiB,QAGAka,EAiGA8oC,CAAAD,EAAAn8C,GAEAsT,EAAA7hC,OAAA,IAAA8kE,GAAA,CACAjjC,OAAAA,EACAh/B,QAAA,CAAAwhC,QAAA,GACAuF,MAAAA,EACAM,UAAAN,IACA,KAEA,SAAAghC,GAAA1oD,EAAAhf,EAAA2nE,GAEA,IAAAj+C,EADA1K,EAAAhf,GACA0pB,KACA,MAAAk+C,EAAA,CAAA5nE,GACA,IAAAue,EACA,IAAAopD,EACA,OAAAj+C,EAEA,MAAA,IAAAA,IAAA,IAAAk+C,EAAAjpD,QAAA+K,IAAA,CACA,IAAAvM,EAAAuM,GACA,OAAAA,EAGA,GADAnL,EAAAS,EAAA0K,IACAnL,EACA,OAAA,EAEA,GAAAA,EAAAwvB,QACA,OAAArkB,EAEAk+C,EAAA57D,KAAA0d,GACAA,EAAAnL,EAAAmL,KAEA,OAAA,EAEA,SAAAmsB,GAAAz0B,EAAA7C,EAAAspD,GACAzmD,EAAA6H,YACA1K,EAAAgjD,KAAAngD,GACAA,EAAAmI,OAAAhL,EAAAsoB,OAAAt3B,EAAAs4D,GACAzmD,EAAAmI,OAAAhL,EAAAw7B,QAAAxqC,EAAAs4D,GACAzmD,EAAA+H,YACA/H,EAAA+I,OAEA,SAAA29C,GAAA9iD,EAAA+0B,EAAAlT,EAAA/F,GACA,GAAAA,EACA,OAEA,IAAAz3B,EAAA0wC,EAAA/0B,GACA1b,EAAAu9B,EAAA7hB,GAKA,MAJA,UAAAA,IACA3b,EAAA8c,GAAA9c,GACAC,EAAA6c,GAAA7c,IAEA,CAAA0b,SAAAA,EAAA3b,MAAAA,EAAAC,IAAAA,GAEA,SAAAy+D,GAAAvrE,EAAAuQ,EAAA0oB,EAAA13B,GACA,OAAAvB,GAAAuQ,EACAhP,EAAAvB,EAAAi5B,GAAA1oB,EAAA0oB,IAEAj5B,EAAAA,EAAAi5B,GAAA1oB,EAAAA,EAAA0oB,GAAA,EAwCA,SAAAuyC,GAAA5mD,EAAAY,EAAA4jB,GACA,MAAA5b,IAAAA,EAAAC,OAAAA,GAAAjI,EAAA9c,MAAAyuB,WACA3O,SAAAA,EAAA3b,MAAAA,EAAAC,IAAAA,GAAAs8B,GAAA,GACA,MAAA5gB,IACA5D,EAAA6H,YACA7H,EAAAqI,KAAApgB,EAAA2gB,EAAA1gB,EAAAD,EAAA4gB,EAAAD,GACA5I,EAAA+I,QAGA,SAAA89C,GAAA7mD,EAAA7C,EAAAsL,EAAA7E,GACA,MAAAkjD,EAAA3pD,EAAA4oD,YAAAt9C,EAAA7E,GACAkjD,GACA9mD,EAAAmI,OAAA2+C,EAAA34D,EAAA24D,EAAAzjD,GAGA,SAAA0jD,GAAA/mD,EAAAorB,GACA,MAAAnhB,KAAAA,EAAA9M,OAAAA,EAAAyG,SAAAA,EAAAtgB,MAAAA,EAAAsd,MAAAA,GAAAwqB,EACAlG,EAvDA,SAAAjb,EAAA9M,EAAAyG,GACA,MAAAshB,EAAAjb,EAAAib,SACA3H,EAAAtT,EAAAsT,OACAypC,EAAA7pD,EAAAogB,OACAooB,EAAA,GACA,IAAA,MAAAphB,KAAAW,EAAA,CACA,IAAAj9B,MAAAA,EAAAC,IAAAA,GAAAq8B,EACAr8B,EAAAg9D,GAAAj9D,EAAAC,EAAAq1B,GACA,MAAAiH,EAAAkiC,GAAA9iD,EAAA2Z,EAAAt1B,GAAAs1B,EAAAr1B,GAAAq8B,EAAA7E,MACA,IAAAviB,EAAA+nB,SAAA,CACAygB,EAAA/6C,KAAA,CACAsS,OAAAqnB,EACApnB,OAAAqnB,EACAv8B,MAAAs1B,EAAAt1B,GACAC,IAAAq1B,EAAAr1B,KAEA,SAEA,MAAA++D,EAAAhiC,GAAA9nB,EAAAqnB,GACA,IAAA,MAAA0iC,KAAAD,EAAA,CACA,MAAAE,EAAAT,GAAA9iD,EAAAojD,EAAAE,EAAAj/D,OAAA++D,EAAAE,EAAAh/D,KAAAg/D,EAAAxnC,MACA0nC,EAAA9iC,GAAAC,EAAAhH,EAAA4pC,GACA,IAAA,MAAAE,KAAAD,EACAzhB,EAAA/6C,KAAA,CACAsS,OAAAmqD,EACAlqD,OAAA+pD,EACAj/D,MAAA,CACAO,CAAAob,GAAA+iD,GAAAniC,EAAA2iC,EAAA,QAAAznE,KAAAF,MAEA0I,IAAA,CACAM,CAAAob,GAAA+iD,GAAAniC,EAAA2iC,EAAA,MAAAznE,KAAAY,SAMA,OAAAqlD,EAmBA+a,CAAAz2C,EAAA9M,EAAAyG,GACA,IAAA,MAAA1G,OAAAoqD,EAAAnqD,OAAA+pD,EAAAj/D,MAAAA,EAAAC,IAAAA,KAAAg9B,EAAA,CACA,MAAAtlB,OAAAzc,gBAAAA,EAAAG,GAAA,IAAAgkE,EACAC,GAAA,IAAApqD,EACA6C,EAAAoG,OACApG,EAAAmK,UAAAhnB,EACAyjE,GAAA5mD,EAAAY,EAAA2mD,GAAAb,GAAA9iD,EAAA3b,EAAAC,IACA8X,EAAA6H,YACA,MAAA2/C,IAAAv9C,EAAAm1C,YAAAp/C,EAAAsnD,GACA,IAAA5nC,EACA,GAAA6nC,EAAA,CACAC,EACAxnD,EAAA+H,YAEA8+C,GAAA7mD,EAAA7C,EAAAjV,EAAA0b,GAEA,MAAA6jD,IAAAtqD,EAAAiiD,YAAAp/C,EAAAknD,EAAA,CAAA3wB,KAAAixB,EAAA/qD,SAAA,IACAijB,EAAA8nC,GAAAC,EACA/nC,GACAmnC,GAAA7mD,EAAA7C,EAAAlV,EAAA2b,GAGA5D,EAAA+H,YACA/H,EAAAsI,KAAAoX,EAAA,UAAA,WACA1f,EAAAwG,WAiBA,SAAAkhD,GAAA1nD,EAAA9C,EAAAwL,GACA,MAAAvL,EApLA,SAAAD,GACA,MAAApZ,MAAAA,EAAAwkB,KAAAA,EAAA2B,KAAAA,GAAA/M,EACA,GAAAnB,EAAAuM,GACA,OA3NA,SAAAxkB,EAAAlF,GACA,MAAA80B,EAAA5vB,EAAA6vB,eAAA/0B,GAEA,OADA80B,GAAA5vB,EAAA6pD,iBAAA/uD,GACA80B,EAAA3xB,QAAA,KAwNA4lE,CAAA7jE,EAAAwkB,GAEA,GAAA,UAAAA,EACA,OAAA68C,GAAAjoD,GAEA,GAAA,UAAAoL,EACA,OAAA,EAEA,MAAA89C,EAAArB,GAAA7nD,GACA,OAAAkpD,aAAAtB,GACAsB,EAEAV,GAAAU,EAAAn8C,GAqKAgQ,CAAA/c,IACA+M,KAAAA,EAAArJ,MAAAA,EAAA3hB,KAAAA,GAAAie,EACA0qD,EAAA39C,EAAA1rB,QACAqmE,EAAAgD,EAAAt/C,KACAhlB,EAAAskE,EAAAzkE,iBACA0kE,MAAAA,EAAAvkE,EAAAgiE,MAAAA,EAAAhiE,GAAAshE,GAAA,GACAznD,GAAA8M,EAAAsT,OAAA7hC,SACAotB,GAAA9I,EAAA0I,GAtBA,SAAA1I,EAAAorB,GACA,MAAAnhB,KAAAA,EAAA9M,OAAAA,EAAA0qD,MAAAA,EAAAvC,MAAAA,EAAA58C,KAAAA,EAAA9H,MAAAA,GAAAwqB,EACAxnB,EAAAqG,EAAAqb,MAAA,QAAA8F,EAAAnsC,KACA+gB,EAAAoG,OACA,MAAAxC,GAAA0hD,IAAAuC,IACApzB,GAAAz0B,EAAA7C,EAAAuL,EAAAE,KACAm+C,GAAA/mD,EAAA,CAAAiK,KAAAA,EAAA9M,OAAAA,EAAA7Z,MAAAukE,EAAAjnD,MAAAA,EAAAgD,SAAAA,IACA5D,EAAAwG,UACAxG,EAAAoG,OACAquB,GAAAz0B,EAAA7C,EAAAuL,EAAAG,SAEAk+C,GAAA/mD,EAAA,CAAAiK,KAAAA,EAAA9M,OAAAA,EAAA7Z,MAAAgiE,EAAA1kD,MAAAA,EAAAgD,SAAAA,IACA5D,EAAAwG,UAWAshD,CAAA9nD,EAAA,CAAAiK,KAAAA,EAAA9M,OAAAA,EAAA0qD,MAAAA,EAAAvC,MAAAA,EAAA58C,KAAAA,EAAA9H,MAAAA,EAAA3hB,KAAAA,IACA+pB,GAAAhJ,IAGA,IAAA+nD,GAAA,CACApsD,GAAA,SACAnT,oBAAA1E,EAAAkkE,EAAAzpE,GACA,MAAA03B,GAAAnyB,EAAAxG,KAAAY,UAAA,IAAAxC,OACAkiB,EAAA,GACA,IAAA8V,EAAA34B,EAAAkvB,EAAA/M,EACA,IAAAniB,EAAA,EAAAA,EAAAk7B,IAAAl7B,EACA24B,EAAA5vB,EAAA6vB,eAAA54B,GACAkvB,EAAAyJ,EAAA3xB,QACAmb,EAAA,KACA+M,GAAAA,EAAA1rB,SAAA0rB,aAAAu2C,KACAtjD,EAAA,CACAyvB,QAAA7oC,EAAA6pD,iBAAA5yD,GACA6D,MAAA7D,EACAutB,KAAAq8C,GAAA16C,EAAAlvB,EAAAk7B,GACAnyB,MAAAA,EACA7E,KAAAy0B,EAAAnC,WAAAhzB,QAAAS,UACA4hB,MAAA8S,EAAAob,OACA7kB,KAAAA,IAGAyJ,EAAAu0C,QAAA/qD,EACAU,EAAAhT,KAAAsS,GAEA,IAAAniB,EAAA,EAAAA,EAAAk7B,IAAAl7B,EACAmiB,EAAAU,EAAA7iB,GACAmiB,IAAA,IAAAA,EAAAoL,OAGApL,EAAAoL,KAAAg+C,GAAA1oD,EAAA7iB,EAAAwD,EAAAgoE,aAGA/9D,WAAA1E,EAAAkkE,EAAAzpE,GACA,MAAAuL,EAAA,eAAAvL,EAAA2pE,SACAh2C,EAAApuB,EAAAquB,+BACAzJ,EAAA5kB,EAAAyuB,UACA,IAAA,IAAAx3B,EAAAm3B,EAAAx2B,OAAA,EAAAX,GAAA,IAAAA,EAAA,CACA,MAAAmiB,EAAAgV,EAAAn3B,GAAAktE,QACA/qD,IAGAA,EAAA+M,KAAA0wC,oBAAAjyC,EAAAxL,EAAAje,MACA6K,GACA49D,GAAA5jE,EAAAkc,IAAA9C,EAAAwL,MAIAlgB,mBAAA1E,EAAAkkE,EAAAzpE,GACA,GAAA,uBAAAA,EAAA2pE,SACA,OAEA,MAAAh2C,EAAApuB,EAAAquB,+BACA,IAAA,IAAAp3B,EAAAm3B,EAAAx2B,OAAA,EAAAX,GAAA,IAAAA,EAAA,CACA,MAAAmiB,EAAAgV,EAAAn3B,GAAAktE,QACA/qD,GACAwqD,GAAA5jE,EAAAkc,IAAA9C,EAAApZ,EAAAyuB,aAIA/pB,kBAAA1E,EAAAyD,EAAAhJ,GACA,MAAA2e,EAAA3V,EAAAmsB,KAAAu0C,QACA/qD,IAAA,IAAAA,EAAAoL,MAAA,sBAAA/pB,EAAA2pE,UAGAR,GAAA5jE,EAAAkc,IAAA9C,EAAApZ,EAAAyuB,YAEApT,SAAA,CACAonD,WAAA,EACA2B,SAAA,sBAIA,MAAAC,GAAA,CAAAC,EAAAnjB,KACA,IAAAojB,UAAAA,EAAApjB,EAAAqjB,SAAAA,EAAArjB,GAAAmjB,EAKA,OAJAA,EAAAG,gBACAF,EAAA3oE,KAAAY,IAAA+nE,EAAApjB,GACAqjB,EAAA5oE,KAAAY,IAAAgoE,EAAArjB,IAEA,CACAqjB,SAAAA,EACAD,UAAAA,EACAG,WAAA9oE,KAAAF,IAAAylD,EAAAojB,KAIA,MAAAI,WAAA9xB,GACAnuC,YAAA3L,GACAi/C,QACA7+C,KAAAyrE,QAAA,EACAzrE,KAAA0rE,eAAA,GACA1rE,KAAA2rE,aAAA,KACA3rE,KAAA4rE,cAAA,EACA5rE,KAAA6G,MAAAjH,EAAAiH,MACA7G,KAAAsB,QAAA1B,EAAA0B,QACAtB,KAAA+iB,IAAAnjB,EAAAmjB,IACA/iB,KAAA6rE,iBAAA/rE,EACAE,KAAA8rE,iBAAAhsE,EACAE,KAAA+rE,gBAAAjsE,EACAE,KAAA2yB,eAAA7yB,EACAE,KAAAytB,cAAA3tB,EACAE,KAAA2rB,SAAA7rB,EACAE,KAAA4rB,YAAA9rB,EACAE,KAAAmL,UAAArL,EACAE,KAAAoL,WAAAtL,EACAE,KAAAiqB,YAAAnqB,EACAE,KAAA8oB,WAAAhpB,EACAE,KAAA8+C,cAAAh/C,EACAE,KAAA+0B,cAAAj1B,EACAE,KAAAyd,YAAA3d,EACAE,KAAAs5B,cAAAx5B,EAEAyL,OAAAkiB,EAAAkF,EAAAD,GACA,MAAAtmB,EAAApM,KACAoM,EAAAqhB,SAAAA,EACArhB,EAAAumB,UAAAA,EACAvmB,EAAA0yC,SAAApsB,EACAtmB,EAAAs0C,gBACAt0C,EAAA4/D,cACA5/D,EAAAo1C,MAEAj2C,gBACA,MAAAa,EAAApM,KACAoM,EAAAqvB,gBACArvB,EAAA0c,MAAA1c,EAAAqhB,SACArhB,EAAAjB,KAAAiB,EAAA0yC,SAAA3zC,KACAiB,EAAAhB,MAAAgB,EAAA0c,QAEA1c,EAAA6d,OAAA7d,EAAAumB,UACAvmB,EAAAuf,IAAAvf,EAAA0yC,SAAAnzB,IACAvf,EAAAwf,OAAAxf,EAAA6d,QAGA1e,cACA,MAAAa,EAAApM,KACAmrE,EAAA/+D,EAAA9K,QAAAD,QAAA,GACA,IAAAwqE,EAAA9nE,EAAAonE,EAAAc,eAAA,CAAA7/D,EAAAvF,OAAAuF,IAAA,GACA++D,EAAA/yC,SACAyzC,EAAAA,EAAAzzC,QAAAxrB,GAAAu+D,EAAA/yC,OAAAxrB,EAAAR,EAAAvF,MAAAxG,SAEA8qE,EAAAjlD,OACA2lD,EAAAA,EAAA3lD,MAAA,CAAA/nB,EAAAuQ,IAAAy8D,EAAAjlD,KAAA/nB,EAAAuQ,EAAAtC,EAAAvF,MAAAxG,SAEA+L,EAAA9K,QAAAke,SACAqsD,EAAArsD,UAEApT,EAAAy/D,YAAAA,EAEAtgE,MACA,MAAAa,EAAApM,MACAsB,QAAAA,EAAAyhB,IAAAA,GAAA3W,EACA,IAAA9K,EAAAi7B,QAEA,YADAnwB,EAAA0c,MAAA1c,EAAA6d,OAAA,GAGA,MAAAkhD,EAAA7pE,EAAAD,OACA6qE,EAAA10C,GAAA2zC,EAAA7kE,MACA0hD,EAAAkkB,EAAA1qD,KACAyhC,EAAA72C,EAAA+/D,uBACAd,SAAAA,EAAAE,WAAAA,GAAAL,GAAAC,EAAAnjB,GACA,IAAAl/B,EAAAmB,EACAlH,EAAAzc,KAAA4lE,EAAAvjD,OACAvc,EAAAqvB,gBACA3S,EAAA1c,EAAAqhB,SACAxD,EAAA7d,EAAAggE,SAAAnpB,EAAA+E,EAAAqjB,EAAAE,GAAA,KAEAthD,EAAA7d,EAAAumB,UACA7J,EAAA1c,EAAAigE,SAAAppB,EAAA+E,EAAAqjB,EAAAE,GAAA,IAEAn/D,EAAA0c,MAAArmB,KAAAY,IAAAylB,EAAAxnB,EAAAmsB,UAAArhB,EAAAqhB,UACArhB,EAAA6d,OAAAxnB,KAAAY,IAAA4mB,EAAA3oB,EAAAqxB,WAAAvmB,EAAAumB,WAEApnB,SAAA03C,EAAA+E,EAAAqjB,EAAAE,GACA,MAAAn/D,EAAApM,MACA+iB,IAAAA,EAAA0K,SAAAA,EAAAnsB,SAAAD,QAAAkF,QAAAA,KAAA6F,EACAkgE,EAAAlgE,EAAAs/D,eAAA,GACAK,EAAA3/D,EAAA2/D,WAAA,CAAA,GACAnpD,EAAA2oD,EAAAhlE,EACA,IAAAgmE,EAAAtpB,EACAlgC,EAAAoK,UAAA,OACApK,EAAAqK,aAAA,SACA,IAAAo/C,GAAA,EACA7gD,GAAA/I,EAYA,OAXAxW,EAAAy/D,YAAAnqE,SAAA,CAAAw6D,EAAAp+D,KACA,MAAAwoC,EAAA+kC,EAAArjB,EAAA,EAAAjlC,EAAA8F,YAAAqzC,EAAAvvC,MAAA7D,OACA,IAAAhrB,GAAAiuE,EAAAA,EAAAttE,OAAA,GAAA6nC,EAAA,EAAA//B,EAAAknB,KACA8+C,GAAA3pD,EACAmpD,EAAAA,EAAAttE,QAAAX,EAAA,EAAA,EAAA,IAAA,EACA6tB,GAAA/I,EACA4pD,KAEAF,EAAAxuE,GAAA,CAAAqN,KAAA,EAAAwgB,IAAAA,EAAA6gD,IAAAA,EAAA1jD,MAAAwd,EAAArc,OAAAshD,GACAQ,EAAAA,EAAAttE,OAAA,IAAA6nC,EAAA//B,KAEAgmE,EAEAhhE,SAAA03C,EAAA+E,EAAAqjB,EAAAE,GACA,MAAAn/D,EAAApM,MACA+iB,IAAAA,EAAA4P,UAAAA,EAAArxB,SAAAD,QAAAkF,QAAAA,KAAA6F,EACAkgE,EAAAlgE,EAAAs/D,eAAA,GACAI,EAAA1/D,EAAA0/D,YAAA,GACAW,EAAA95C,EAAAswB,EACA,IAAAypB,EAAAnmE,EACAomE,EAAA,EACAC,EAAA,EACAzhE,EAAA,EACA0hE,EAAA,EAgBA,OAfAzgE,EAAAy/D,YAAAnqE,SAAA,CAAAw6D,EAAAp+D,KACA,MAAAwoC,EAAA+kC,EAAArjB,EAAA,EAAAjlC,EAAA8F,YAAAqzC,EAAAvvC,MAAA7D,MACAhrB,EAAA,GAAA8uE,EAAArB,EAAA,EAAAhlE,EAAAkmE,IACAC,GAAAC,EAAApmE,EACAulE,EAAAn+D,KAAA,CAAAmb,MAAA6jD,EAAA1iD,OAAA2iD,IACAzhE,GAAAwhE,EAAApmE,EACAsmE,IACAF,EAAAC,EAAA,GAEAN,EAAAxuE,GAAA,CAAAqN,KAAAA,EAAAwgB,IAAAihD,EAAAC,IAAAA,EAAA/jD,MAAAwd,EAAArc,OAAAshD,GACAoB,EAAAlqE,KAAAF,IAAAoqE,EAAArmC,GACAsmC,GAAArB,EAAAhlE,KAEAmmE,GAAAC,EACAb,EAAAn+D,KAAA,CAAAmb,MAAA6jD,EAAA1iD,OAAA2iD,IACAF,EAEAnhE,iBACA,MAAAa,EAAApM,KACA,IAAAoM,EAAA9K,QAAAi7B,QACA,OAEA,MAAA0mB,EAAA72C,EAAA+/D,uBACAT,eAAAY,EAAAhrE,SAAAkF,MAAAA,EAAAnF,QAAAkF,QAAAA,GAAA8E,IAAAA,IAAAe,EACA0gE,EAAA5mC,GAAA76B,EAAAe,EAAAjB,KAAAiB,EAAA0c,OACA,GAAA9oB,KAAAy7B,eAAA,CACA,IAAA+wC,EAAA,EACArhE,EAAAJ,EAAAvE,EAAA4F,EAAAjB,KAAA5E,EAAA6F,EAAAhB,MAAAgB,EAAA2/D,WAAAS,IACA,IAAA,MAAAO,KAAAT,EACAE,IAAAO,EAAAP,MACAA,EAAAO,EAAAP,IACArhE,EAAAJ,EAAAvE,EAAA4F,EAAAjB,KAAA5E,EAAA6F,EAAAhB,MAAAgB,EAAA2/D,WAAAS,KAEAO,EAAAphD,KAAAvf,EAAAuf,IAAAs3B,EAAA18C,EACAwmE,EAAA5hE,KAAA2hE,EAAAzmC,WAAAymC,EAAA57D,EAAA/F,GAAA4hE,EAAAjkD,OACA3d,GAAA4hE,EAAAjkD,MAAAviB,MAEA,CACA,IAAAsmE,EAAA,EACAlhD,EAAA5gB,EAAAvE,EAAA4F,EAAAuf,IAAAs3B,EAAA18C,EAAA6F,EAAAwf,OAAAxf,EAAA0/D,YAAAe,GAAA5iD,QACA,IAAA,MAAA8iD,KAAAT,EACAS,EAAAF,MAAAA,IACAA,EAAAE,EAAAF,IACAlhD,EAAA5gB,EAAAvE,EAAA4F,EAAAuf,IAAAs3B,EAAA18C,EAAA6F,EAAAwf,OAAAxf,EAAA0/D,YAAAe,GAAA5iD,SAEA8iD,EAAAphD,IAAAA,EACAohD,EAAA5hE,MAAAiB,EAAAjB,KAAA5E,EACAwmE,EAAA5hE,KAAA2hE,EAAAzmC,WAAAymC,EAAA57D,EAAA67D,EAAA5hE,MAAA4hE,EAAAjkD,OACA6C,GAAAohD,EAAA9iD,OAAA1jB,GAIAgF,eACA,MAAA,QAAAvL,KAAAsB,QAAAyzB,UAAA,WAAA/0B,KAAAsB,QAAAyzB,SAEAxpB,OACA,MAAAa,EAAApM,KACA,GAAAoM,EAAA9K,QAAAi7B,QAAA,CACA,MAAAxZ,EAAA3W,EAAA2W,IACA8I,GAAA9I,EAAA3W,GACAA,EAAA4gE,QACAjhD,GAAAhJ,IAGAxX,QACA,MAAAa,EAAApM,MACAsB,QAAAsrB,EAAAk/C,YAAAA,EAAAC,WAAAA,EAAAhpD,IAAAA,GAAA3W,GACA5F,MAAAA,EAAAnF,OAAA8pE,GAAAv+C,EACAqgD,EAAA/qD,GAAA7b,MACAymE,EAAA5mC,GAAAtZ,EAAAvhB,IAAAe,EAAAjB,KAAAiB,EAAA0c,OACAojD,EAAA10C,GAAA2zC,EAAA7kE,OACAD,MAAA6mE,EAAA3mE,QAAAA,GAAA4kE,EACAnjB,EAAAkkB,EAAA1qD,KACA2rD,EAAAnlB,EAAA,EACA,IAAAolB,EACAhhE,EAAAu7C,YACA5kC,EAAAoK,UAAA2/C,EAAA3/C,UAAA,QACApK,EAAAqK,aAAA,SACArK,EAAAwK,UAAA,GACAxK,EAAAzc,KAAA4lE,EAAAvjD,OACA,MAAA0iD,SAAAA,EAAAD,UAAAA,EAAAG,WAAAA,GAAAL,GAAAC,EAAAnjB,GAqDAvsB,EAAArvB,EAAAqvB,eACAwnB,EAAAjjD,KAAAmsE,sBAEAiB,EADA3xC,EACA,CACAvqB,EAAAnG,EAAAvE,EAAA4F,EAAAjB,KAAA5E,EAAA6F,EAAAhB,MAAA2gE,EAAA,IACA3lD,EAAAha,EAAAuf,IAAAplB,EAAA08C,EACAj2B,KAAA,GAGA,CACA9b,EAAA9E,EAAAjB,KAAA5E,EACA6f,EAAArb,EAAAvE,EAAA4F,EAAAuf,IAAAs3B,EAAA18C,EAAA6F,EAAAwf,OAAAkgD,EAAA,GAAA7hD,QACA+C,KAAA,GAGAyZ,GAAAr6B,EAAA2W,IAAA6J,EAAAygD,eACA,MAAAzqD,EAAA2oD,EAAAhlE,EACA6F,EAAAy/D,YAAAnqE,SAAA,CAAAw6D,EAAAp+D,KACAilB,EAAAuK,YAAA4uC,EAAAgR,WAAAA,EACAnqD,EAAAmK,UAAAgvC,EAAAgR,WAAAA,EACA,MAAAtkD,EAAA7F,EAAA8F,YAAAqzC,EAAAvvC,MAAA7D,MACAqE,EAAA2/C,EAAA3/C,UAAA+uC,EAAA/uC,YAAA+uC,EAAA/uC,UAAAg+C,EAAAh+C,YACArE,EAAAuiD,EAAA8B,EAAAvkD,EACA,IAAA1X,EAAAk8D,EAAAl8D,EACAkV,EAAAgnD,EAAAhnD,EACA0mD,EAAAQ,SAAAlhE,EAAA0c,OACA2S,EACA39B,EAAA,GAAAoT,EAAA4X,EAAAviB,EAAA6F,EAAAhB,QACAgb,EAAAgnD,EAAAhnD,GAAAxD,EACAwqD,EAAApgD,OACA9b,EAAAk8D,EAAAl8D,EAAAnG,EAAAvE,EAAA4F,EAAAjB,KAAA5E,EAAA6F,EAAAhB,MAAA2gE,EAAAqB,EAAApgD,QAEAlvB,EAAA,GAAAsoB,EAAAxD,EAAAxW,EAAAwf,SACA1a,EAAAk8D,EAAAl8D,EAAAA,EAAA46D,EAAAsB,EAAApgD,MAAAlE,MAAAviB,EACA6mE,EAAApgD,OACA5G,EAAAgnD,EAAAhnD,EAAArb,EAAAvE,EAAA4F,EAAAuf,IAAAs3B,EAAA18C,EAAA6F,EAAAwf,OAAAkgD,EAAAsB,EAAApgD,MAAA/C,UAvFA,SAAA/Y,EAAAkV,EAAA81C,GACA,GAAAt4D,MAAAynE,IAAAA,GAAA,GAAAznE,MAAAwnE,IAAAA,EAAA,EACA,OAEAroD,EAAAoG,OACA,MAAAoE,EAAArO,EAAAg9C,EAAA3uC,UAAA,GAQA,GAPAxK,EAAAmK,UAAAhO,EAAAg9C,EAAAhvC,UAAA+/C,GACAlqD,EAAA6+C,QAAA1iD,EAAAg9C,EAAA0F,QAAA,QACA7+C,EAAAmkC,eAAAhoC,EAAAg9C,EAAAhV,eAAA,GACAnkC,EAAAi+C,SAAA9hD,EAAAg9C,EAAA8E,SAAA,SACAj+C,EAAAwK,UAAAA,EACAxK,EAAAuK,YAAApO,EAAAg9C,EAAA5uC,YAAA2/C,GACAlqD,EAAAkkC,YAAA/nC,EAAAg9C,EAAAqR,SAAA,KACApC,EAAAG,cAAA,CACA,MAAAkC,EAAA,CACAhjD,OAAA6gD,EAAA5oE,KAAAgrE,MAAA,EACAnjD,WAAA4xC,EAAA5xC,WACAC,SAAA2xC,EAAA3xC,SACA1oB,YAAA0rB,GAEAiuC,EAAAsR,EAAA1mC,MAAAl1B,EAAAm6D,EAAA,GAEAnhD,GAAAnH,EAAAyqD,EAAAhS,EADAp1C,EAAA+mD,OAEA,CACA,MAAAO,EAAAtnD,EAAA3jB,KAAAF,KAAAylD,EAAAojB,GAAA,EAAA,GACAuC,EAAAb,EAAAzmC,WAAAn1B,EAAAm6D,GACAjlE,EAAAkxB,GAAA4kC,EAAA91D,cACA2c,EAAA6H,YACApqB,OAAAyhB,OAAA7b,GAAAqkD,MAAAx7C,GAAA,IAAAA,IACAof,GAAAtL,EAAA,CACA7R,EAAAy8D,EACAvnD,EAAAsnD,EACAx9D,EAAAm7D,EACA/7D,EAAA87D,EACA5gD,OAAApkB,IAGA2c,EAAAqI,KAAAuiD,EAAAD,EAAArC,EAAAD,GAEAroD,EAAAsI,OACA,IAAAkC,GACAxK,EAAAuI,SAGAvI,EAAAwG,UA8CAqkD,CADAd,EAAA57D,EAAAA,GACAkV,EAAA81C,GACAhrD,EAAAhG,EAAAiiB,EAAAjc,EAAAm6D,EAAA8B,EAAA1xC,EAAAvqB,EAAA4X,EAAA1c,EAAAhB,MAAAwhB,EAAAvhB,KA7CA,SAAA6F,EAAAkV,EAAA81C,GACAxvC,GAAA3J,EAAAm5C,EAAAvvC,KAAAzb,EAAAkV,EAAAmlD,EAAA,EAAAW,EAAA,CACAt+C,cAAAsuC,EAAArkB,OACA1qB,UAAA2/C,EAAA3/C,UAAA+uC,EAAA/uC,aA2CAO,CAAAo/C,EAAA57D,EAAAA,GAAAkV,EAAA81C,GACAzgC,EACA2xC,EAAAl8D,GAAA4X,EAAAviB,EAEA6mE,EAAAhnD,GAAAxD,KAGAmkB,GAAA36B,EAAA2W,IAAA6J,EAAAygD,eAEA9hE,YACA,MAAAa,EAAApM,KACA4sB,EAAAxgB,EAAA9K,QACAyhD,EAAAn2B,EAAAkwB,MACA+wB,EAAAr2C,GAAAurB,EAAAz8C,MACAwnE,EAAAv2C,GAAAwrB,EAAAx8C,SACA,IAAAw8C,EAAAxmB,QACA,OAEA,MAAAuwC,EAAA5mC,GAAAtZ,EAAAvhB,IAAAe,EAAAjB,KAAAiB,EAAA0c,OACA/F,EAAA3W,EAAA2W,IACAgS,EAAAguB,EAAAhuB,SACAo4C,EAAAU,EAAArsD,KAAA,EACAusD,EAAAD,EAAAniD,IAAAwhD,EACA,IAAA/mD,EACAjb,EAAAiB,EAAAjB,KACAsiB,EAAArhB,EAAA0c,MACA,GAAA9oB,KAAAy7B,eACAhO,EAAAhrB,KAAAF,OAAA6J,EAAA2/D,YACA3lD,EAAAha,EAAAuf,IAAAoiD,EACA5iE,EAAAJ,EAAA6hB,EAAApmB,MAAA2E,EAAAiB,EAAAhB,MAAAqiB,OACA,CACA,MAAAkF,EAAAvmB,EAAA0/D,YAAAl+D,QAAA,CAAAC,EAAA2T,IAAA/e,KAAAF,IAAAsL,EAAA2T,EAAAyI,SAAA,GACA7D,EAAA2nD,EAAAhjE,EAAA6hB,EAAApmB,MAAA4F,EAAAuf,IAAAvf,EAAAwf,OAAA+G,EAAA/F,EAAAvrB,OAAAkF,QAAA6F,EAAA+/D,uBAEA,MAAAj7D,EAAAnG,EAAAgqB,EAAA5pB,EAAAA,EAAAsiB,GACA1K,EAAAoK,UAAA2/C,EAAA3/C,UAAAriB,EAAAiqB,IACAhS,EAAAqK,aAAA,SACArK,EAAAuK,YAAAy1B,EAAA18C,MACA0c,EAAAmK,UAAA61B,EAAA18C,MACA0c,EAAAzc,KAAAunE,EAAAllD,OACA+D,GAAA3J,EAAAggC,EAAAp2B,KAAAzb,EAAAkV,EAAAynD,GAEAtiE,sBACA,MAAAw3C,EAAA/iD,KAAAsB,QAAAw7C,MACA+wB,EAAAr2C,GAAAurB,EAAAz8C,MACAwnE,EAAAv2C,GAAAwrB,EAAAx8C,SACA,OAAAw8C,EAAAxmB,QAAAsxC,EAAAjrD,WAAAkrD,EAAA7jD,OAAA,EAEA1e,iBAAA2F,EAAAkV,GACA,MAAAha,EAAApM,KACA,IAAAlC,EAAAkwE,EAAAC,EACA,GAAA/8D,GAAA9E,EAAAjB,MAAA+F,GAAA9E,EAAAhB,OAAAgb,GAAAha,EAAAuf,KAAAvF,GAAAha,EAAAwf,OAEA,IADAqiD,EAAA7hE,EAAAs/D,eACA5tE,EAAA,EAAAA,EAAAmwE,EAAAxvE,SAAAX,EAEA,GADAkwE,EAAAC,EAAAnwE,GACAoT,GAAA88D,EAAA7iE,MAAA+F,GAAA88D,EAAA7iE,KAAA6iE,EAAAllD,OAAA1C,GAAA4nD,EAAAriD,KAAAvF,GAAA4nD,EAAAriD,IAAAqiD,EAAA/jD,OACA,OAAA7d,EAAAy/D,YAAA/tE,GAIA,OAAA,KAEAyN,YAAA7N,GACA,MAAA0O,EAAApM,KACA4sB,EAAAxgB,EAAA9K,QACA,IAmBA,SAAAH,EAAAyrB,GACA,GAAA,cAAAzrB,IAAAyrB,EAAAtJ,SAAAsJ,EAAAshD,SACA,OAAA,EAEA,GAAAthD,EAAArJ,UAAA,UAAApiB,GAAA,YAAAA,GACA,OAAA,EAEA,OAAA,EA1BAgtE,CAAAzwE,EAAAyD,KAAAyrB,GACA,OAEA,MAAAwhD,EAAAhiE,EAAAiiE,iBAAA3wE,EAAAwT,EAAAxT,EAAA0oB,GACA,GAAA,cAAA1oB,EAAAyD,KAAA,CACA,MAAA8qB,EAAA7f,EAAAu/D,aACA2C,GA9WA5/D,EA8WA0/D,EA9WA,QAAAjwE,EA8WA8tB,IA9WA,OAAAvd,GAAAvQ,EAAA4hB,eAAArR,EAAAqR,cAAA5hB,EAAAwD,QAAA+M,EAAA/M,OA+WAsqB,IAAAqiD,GACAvqE,EAAA6oB,EAAAshD,QAAA,CAAAxwE,EAAAuuB,EAAA7f,GAAAA,GAEAA,EAAAu/D,aAAAyC,EACAA,IAAAE,GACAvqE,EAAA6oB,EAAAtJ,QAAA,CAAA5lB,EAAA0wE,EAAAhiE,GAAAA,QAEAgiE,GACArqE,EAAA6oB,EAAArJ,QAAA,CAAA7lB,EAAA0wE,EAAAhiE,GAAAA,GAvXA,IAAAjO,EAAAuQ,GAoYA,IAAA6/D,GAAA,CACA7vD,GAAA,SACA8vD,SAAAhD,GACAjgE,MAAA1E,EAAAkkE,EAAAzpE,GACA,MAAA26D,EAAAp1D,EAAAo1D,OAAA,IAAAuP,GAAA,CAAAzoD,IAAAlc,EAAAkc,IAAAzhB,QAAAA,EAAAuF,MAAAA,IACA2xB,GAAAsX,UAAAjpC,EAAAo1D,EAAA36D,GACAk3B,GAAA43B,OAAAvpD,EAAAo1D,IAEA1wD,KAAA1E,GACA2xB,GAAA04B,UAAArqD,EAAAA,EAAAo1D,eACAp1D,EAAAo1D,QAEA1wD,aAAA1E,EAAAkkE,EAAAzpE,GACA,MAAA26D,EAAAp1D,EAAAo1D,OACAzjC,GAAAsX,UAAAjpC,EAAAo1D,EAAA36D,GACA26D,EAAA36D,QAAAA,GAEAiK,YAAA1E,GACA,MAAAo1D,EAAAp1D,EAAAo1D,OACAA,EAAA+P,cACA/P,EAAAwS,kBAEAljE,WAAA1E,EAAAyD,GACAA,EAAAgpD,QACAzsD,EAAAo1D,OAAAyS,YAAApkE,EAAAkD,QAGA0U,SAAA,CACAqa,SAAA,EACAxH,SAAA,MACAvuB,MAAA,SACA8yB,UAAA,EACA9Z,SAAA,EACA/B,OAAA,IACAlS,QAAA7N,EAAAw+D,EAAAD,GACA,MAAAt6D,EAAAu6D,EAAAn8C,aACA4uD,EAAA1S,EAAAp1D,MACA8nE,EAAAje,iBAAA/uD,IACAgtE,EAAAh/B,KAAAhuC,GACAu6D,EAAArkB,QAAA,IAEA82B,EAAAvqE,KAAAzC,GACAu6D,EAAArkB,QAAA,IAGAv0B,QAAA,KACA4qD,QAAA,KACA7sE,OAAA,CACAgF,MAAA0c,GAAAA,EAAAlc,MAAAvF,QAAA+E,MACAglE,SAAA,GACA9kE,QAAA,GACAgF,eAAA1E,GACA,MAAA5F,EAAA4F,EAAAxG,KAAAY,UACAI,QAAAiqE,cAAAA,EAAAhhD,WAAAA,EAAA6C,UAAAA,EAAA9mB,MAAAA,IAAAQ,EAAAo1D,OAAA36D,QACA,OAAAuF,EAAAoqC,yBAAA3gC,KAAAmmB,IACA,MAAA9T,EAAA8T,EAAAnC,WAAAxD,SAAAw6C,EAAA,OAAAxrE,GACA+B,EAAA01B,GAAA5U,EAAA9gB,aACA,MAAA,CACA8qB,KAAA1rB,EAAAw1B,EAAA90B,OAAAkD,MACAqoB,UAAAvK,EAAAzc,gBACAgnE,UAAA7mE,EACAwxC,QAAAphB,EAAAiZ,QACAkyB,QAAAj/C,EAAA0mB,eACAkkC,SAAA5qD,EAAA2mB,WACA4d,eAAAvkC,EAAA4mB,iBACAy3B,SAAAr+C,EAAA6mB,gBACAjc,WAAA1rB,EAAAinB,MAAAjnB,EAAAooB,QAAA,EACAqD,YAAA3K,EAAAxc,YACAmkB,WAAAA,GAAA3H,EAAA2H,WACAC,SAAA5H,EAAA4H,SACA4C,UAAAA,GAAAxK,EAAAwK,UACA/mB,aAAA,EACA2Z,aAAA0W,EAAA90B,SAEA3B,QAGA88C,MAAA,CACAz2C,MAAA0c,GAAAA,EAAAlc,MAAAvF,QAAA+E,MACAk2B,SAAA,EACAxH,SAAA,SACApI,KAAA,KAGAhL,YAAA,CACA6C,YAAAjb,IAAAA,EAAAkb,WAAA,MACApjB,OAAA,CACAmjB,YAAAjb,IAAA,CAAA,iBAAA,SAAA,QAAAuvB,SAAAvvB,MAKA,MAAAqlE,WAAAl1B,GACAnuC,YAAA3L,GACAi/C,QACA7+C,KAAA6G,MAAAjH,EAAAiH,MACA7G,KAAAsB,QAAA1B,EAAA0B,QACAtB,KAAA+iB,IAAAnjB,EAAAmjB,IACA/iB,KAAA6uE,cAAA/uE,EACAE,KAAA2rB,SAAA7rB,EACAE,KAAA4rB,YAAA9rB,EACAE,KAAAmL,UAAArL,EACAE,KAAAoL,WAAAtL,EACAE,KAAA8oB,WAAAhpB,EACAE,KAAAiqB,YAAAnqB,EACAE,KAAA+0B,cAAAj1B,EACAE,KAAAyd,YAAA3d,EACAE,KAAAs5B,cAAAx5B,EAEAyL,OAAAkiB,EAAAkF,GACA,MAAAvmB,EAAApM,KACA4sB,EAAAxgB,EAAA9K,QAGA,GAFA8K,EAAAjB,KAAA,EACAiB,EAAAuf,IAAA,GACAiB,EAAA2P,QAEA,YADAnwB,EAAA0c,MAAA1c,EAAA6d,OAAA7d,EAAAhB,MAAAgB,EAAAwf,OAAA,GAGAxf,EAAA0c,MAAA1c,EAAAhB,MAAAqiB,EACArhB,EAAA6d,OAAA7d,EAAAwf,OAAA+G,EACA,MAAA2zB,EAAA/lD,EAAAqsB,EAAAD,MAAAC,EAAAD,KAAAluB,OAAA,EACA2N,EAAAyiE,SAAAt3C,GAAA3K,EAAArmB,SACA,MAAAuoE,EAAAxoB,EAAA9uB,GAAA5K,EAAAtmB,MAAAsc,WAAAxW,EAAAyiE,SAAA5kD,OACA7d,EAAAqvB,eACArvB,EAAA6d,OAAA6kD,EAEA1iE,EAAA0c,MAAAgmD,EAGAvjE,eACA,MAAA2V,EAAAlhB,KAAAsB,QAAAyzB,SACA,MAAA,QAAA7T,GAAA,WAAAA,EAEA3V,UAAA7E,GACA,MAAAilB,IAAAA,EAAAxgB,KAAAA,EAAAygB,OAAAA,EAAAxgB,MAAAA,EAAA9J,QAAAA,GAAAtB,KACAwG,EAAAlF,EAAAkF,MACA,IACAinB,EAAA65B,EAAAC,EADAh9B,EAAA,EAkBA,OAhBAvqB,KAAAy7B,gBACA6rB,EAAAv8C,EAAAvE,EAAA2E,EAAAC,GACAm8C,EAAA57B,EAAAjlB,EACA+mB,EAAAriB,EAAAD,IAEA,SAAA7J,EAAAyzB,UACAuyB,EAAAn8C,EAAAzE,EACA6gD,EAAAx8C,EAAAvE,EAAAolB,EAAAD,GACApB,GAAA,GAAA3F,KAEA0iC,EAAAl8C,EAAA1E,EACA6gD,EAAAx8C,EAAAvE,EAAAmlB,EAAAC,GACArB,EAAA,GAAA3F,IAEA6I,EAAA7B,EAAAD,GAEA,CAAA27B,OAAAA,EAAAC,OAAAA,EAAA95B,SAAAA,EAAAlD,SAAAA,GAEAhf,OACA,MAAAa,EAAApM,KACA+iB,EAAA3W,EAAA2W,IACA6J,EAAAxgB,EAAA9K,QACA,IAAAsrB,EAAA2P,QACA,OAEA,MAAAwyC,EAAAv3C,GAAA5K,EAAAtmB,MAEAI,EADAqoE,EAAAnsD,WACA,EAAAxW,EAAAyiE,SAAAljD,KACA27B,OAAAA,EAAAC,OAAAA,EAAA95B,SAAAA,EAAAlD,SAAAA,GAAAne,EAAA4iE,UAAAtoE,GACAgmB,GAAA3J,EAAA6J,EAAAD,KAAA,EAAA,EAAAoiD,EAAA,CACA1oE,MAAAumB,EAAAvmB,MACAonB,SAAAA,EACAlD,SAAAA,EACA4C,UAAAriB,EAAA8hB,EAAApmB,OACA4mB,aAAA,SACAH,YAAA,CAAAq6B,EAAAC,MAcA,IAAA0nB,GAAA,CACAvwD,GAAA,QACA8vD,SAAAI,GACArjE,MAAA1E,EAAAkkE,EAAAzpE,IAbA,SAAAuF,EAAAk8C,GACA,MAAAjG,EAAA,IAAA8xB,GAAA,CACA7rD,IAAAlc,EAAAkc,IACAzhB,QAAAyhD,EACAl8C,MAAAA,IAEA2xB,GAAAsX,UAAAjpC,EAAAi2C,EAAAiG,GACAvqB,GAAA43B,OAAAvpD,EAAAi2C,GACAj2C,EAAAqoE,WAAApyB,EAMAqyB,CAAAtoE,EAAAvF,IAEAiK,KAAA1E,GACA,MAAAqoE,EAAAroE,EAAAqoE,WACA12C,GAAA04B,UAAArqD,EAAAqoE,UACAroE,EAAAqoE,YAEA3jE,aAAA1E,EAAAkkE,EAAAzpE,GACA,MAAAw7C,EAAAj2C,EAAAqoE,WACA12C,GAAAsX,UAAAjpC,EAAAi2C,EAAAx7C,GACAw7C,EAAAx7C,QAAAA,GAEA4gB,SAAA,CACA1b,MAAA,SACA+1B,SAAA,EACAj2B,KAAA,CACAmX,OAAA,QAEA6b,UAAA,EACA/yB,QAAA,GACAwuB,SAAA,MACApI,KAAA,GACAlP,OAAA,KAEAo8B,cAAA,CACAxzC,MAAA,SAEAsb,YAAA,CACA6C,aAAA,EACAE,YAAA,IAIA,MAAApU,GAAA,IAAA8+D,QACA,IAAAC,GAAA,CACA3wD,GAAA,WACAnT,MAAA1E,EAAAkkE,EAAAzpE,GACA,MAAAw7C,EAAA,IAAA8xB,GAAA,CACA7rD,IAAAlc,EAAAkc,IACAzhB,QAAAA,EACAuF,MAAAA,IAEA2xB,GAAAsX,UAAAjpC,EAAAi2C,EAAAx7C,GACAk3B,GAAA43B,OAAAvpD,EAAAi2C,GACAxsC,GAAA/C,IAAA1G,EAAAi2C,IAEAvxC,KAAA1E,GACA2xB,GAAA04B,UAAArqD,EAAAyJ,GAAAlD,IAAAvG,IACAyJ,GAAArC,OAAApH,IAEA0E,aAAA1E,EAAAkkE,EAAAzpE,GACA,MAAAw7C,EAAAxsC,GAAAlD,IAAAvG,GACA2xB,GAAAsX,UAAAjpC,EAAAi2C,EAAAx7C,GACAw7C,EAAAx7C,QAAAA,GAEA4gB,SAAA,CACA1b,MAAA,SACA+1B,SAAA,EACAj2B,KAAA,CACAmX,OAAA,UAEA6b,UAAA,EACA/yB,QAAA,EACAwuB,SAAA,MACApI,KAAA,GACAlP,OAAA,MAEAo8B,cAAA,CACAxzC,MAAA,SAEAsb,YAAA,CACA6C,aAAA,EACAE,YAAA,IAIA,MAAA4qD,GAAA,CACA/jE,QAAAoB,GACA,IAAAA,EAAAlO,OACA,OAAA,EAEA,IAAAX,EAAAyJ,EACA2J,EAAA,EACAkV,EAAA,EACA4S,EAAA,EACA,IAAAl7B,EAAA,EAAAyJ,EAAAoF,EAAAlO,OAAAX,EAAAyJ,IAAAzJ,EAAA,CACA,MAAAoC,EAAAyM,EAAA7O,GAAA+yB,QACA,GAAA3wB,GAAAA,EAAAqvE,WAAA,CACA,MAAAruD,EAAAhhB,EAAAsvE,kBACAt+D,GAAAgQ,EAAAhQ,EACAkV,GAAAlF,EAAAkF,IACA4S,GAGA,MAAA,CACA9nB,EAAAA,EAAA8nB,EACA5S,EAAAA,EAAA4S,IAGAztB,QAAAoB,EAAA8iE,GACA,IAAA9iE,EAAAlO,OACA,OAAA,EAEA,IAGAX,EAAAyJ,EAAAmoE,EAHAx+D,EAAAu+D,EAAAv+D,EACAkV,EAAAqpD,EAAArpD,EACA4P,EAAAryB,OAAAqhB,kBAEA,IAAAlnB,EAAA,EAAAyJ,EAAAoF,EAAAlO,OAAAX,EAAAyJ,IAAAzJ,EAAA,CACA,MAAAoC,EAAAyM,EAAA7O,GAAA+yB,QACA,GAAA3wB,GAAAA,EAAAqvE,WAAA,CACA,MACA5gE,EAAA+Y,GAAA+nD,EADAvvE,EAAAg2B,kBAEAvnB,EAAAqnB,IACAA,EAAArnB,EACA+gE,EAAAxvE,IAIA,GAAAwvE,EAAA,CACA,MAAAC,EAAAD,EAAAF,kBACAt+D,EAAAy+D,EAAAz+D,EACAkV,EAAAupD,EAAAvpD,EAEA,MAAA,CACAlV,EAAAA,EACAkV,EAAAA,KAIA,SAAAwpD,GAAAlgD,EAAAmgD,GAQA,OAPAA,IACAtvE,EAAAsvE,GACAvvE,MAAA4I,UAAAyE,KAAAjL,MAAAgtB,EAAAmgD,GAEAngD,EAAA/hB,KAAAkiE,IAGAngD,EAEA,SAAAogD,GAAAp/D,GACA,OAAA,iBAAAA,GAAAA,aAAAq/D,SAAAr/D,EAAA4P,QAAA,OAAA,EACA5P,EAAAoR,MAAA,MAEApR,EAEA,SAAAs/D,GAAAnpE,EAAA+F,GACA,MAAAikB,QAAAA,EAAA9Q,aAAAA,EAAApe,MAAAA,GAAAiL,EACA0nB,EAAAztB,EAAA6vB,eAAA3W,GAAAuU,YACAzvB,MAAAA,EAAAb,MAAAA,GAAAswB,EAAA27C,iBAAAtuE,GACA,MAAA,CACAkF,MAAAA,EACAhC,MAAAA,EACAE,OAAAuvB,EAAAgjB,UAAA31C,GACAq2C,IAAAnxC,EAAAxG,KAAAY,SAAA8e,GAAA1f,KAAAsB,GACA26D,eAAAt4D,EACAc,QAAAwvB,EAAA2f,aACAhvC,UAAAtD,EACAoe,aAAAA,EACA8Q,QAAAA,GAGA,SAAAq/C,GAAAhX,EAAA53D,GACA,MAAAyhB,EAAAm2C,EAAAn6D,OAAAgkB,KACAotD,KAAAA,EAAAC,OAAAA,EAAAtzB,MAAAA,GAAAoc,GACAmS,SAAAA,EAAAD,UAAAA,GAAA9pE,EACA+uE,EAAA74C,GAAAl2B,EAAA+uE,UACAxC,EAAAr2C,GAAAl2B,EAAAusE,WACAyC,EAAA94C,GAAAl2B,EAAAgvE,YACAC,EAAAzzB,EAAAr+C,OACA+xE,EAAAJ,EAAA3xE,OACAgyE,EAAAN,EAAA1xE,OACA8H,EAAAgxB,GAAAj2B,EAAAiF,SACA,IAAA0jB,EAAA1jB,EAAA0jB,OACAnB,EAAA,EACA4nD,EAAAP,EAAAviE,QAAA,CAAAorB,EAAA23C,IAAA33C,EAAA23C,EAAAxtE,OAAA1E,OAAAkyE,EAAA9jD,MAAApuB,OAAAkyE,EAAAvtE,MAAA3E,QAAA,GAOA,GANAiyE,GAAAxX,EAAA0X,WAAAnyE,OAAAy6D,EAAA5zD,UAAA7G,OACA8xE,IACAtmD,GAAAsmD,EAAA1C,EAAAjrD,YACA2tD,EAAA,GAAAjvE,EAAAuvE,aACAvvE,EAAAwvE,mBAEAJ,EAAA,CAEAzmD,GAAAwmD,GADAnvE,EAAAyvE,cAAAtuE,KAAAF,IAAA6oE,EAAAiF,EAAAztD,YAAAytD,EAAAztD,aAEA8tD,EAAAD,GAAAJ,EAAAztD,YACA8tD,EAAA,GAAApvE,EAAA0vE,YAEAR,IACAvmD,GAAA3oB,EAAA2vE,gBACAT,EAAAF,EAAA1tD,YACA4tD,EAAA,GAAAlvE,EAAA4vE,eAEA,IAAAC,EAAA,EACA,MAAAC,EAAA,SAAApkD,GACAlE,EAAArmB,KAAAF,IAAAumB,EAAA/F,EAAA8F,YAAAmE,GAAAlE,MAAAqoD,IAkBA,OAhBApuD,EAAAoG,OACApG,EAAAzc,KAAAunE,EAAAllD,OACA1oB,EAAAi5D,EAAApc,MAAAs0B,GACAruD,EAAAzc,KAAA+pE,EAAA1nD,OACA1oB,EAAAi5D,EAAA0X,WAAA90C,OAAAo9B,EAAA5zD,WAAA8rE,GACAD,EAAA7vE,EAAAyvE,cAAA1F,EAAA,EAAA,EACAprE,EAAAkwE,GAAAQ,IACA1wE,EAAA0wE,EAAAxtE,OAAAiuE,GACAnxE,EAAA0wE,EAAA9jD,MAAAukD,GACAnxE,EAAA0wE,EAAAvtE,MAAAguE,MAEAD,EAAA,EACApuD,EAAAzc,KAAAgqE,EAAA3nD,OACA1oB,EAAAi5D,EAAAkX,OAAAgB,GACAruD,EAAAwG,UACAT,GAAAviB,EAAAuiB,MACA,CAAAA,MAAAA,EAAAmB,OAAAA,GAqBA,SAAAonD,GAAAxqE,EAAAvF,EAAAkgB,EAAA8vD,GACA,MAAApgE,EAAAA,EAAA4X,MAAAA,GAAAtH,GACAsH,MAAAyoD,EAAAj8C,WAAAnqB,KAAAA,EAAAC,MAAAA,IAAAvE,EACA,IAAA2qE,EAAA,SAWA,MAVA,WAAAF,EACAE,EAAAtgE,IAAA/F,EAAAC,GAAA,EAAA,OAAA,QACA8F,GAAA4X,EAAA,EACA0oD,EAAA,OACAtgE,GAAAqgE,EAAAzoD,EAAA,IACA0oD,EAAA,SAnBA,SAAAA,EAAA3qE,EAAAvF,EAAAkgB,GACA,MAAAtQ,EAAAA,EAAA4X,MAAAA,GAAAtH,EACAiwD,EAAAnwE,EAAAowE,UAAApwE,EAAAqwE,aACA,MAAA,SAAAH,GAAAtgE,EAAA4X,EAAA2oD,EAAA5qE,EAAAiiB,OAGA,UAAA0oD,GAAAtgE,EAAA4X,EAAA2oD,EAAA,QAAA,EAeAG,CAAAJ,EAAA3qE,EAAAvF,EAAAkgB,KACAgwD,EAAA,UAEAA,EAEA,SAAAK,GAAAhrE,EAAAvF,EAAAkgB,GACA,MAAA8vD,EAAAhwE,EAAAgwE,QApCA,SAAAzqE,EAAA2a,GACA,MAAA4E,EAAAA,EAAA6D,OAAAA,GAAAzI,EACA,OAAA4E,EAAA6D,EAAA,EACA,MACA7D,EAAAvf,EAAAojB,OAAAA,EAAA,EACA,SAEA,SA6BA6nD,CAAAjrE,EAAA2a,GACA,MAAA,CACAgwD,OAAAlwE,EAAAkwE,QAAAH,GAAAxqE,EAAAvF,EAAAkgB,EAAA8vD,GACAA,OAAAA,GAuBA,SAAAS,GAAAzwE,EAAAkgB,EAAAwwD,EAAAnrE,GACA,MAAA6qE,UAAAA,EAAAC,aAAAA,EAAAtnD,aAAAA,GAAA/oB,GACAkwE,OAAAA,EAAAF,OAAAA,GAAAU,EACAC,EAAAP,EAAAC,EACAO,EAAA7nD,EAAAsnD,EACA,IAAAzgE,EAzBA,SAAAsQ,EAAAgwD,GACA,IAAAtgE,EAAAA,EAAA4X,MAAAA,GAAAtH,EAMA,MALA,UAAAgwD,EACAtgE,GAAA4X,EACA,WAAA0oD,IACAtgE,GAAA4X,EAAA,GAEA5X,EAkBAihE,CAAA3wD,EAAAgwD,GACA,MAAAprD,EAjBA,SAAA5E,EAAA8vD,EAAAW,GACA,IAAA7rD,EAAAA,EAAA6D,OAAAA,GAAAzI,EAQA,MAPA,QAAA8vD,EACAlrD,GAAA6rD,EAEA7rD,GADA,WAAAkrD,EACArnD,EAAAgoD,EAEAhoD,EAAA,EAEA7D,EAQAgsD,CAAA5wD,EAAA8vD,EAAAW,GAYA,MAXA,WAAAX,EACA,SAAAE,EACAtgE,GAAA+gE,EACA,UAAAT,IACAtgE,GAAA+gE,GAEA,SAAAT,EACAtgE,GAAAghE,EACA,UAAAV,IACAtgE,GAAAghE,GAEA,CACAhhE,EAAAmX,GAAAnX,EAAA,EAAArK,EAAAiiB,MAAAtH,EAAAsH,OACA1C,EAAAiC,GAAAjC,EAAA,EAAAvf,EAAAojB,OAAAzI,EAAAyI,SAGA,SAAAooD,GAAAnZ,EAAA1yD,EAAAlF,GACA,MAAAiF,EAAAgxB,GAAAj2B,EAAAiF,SACA,MAAA,WAAAC,EACA0yD,EAAAhoD,EAAAgoD,EAAApwC,MAAA,EACA,UAAAtiB,EACA0yD,EAAAhoD,EAAAgoD,EAAApwC,MAAAviB,EAAA6E,MACA8tD,EAAAhoD,EAAA3K,EAAA4E,KAEA,SAAAmnE,GAAAvuE,GACA,OAAA6rE,GAAA,GAAAE,GAAA/rE,IASA,SAAAwuE,GAAA5tE,EAAA5D,GACA,MAAAw8B,EAAAx8B,GAAAA,EAAA+D,SAAA/D,EAAA+D,QAAAo0D,SAAAn4D,EAAA+D,QAAAo0D,QAAAv0D,UACA,OAAA44B,EAAA54B,EAAA44B,SAAAA,GAAA54B,EAEA,MAAA6tE,WAAA94B,GACAnuC,YAAA3L,GACAi/C,QACA7+C,KAAAyyE,QAAA,EACAzyE,KAAA8M,QAAA,GACA9M,KAAAjB,OAAAa,EAAAb,OACAiB,KAAA0yE,oBAAA5yE,EACAE,KAAA2yE,WAAA7yE,EACAE,KAAA4yE,uBAAA9yE,EACAE,KAAA6yE,cAAA,GACA7yE,KAAAowC,iBAAAtwC,EACAE,KAAA2zC,cAAA7zC,EACAE,KAAAsB,QAAA1B,EAAA0B,QACAtB,KAAA8yE,gBAAAhzE,EACAE,KAAA88C,WAAAh9C,EACAE,KAAA4wE,gBAAA9wE,EACAE,KAAAmwE,UAAArwE,EACAE,KAAAsF,eAAAxF,EACAE,KAAAowE,YAAAtwE,EACAE,KAAAwxE,YAAA1xE,EACAE,KAAAsxE,YAAAxxE,EACAE,KAAAkR,OAAApR,EACAE,KAAAomB,OAAAtmB,EACAE,KAAAiqB,YAAAnqB,EACAE,KAAA8oB,WAAAhpB,EACAE,KAAA+yE,YAAAjzE,EACAE,KAAAgzE,YAAAlzE,EACAE,KAAAizE,iBAAAnzE,EACAE,KAAAkzE,sBAAApzE,EACAE,KAAAmzE,qBAAArzE,EAEAyL,WAAAjK,GACAtB,KAAAsB,QAAAA,EACAtB,KAAA4yE,uBAAA9yE,EACAE,KAAA2zC,cAAA7zC,EAEAyL,qBACA,MAAAa,EAAApM,KACA+yC,EAAA3mC,EAAAwmE,kBACA,GAAA7/B,EACA,OAAAA,EAEA,MAAAlsC,EAAAuF,EAAArN,OACAuC,EAAA8K,EAAA9K,QAAAw9B,WAAA1yB,EAAApL,cACA4rB,EAAAtrB,EAAAi6C,SAAA10C,EAAAvF,QAAA8gB,WAAA9gB,EAAAmuC,WACAA,EAAA,IAAAG,GAAAxjC,EAAArN,OAAA6tB,GAIA,OAHAA,EAAAuQ,aACA/wB,EAAAwmE,kBAAApyE,OAAAg8B,OAAAiT,IAEAA,EAEAlkC,aACA,MAAAa,EAAApM,KACA,OAAAoM,EAAAunC,WACAvnC,EAAAunC,UAjEAtjB,EAiEAjkB,EAAArN,OAAAiC,aAjEAk4D,EAiEA9sD,EAjEAgnE,EAiEAhnE,EAAAymE,cAhEAryE,OAAAC,OAAAD,OAAA2f,OAAAkQ,GAAA,CACA6oC,QAAAA,EACAka,aAAAA,EACAjyE,KAAA,cAJA,IAAAkvB,EAAA6oC,EAAAka,EAmEA7nE,SAAAxK,EAAAO,GACA,MAAA8K,EAAApM,MACA2E,UAAAA,GAAArD,EACA+xE,EAAA1uE,EAAA0uE,YAAA3wE,MAAA0J,EAAA,CAAArL,IACA+7C,EAAAn4C,EAAAm4C,MAAAp6C,MAAA0J,EAAA,CAAArL,IACAuyE,EAAA3uE,EAAA2uE,WAAA5wE,MAAA0J,EAAA,CAAArL,IACA,IAAA8rB,EAAA,GAIA,OAHAA,EAAA+iD,GAAA/iD,EAAAijD,GAAAuD,IACAxmD,EAAA+iD,GAAA/iD,EAAAijD,GAAAhzB,IACAjwB,EAAA+iD,GAAA/iD,EAAAijD,GAAAwD,IACAzmD,EAEAthB,cAAA6nE,EAAA9xE,GACA,OAAAgxE,GAAAhxE,EAAAqD,UAAAisE,WAAAluE,MAAA1C,KAAA,CAAAozE,KAEA7nE,QAAA6nE,EAAA9xE,GACA,MAAA8K,EAAApM,MACA2E,UAAAA,GAAArD,EACAiyE,EAAA,GAaA,OAZAtzE,EAAAmzE,GAAAryE,IACA,MAAA4vE,EAAA,CACAxtE,OAAA,GACA0pB,MAAA,GACAzpB,MAAA,IAEAowE,EAAAjB,GAAA5tE,EAAA5D,GACA6uE,GAAAe,EAAAxtE,OAAA2sE,GAAA0D,EAAAC,YAAAj1E,KAAA4N,EAAArL,KACA6uE,GAAAe,EAAA9jD,MAAA2mD,EAAA3uE,MAAArG,KAAA4N,EAAArL,IACA6uE,GAAAe,EAAAvtE,MAAA0sE,GAAA0D,EAAAE,WAAAl1E,KAAA4N,EAAArL,KACAwyE,EAAA5lE,KAAAgjE,MAEA4C,EAEAhoE,aAAA6nE,EAAA9xE,GACA,OAAAgxE,GAAAhxE,EAAAqD,UAAAW,UAAA5C,MAAA1C,KAAA,CAAAozE,KAEA7nE,UAAA6nE,EAAA9xE,GACA,MAAA8K,EAAApM,MACA2E,UAAAA,GAAArD,EACAqyE,EAAAhvE,EAAAgvE,aAAAjxE,MAAA0J,EAAA,CAAAgnE,IACAhD,EAAAzrE,EAAAyrE,OAAA1tE,MAAA0J,EAAA,CAAAgnE,IACAQ,EAAAjvE,EAAAivE,YAAAlxE,MAAA0J,EAAA,CAAAgnE,IACA,IAAAvmD,EAAA,GAIA,OAHAA,EAAA+iD,GAAA/iD,EAAAijD,GAAA6D,IACA9mD,EAAA+iD,GAAA/iD,EAAAijD,GAAAM,IACAvjD,EAAA+iD,GAAA/iD,EAAAijD,GAAA8D,IACA/mD,EAEAthB,aAAAjK,GACA,MAAA8K,EAAApM,KACAwvC,EAAApjC,EAAAU,QACAzM,EAAA+L,EAAArN,OAAAsB,KACA4yE,EAAA,GACAC,EAAA,GACAC,EAAA,GACA,IACAr1E,EAAAyJ,EADA6rE,EAAA,GAEA,IAAAt1E,EAAA,EAAAyJ,EAAAioC,EAAA/wC,OAAAX,EAAAyJ,IAAAzJ,EACAs1E,EAAAzlE,KAAAqiE,GAAA5jE,EAAArN,OAAAywC,EAAA1xC,KAkBA,OAhBAwD,EAAA82B,SACAg7C,EAAAA,EAAAh7C,QAAA,CAAAvH,EAAAlvB,EAAA+kB,IAAAplB,EAAA82B,OAAAvH,EAAAlvB,EAAA+kB,EAAArmB,MAEAiB,EAAAuyE,WACAT,EAAAA,EAAAltD,MAAA,CAAA/nB,EAAAuQ,IAAApN,EAAAuyE,SAAA11E,EAAAuQ,EAAArO,MAEAJ,EAAAmzE,GAAAryE,IACA,MAAAyyE,EAAAjB,GAAAjxE,EAAAqD,UAAA5D,GACAkyE,EAAAtlE,KAAA6lE,EAAAM,WAAAt1E,KAAA4N,EAAArL,IACAmyE,EAAAvlE,KAAA6lE,EAAAO,gBAAAv1E,KAAA4N,EAAArL,IACAoyE,EAAAxlE,KAAA6lE,EAAAQ,eAAAx1E,KAAA4N,EAAArL,OAEAqL,EAAA6mE,YAAAA,EACA7mE,EAAA8mE,iBAAAA,EACA9mE,EAAA+mE,gBAAAA,EACA/mE,EAAA0mE,WAAAM,EACAA,EAEA7nE,OAAAwvB,EAAAu4B,GACA,MAAAlnD,EAAApM,KACAsB,EAAA8K,EAAA9K,QAAAw9B,WAAA1yB,EAAApL,cACAwuC,EAAApjC,EAAAU,QACA,IAAAwiC,EACA8jC,EAAA,GACA,GAAA5jC,EAAA/wC,OAMA,CACA,MAAAs2B,EAAAu6C,GAAAhuE,EAAAyzB,UAAAv2B,KAAA4N,EAAAojC,EAAApjC,EAAAsmE,gBACAU,EAAAhnE,EAAA6nE,aAAA3yE,GACA8K,EAAA0wC,MAAA1wC,EAAA8nE,SAAAd,EAAA9xE,GACA8K,EAAAwkE,WAAAxkE,EAAA+nE,cAAAf,EAAA9xE,GACA8K,EAAA+jE,KAAA/jE,EAAAgoE,QAAAhB,EAAA9xE,GACA8K,EAAA9G,UAAA8G,EAAAioE,aAAAjB,EAAA9xE,GACA8K,EAAAgkE,OAAAhkE,EAAAkoE,UAAAlB,EAAA9xE,GACA,MAAAkgB,EAAApV,EAAAumE,MAAAzC,GAAA9jE,EAAA9K,GACAizE,EAAA/zE,OAAAC,OAAA,GAAAs0B,EAAAvT,GACAwwD,EAAAH,GAAAzlE,EAAArN,OAAAuC,EAAAizE,GACAC,EAAAzC,GAAAzwE,EAAAizE,EAAAvC,EAAA5lE,EAAArN,QACAqN,EAAAolE,OAAAQ,EAAAR,OACAplE,EAAAklE,OAAAU,EAAAV,OACAhiC,EAAA,CACAmjC,QAAA,EACAvhE,EAAAsjE,EAAAtjE,EACAkV,EAAAouD,EAAApuD,EACA0C,MAAAtH,EAAAsH,MACAmB,OAAAzI,EAAAyI,OACA8oD,OAAAh+C,EAAA7jB,EACA8hE,OAAAj+C,EAAA3O,QA1BA,IAAAha,EAAAqmE,UACAnjC,EAAA,CACAmjC,QAAA,IA2BArmE,EAAAymE,cAAAO,EACAhnE,EAAAunC,cAAA7zC,EACAwvC,GACAljC,EAAAysC,qBAAA7d,OAAA5uB,EAAAkjC,GAEAvU,GAAAz5B,EAAAmzE,UACAnzE,EAAAmzE,SAAAj2E,KAAA4N,EAAA,CAAAvF,MAAAuF,EAAArN,OAAAm6D,QAAA9sD,EAAAknD,OAAAA,IAGA/nD,UAAAmpE,EAAA3xD,EAAAvB,EAAAlgB,GACA,MAAAqzE,EAAA30E,KAAA40E,iBAAAF,EAAAlzD,EAAAlgB,GACAyhB,EAAAmI,OAAAypD,EAAAlvB,GAAAkvB,EAAAjvB,IACA3iC,EAAAmI,OAAAypD,EAAAhvB,GAAAgvB,EAAA/uB,IACA7iC,EAAAmI,OAAAypD,EAAAE,GAAAF,EAAAG,IAEAvpE,iBAAAmpE,EAAAlzD,EAAAlgB,GACA,MAAAkwE,OAAAA,EAAAF,OAAAA,GAAAtxE,MACAqqB,aAAAA,EAAAqnD,UAAAA,GAAApwE,GACA4P,EAAA6jE,EAAA3uD,EAAA4uD,GAAAN,GACA5rD,MAAAA,EAAAmB,OAAAA,GAAAzI,EACA,IAAAikC,EAAAE,EAAAkvB,EAAAnvB,EAAAE,EAAAkvB,EAoCA,MAnCA,WAAAxD,GACA1rB,EAAAovB,EAAA/qD,EAAA,EACA,SAAAunD,GACA/rB,EAAAsvB,EACApvB,EAAAF,EAAAisB,EACAhsB,EAAAE,EAAA8rB,EACAoD,EAAAlvB,EAAA8rB,IAEAjsB,EAAAsvB,EAAAjsD,EACA68B,EAAAF,EAAAisB,EACAhsB,EAAAE,EAAA8rB,EACAoD,EAAAlvB,EAAA8rB,GAEAmD,EAAApvB,IAGAE,EADA,SAAA6rB,EACAuD,EAAA1qD,EAAA,EACA,UAAAmnD,EACAuD,EAAAjsD,EAAAuB,EAAAqnD,EAEA1xE,KAAA+yE,OAEA,QAAAzB,GACA5rB,EAAAsvB,EACApvB,EAAAF,EAAAgsB,EACAjsB,EAAAE,EAAA+rB,EACAmD,EAAAlvB,EAAA+rB,IAEAhsB,EAAAsvB,EAAA/qD,EACA27B,EAAAF,EAAAgsB,EACAjsB,EAAAE,EAAA+rB,EACAmD,EAAAlvB,EAAA+rB,GAEAoD,EAAApvB,GAEA,CAAAD,GAAAA,EAAAE,GAAAA,EAAAkvB,GAAAA,EAAAnvB,GAAAA,EAAAE,GAAAA,EAAAkvB,GAAAA,GAEAvpE,UAAAg3B,EAAAxf,EAAAzhB,GACA,MAAA8K,EAAApM,KACA88C,EAAA1wC,EAAA0wC,MACAr+C,EAAAq+C,EAAAr+C,OACA,IAAAovE,EAAAgD,EAAA/yE,EACA,GAAAW,EAAA,CACA,MAAAquE,EAAA5mC,GAAA5kC,EAAA+J,IAAAe,EAAA8E,EAAA9E,EAAA0c,OAQA,IAPAyZ,EAAArxB,EAAAmhE,GAAAjmE,EAAA9K,EAAAo9C,WAAAp9C,GACAyhB,EAAAoK,UAAA2/C,EAAA3/C,UAAA7rB,EAAAo9C,YACA37B,EAAAqK,aAAA,SACAygD,EAAAr2C,GAAAl2B,EAAAusE,WACAgD,EAAAvvE,EAAAuvE,aACA9tD,EAAAmK,UAAA5rB,EAAA2zE,WACAlyD,EAAAzc,KAAAunE,EAAAllD,OACA7qB,EAAA,EAAAA,EAAAW,IAAAX,EACAilB,EAAA2K,SAAAovB,EAAAh/C,GAAAgvE,EAAA57D,EAAAqxB,EAAArxB,GAAAqxB,EAAAnc,EAAAynD,EAAAjrD,WAAA,GACA2f,EAAAnc,GAAAynD,EAAAjrD,WAAAiuD,EACA/yE,EAAA,IAAAW,IACA8jC,EAAAnc,GAAA9kB,EAAAwvE,kBAAAD,IAKAtlE,cAAAwX,EAAAwf,EAAAzkC,EAAAgvE,EAAAxrE,GACA,MAAA8K,EAAApM,KACAizE,EAAA7mE,EAAA6mE,YAAAn1E,GACAi2E,EAAA3nE,EAAA8mE,iBAAAp1E,IACAstE,UAAAA,EAAAC,SAAAA,GAAA/pE,EACA+uE,EAAA74C,GAAAl2B,EAAA+uE,UACA6E,EAAA7C,GAAAjmE,EAAA,OAAA9K,GACA6zE,EAAArI,EAAA57D,EAAAgkE,GACAE,EAAAhK,EAAAiF,EAAAztD,YAAAytD,EAAAztD,WAAAwoD,GAAA,EAAA,EACAiK,EAAA9yC,EAAAnc,EAAAgvD,EACA,GAAA9zE,EAAAgqE,cAAA,CACA,MAAAkC,EAAA,CACAhjD,OAAA/nB,KAAAY,IAAAgoE,EAAAD,GAAA,EACA9gD,WAAAypD,EAAAzpD,WACAC,SAAAwpD,EAAAxpD,SACA1oB,YAAA,GAEA25D,EAAAsR,EAAAzmC,WAAA8uC,EAAA9J,GAAAA,EAAA,EACA5P,EAAA4Z,EAAAjK,EAAA,EACAroD,EAAAuK,YAAAhsB,EAAAg0E,mBACAvyD,EAAAmK,UAAA5rB,EAAAg0E,mBACAprD,GAAAnH,EAAAyqD,EAAAhS,EAAAC,GACA14C,EAAAuK,YAAA2lD,EAAA9sE,YACA4c,EAAAmK,UAAA+lD,EAAA/sE,gBACAgkB,GAAAnH,EAAAyqD,EAAAhS,EAAAC,OACA,CACA14C,EAAAwK,UAAA0lD,EAAApxE,aAAA,EACAkhB,EAAAuK,YAAA2lD,EAAA9sE,YACA4c,EAAAkkC,YAAAgsB,EAAA3pC,YAAA,IACAvmB,EAAAmkC,eAAA+rB,EAAA1pC,kBAAA,EACA,MAAAgsC,EAAAzI,EAAAzmC,WAAA8uC,EAAA9J,GACAmK,EAAA1I,EAAAzmC,WAAAymC,EAAA1mC,MAAA+uC,EAAA,GAAA9J,EAAA,GACAjlE,EAAAkxB,GAAA27C,EAAA7sE,cACA5F,OAAAyhB,OAAA7b,GAAAqkD,MAAAx7C,GAAA,IAAAA,KACA8T,EAAA6H,YACA7H,EAAAmK,UAAA5rB,EAAAg0E,mBACAjnD,GAAAtL,EAAA,CACA7R,EAAAqkE,EACAnvD,EAAAivD,EACAnlE,EAAAm7D,EACA/7D,EAAA87D,EACA5gD,OAAApkB,IAEA2c,EAAAsI,OACAtI,EAAAuI,SACAvI,EAAAmK,UAAA+lD,EAAA/sE,gBACA6c,EAAA6H,YACAyD,GAAAtL,EAAA,CACA7R,EAAAskE,EACApvD,EAAAivD,EAAA,EACAnlE,EAAAm7D,EAAA,EACA/7D,EAAA87D,EAAA,EACA5gD,OAAApkB,IAEA2c,EAAAsI,SAEAtI,EAAAmK,UAAA5rB,EAAAg0E,mBACAvyD,EAAA8jC,SAAA0uB,EAAAF,EAAAhK,EAAAD,GACAroD,EAAA0yD,WAAAF,EAAAF,EAAAhK,EAAAD,GACAroD,EAAAmK,UAAA+lD,EAAA/sE,gBACA6c,EAAA8jC,SAAA2uB,EAAAH,EAAA,EAAAhK,EAAA,EAAAD,EAAA,IAGAroD,EAAAmK,UAAA9gB,EAAA+mE,gBAAAr1E,GAEAyN,SAAAg3B,EAAAxf,EAAAzhB,GACA,MAAA8K,EAAApM,MACAmwE,KAAAA,GAAA/jE,GACA4kE,YAAAA,EAAA0E,UAAAA,EAAA3E,cAAAA,EAAA3F,UAAAA,EAAAC,SAAAA,GAAA/pE,EACA+uE,EAAA74C,GAAAl2B,EAAA+uE,UACA,IAAAsF,EAAAtF,EAAAztD,WACAgzD,EAAA,EACA,MAAA9I,EAAA5mC,GAAA5kC,EAAA+J,IAAAe,EAAA8E,EAAA9E,EAAA0c,OACA+sD,EAAA,SAAA7oD,GACAjK,EAAA2K,SAAAV,EAAA8/C,EAAA57D,EAAAqxB,EAAArxB,EAAA0kE,GAAArzC,EAAAnc,EAAAuvD,EAAA,GACApzC,EAAAnc,GAAAuvD,EAAA3E,GAEA8E,EAAAhJ,EAAA3/C,UAAAuoD,GACA,IAAA/E,EAAAoF,EAAAlpD,EAAA/uB,EAAAme,EAAA2D,EAAAwJ,EAUA,IATArG,EAAAoK,UAAAuoD,EACA3yD,EAAAqK,aAAA,SACArK,EAAAzc,KAAA+pE,EAAA1nD,OACA4Z,EAAArxB,EAAAmhE,GAAAjmE,EAAA0pE,EAAAx0E,GACAyhB,EAAAmK,UAAA5rB,EAAA00E,UACA/1E,EAAAmM,EAAAwkE,WAAAiF,GACAD,EAAA7E,GAAA,UAAA+E,EACA,WAAAJ,EAAArK,EAAA,EAAA,EAAAA,EAAA,EACA,EACAvtE,EAAA,EAAA8hB,EAAAuwD,EAAA1xE,OAAAX,EAAA8hB,IAAA9hB,EAAA,CAUA,IATA6yE,EAAAR,EAAAryE,GACAi4E,EAAA3pE,EAAA+mE,gBAAAr1E,GACAilB,EAAAmK,UAAA6oD,EACA91E,EAAA0wE,EAAAxtE,OAAA0yE,GACAhpD,EAAA8jD,EAAA9jD,MACAkkD,GAAAlkD,EAAApuB,SACA2N,EAAA6pE,cAAAlzD,EAAAwf,EAAAzkC,EAAAgvE,EAAAxrE,GACAq0E,EAAAlzE,KAAAF,IAAA8tE,EAAAztD,WAAAwoD,IAEAnvD,EAAA,EAAAmN,EAAAyD,EAAApuB,OAAAwd,EAAAmN,IAAAnN,EACA45D,EAAAhpD,EAAA5Q,IACA05D,EAAAtF,EAAAztD,WAEA3iB,EAAA0wE,EAAAvtE,MAAAyyE,GAEAD,EAAA,EACAD,EAAAtF,EAAAztD,WACA3iB,EAAAmM,EAAA9G,UAAAuwE,GACAtzC,EAAAnc,GAAA4qD,EAEAzlE,WAAAg3B,EAAAxf,EAAAzhB,GACA,MAAA8K,EAAApM,KACAowE,EAAAhkE,EAAAgkE,OACA3xE,EAAA2xE,EAAA3xE,OACA,IAAA6xE,EAAAxyE,EACA,GAAAW,EAAA,CACA,MAAAquE,EAAA5mC,GAAA5kC,EAAA+J,IAAAe,EAAA8E,EAAA9E,EAAA0c,OAQA,IAPAyZ,EAAArxB,EAAAmhE,GAAAjmE,EAAA9K,EAAA40E,YAAA50E,GACAihC,EAAAnc,GAAA9kB,EAAA2vE,gBACAluD,EAAAoK,UAAA2/C,EAAA3/C,UAAA7rB,EAAA40E,aACAnzD,EAAAqK,aAAA,SACAkjD,EAAA94C,GAAAl2B,EAAAgvE,YACAvtD,EAAAmK,UAAA5rB,EAAA60E,YACApzD,EAAAzc,KAAAgqE,EAAA3nD,OACA7qB,EAAA,EAAAA,EAAAW,IAAAX,EACAilB,EAAA2K,SAAA0iD,EAAAtyE,GAAAgvE,EAAA57D,EAAAqxB,EAAArxB,GAAAqxB,EAAAnc,EAAAkqD,EAAA1tD,WAAA,GACA2f,EAAAnc,GAAAkqD,EAAA1tD,WAAAthB,EAAA4vE,eAIA3lE,eAAAg3B,EAAAxf,EAAAqzD,EAAA90E,GACA,MAAAkwE,OAAAA,EAAAF,OAAAA,GAAAtxE,MACAkR,EAAAA,EAAAkV,EAAAA,GAAAmc,GACAzZ,MAAAA,EAAAmB,OAAAA,GAAAmsD,EACA5rD,EAAAlpB,EAAA+oB,aACAtH,EAAAmK,UAAA5rB,EAAA4E,gBACA6c,EAAAuK,YAAAhsB,EAAA6E,YACA4c,EAAAwK,UAAAjsB,EAAAO,YACAkhB,EAAA6H,YACA7H,EAAAgI,OAAA7Z,EAAAsZ,EAAApE,GACA,QAAAkrD,GACAtxE,KAAAq2E,UAAA9zC,EAAAxf,EAAAqzD,EAAA90E,GAEAyhB,EAAAmI,OAAAha,EAAA4X,EAAA0B,EAAApE,GACArD,EAAAuzD,iBAAAplE,EAAA4X,EAAA1C,EAAAlV,EAAA4X,EAAA1C,EAAAoE,GACA,WAAA8mD,GAAA,UAAAE,GACAxxE,KAAAq2E,UAAA9zC,EAAAxf,EAAAqzD,EAAA90E,GAEAyhB,EAAAmI,OAAAha,EAAA4X,EAAA1C,EAAA6D,EAAAO,GACAzH,EAAAuzD,iBAAAplE,EAAA4X,EAAA1C,EAAA6D,EAAA/Y,EAAA4X,EAAA0B,EAAApE,EAAA6D,GACA,WAAAqnD,GACAtxE,KAAAq2E,UAAA9zC,EAAAxf,EAAAqzD,EAAA90E,GAEAyhB,EAAAmI,OAAAha,EAAAsZ,EAAApE,EAAA6D,GACAlH,EAAAuzD,iBAAAplE,EAAAkV,EAAA6D,EAAA/Y,EAAAkV,EAAA6D,EAAAO,GACA,WAAA8mD,GAAA,SAAAE,GACAxxE,KAAAq2E,UAAA9zC,EAAAxf,EAAAqzD,EAAA90E,GAEAyhB,EAAAmI,OAAAha,EAAAkV,EAAAoE,GACAzH,EAAAuzD,iBAAAplE,EAAAkV,EAAAlV,EAAAsZ,EAAApE,GACArD,EAAA+H,YACA/H,EAAAsI,OACA/pB,EAAAO,YAAA,GACAkhB,EAAAuI,SAGA/f,uBAAAjK,GACA,MAAA8K,EAAApM,KACA6G,EAAAuF,EAAArN,OACA8M,EAAAO,EAAAgkC,YACAmmC,EAAA1qE,GAAAA,EAAAqF,EACAslE,EAAA3qE,GAAAA,EAAAua,EACA,GAAAmwD,GAAAC,EAAA,CACA,MAAAzhD,EAAAu6C,GAAAhuE,EAAAyzB,UAAAv2B,KAAA4N,EAAAA,EAAAU,QAAAV,EAAAsmE,gBACA,IAAA39C,EACA,OAEA,MAAAvT,EAAApV,EAAAumE,MAAAzC,GAAA9jE,EAAA9K,GACAizE,EAAA/zE,OAAAC,OAAA,GAAAs0B,EAAA3oB,EAAAumE,OACAX,EAAAH,GAAAhrE,EAAAvF,EAAAizE,GACA/oD,EAAAumD,GAAAzwE,EAAAizE,EAAAvC,EAAAnrE,GACA0vE,EAAA3nC,MAAApjB,EAAAta,GAAAslE,EAAA5nC,MAAApjB,EAAApF,IACAha,EAAAolE,OAAAQ,EAAAR,OACAplE,EAAAklE,OAAAU,EAAAV,OACAllE,EAAA0c,MAAAtH,EAAAsH,MACA1c,EAAA6d,OAAAzI,EAAAyI,OACA7d,EAAA2mE,OAAAh+C,EAAA7jB,EACA9E,EAAA4mE,OAAAj+C,EAAA3O,EACAha,EAAAysC,qBAAA7d,OAAA5uB,EAAAof,KAIAjgB,KAAAwX,GACA,MAAA3W,EAAApM,KACAsB,EAAA8K,EAAA9K,QAAAw9B,WAAA1yB,EAAApL,cACA,IAAAyxE,EAAArmE,EAAAqmE,QACA,IAAAA,EACA,OAEArmE,EAAAqqE,uBAAAn1E,GACA,MAAA80E,EAAA,CACAttD,MAAA1c,EAAA0c,MACAmB,OAAA7d,EAAA6d,QAEAsY,EAAA,CACArxB,EAAA9E,EAAA8E,EACAkV,EAAAha,EAAAga,GAEAqsD,EAAAhwE,KAAA6jB,IAAAmsD,GAAA,KAAA,EAAAA,EACA,MAAAlsE,EAAAgxB,GAAAj2B,EAAAiF,SACAmwE,EAAAtqE,EAAA0wC,MAAAr+C,QAAA2N,EAAAwkE,WAAAnyE,QAAA2N,EAAA+jE,KAAA1xE,QAAA2N,EAAA9G,UAAA7G,QAAA2N,EAAAgkE,OAAA3xE,OACA6C,EAAAi6C,SAAAm7B,IACA3zD,EAAAoG,OACApG,EAAA4zD,YAAAlE,EACArmE,EAAAq7C,eAAAllB,EAAAxf,EAAAqzD,EAAA90E,GACAmlC,GAAA1jB,EAAAzhB,EAAA+rE,eACA9qC,EAAAnc,GAAA7f,EAAAolB,IACAvf,EAAAu7C,UAAAplB,EAAAxf,EAAAzhB,GACA8K,EAAAwqE,SAAAr0C,EAAAxf,EAAAzhB,GACA8K,EAAAyqE,WAAAt0C,EAAAxf,EAAAzhB,GACAylC,GAAAhkB,EAAAzhB,EAAA+rE,eACAtqD,EAAAwG,WAGAhe,oBACA,OAAAvL,KAAA8M,SAAA,GAEAvB,kBAAA2nD,EAAAuc,GACA,MAAArjE,EAAApM,KACAmzD,EAAA/mD,EAAAU,QACA0iC,EAAA0jB,EAAA5iD,KAAA,EAAAyP,aAAAA,EAAApe,MAAAA,MACA,MAAA80B,EAAArqB,EAAArN,OAAA23B,eAAA3W,GACA,IAAA0W,EACA,MAAA,IAAAr4B,MAAA,kCAAA2hB,GAEA,MAAA,CACAA,aAAAA,EACA8Q,QAAA4F,EAAAp2B,KAAAsB,GACAA,MAAAA,MAGAo5B,GAAAtb,GAAA0zC,EAAA3jB,GACAsnC,EAAA1qE,EAAA2qE,iBAAAvnC,EAAAigC,IACA10C,GAAA+7C,KACA1qE,EAAAU,QAAA0iC,EACApjC,EAAAsmE,eAAAjD,EACArjE,EAAA4uB,QAAA,IAGAzvB,YAAA7N,EAAA41D,GACA,MAAAlnD,EAAApM,KACAsB,EAAA8K,EAAA9K,QACA6xD,EAAA/mD,EAAAU,SAAA,GACA,IAAAiuB,GAAA,EACAyU,EAAA,GACA,aAAA9xC,EAAAyD,OACAquC,EAAApjC,EAAArN,OAAA+0D,0BAAAp2D,EAAA4D,EAAA6hB,KAAA7hB,EAAAgyD,GACAhyD,EAAAke,SACAgwB,EAAAhwB,WAGA,MAAAs3D,EAAA1qE,EAAA2qE,iBAAAvnC,EAAA9xC,GAYA,OAXAq9B,EAAAu4B,IAAA7zC,GAAA+vB,EAAA2jB,IAAA2jB,EACA/7C,IACA3uB,EAAAU,QAAA0iC,GACAluC,EAAAi6C,SAAAj6C,EAAAmzE,YACAroE,EAAAsmE,eAAA,CACAxhE,EAAAxT,EAAAwT,EACAkV,EAAA1oB,EAAA0oB,GAEAha,EAAA4uB,QAAA,EAAAs4B,KAGAv4B,EAEAxvB,iBAAAikC,EAAA9xC,GACA,MAAAq1E,OAAAA,EAAAC,OAAAA,EAAA1xE,QAAAA,GAAAtB,KACA+0B,EAAAu6C,GAAAhuE,EAAAyzB,UAAAv2B,KAAAwB,KAAAwvC,EAAA9xC,GACA,OAAA,IAAAq3B,IAAAg+C,IAAAh+C,EAAA7jB,GAAA8hE,IAAAj+C,EAAA3O,IAGAosD,GAAAlD,YAAAA,GACA,IAAA0H,GAAA,CACAt4D,GAAA,UACA8vD,SAAAgE,GACAlD,YAAAA,GACA/jE,UAAA1E,EAAAkkE,EAAAzpE,GACAA,IACAuF,EAAAqyD,QAAA,IAAAsZ,GAAA,CAAAzzE,OAAA8H,EAAAvF,QAAAA,MAGAiK,aAAA1E,EAAAkkE,EAAAzpE,GACAuF,EAAAqyD,SACAryD,EAAAqyD,QAAArlB,WAAAvyC,IAGAiK,MAAA1E,EAAAkkE,EAAAzpE,GACAuF,EAAAqyD,SACAryD,EAAAqyD,QAAArlB,WAAAvyC,IAGAiK,UAAA1E,GACA,MAAAqyD,EAAAryD,EAAAqyD,QACA5uD,EAAA,CACA4uD,QAAAA,IAEA,IAAAryD,EAAAm7C,cAAA,oBAAA13C,KAGA4uD,GACAA,EAAArsD,KAAAhG,EAAAkc,KAEAlc,EAAAm7C,cAAA,mBAAA13C,KAEAiB,WAAA1E,EAAAyD,GACA,GAAAzD,EAAAqyD,QAAA,CACA,MAAA7jC,EAAA/qB,EAAAgpD,OACAzsD,EAAAqyD,QAAAwV,YAAApkE,EAAAkD,MAAA6nB,KACA/qB,EAAAywB,SAAA,KAIA7Y,SAAA,CACAq5B,SAAA,EACAk5B,SAAA,KACA1/C,SAAA,UACA7uB,gBAAA,kBACA+uE,WAAA,OACApH,UAAA,CACApwD,OAAA,QAEAozD,aAAA,EACAC,kBAAA,EACApyB,WAAA,OACAs3B,UAAA,OACAhF,YAAA,EACAX,SAAA,GAEAqF,UAAA,OACAS,YAAA,OACAjF,cAAA,EACAD,gBAAA,EACAX,WAAA,CACA7yD,OAAA,QAEAy4D,YAAA,OACA3vE,QAAA,EACAorE,aAAA,EACAD,UAAA,EACArnD,aAAA,EACA+gD,UAAA,CAAAroD,EAAA6J,IAAAA,EAAAyjD,SAAA7uD,KACA6pD,SAAA,CAAAtoD,EAAA6J,IAAAA,EAAAyjD,SAAA7uD,KACA8zD,mBAAA,OACAvE,eAAA,EACA5qE,YAAA,gBACAtE,YAAA,EACAugB,UAAA,CACAnW,SAAA,IACAsiC,OAAA,gBAEAkB,WAAA,CACAF,QAAA,CACApuC,KAAA,SACAmuC,WAAA,CAAA,IAAA,IAAA,QAAA,SAAA,SAAA,WAEAmjC,QAAA,CACAlkC,OAAA,SACAtiC,SAAA,MAGAtH,UAAA,CACA0uE,YAAA70D,EACAjT,MAAA6nE,GACA,GAAAA,EAAA30E,OAAA,EAAA,CACA,MAAAmO,EAAAwmE,EAAA,GACA/xE,EAAAuL,EAAA/F,MAAAxG,KAAAgB,OACA41E,EAAA51E,EAAAA,EAAA5C,OAAA,EACA,GAAAuB,MAAAA,KAAAsB,SAAA,YAAAtB,KAAAsB,QAAA6hB,KACA,OAAAvW,EAAA9H,QAAAD,OAAA,GACA,GAAA+H,EAAA/H,MACA,OAAA+H,EAAA/H,MACA,GAAAoyE,EAAA,GAAArqE,EAAA3H,UAAAgyE,EACA,OAAA51E,EAAAuL,EAAA3H,WAGA,MAAA,IAEAquE,WAAA90D,EACAoyD,WAAApyD,EACAi1D,YAAAj1D,EACAjT,MAAA6wD,GACA,GAAAp8D,MAAAA,KAAAsB,SAAA,YAAAtB,KAAAsB,QAAA6hB,KACA,OAAAi5C,EAAAv3D,MAAA,KAAAu3D,EAAAE,gBAAAF,EAAAE,eAEA,IAAAz3D,EAAAu3D,EAAAt3D,QAAAD,OAAA,GACAA,IACAA,GAAA,MAEA,MAAAb,EAAAo4D,EAAAE,eAIA,OAHA39C,EAAA3a,KACAa,GAAAb,GAEAa,GAEA0G,WAAA6wD,GACA,MACA96D,EADA86D,EAAAv1D,MAAA6vB,eAAA0lC,EAAAr8C,cACAuU,WAAAxD,SAAAsrC,EAAAn3D,WACA,MAAA,CACAkB,YAAA7E,EAAA6E,YACAD,gBAAA5E,EAAA4E,gBACArE,YAAAP,EAAAO,YACAynC,WAAAhoC,EAAAgoC,WACAC,iBAAAjoC,EAAAioC,iBACAnjC,aAAA,IAGAmF,iBACA,OAAAvL,KAAAsB,QAAA00E,WAEAzqE,gBAAA6wD,GACA,MACA96D,EADA86D,EAAAv1D,MAAA6vB,eAAA0lC,EAAAr8C,cACAuU,WAAAxD,SAAAsrC,EAAAn3D,WACA,MAAA,CACAqlB,WAAAhpB,EAAAgpB,WACAC,SAAAjpB,EAAAipB,WAGAmpD,WAAAl1D,EACAlZ,UAAAkZ,EACAm1D,aAAAn1D,EACA4xD,OAAA5xD,EACAo1D,YAAAp1D,IAGAq7B,cAAA,CACAw2B,SAAA,OACAC,WAAA,OACAzC,UAAA,QAEAlsD,YAAA,CACA6C,YAAAjb,GAAA,WAAAA,GAAA,aAAAA,GAAA,aAAAA,EACAmb,YAAA,EACA/f,UAAA,CACA6f,aAAA,EACAE,YAAA,GAEAtC,UAAA,CACAuC,WAAA,GAEA8qB,WAAA,CACA9qB,UAAA,cAGA8nC,uBAAA,CAAA,gBAGAhpC,GAAAjjB,OAAAg8B,OAAA,CACAkN,UAAA,KACAwtC,WAAAxR,GACAyR,OAAArM,GACAU,OAAA+C,GACA6I,SAAA/H,GACAT,MAAAK,GACAuD,QAAAwE,KAMA,SAAAK,GAAAh2E,EAAA22C,EAAAr2C,GACA,MAAA+5C,EAAAr6C,EAAAif,QAAA03B,GACA,IAAA,IAAA0D,EACA,MANA,EAAAr6C,EAAA22C,EAAAr2C,IAAA,iBAAAq2C,EACA32C,EAAAsM,KAAAqqC,GAAA,EACAp0C,MAAAo0C,GAAA,KAAAr2C,EAIA21E,CAAAj2E,EAAA22C,EAAAr2C,GAGA,OAAA+5C,IADAr6C,EAAAk2E,YAAAv/B,GACAr2C,EAAA+5C,EAGA,MAAA87B,WAAA54B,GACArzC,YAAA4iC,GACA0Q,MAAA1Q,GACAnuC,KAAAy3E,iBAAA33E,EACAE,KAAA03E,YAAA,EAEAnsE,MAAAysC,EAAAr2C,GACA,GAAAgd,EAAAq5B,GACA,OAAA,KAEA,MAAA32C,EAAArB,KAAAo2C,YAGA,MAdA,EAAAz0C,EAAAY,IAAA,OAAAZ,EAAA,KAAA0mB,GAAA5lB,KAAAqB,MAAAnC,GAAA,EAAAY,GAcA47C,CAFAx8C,EAAAod,SAAApd,IAAAN,EAAAM,KAAAq2C,EAAAr2C,EACA01E,GAAAh2E,EAAA22C,EAAA94B,EAAAvd,EAAAq2C,IACA32C,EAAA5C,OAAA,GAEA8M,sBACA,MAAAa,EAAApM,MACAi3C,WAAAA,EAAAC,WAAAA,GAAA9qC,EAAA+qC,gBACA,IAAA9zC,IAAAA,EAAAd,IAAAA,GAAA6J,EAAAg0C,WAAA,GACA,UAAAh0C,EAAA9K,QAAAimC,SACA0P,IACA5zC,EAAA,GAEA6zC,IACA30C,EAAA6J,EAAAgqC,YAAA33C,OAAA,IAGA2N,EAAA/I,IAAAA,EACA+I,EAAA7J,IAAAA,EAEAgJ,aACA,MAAAa,EAAApM,KACAqD,EAAA+I,EAAA/I,IACAd,EAAA6J,EAAA7J,IACAmE,EAAA0F,EAAA9K,QAAAoF,OACAszC,EAAA,GACA,IAAA34C,EAAA+K,EAAAgqC,YACA/0C,EAAA,IAAAgC,GAAAd,IAAAlB,EAAA5C,OAAA,EAAA4C,EAAAA,EAAAiI,MAAAjG,EAAAd,EAAA,GACA6J,EAAAsrE,YAAAj1E,KAAAF,IAAAlB,EAAA5C,QAAAiI,EAAA,EAAA,GAAA,GACA0F,EAAAqrE,YAAArrE,EAAA/I,KAAAqD,EAAA,GAAA,GACA,IAAA,IAAA1C,EAAAX,EAAAW,GAAAzB,EAAAyB,IACAg2C,EAAArsC,KAAA,CAAA3J,MAAAA,IAEA,OAAAg2C,EAEAzuC,iBAAAvH,GACA,MACA3C,EADArB,KACAo2C,YACA,OAAApyC,GAAA,GAAAA,EAAA3C,EAAA5C,OACA4C,EAAA2C,GAEAA,EAEAuH,YACA,MAAAa,EAAApM,KACA6+C,MAAA/O,YACA1jC,EAAAqvB,iBACArvB,EAAAuoB,gBAAAvoB,EAAAuoB,gBAGAppB,iBAAAvH,GACA,MAAAoI,EAAApM,KAIA,MAHA,iBAAAgE,IACAA,EAAAoI,EAAAkqC,MAAAtyC,IAEA,OAAAA,EAAA0yC,IAAAtqC,EAAA6sD,oBAAAj1D,EAAAoI,EAAAqrE,aAAArrE,EAAAsrE,aAEAnsE,gBAAA5J,GACA,MACAq4C,EADAh6C,KACAg6C,MACA,OAAAr4C,EAAA,GAAAA,EAAAq4C,EAAAv7C,OAAA,EACA,KAHAuB,KAKAukD,iBAAAvK,EAAAr4C,GAAAqC,OAEAuH,iBAAAoe,GACA,MAAAvd,EAAApM,KACA,OAAAyC,KAAAqB,MAAAsI,EAAAqrE,YAAArrE,EAAAurE,mBAAAhuD,GAAAvd,EAAAsrE,aAEAnsE,eACA,OAAAvL,KAAA4rB,QA8FA,SAAAgsD,GAAA5zE,EAAA6zE,GAAAr+C,WAAAA,EAAAujB,YAAAA,IACA,MAAAtyB,EAAA7D,GAAAm2B,GACArgC,GAAA8c,EAAA/2B,KAAAuoB,IAAAP,GAAAhoB,KAAAwoB,IAAAR,KAAA,KACAhsB,EAAA,IAAAo5E,GAAA,GAAA7zE,GAAAvF,OACA,OAAAgE,KAAAY,IAAAw0E,EAAAn7D,EAAAje,GA/FA+4E,GAAA94D,GAAA,WACA84D,GAAAt1D,SAAA,CACA83B,MAAA,CACAj2C,SAAAyzE,GAAAtuE,UAAAquC,mBA8FA,MAAAugC,WAAAl5B,GACArzC,YAAA4iC,GACA0Q,MAAA1Q,GACAnuC,KAAAgL,WAAAlL,EACAE,KAAAiL,SAAAnL,EACAE,KAAAy3E,iBAAA33E,EACAE,KAAA+3E,eAAAj4E,EACAE,KAAA03E,YAAA,EAEAnsE,MAAAysC,EAAAr2C,GACA,OAAAgd,EAAAq5B,KAGA,iBAAAA,GAAAA,aAAAr0C,UAAAob,UAAAi5B,GAFA,MAKAA,EAEAzsC,yBACA,MAAAa,EAAApM,MACAu8C,YAAAA,GAAAnwC,EAAA9K,SACA21C,WAAAA,EAAAC,WAAAA,GAAA9qC,EAAA+qC,gBACA,IAAA9zC,IAAAA,EAAAd,IAAAA,GAAA6J,EACA,MAAA4rE,EAAA/oE,GAAA5L,EAAA4zC,EAAA5zC,EAAA4L,EACAgpE,EAAAhpE,GAAA1M,EAAA20C,EAAA30C,EAAA0M,EACA,GAAAstC,EAAA,CACA,MAAA27B,EAAA5yD,GAAAjiB,GACA80E,EAAA7yD,GAAA/iB,GACA21E,EAAA,GAAAC,EAAA,EACAF,EAAA,GACAC,EAAA,GAAAC,EAAA,GACAH,EAAA,GAGA,GAAA30E,IAAAd,EAAA,CACA,IAAAmE,EAAA,GACAnE,GAAAoB,OAAAy0E,kBAAA/0E,GAAAM,OAAA00E,oBACA3xE,EAAAjE,KAAA6jB,IAAA,IAAA/jB,IAEA01E,EAAA11E,EAAAmE,GACA61C,GACAy7B,EAAA30E,EAAAqD,GAGA0F,EAAA/I,IAAAA,EACA+I,EAAA7J,IAAAA,EAEAgJ,eACA,MAAAa,EAAApM,KACA26C,EAAAvuC,EAAA9K,QAAA04C,MACA,IACAs+B,GADAz9B,cAAAA,EAAA09B,SAAAA,GAAA59B,EAWA,OATA49B,EACAD,EAAA71E,KAAAo5C,KAAAzvC,EAAA7J,IAAAg2E,GAAA91E,KAAAojB,MAAAzZ,EAAA/I,IAAAk1E,GAAA,GAEAD,EAAAlsE,EAAAosE,mBACA39B,EAAAA,GAAA,IAEAA,IACAy9B,EAAA71E,KAAAY,IAAAw3C,EAAAy9B,IAEAA,EAEA/sE,mBACA,OAAA5H,OAAAqhB,kBAEAzZ,aACA,MAAAa,EAAApM,KACA4sB,EAAAxgB,EAAA9K,QACAq5C,EAAA/tB,EAAAotB,MACA,IAAAs+B,EAAAlsE,EAAAqsE,eACAH,EAAA71E,KAAAF,IAAA,EAAA+1E,GACA,MAcAt+B,EAhLA,SAAA0+B,EAAAC,GACA,MAAA3+B,EAAA,IAEAzS,OAAAA,EAAAwe,KAAAA,EAAA1iD,IAAAA,EAAAd,IAAAA,EAAAq2E,UAAAA,EAAA5/C,MAAAA,EAAAs/C,SAAAA,EAAAO,UAAAA,EAAAC,cAAAA,GAAAJ,EACApkB,EAAAvO,GAAA,EACAgzB,EAAAT,EAAA,GACAj1E,IAAA21E,EAAAz2E,IAAA02E,GAAAN,EACA1hC,GAAAt4B,EAAAtb,GACA6zC,GAAAv4B,EAAApc,GACA22E,GAAAv6D,EAAAqa,GACA6+C,GAAAoB,EAAAD,IAAAH,EAAA,GACA,IACAt/C,EAAA4/C,EAAAC,EAAAC,EADAz9B,EAAAr2B,IAAA0zD,EAAAD,GAAAD,EAAAzkB,GAAAA,EAEA,GAAA1Y,EAXA,QAWA3E,IAAAC,EACA,MAAA,CAAA,CAAAlzC,MAAAg1E,GAAA,CAAAh1E,MAAAi1E,IAEAI,EAAA52E,KAAAo5C,KAAAo9B,EAAAr9B,GAAAn5C,KAAAojB,MAAAmzD,EAAAp9B,GACAy9B,EAAAN,IACAn9B,EAAAr2B,GAAA8zD,EAAAz9B,EAAAm9B,EAAAzkB,GAAAA,GAEA31C,EAAAi6D,KACAr/C,EAAA92B,KAAAmjB,IAAA,GAAAgzD,GACAh9B,EAAAn5C,KAAAo5C,KAAAD,EAAAriB,GAAAA,GAEA,UAAAgO,GACA4xC,EAAA12E,KAAAojB,MAAAmzD,EAAAp9B,GAAAA,EACAw9B,EAAA32E,KAAAo5C,KAAAo9B,EAAAr9B,GAAAA,IAEAu9B,EAAAH,EACAI,EAAAH,GAEAhiC,GAAAC,GAAA6O,GAAAx/B,IAAAhkB,EAAAc,GAAA0iD,EAAAnK,EAAA,MACAy9B,EAAA52E,KAAAqB,MAAArB,KAAAY,KAAAd,EAAAc,GAAAu4C,EAAA08B,IACA18B,GAAAr5C,EAAAc,GAAAg2E,EACAF,EAAA91E,EACA+1E,EAAA72E,GACA22E,GACAC,EAAAliC,EAAA5zC,EAAA81E,EACAC,EAAAliC,EAAA30C,EAAA62E,EACAC,EAAArgD,EAAA,EACA4iB,GAAAw9B,EAAAD,GAAAE,IAEAA,GAAAD,EAAAD,GAAAv9B,EAEAy9B,EADA3zD,GAAA2zD,EAAA52E,KAAAqB,MAAAu1E,GAAAz9B,EAAA,KACAn5C,KAAAqB,MAAAu1E,GAEA52E,KAAAo5C,KAAAw9B,IAGA,MAAAC,EAAA72E,KAAAF,IACAykB,GAAA40B,GACA50B,GAAAmyD,IAEA5/C,EAAA92B,KAAAmjB,IAAA,GAAAjH,EAAAi6D,GAAAU,EAAAV,GACAO,EAAA12E,KAAAqB,MAAAq1E,EAAA5/C,GAAAA,EACA6/C,EAAA32E,KAAAqB,MAAAs1E,EAAA7/C,GAAAA,EACA,IAAAtd,EAAA,EAcA,IAbAg7B,IACA6hC,GAAAK,IAAA91E,GACA22C,EAAArsC,KAAA,CAAA3J,MAAAX,IACA81E,EAAA91E,GACA4Y,IAEAyJ,GAAAjjB,KAAAqB,OAAAq1E,EAAAl9D,EAAA2/B,GAAAriB,GAAAA,EAAAl2B,EAAAu0E,GAAAv0E,EAAAw0E,EAAAa,KACAz8D,KAEAk9D,EAAA91E,GACA4Y,KAGAA,EAAAo9D,IAAAp9D,EACA+9B,EAAArsC,KAAA,CAAA3J,MAAAvB,KAAAqB,OAAAq1E,EAAAl9D,EAAA2/B,GAAAriB,GAAAA,IAWA,OATA2d,GAAA4hC,GAAAM,IAAA72E,EACAmjB,GAAAs0B,EAAAA,EAAAv7C,OAAA,GAAAuF,MAAAzB,EAAAq1E,GAAAr1E,EAAAs1E,EAAAa,IACA1+B,EAAAA,EAAAv7C,OAAA,GAAAuF,MAAAzB,EAEAy3C,EAAArsC,KAAA,CAAA3J,MAAAzB,IAEA20C,GAAAkiC,IAAA72E,GACAy3C,EAAArsC,KAAA,CAAA3J,MAAAo1E,IAEAp/B,EA8FAu/B,CAdA,CACAjB,SAAAA,EACA/wC,OAAA3a,EAAA2a,OACAlkC,IAAAupB,EAAAvpB,IACAd,IAAAqqB,EAAArqB,IACAq2E,UAAAj+B,EAAAi+B,UACA7yB,KAAApL,EAAA49B,SACAv/C,MAAA2hB,EAAA3hB,MACA6/C,UAAAzsE,EAAAotE,aACAhgD,WAAAptB,EAAAqvB,eACAshB,YAAApC,EAAAoC,aAAA,EACA+7B,eAAA,IAAAn+B,EAAAm+B,eAEA1sE,EAAAgzC,QAAAhzC,GAaA,MAXA,UAAAwgB,EAAA2a,QACA9gB,GAAAuzB,EAAA5tC,EAAA,SAEAwgB,EAAApN,SACAw6B,EAAAx6B,UACApT,EAAApB,MAAAoB,EAAA7J,IACA6J,EAAAnB,IAAAmB,EAAA/I,MAEA+I,EAAApB,MAAAoB,EAAA/I,IACA+I,EAAAnB,IAAAmB,EAAA7J,KAEAy3C,EAEAzuC,YACA,MAAAa,EAAApM,KACAg6C,EAAA5tC,EAAA4tC,MACA,IAAAhvC,EAAAoB,EAAA/I,IACA4H,EAAAmB,EAAA7J,IAEA,GADAs8C,MAAA/O,YACA1jC,EAAA9K,QAAAoF,QAAAszC,EAAAv7C,OAAA,CACA,MAAAiI,GAAAuE,EAAAD,GAAAvI,KAAAF,IAAAy3C,EAAAv7C,OAAA,EAAA,GAAA,EACAuM,GAAAtE,EACAuE,GAAAvE,EAEA0F,EAAAqrE,YAAAzsE,EACAoB,EAAA2rE,UAAA9sE,EACAmB,EAAAsrE,YAAAzsE,EAAAD,EAEAO,iBAAAvH,GACA,OAAAwhC,GAAAxhC,EAAAhE,KAAA6G,MAAAvF,QAAAokC,SAIA,MAAA+zC,WAAA3B,GACAvsE,sBACA,MAAAa,EAAApM,MACAqD,IAAAA,EAAAd,IAAAA,GAAA6J,EAAAg0C,WAAA,GACAh0C,EAAA/I,IAAAyb,EAAAzb,GAAAA,EAAA,EACA+I,EAAA7J,IAAAuc,EAAAvc,GAAAA,EAAA,EACA6J,EAAAstE,yBAEAnuE,mBACA,MAAAa,EAAApM,KACAw5B,EAAAptB,EAAAqvB,eACAh9B,EAAA+6B,EAAAptB,EAAA0c,MAAA1c,EAAA6d,OACA8yB,EAAAn2B,GAAAxa,EAAA9K,QAAA04C,MAAA+C,aACArgC,GAAA8c,EAAA/2B,KAAAuoB,IAAA+xB,GAAAt6C,KAAAwoB,IAAA8xB,KAAA,KACAkH,EAAA73C,EAAAi4C,wBAAA,GACA,OAAA5hD,KAAAo5C,KAAAp9C,EAAAgE,KAAAY,IAAA,GAAA4gD,EAAArhC,WAAAlG,IAEAnR,iBAAAvH,GACA,OAAA,OAAAA,EAAA0yC,IAAA12C,KAAAi5D,oBAAAj1D,EAAAhE,KAAAy3E,aAAAz3E,KAAA03E,aAEAnsE,iBAAAoe,GACA,OAAA3pB,KAAAy3E,YAAAz3E,KAAA23E,mBAAAhuD,GAAA3pB,KAAA03E,aAUA,SAAAiC,GAAAC,GAEA,OAAA,IADAA,EAAAn3E,KAAAmjB,IAAA,GAAAnjB,KAAAojB,MAAAR,GAAAu0D,KARAH,GAAA/6D,GAAA,SACA+6D,GAAAv3D,SAAA,CACA83B,MAAA,CACAj2C,SAAA02C,GAAAX,WAAAU,UA8BA,MAAAq/B,WAAAj7B,GACArzC,YAAA4iC,GACA0Q,MAAA1Q,GACAnuC,KAAAgL,WAAAlL,EACAE,KAAAiL,SAAAnL,EACAE,KAAAy3E,iBAAA33E,EACAE,KAAA03E,YAAA,EAEAnsE,MAAAysC,EAAAr2C,GACA,MAAAqC,EAAA8zE,GAAA5uE,UAAAotC,MAAA5zC,MAAA1C,KAAA,CAAAg4C,EAAAr2C,IACA,GAAA,IAAAqC,EAIA,OAAA8a,EAAA9a,IAAAA,EAAA,EAAAA,EAAA,KAHAhE,KAAA85E,OAAA,EAKAvuE,sBACA,MAAAa,EAAApM,MACAqD,IAAAA,EAAAd,IAAAA,GAAA6J,EAAAg0C,WAAA,GACAh0C,EAAA/I,IAAAyb,EAAAzb,GAAAZ,KAAAF,IAAA,EAAAc,GAAA,KACA+I,EAAA7J,IAAAuc,EAAAvc,GAAAE,KAAAF,IAAA,EAAAA,GAAA,KACA6J,EAAA9K,QAAAi7C,cACAnwC,EAAA0tE,OAAA,GAEA1tE,EAAAstE,yBAEAnuE,yBACA,MAAAa,EAAApM,MACAi3C,WAAAA,EAAAC,WAAAA,GAAA9qC,EAAA+qC,gBACA,IAAA9zC,EAAA+I,EAAA/I,IACAd,EAAA6J,EAAA7J,IACA,MAAAy1E,EAAA/oE,GAAA5L,EAAA4zC,EAAA5zC,EAAA4L,EACAgpE,EAAAhpE,GAAA1M,EAAA20C,EAAA30C,EAAA0M,EACA8qE,EAAA,CAAA9qE,EAAA0B,IAAAlO,KAAAmjB,IAAA,GAAAnjB,KAAAojB,MAAAR,GAAApW,IAAA0B,GACAtN,IAAAd,IACAc,GAAA,GACA20E,EAAA,GACAC,EAAA,MAEAD,EAAA+B,EAAA12E,GAAA,IACA40E,EAAA8B,EAAAx3E,EAAA,MAGAc,GAAA,GACA20E,EAAA+B,EAAAx3E,GAAA,IAEAA,GAAA,GACA01E,EAAA8B,EAAA12E,EAAA,IAEA+I,EAAA0tE,OAAA1tE,EAAA/I,MAAA+I,EAAAwzC,eAAAv8C,IAAA02E,EAAA3tE,EAAA/I,IAAA,IACA20E,EAAA+B,EAAA12E,GAAA,IAEA+I,EAAA/I,IAAAA,EACA+I,EAAA7J,IAAAA,EAEAgJ,aACA,MAAAa,EAAApM,KACA4sB,EAAAxgB,EAAA9K,QAKA04C,EApFA,SAAA0+B,EAAAC,GACA,MAAAqB,EAAAv3E,KAAAojB,MAAAR,GAAAszD,EAAAp2E,MACA03E,EAAAx3E,KAAAo5C,KAAA88B,EAAAp2E,IAAAE,KAAAmjB,IAAA,GAAAo0D,IACAhgC,EAAA,GACA,IAAA4/B,EAAA56D,EAAA05D,EAAAr1E,IAAAZ,KAAAmjB,IAAA,GAAAnjB,KAAAojB,MAAAR,GAAAszD,EAAAt1E,QACA02E,EAAAt3E,KAAAojB,MAAAR,GAAAu0D,IACAM,EAAAz3E,KAAAojB,MAAA+zD,EAAAn3E,KAAAmjB,IAAA,GAAAm0D,IACAnB,EAAAmB,EAAA,EAAAt3E,KAAAmjB,IAAA,GAAAnjB,KAAA6jB,IAAAyzD,IAAA,EACA,GACA//B,EAAArsC,KAAA,CAAA3J,MAAA41E,EAAAt+B,MAAAq+B,GAAAC,OACAM,EACA,KAAAA,IACAA,EAAA,IACAH,EACAnB,EAAAmB,GAAA,EAAA,EAAAnB,GAEAgB,EAAAn3E,KAAAqB,MAAAo2E,EAAAz3E,KAAAmjB,IAAA,GAAAm0D,GAAAnB,GAAAA,QACAmB,EAAAC,GAAAD,IAAAC,GAAAE,EAAAD,GACA,MAAAE,EAAAn7D,EAAA05D,EAAAn2E,IAAAq3E,GAEA,OADA5/B,EAAArsC,KAAA,CAAA3J,MAAAm2E,EAAA7+B,MAAAq+B,GAAAC,KACA5/B,EAgEAogC,CAJA,CACA/2E,IAAA+I,EAAAszC,SACAn9C,IAAA6J,EAAAqzC,UAEArzC,GAYA,MAXA,UAAAwgB,EAAA2a,QACA9gB,GAAAuzB,EAAA5tC,EAAA,SAEAwgB,EAAApN,SACAw6B,EAAAx6B,UACApT,EAAApB,MAAAoB,EAAA7J,IACA6J,EAAAnB,IAAAmB,EAAA/I,MAEA+I,EAAApB,MAAAoB,EAAA/I,IACA+I,EAAAnB,IAAAmB,EAAA7J,KAEAy3C,EAEAzuC,iBAAAvH,GACA,YAAAlE,IAAAkE,EAAA,IAAAwhC,GAAAxhC,EAAAhE,KAAA6G,MAAAvF,QAAAokC,QAEAn6B,YACA,MAAAa,EAAApM,KACAgL,EAAAoB,EAAA/I,IACAw7C,MAAA/O,YACA1jC,EAAAqrE,YAAApyD,GAAAra,GACAoB,EAAAsrE,YAAAryD,GAAAjZ,EAAA7J,KAAA8iB,GAAAra,GAEAO,iBAAAvH,GACA,MAAAoI,EAAApM,KAIA,YAHAF,IAAAkE,GAAA,IAAAA,IACAA,EAAAoI,EAAA/I,KAEA,OAAAW,GAAAJ,MAAAI,GACA0yC,IAEAtqC,EAAA6sD,mBAAAj1D,IAAAoI,EAAA/I,IACA,GACAgiB,GAAArhB,GAAAoI,EAAAqrE,aAAArrE,EAAAsrE,aAEAnsE,iBAAAoe,GACA,MAAAvd,EAAApM,KACAwkD,EAAAp4C,EAAAurE,mBAAAhuD,GACA,OAAAlnB,KAAAmjB,IAAA,GAAAxZ,EAAAqrE,YAAAjzB,EAAAp4C,EAAAsrE,cAaA,SAAA2C,GAAAztD,GACA,MAAA+tB,EAAA/tB,EAAAotB,MACA,GAAAW,EAAApe,SAAA3P,EAAA2P,QAAA,CACA,MAAAh2B,EAAAgxB,GAAAojB,EAAA+C,iBACA,OAAAx+B,EAAAy7B,EAAAr0C,MAAAq0C,EAAAr0C,KAAAkb,KAAAU,GAAA5b,KAAAkb,MAAAjb,EAAA0jB,OAEA,OAAA,EASA,SAAAqwD,GAAA/yD,EAAArG,EAAAM,EAAAne,EAAAd,GACA,OAAAglB,IAAAlkB,GAAAkkB,IAAAhlB,EACA,CACAyI,MAAAkW,EAAAM,EAAA,EACAvW,IAAAiW,EAAAM,EAAA,GAEA+F,EAAAlkB,GAAAkkB,EAAAhlB,EACA,CACAyI,MAAAkW,EAAAM,EACAvW,IAAAiW,GAGA,CACAlW,MAAAkW,EACAjW,IAAAiW,EAAAM,GAGA,SAAA+4D,GAAA52D,GACA,MAAA62D,EAAA,CACAnrE,EAAA,EACA5R,EAAAkmB,EAAAmF,MACAlrB,EAAA,EACA8Q,EAAAiV,EAAAsG,OAAAtG,EAAAo7B,YAEA07B,EAAA,GACAl4B,EAAA,GACAh8C,EAAA,GACAm0E,EAAA/2D,EAAAyyB,YAAA33C,OACA,IAAA,IAAAX,EAAA,EAAAA,EAAA48E,EAAA58E,IAAA,CACA,MAAA8uB,EAAAjJ,EAAAriB,QAAAm9D,YAAA3/B,WAAAnb,EAAAg3D,qBAAA78E,IACAyI,EAAAzI,GAAA8uB,EAAArmB,QACA,MAAAq4D,EAAAj7C,EAAAi3D,iBAAA98E,EAAA6lB,EAAAk3D,YAAAt0E,EAAAzI,IACAg9E,EAAAtjD,GAAA5K,EAAAtmB,MACAwoE,GAxCA/rD,EAwCAY,EAAAZ,IAxCAzc,EAwCAw0E,EAvCAj2E,EAAAtE,EADAsE,EAwCA8e,EAAAo3D,aAAAj9E,IAvCA+G,EAAA,CAAAA,GACA,CACAqL,EAAA6Y,GAAAhG,EAAAzc,EAAAqiB,OAAA9jB,GACAyK,EAAAzK,EAAApG,OAAA6H,EAAAsc,aAqCA2/B,EAAAzkD,GAAAgxE,EACA,MAAA3rB,EAAAx/B,EAAAu6C,cAAApgE,GACAypB,EAAAT,GAAAq8B,GACA63B,EAAAV,GAAA/yD,EAAAq3C,EAAA1tD,EAAA49D,EAAA5+D,EAAA,EAAA,KACA+qE,EAAAX,GAAA/yD,EAAAq3C,EAAAx4C,EAAA0oD,EAAAx/D,EAAA,GAAA,KACA0rE,EAAAhwE,MAAAwvE,EAAAnrE,IACAmrE,EAAAnrE,EAAA2rE,EAAAhwE,MACAyvE,EAAAprE,EAAA8zC,GAEA63B,EAAA/vE,IAAAuvE,EAAA/8E,IACA+8E,EAAA/8E,EAAAu9E,EAAA/vE,IACAwvE,EAAAh9E,EAAA0lD,GAEA83B,EAAAjwE,MAAAwvE,EAAA58E,IACA48E,EAAA58E,EAAAq9E,EAAAjwE,MACAyvE,EAAA78E,EAAAulD,GAEA83B,EAAAhwE,IAAAuvE,EAAA9rE,IACA8rE,EAAA9rE,EAAAusE,EAAAhwE,IACAwvE,EAAA/rE,EAAAy0C,GA5DA,IAAApgC,EAAAzc,EAAAzB,EA+DA8e,EAAAu3D,eAAAv3D,EAAAk3D,YAAAL,EAAAC,GACA92D,EAAAw3D,iBAEA,SAAAx3D,EAAA4+B,EAAAh8C,GACA,MAAAoG,EAAA,GACA+tE,EAAA/2D,EAAAyyB,YAAA33C,OACAmuB,EAAAjJ,EAAAriB,QACA85E,EAAAf,GAAAztD,GACAyuD,EAAA13D,EAAA26C,8BAAA1xC,EAAAotB,MAAAx6B,QAAAmE,EAAAtgB,IAAAsgB,EAAAphB,KACA,IAAA,IAAAzE,EAAA,EAAAA,EAAA48E,EAAA58E,IAAA,CACA,MAAAw9E,EAAA,IAAAx9E,EAAAs9E,EAAA,EAAA,EACAG,EAAA53D,EAAAi3D,iBAAA98E,EAAAu9E,EAAAC,EAAA/0E,EAAAzI,IACAypB,EAAAT,GAAAnD,EAAAu6C,cAAApgE,IACA0jB,EAAA+gC,EAAAzkD,GACAsoB,EAAAo1D,GAAAD,EAAAn1D,EAAA5E,EAAAlS,EAAAiY,GACA4F,EAAAsuD,GAAAl0D,GACApc,EAAAuwE,GAAAH,EAAArqE,EAAAsQ,EAAAtR,EAAAid,GACAxgB,EAAAgB,KAAA,CACAuD,EAAAqqE,EAAArqE,EACAkV,EAAAA,EACA+G,UAAAA,EACAhiB,KAAAA,EACAwgB,IAAAvF,EACAhb,MAAAD,EAAAqW,EAAAtR,EACA0b,OAAAxF,EAAA5E,EAAAlS,IAGA,OAAA3C,EA1BAgvE,CAAAh4D,EAAA4+B,EAAAh8C,GA4BA,SAAAk1E,GAAAl0D,GACA,OAAA,IAAAA,GAAA,MAAAA,EACA,SACAA,EAAA,IACA,OAEA,QAEA,SAAAm0D,GAAAxqE,EAAAhB,EAAA1J,GAMA,MALA,UAAAA,EACA0K,GAAAhB,EACA,WAAA1J,IACA0K,GAAAhB,EAAA,GAEAgB,EAEA,SAAAsqE,GAAAp1D,EAAA9W,EAAAiY,GAMA,OALA,KAAAA,GAAA,MAAAA,EACAnB,GAAA9W,EAAA,GACAiY,EAAA,KAAAA,EAAA,MACAnB,GAAA9W,GAEA8W,EA4BA,SAAAw1D,GAAAj4D,EAAA6G,EAAAg0C,EAAAyY,GACA,MAAAl0D,IAAAA,GAAAY,EACA,GAAA66C,EACAz7C,EAAA8H,IAAAlH,EAAAo6C,QAAAp6C,EAAAq6C,QAAAxzC,EAAA,EAAA3F,QACA,CACA,IAAA+5C,EAAAj7C,EAAAi3D,iBAAA,EAAApwD,GACAzH,EAAAgI,OAAA6zC,EAAA1tD,EAAA0tD,EAAAx4C,GACA,IAAA,IAAAtoB,EAAA,EAAAA,EAAAm5E,EAAAn5E,IACA8gE,EAAAj7C,EAAAi3D,iBAAA98E,EAAA0sB,GACAzH,EAAAmI,OAAA0zC,EAAA1tD,EAAA0tD,EAAAx4C,IAsBA,SAAAy1D,GAAAC,GACA,OAAA31D,GAAA21D,GAAAA,EAAA,EAhMAjC,GAAAn7D,GAAA,cACAm7D,GAAA33D,SAAA,CACA83B,MAAA,CACAj2C,SAAA02C,GAAAX,WAAAiiC,YACAzgC,MAAA,CACAC,SAAA,KAoMA,MAAAygC,WAAAlE,GACAvsE,YAAA4iC,GACA0Q,MAAA1Q,GACAnuC,KAAA+9D,aAAAj+D,EACAE,KAAAg+D,aAAAl+D,EACAE,KAAA66E,iBAAA/6E,EACAE,KAAA+6E,aAAA,GACA/6E,KAAAm7E,iBAAA,GAEA5vE,gBACA,MAAAa,EAAApM,KACAoM,EAAA0c,MAAA1c,EAAAqhB,SACArhB,EAAA6d,OAAA7d,EAAAumB,UACAvmB,EAAA2yC,WAAAs7B,GAAAjuE,EAAA9K,SAAA,EACA8K,EAAA2xD,QAAAt7D,KAAAojB,MAAAzZ,EAAA0c,MAAA,GACA1c,EAAA4xD,QAAAv7D,KAAAojB,OAAAzZ,EAAA6d,OAAA7d,EAAA2yC,YAAA,GACA3yC,EAAAyuE,YAAAp4E,KAAAY,IAAA+I,EAAA6d,OAAA7d,EAAA2yC,WAAA3yC,EAAA0c,OAAA,EAEAvd,sBACA,MAAAa,EAAApM,MACAqD,IAAAA,EAAAd,IAAAA,GAAA6J,EAAAg0C,WAAA,GACAh0C,EAAA/I,IAAAyb,EAAAzb,KAAAO,MAAAP,GAAAA,EAAA,EACA+I,EAAA7J,IAAAuc,EAAAvc,KAAAqB,MAAArB,GAAAA,EAAA,EACA6J,EAAAstE,yBAEAnuE,mBACA,OAAA9I,KAAAo5C,KAAA77C,KAAA66E,YAAAR,GAAAr6E,KAAAsB,UAEAiK,mBAAAyuC,GACA,MAAA5tC,EAAApM,KACA83E,GAAA5uE,UAAA06C,mBAAAplD,KAAA4N,EAAA4tC,GACA5tC,EAAA2uE,aAAA3uE,EAAAgqC,YAAA9lC,KAAA,CAAAtM,EAAArC,KACA,MAAAkD,EAAAd,EAAAqI,EAAA9K,QAAAm9D,YAAA16D,SAAA,CAAAC,EAAArC,GAAAyK,GACA,OAAAvH,GAAA,IAAAA,EAAAA,EAAA,MAGA0G,MACA,MAAAa,EAAApM,KACA4sB,EAAAxgB,EAAA9K,QACAsrB,EAAA2P,SAAA3P,EAAA6xC,YAAAliC,QACAg+C,GAAAnuE,GAEAA,EAAA6vE,eAAA,EAAA,EAAA,EAAA,GAGA1wE,eAAA2wE,EAAA1B,EAAAC,GACA,MAAAruE,EAAApM,KACA,IAAAm8E,EAAA3B,EAAAnrE,EAAA5M,KAAAuoB,IAAAyvD,EAAAprE,GACA+sE,EAAA35E,KAAAF,IAAAi4E,EAAA/8E,EAAA2O,EAAA0c,MAAA,GAAArmB,KAAAuoB,IAAAyvD,EAAAh9E,GACA4+E,GAAA7B,EAAA58E,EAAA6E,KAAAwoB,IAAAwvD,EAAA78E,GACA0+E,GAAA75E,KAAAF,IAAAi4E,EAAA9rE,GAAAtC,EAAA6d,OAAA7d,EAAA2yC,YAAA,GAAAt8C,KAAAwoB,IAAAwvD,EAAA/rE,GACAytE,EAAAN,GAAAM,GACAC,EAAAP,GAAAO,GACAC,EAAAR,GAAAQ,GACAC,EAAAT,GAAAS,GACAlwE,EAAAyuE,YAAAp4E,KAAAF,IAAA25E,EAAA,EAAAz5E,KAAAY,IACAZ,KAAAojB,MAAAq2D,GAAAC,EAAAC,GAAA,GACA35E,KAAAojB,MAAAq2D,GAAAG,EAAAC,GAAA,KACAlwE,EAAA6vE,eAAAE,EAAAC,EAAAC,EAAAC,GAEA/wE,eAAAgxE,EAAAC,EAAAC,EAAAC,GACA,MAAAtwE,EAAApM,KACA28E,EAAAvwE,EAAA0c,MAAA0zD,EAAApwE,EAAAyuE,YACA+B,EAAAL,EAAAnwE,EAAAyuE,YACAgC,EAAAJ,EAAArwE,EAAAyuE,YACAiC,EAAA1wE,EAAA6d,OAAA7d,EAAA2yC,WAAA29B,EAAAtwE,EAAAyuE,YACAzuE,EAAA2xD,QAAAt7D,KAAAojB,OAAA+2D,EAAAD,GAAA,EAAAvwE,EAAAjB,MACAiB,EAAA4xD,QAAAv7D,KAAAojB,OAAAg3D,EAAAC,GAAA,EAAA1wE,EAAAuf,IAAAvf,EAAA2yC,YAEAxzC,cAAA5J,GAGA,OAAAmmB,GAAAnmB,GAFAkjB,GAAA7kB,KAAAo2C,YAAA33C,QAEAmoB,GADA5mB,KAAAsB,QAAA64D,YAAA,IAGA5uD,8BAAAvH,GACA,MAAAoI,EAAApM,KACA,GAAA2e,EAAA3a,GACA,OAAA0yC,IAEA,MAAAqmC,EAAA3wE,EAAAyuE,aAAAzuE,EAAA7J,IAAA6J,EAAA/I,KACA,OAAA+I,EAAA9K,QAAAke,SACApT,EAAA7J,IAAAyB,GAAA+4E,GAEA/4E,EAAAoI,EAAA/I,KAAA05E,EAEAxxE,8BAAAkc,GACA,GAAA9I,EAAA8I,GACA,OAAAivB,IAEA,MAAAtqC,EAAApM,KACAg9E,EAAAv1D,GAAArb,EAAAyuE,aAAAzuE,EAAA7J,IAAA6J,EAAA/I,MACA,OAAA+I,EAAA9K,QAAAke,QAAApT,EAAA7J,IAAAy6E,EAAA5wE,EAAA/I,IAAA25E,EAEAzxE,qBAAA5J,GACA,MAAAyK,EAAApM,KACAy+D,EAAAryD,EAAA2uE,cAAA,GACA,GAAAp5E,GAAA,GAAAA,EAAA88D,EAAAhgE,OAAA,CACA,MAAAw+E,EAAAxe,EAAA98D,GACA,OAzGA,SAAA0uB,EAAA1uB,EAAAkD,GACA,OAAArE,OAAAC,OAAAD,OAAA2f,OAAAkQ,GAAA,CACAxrB,MAAAA,EACAlD,MAAAA,EACAR,KAAA,eAqGA+7E,CAAA9wE,EAAApL,aAAAW,EAAAs7E,IAGA1xE,iBAAA5J,EAAAw7E,GACA,MAAA/wE,EAAApM,KACAunB,EAAAnb,EAAA8xD,cAAAv8D,GAAAujB,GACA,MAAA,CACAhU,EAAAzO,KAAAwoB,IAAA1D,GAAA41D,EAAA/wE,EAAA2xD,QACA33C,EAAA3jB,KAAAuoB,IAAAzD,GAAA41D,EAAA/wE,EAAA4xD,QACAz2C,MAAAA,GAGAhc,yBAAA5J,EAAAqC,GACA,OAAAhE,KAAA46E,iBAAAj5E,EAAA3B,KAAAs+D,8BAAAt6D,IAEAuH,gBAAA5J,GACA,OAAA3B,KAAA6+D,yBAAAl9D,GAAA,EAAA3B,KAAAykD,gBAEAl5C,sBAAA5J,GACA,MAAAwJ,KAAAA,EAAAwgB,IAAAA,EAAAvgB,MAAAA,EAAAwgB,OAAAA,GAAA5rB,KAAAm7E,iBAAAx5E,GACA,MAAA,CACAwJ,KAAAA,EACAwgB,IAAAA,EACAvgB,MAAAA,EACAwgB,OAAAA,GAGArgB,iBACA,MAAAa,EAAApM,MACAkG,gBAAAA,EAAAs2C,MAAAgiB,SAAAA,IAAApyD,EAAA9K,QACA,GAAA4E,EAAA,CACA,MAAA6c,EAAA3W,EAAA2W,IACAA,EAAAoG,OACApG,EAAA6H,YACAgxD,GAAAxvE,EAAAA,EAAAkyD,8BAAAlyD,EAAA2rE,WAAAvZ,EAAApyD,EAAAgqC,YAAA33C,QACAskB,EAAA+H,YACA/H,EAAAmK,UAAAhnB,EACA6c,EAAAsI,OACAtI,EAAAwG,WAGAhe,WACA,MAAAa,EAAApM,KACA+iB,EAAA3W,EAAA2W,IACA6J,EAAAxgB,EAAA9K,SACAi9D,WAAAA,EAAA/hB,KAAAA,GAAA5vB,EACAqqD,EAAA7qE,EAAAgqC,YAAA33C,OACA,IAAAX,EAAA4I,EAAAquB,EAaA,GAZAnI,EAAA6xC,YAAAliC,SArNA,SAAA5Y,EAAAszD,GACA,MAAAl0D,IAAAA,EAAAzhB,SAAAm9D,YAAAA,IAAA96C,EACA,IAAA,IAAA7lB,EAAAm5E,EAAA,EAAAn5E,GAAA,EAAAA,IAAA,CACA,MAAAkoD,EAAAyY,EAAA3/B,WAAAnb,EAAAg3D,qBAAA78E,IACAg9E,EAAAtjD,GAAAwuB,EAAA1/C,OACA4K,EAAAA,EAAAkV,EAAAA,EAAA+G,UAAAA,EAAAhiB,KAAAA,EAAAwgB,IAAAA,EAAAvgB,MAAAA,EAAAwgB,OAAAA,GAAAjI,EAAAw3D,iBAAAr9E,IACA2/C,cAAAA,GAAAuI,EACA,IAAArnC,EAAA8+B,GAAA,CACA,MAAAl3C,EAAAgxB,GAAAyuB,EAAAtI,iBACA36B,EAAAmK,UAAAuwB,EACA16B,EAAA8jC,SAAA17C,EAAA5E,EAAA4E,KAAAwgB,EAAAplB,EAAAolB,IAAAvgB,EAAAD,EAAA5E,EAAAuiB,MAAA8C,EAAAD,EAAAplB,EAAA0jB,QAEAyC,GACA3J,EACAY,EAAAo3D,aAAAj9E,GACAoT,EACAkV,EAAA00D,EAAAl4D,WAAA,EACAk4D,EACA,CACAz0E,MAAA2/C,EAAA3/C,MACA8mB,UAAAA,EACAC,aAAA,YAiMAgwD,CAAAhxE,EAAA6qE,GAEAz6B,EAAAjgB,SACAnwB,EAAA4tC,MAAAt4C,SAAA,CAAAsL,EAAArL,KACA,GAAA,IAAAA,EAAA,CACA+E,EAAA0F,EAAAkyD,8BAAAtxD,EAAAhJ,OACA,MAAAgiD,EAAAxJ,EAAA1d,WAAA1yB,EAAApL,WAAAW,EAAA,KArLA,SAAAgiB,EAAA05D,EAAA7yD,EAAAysD,GACA,MAAAl0D,EAAAY,EAAAZ,IACAy7C,EAAA6e,EAAA7e,UACAn4D,MAAAA,EAAAknB,UAAAA,GAAA8vD,GACA7e,IAAAyY,IAAA5wE,IAAAknB,GAAA/C,EAAA,IAGAzH,EAAAoG,OACApG,EAAAuK,YAAAjnB,EACA0c,EAAAwK,UAAAA,EACAxK,EAAAkkC,YAAAo2B,EAAA/zC,YACAvmB,EAAAmkC,eAAAm2B,EAAA9zC,iBACAxmB,EAAA6H,YACAgxD,GAAAj4D,EAAA6G,EAAAg0C,EAAAyY,GACAl0D,EAAA+H,YACA/H,EAAAuI,SACAvI,EAAAwG,WAsKA+zD,CAAAlxE,EAAA45C,EAAAt/C,EAAAuwE,OAIA1Y,EAAAhiC,QAAA,CAEA,IADAxZ,EAAAoG,OACArrB,EAAAsO,EAAAgqC,YAAA33C,OAAA,EAAAX,GAAA,EAAAA,IAAA,CACA,MAAAkoD,EAAAuY,EAAAz/B,WAAA1yB,EAAAuuE,qBAAA78E,KACAuI,MAAAA,EAAAknB,UAAAA,GAAAy4B,EACAz4B,GAAAlnB,IAGA0c,EAAAwK,UAAAA,EACAxK,EAAAuK,YAAAjnB,EACA0c,EAAAkkC,YAAAjB,EAAA1c,YACAvmB,EAAAmkC,eAAAlB,EAAAzc,iBACA7iC,EAAA0F,EAAAkyD,8BAAA1xC,EAAAotB,MAAAx6B,QAAApT,EAAA/I,IAAA+I,EAAA7J,KACAwyB,EAAA3oB,EAAAwuE,iBAAA98E,EAAA4I,GACAqc,EAAA6H,YACA7H,EAAAgI,OAAA3e,EAAA2xD,QAAA3xD,EAAA4xD,SACAj7C,EAAAmI,OAAA6J,EAAA7jB,EAAA6jB,EAAA3O,GACArD,EAAAuI,UAEAvI,EAAAwG,WAGAhe,cACAA,aACA,MAAAa,EAAApM,KACA+iB,EAAA3W,EAAA2W,IACA6J,EAAAxgB,EAAA9K,QACAq5C,EAAA/tB,EAAAotB,MACA,IAAAW,EAAApe,QACA,OAEA,MAAA49B,EAAA/tD,EAAA8xD,cAAA,GACA,IAAAx3D,EAAAoiB,EACA/F,EAAAoG,OACApG,EAAA2H,UAAAte,EAAA2xD,QAAA3xD,EAAA4xD,SACAj7C,EAAA/E,OAAAm8C,GACAp3C,EAAAoK,UAAA,SACApK,EAAAqK,aAAA,SACAhhB,EAAA4tC,MAAAt4C,SAAA,CAAAsL,EAAArL,KACA,GAAA,IAAAA,IAAAirB,EAAApN,QACA,OAEA,MAAAwmC,EAAArL,EAAA7b,WAAA1yB,EAAApL,WAAAW,IACAsiD,EAAAzsB,GAAAwuB,EAAA1/C,MAEA,GADAI,EAAA0F,EAAAkyD,8BAAAlyD,EAAA4tC,MAAAr4C,GAAAqC,OACAgiD,EAAAxI,kBAAA,CACAz6B,EAAAzc,KAAA29C,EAAAt7B,OACAG,EAAA/F,EAAA8F,YAAA7b,EAAAnI,OAAAikB,MACA/F,EAAAmK,UAAA84B,EAAAvI,cACA,MAAAl3C,EAAAgxB,GAAAyuB,EAAAtI,iBACA36B,EAAA8jC,UACA/9B,EAAA,EAAAviB,EAAA4E,MACAzE,EAAAu9C,EAAAziC,KAAA,EAAAjb,EAAAolB,IACA7C,EAAAviB,EAAAuiB,MACAm7B,EAAAziC,KAAAjb,EAAA0jB,QAGAyC,GAAA3J,EAAA/V,EAAAnI,MAAA,GAAA6B,EAAAu9C,EAAA,CACA59C,MAAA2/C,EAAA3/C,WAGA0c,EAAAwG,UAEAhe,cAEAywE,GAAAt9D,GAAA,eACAs9D,GAAA95D,SAAA,CACAqa,SAAA,EACAghD,SAAA,EACAxoD,SAAA,YACAwpC,WAAA,CACAhiC,SAAA,EACAhP,UAAA,EACA+b,WAAA,GACAC,iBAAA,GAEAiT,KAAA,CACAgiB,UAAA,GAEArE,WAAA,EACAngB,MAAA,CACAwD,mBAAA,EACAz5C,SAAA02C,GAAAX,WAAAU,SAEAikB,YAAA,CACAhhB,mBAAA39C,EACA49C,gBAAA,EACAnhB,SAAA,EACAj2B,KAAA,CACAkb,KAAA,IAEAzd,SAAAc,GACAA,EAEA0B,QAAA,IAGAy1E,GAAAniC,cAAA,CACA2jC,mBAAA,cACAC,oBAAA,QACAC,cAAA,SAEA1B,GAAAr6D,YAAA,CACA48C,WAAA,CACA55C,UAAA,SAIA,MAAAg5D,GAAA,CACAC,YAAA,CAAAC,QAAA,EAAAr8D,KAAA,EAAAs8D,MAAA,KACAC,OAAA,CAAAF,QAAA,EAAAr8D,KAAA,IAAAs8D,MAAA,IACAE,OAAA,CAAAH,QAAA,EAAAr8D,KAAA,IAAAs8D,MAAA,IACAG,KAAA,CAAAJ,QAAA,EAAAr8D,KAAA,KAAAs8D,MAAA,IACAI,IAAA,CAAAL,QAAA,EAAAr8D,KAAA,MAAAs8D,MAAA,IACAK,KAAA,CAAAN,QAAA,EAAAr8D,KAAA,OAAAs8D,MAAA,GACAM,MAAA,CAAAP,QAAA,EAAAr8D,KAAA,OAAAs8D,MAAA,IACAO,QAAA,CAAAR,QAAA,EAAAr8D,KAAA,OAAAs8D,MAAA,GACAQ,KAAA,CAAAT,QAAA,EAAAr8D,KAAA,SAEA+8D,GAAA/9E,OAAAub,KAAA4hE,IACA,SAAAa,GAAArgF,EAAAuQ,GACA,OAAAvQ,EAAAuQ,EAEA,SAAA4nC,GAAA3yB,EAAA5G,GACA,GAAA4B,EAAA5B,GACA,OAAA,KAEA,MAAA0hE,EAAA96D,EAAA+6D,UACAC,OAAAA,EAAA76E,MAAAA,EAAA86E,WAAAA,GAAAj7D,EAAAk7D,WACA,IAAA76E,EAAA+Y,EASA,MARA,mBAAA4hE,IACA36E,EAAA26E,EAAA36E,IAEA8a,EAAA9a,KACAA,EAAA,iBAAA26E,EACAF,EAAAnoC,MAAAtyC,EAAA26E,GACAF,EAAAnoC,MAAAtyC,IAEA,OAAAA,EACA,MAEAF,IACAE,EAAA,SAAAF,IAAAqiB,GAAAy4D,KAAA,IAAAA,EAEAH,EAAAK,QAAA96E,EAAAF,GADA26E,EAAAK,QAAA96E,EAAA,UAAA46E,KAGA56E,GAEA,SAAA+6E,GAAAC,EAAA37E,EAAAd,EAAA08E,GACA,MAAAr/D,EAAA2+D,GAAA9/E,OACA,IAAA,IAAAX,EAAAygF,GAAAj+D,QAAA0+D,GAAAlhF,EAAA8hB,EAAA,IAAA9hB,EAAA,CACA,MAAAohF,EAAAvB,GAAAY,GAAAzgF,IACAy7B,EAAA2lD,EAAApB,MAAAoB,EAAApB,MAAAn6E,OAAAy0E,iBACA,GAAA8G,EAAArB,QAAAp7E,KAAAo5C,MAAAt5C,EAAAc,IAAAk2B,EAAA2lD,EAAA19D,QAAAy9D,EACA,OAAAV,GAAAzgF,GAGA,OAAAygF,GAAA3+D,EAAA,GAkBA,SAAAu/D,GAAAnlC,EAAAolC,EAAAC,GACA,GAAAA,GAEA,GAAAA,EAAA5gF,OAAA,CACA,MAAAswB,GAAAA,EAAAD,GAAAA,GAAAJ,GAAA2wD,EAAAD,GAEAplC,EADAqlC,EAAAtwD,IAAAqwD,EAAAC,EAAAtwD,GAAAswD,EAAAvwD,KACA,QAJAkrB,EAAAolC,IAAA,EAoBA,SAAAE,GAAA37D,EAAA1B,EAAAs9D,GACA,MAAAvlC,EAAA,GACA1pC,EAAA,GACAsP,EAAAqC,EAAAxjB,OACA,IAAAX,EAAAkG,EACA,IAAAlG,EAAA,EAAAA,EAAA8hB,IAAA9hB,EACAkG,EAAAie,EAAAnkB,GACAwS,EAAAtM,GAAAlG,EACAk8C,EAAArsC,KAAA,CACA3J,MAAAA,EACAs3C,OAAA,IAGA,OAAA,IAAA17B,GAAA2/D,EA1BA,SAAA57D,EAAAq2B,EAAA1pC,EAAAivE,GACA,MAAAd,EAAA96D,EAAA+6D,SACAhjC,GAAA+iC,EAAAK,QAAA9kC,EAAA,GAAAh2C,MAAAu7E,GACA/2C,EAAAwR,EAAAA,EAAAv7C,OAAA,GAAAuF,MACA,IAAAs3C,EAAA35C,EACA,IAAA25C,EAAAI,EAAAJ,GAAA9S,EAAA8S,GAAAmjC,EAAAxuD,IAAAqrB,EAAA,EAAAikC,GACA59E,EAAA2O,EAAAgrC,GACA35C,GAAA,IACAq4C,EAAAr4C,GAAA25C,OAAA,GAGA,OAAAtB,EAeAwlC,CAAA77D,EAAAq2B,EAAA1pC,EAAAivE,GAAAvlC,EAEA,MAAAylC,WAAA7gC,GACArzC,YAAA0rB,GACA4nB,MAAA5nB,GACAj3B,KAAA+/C,OAAA,CACA1/C,KAAA,GACAgB,OAAA,GACAovC,IAAA,IAEAzwC,KAAA0/E,MAAA,MACA1/E,KAAA2/E,gBAAA7/E,EACAE,KAAA4/E,SAAA,GACA5/E,KAAA6/E,aAAA,EACA7/E,KAAA6+E,gBAAA/+E,EAEAyL,KAAAokD,EAAA/iC,GACA,MAAAwyD,EAAAzvB,EAAAyvB,OAAAzvB,EAAAyvB,KAAA,IACAX,EAAAz+E,KAAA0+E,SAAA,IAAAjqB,GAAAC,MAAA/E,EAAAmwB,SAAAh0E,MACA+U,GAAAu+D,EAAAW,eAAAtB,EAAAuB,WACAhgF,KAAA6+E,WAAA,CACAF,OAAAS,EAAAT,OACA76E,MAAAs7E,EAAAt7E,MACA86E,WAAAQ,EAAAR,YAEA//B,MAAAqR,KAAAP,GACA3vD,KAAA6/E,YAAAjzD,EAAAqzD,WAEA10E,MAAAysC,EAAAr2C,GACA,YAAA7B,IAAAk4C,EACA,KAEA1B,GAAAt2C,KAAAg4C,GAEAzsC,eACAszC,MAAAziB,eACAp8B,KAAA+/C,OAAA,CACA1/C,KAAA,GACAgB,OAAA,GACAovC,IAAA,IAGAllC,sBACA,MAAAa,EAAApM,KACAsB,EAAA8K,EAAA9K,QACAm9E,EAAAryE,EAAAsyE,SACApqB,EAAAhzD,EAAA89E,KAAA9qB,MAAA,MACA,IAAAjxD,IAAAA,EAAAd,IAAAA,EAAA00C,WAAAA,EAAAC,WAAAA,GAAA9qC,EAAA+qC,gBACA,SAAA+oC,EAAA34C,GACA0P,GAAArzC,MAAA2jC,EAAAlkC,OACAA,EAAAZ,KAAAY,IAAAA,EAAAkkC,EAAAlkC,MAEA6zC,GAAAtzC,MAAA2jC,EAAAhlC,OACAA,EAAAE,KAAAF,IAAAA,EAAAglC,EAAAhlC,MAGA00C,GAAAC,IACAgpC,EAAA9zE,EAAA+zE,mBACA,UAAA7+E,EAAAimC,QAAA,WAAAjmC,EAAA04C,MAAA/5B,QACAigE,EAAA9zE,EAAAg0C,WAAA,KAGA/8C,EAAAyb,EAAAzb,KAAAO,MAAAP,GAAAA,GAAAo7E,EAAAK,QAAAvyE,KAAAC,MAAA8nD,GACA/xD,EAAAuc,EAAAvc,KAAAqB,MAAArB,GAAAA,GAAAk8E,EAAA2B,MAAA7zE,KAAAC,MAAA8nD,GAAA,EACAloD,EAAA/I,IAAAZ,KAAAY,IAAAA,EAAAd,EAAA,GACA6J,EAAA7J,IAAAE,KAAAF,IAAAc,EAAA,EAAAd,GAEAgJ,kBACA,MAAAjE,EAAAtH,KAAAqgF,qBACA,IAAAh9E,EAAAM,OAAAqhB,kBACAziB,EAAAoB,OAAAmzC,kBAKA,OAJAxvC,EAAA7I,SACA4E,EAAAiE,EAAA,GACA/E,EAAA+E,EAAAA,EAAA7I,OAAA,IAEA,CAAA4E,IAAAA,EAAAd,IAAAA,GAEAgJ,aACA,MAAAa,EAAApM,KACAsB,EAAA8K,EAAA9K,QACAg/E,EAAAh/E,EAAA89E,KACAzkC,EAAAr5C,EAAA04C,MACAqlC,EAAA,WAAA1kC,EAAA16B,OAAA7T,EAAAi0E,qBAAAj0E,EAAAm0E,YACA,UAAAj/E,EAAAimC,QAAA83C,EAAA5gF,SACA2N,EAAA/I,IAAA+I,EAAAszC,UAAA2/B,EAAA,GACAjzE,EAAA7J,IAAA6J,EAAAqzC,UAAA4/B,EAAAA,EAAA5gF,OAAA,IAEA,MAAA4E,EAAA+I,EAAA/I,IAEA22C,EAAA9qB,GAAAmwD,EAAAh8E,EADA+I,EAAA7J,KAWA,OATA6J,EAAAszE,MAAAY,EAAAhsB,OAAA3Z,EAAAD,SACAqkC,GAAAuB,EAAAtB,QAAA5yE,EAAA/I,IAAA+I,EAAA7J,IAAA6J,EAAAo0E,kBAAAn9E,IA9IA,SAAAsgB,EAAAy+B,EAAA48B,EAAA37E,EAAAd,GACA,IAAA,IAAAzE,EAAAygF,GAAA9/E,OAAA,EAAAX,GAAAygF,GAAAj+D,QAAA0+D,GAAAlhF,IAAA,CACA,MAAAw2D,EAAAiqB,GAAAzgF,GACA,GAAA6/E,GAAArpB,GAAAupB,QAAAl6D,EAAA+6D,SAAA1iC,KAAAz5C,EAAAc,EAAAixD,IAAAlS,EAAA,EACA,OAAAkS,EAGA,OAAAiqB,GAAAS,EAAAT,GAAAj+D,QAAA0+D,GAAA,GAwIAyB,CAAAr0E,EAAA4tC,EAAAv7C,OAAA6hF,EAAAtB,QAAA5yE,EAAA/I,IAAA+I,EAAA7J,MACA6J,EAAAuzE,WAAAhlC,EAAAW,MAAAC,SAAA,SAAAnvC,EAAAszE,MAvIA,SAAAprB,GACA,IAAA,IAAAx2D,EAAAygF,GAAAj+D,QAAAg0C,GAAA,EAAA10C,EAAA2+D,GAAA9/E,OAAAX,EAAA8hB,IAAA9hB,EACA,GAAA6/E,GAAAY,GAAAzgF,IAAA+/E,OACA,OAAAU,GAAAzgF,GAqIA4iF,CAAAt0E,EAAAszE,YADA5/E,EAEAsM,EAAAu0E,YAAAtB,GACA/9E,EAAAke,SACAw6B,EAAAx6B,UAEA8/D,GAAAlzE,EAAA4tC,EAAA5tC,EAAAuzE,YAEAp0E,YAAA8zE,GACA,MAAAjzE,EAAApM,KACA,IAEA07C,EAAAlT,EAFAx9B,EAAA,EACAC,EAAA,EAEAmB,EAAA9K,QAAAoF,QAAA24E,EAAA5gF,SACAi9C,EAAAtvC,EAAAw0E,mBAAAvB,EAAA,IAEAr0E,EADA,IAAAq0E,EAAA5gF,OACA,EAAAi9C,GAEAtvC,EAAAw0E,mBAAAvB,EAAA,IAAA3jC,GAAA,EAEAlT,EAAAp8B,EAAAw0E,mBAAAvB,EAAAA,EAAA5gF,OAAA,IAEAwM,EADA,IAAAo0E,EAAA5gF,OACA+pC,GAEAA,EAAAp8B,EAAAw0E,mBAAAvB,EAAAA,EAAA5gF,OAAA,KAAA,GAGA,MAAAqnD,EAAAu5B,EAAA5gF,OAAA,EAAA,GAAA,IACAuM,EAAAqd,GAAArd,EAAA,EAAA86C,GACA76C,EAAAod,GAAApd,EAAA,EAAA66C,GACA15C,EAAAwzE,SAAA,CAAA50E,MAAAA,EAAAC,IAAAA,EAAAsuB,OAAA,GAAAvuB,EAAA,EAAAC,IAEAM,YACA,MAAAa,EAAApM,KACAy+E,EAAAryE,EAAAsyE,SACAr7E,EAAA+I,EAAA/I,IACAd,EAAA6J,EAAA7J,IACAjB,EAAA8K,EAAA9K,QACAg/E,EAAAh/E,EAAA89E,KACA9hC,EAAAgjC,EAAAhsB,MAAAyqB,GAAAuB,EAAAtB,QAAA37E,EAAAd,EAAA6J,EAAAo0E,kBAAAn9E,IACAk1E,EAAAr5D,EAAAohE,EAAA/H,SAAA,GACAhkB,EAAA,SAAAjX,GAAAgjC,EAAA1B,WACAiC,EAAA16D,GAAAouC,KAAA,IAAAA,EACAva,EAAA,GACA,IACAolC,EAAApmD,EADA0iB,EAAAr4C,EAMA,GAJAw9E,IACAnlC,GAAA+iC,EAAAK,QAAApjC,EAAA,UAAA6Y,IAEA7Y,GAAA+iC,EAAAK,QAAApjC,EAAAmlC,EAAA,MAAAvjC,GACAmhC,EAAAziC,KAAAz5C,EAAAc,EAAAi6C,GAAA,IAAAi7B,EACA,MAAA,IAAAn6E,MAAAiF,EAAA,QAAAd,EAAA,uCAAAg2E,EAAA,IAAAj7B,GAEA,MAAA+hC,EAAA,SAAA/9E,EAAA04C,MAAA/5B,QAAA7T,EAAA00E,oBACA,IAAA1B,EAAA1jC,EAAA1iB,EAAA,EAAAomD,EAAA78E,EAAA68E,GAAAX,EAAAxuD,IAAAmvD,EAAA7G,EAAAj7B,GAAAtkB,IACAmmD,GAAAnlC,EAAAolC,EAAAC,GAKA,OAHAD,IAAA78E,GAAA,UAAAjB,EAAAimC,QAAA,IAAAvO,GACAmmD,GAAAnlC,EAAAolC,EAAAC,GAEA7+E,OAAAub,KAAAi+B,GAAA9zB,MAAA,CAAA/nB,EAAAuQ,IAAAvQ,EAAAuQ,IAAA4B,KAAAY,IAAAA,IAEA3F,iBAAAvH,GACA,MACAy6E,EADAz+E,KACA0+E,SACA4B,EAFAtgF,KAEAsB,QAAA89E,KACA,OAAAkB,EAAAS,cACAtC,EAAAx4C,OAAAjiC,EAAAs8E,EAAAS,eAEAtC,EAAAx4C,OAAAjiC,EAAAs8E,EAAAP,eAAAiB,UAEAz1E,oBAAA6zE,EAAAz9E,EAAAq4C,EAAA/T,GACA,MAAA75B,EAAApM,KACAsB,EAAA8K,EAAA9K,QACA0+E,EAAA1+E,EAAA89E,KAAAW,eACAzrB,EAAAloD,EAAAszE,MACAH,EAAAnzE,EAAAuzE,WACAsB,EAAA3sB,GAAA0rB,EAAA1rB,GACA4sB,EAAA3B,GAAAS,EAAAT,GACAvyE,EAAAgtC,EAAAr4C,GACA25C,EAAAikC,GAAA2B,GAAAl0E,GAAAA,EAAAsuC,MACAz2C,EAAAuH,EAAAsyE,SAAAz4C,OAAAm5C,EAAAn5C,IAAAqV,EAAA4lC,EAAAD,IACAj7E,EAAA1E,EAAA04C,MAAAj2C,SACA,OAAAiC,EAAAjC,EAAAiC,EAAA,CAAAnB,EAAAlD,EAAAq4C,GAAA5tC,GAAAvH,EAEA0G,mBAAAyuC,GACA,IAAAl8C,EAAA8hB,EAAA5S,EACA,IAAAlP,EAAA,EAAA8hB,EAAAo6B,EAAAv7C,OAAAX,EAAA8hB,IAAA9hB,EACAkP,EAAAgtC,EAAAl8C,GACAkP,EAAAnI,MAAA7E,KAAAmhF,oBAAAn0E,EAAAhJ,MAAAlG,EAAAk8C,GAGAzuC,mBAAAvH,GACA,MAAAoI,EAAApM,KACA,OAAA,OAAAgE,EAAA0yC,KAAA1yC,EAAAoI,EAAA/I,MAAA+I,EAAA7J,IAAA6J,EAAA/I,KAEAkI,iBAAAvH,GACA,MAAAoI,EAAApM,KACAohF,EAAAh1E,EAAAwzE,SACA1+D,EAAA9U,EAAAw0E,mBAAA58E,GACA,OAAAoI,EAAA6sD,oBAAAmoB,EAAAp2E,MAAAkW,GAAAkgE,EAAA7nD,QAEAhuB,iBAAAoe,GACA,MAAAvd,EAAApM,KACAohF,EAAAh1E,EAAAwzE,SACA1+D,EAAA9U,EAAAurE,mBAAAhuD,GAAAy3D,EAAA7nD,OAAA6nD,EAAAn2E,IACA,OAAAmB,EAAA/I,IAAA6d,GAAA9U,EAAA7J,IAAA6J,EAAA/I,KAEAkI,cAAA1G,GACA,MAAAuH,EAAApM,KACAqhF,EAAAj1E,EAAA9K,QAAA04C,MACAsnC,EAAAl1E,EAAA2W,IAAA8F,YAAAhkB,GAAAikB,MACAvB,EAAAX,GAAAxa,EAAAqvB,eAAA4lD,EAAArkC,YAAAqkC,EAAAtkC,aACAwkC,EAAA9+E,KAAAwoB,IAAA1D,GACAi6D,EAAA/+E,KAAAuoB,IAAAzD,GACAk6D,EAAAr1E,EAAAi4C,wBAAA,GAAA7iC,KACA,MAAA,CACAtR,EAAAoxE,EAAAC,EAAAE,EAAAD,EACAlyE,EAAAgyE,EAAAE,EAAAC,EAAAF,GAGAh2E,kBAAAm2E,GACA,MAAAt1E,EAAApM,KACAsgF,EAAAl0E,EAAA9K,QAAA89E,KACAW,EAAAO,EAAAP,eACA95C,EAAA85C,EAAAO,EAAAhsB,OAAAyrB,EAAAnC,YACA+D,EAAAv1E,EAAA+0E,oBAAAO,EAAA,EAAApC,GAAAlzE,EAAA,CAAAs1E,GAAAt1E,EAAAuzE,YAAA15C,GACAzkB,EAAApV,EAAAw1E,cAAAD,GACA1C,EAAAx8E,KAAAojB,MAAAzZ,EAAAqvB,eAAArvB,EAAA0c,MAAAtH,EAAAtR,EAAA9D,EAAA6d,OAAAzI,EAAAlS,GAAA,EACA,OAAA2vE,EAAA,EAAAA,EAAA,EAEA1zE,oBACA,MAAAa,EAAApM,KACA,IACAlC,EAAA8hB,EADAy/D,EAAAjzE,EAAA2zC,OAAA1/C,MAAA,GAEA,GAAAg/E,EAAA5gF,OACA,OAAA4gF,EAEA,MAAAl/B,EAAA/zC,EAAA2lC,0BACA,GAAA3lC,EAAAyzE,aAAA1/B,EAAA1hD,OACA,OAAA2N,EAAA2zC,OAAA1/C,KAAA8/C,EAAA,GAAA7rB,WAAAugC,mBAAAzoD,GAEA,IAAAtO,EAAA,EAAA8hB,EAAAugC,EAAA1hD,OAAAX,EAAA8hB,IAAA9hB,EACAuhF,EAAAA,EAAAvjD,OAAAqkB,EAAAriD,GAAAw2B,WAAAugC,mBAAAzoD,IAEA,OAAAA,EAAA2zC,OAAA1/C,KAAA+L,EAAA+6B,UAAAk4C,GAEA9zE,qBACA,MAAAa,EAAApM,KACAq/E,EAAAjzE,EAAA2zC,OAAA1+C,QAAA,GACA,IAAAvD,EAAA8hB,EACA,GAAAy/D,EAAA5gF,OACA,OAAA4gF,EAEA,MAAAh+E,EAAA+K,EAAAgqC,YACA,IAAAt4C,EAAA,EAAA8hB,EAAAve,EAAA5C,OAAAX,EAAA8hB,IAAA9hB,EACAuhF,EAAA1xE,KAAA2oC,GAAAlqC,EAAA/K,EAAAvD,KAEA,OAAAsO,EAAA2zC,OAAA1+C,OAAA+K,EAAAyzE,YAAAR,EAAAjzE,EAAA+6B,UAAAk4C,GAEA9zE,UAAA0W,GACA,OAAA8N,GAAA9N,EAAAiE,KAAAs4D,MAuBA,SAAA1V,GAAAn6C,EAAA7Q,EAAA0B,GACA,IAEAqiE,EAAAC,EAAAC,EAAAC,EAFAjzD,EAAA,EACAD,EAAAH,EAAAlwB,OAAA,EAEA+gB,GACA1B,GAAA6Q,EAAAI,GAAA7N,KAAApD,GAAA6Q,EAAAG,GAAA5N,OACA6N,GAAAA,EAAAD,GAAAA,GAAAE,GAAAL,EAAA,MAAA7Q,MAEAoD,IAAA2gE,EAAAzC,KAAA2C,GAAApzD,EAAAI,MACA7N,IAAA4gE,EAAA1C,KAAA4C,GAAArzD,EAAAG,MAEAhR,GAAA6Q,EAAAI,GAAAqwD,MAAAthE,GAAA6Q,EAAAG,GAAAswD,QACArwD,GAAAA,EAAAD,GAAAA,GAAAE,GAAAL,EAAA,OAAA7Q,MAEAshE,KAAAyC,EAAA3gE,IAAA6gE,GAAApzD,EAAAI,MACAqwD,KAAA0C,EAAA5gE,IAAA8gE,GAAArzD,EAAAG,KAEA,MAAAmzD,EAAAH,EAAAD,EACA,OAAAI,EAAAF,GAAAC,EAAAD,IAAAjkE,EAAA+jE,GAAAI,EAAAF,EAtCAtC,GAAA/gE,GAAA,OACA+gE,GAAAv9D,SAAA,CACAqlB,OAAA,OACAu4C,SAAA,GACAV,KAAA,CACAT,QAAA,EACArqB,MAAA,EACAxwD,OAAA,EACA86E,YAAA,EACAI,QAAA,cACAe,eAAA,IAEA/lC,MAAA,CACA/5B,OAAA,OACAq7B,MAAA,CACAC,SAAA,KAyBA,MAAA2mC,WAAAzC,GACAl0E,YAAA0rB,GACA4nB,MAAA5nB,GACAj3B,KAAAmiF,OAAA,GACAniF,KAAAoiF,aAAAtiF,EACAE,KAAAqiF,iBAAAviF,EAEAyL,cACA,MAAAa,EAAApM,KACAq/E,EAAAjzE,EAAAk2E,yBACA3zD,EAAAviB,EAAA+1E,OAAA/1E,EAAAm2E,iBAAAlD,GACAjzE,EAAAg2E,QAAAtZ,GAAAn6C,EAAAviB,EAAA/I,KACA+I,EAAAi2E,YAAAvZ,GAAAn6C,EAAAviB,EAAA7J,KAAA6J,EAAAg2E,QACAvjC,MAAA8hC,YAAAtB,GAEA9zE,iBAAA8zE,GACA,MAAAh8E,IAAAA,EAAAd,IAAAA,GAAAvC,KACA2M,EAAA,GACAgiB,EAAA,GACA,IAAA7wB,EAAA8hB,EAAAijB,EAAAkyB,EAAAl0B,EACA,IAAA/iC,EAAA,EAAA8hB,EAAAy/D,EAAA5gF,OAAAX,EAAA8hB,IAAA9hB,EACAi3D,EAAAsqB,EAAAvhF,GACAi3D,GAAA1xD,GAAA0xD,GAAAxyD,GACAoK,EAAAgB,KAAAonD,GAGA,GAAApoD,EAAAlO,OAAA,EACA,MAAA,CACA,CAAA2gF,KAAA/7E,EAAA6d,IAAA,GACA,CAAAk+D,KAAA78E,EAAA2e,IAAA,IAGA,IAAApjB,EAAA,EAAA8hB,EAAAjT,EAAAlO,OAAAX,EAAA8hB,IAAA9hB,EACA+iC,EAAAl0B,EAAA7O,EAAA,GACA+kC,EAAAl2B,EAAA7O,EAAA,GACAi3D,EAAApoD,EAAA7O,GACA2E,KAAAqB,OAAA+8B,EAAAgC,GAAA,KAAAkyB,GACApmC,EAAAhhB,KAAA,CAAAyxE,KAAArqB,EAAA7zC,IAAApjB,GAAA8hB,EAAA,KAGA,OAAA+O,EAEApjB,yBACA,MAAAa,EAAApM,KACA,IAAAq/E,EAAAjzE,EAAA2zC,OAAAtP,KAAA,GACA,GAAA4uC,EAAA5gF,OACA,OAAA4gF,EAEA,MAAAh/E,EAAA+L,EAAA00E,oBACAj8E,EAAAuH,EAAAi0E,qBAOA,OALAhB,EADAh/E,EAAA5B,QAAAoG,EAAApG,OACA2N,EAAA+6B,UAAA9mC,EAAAy7B,OAAAj3B,IAEAxE,EAAA5B,OAAA4B,EAAAwE,EAEAw6E,EAAAjzE,EAAA2zC,OAAAtP,IAAA4uC,EACAA,EAEA9zE,mBAAAvH,GACA,OAAA8kE,GAAA9oE,KAAAmiF,OAAAn+E,GAAAhE,KAAAoiF,SAAApiF,KAAAqiF,YAEA92E,iBAAAoe,GACA,MAAAvd,EAAApM,KACAohF,EAAAh1E,EAAAwzE,SACAp7B,EAAAp4C,EAAAurE,mBAAAhuD,GAAAy3D,EAAA7nD,OAAA6nD,EAAAn2E,IACA,OAAA69D,GAAA18D,EAAA+1E,OAAA39B,EAAAp4C,EAAAi2E,YAAAj2E,EAAAg2E,SAAA,IAGAF,GAAAxjE,GAAA,aACAwjE,GAAAhgE,SAAAu9D,GAAAv9D,SAEA,IAAA0B,GAAApjB,OAAAg8B,OAAA,CACAkN,UAAA,KACA8tC,cAAAA,GACAiC,YAAAA,GACAI,iBAAAA,GACAmC,kBAAAA,GACAyD,UAAAA,GACAyC,gBAAAA,KAwBA,OArBA3iF,GAAAH,SAAA0pD,GAAAllC,GAAApB,GAAAiB,IACAlkB,GAAAkqC,QAAA,IAAAA,IACAlqC,GAAAk1D,UAAAA,GACAl1D,GAAA2uC,UAAAA,GACA3uC,GAAAqwC,WAAAA,GACArwC,GAAA+L,SAAAA,EACA/L,GAAAupD,YAAAD,GAAAC,YAAAn8C,MACApN,GAAA0zC,kBAAAA,GACA1zC,GAAAm6C,QAAAA,GACAn6C,GAAAijB,SAAAA,GACAjjB,GAAAg3B,YAAAA,GACAh3B,GAAAi5B,QAAAA,GACAj5B,GAAAouC,UAAAA,GACApuC,GAAAq/C,MAAAA,GACAr/C,GAAAk7C,MAAAA,GACAj6C,OAAAC,OAAAlB,GAAAupD,GAAAllC,GAAApB,GAAAiB,GAAAkqB,IACApuC,GAAAA,MAAAA,GACA,oBAAAF,SACAA,OAAAE,MAAAA,IAGAA,OVieE,IAAIijF,GAAG,CAAC,SAASvkF,EAAQU,EAAOJ,GWp4alCI,EAAAJ,QAAAN,EAAA,MAAAwrC,SXu4aE,CAACg5C,KAAK,KAAKC,GAAG,CAAC,SAASzkF,EAAQU,EAAOJ;;;;;;;CYj4azC,SAAAmL,EAAAC,GACA,iBAAApL,QAAA,IAAAI,EAAAA,EAAAJ,QAAAoL,EAAA1L,EAAA,oBAAAA,EAAA,aACA,mBAAA2L,QAAAA,OAAAC,IAAAD,OAAA,CAAA,mBAAA,YAAAD,IACAD,EAAA,oBAAAI,WAAAA,WAAAJ,GAAAK,MAAA44E,gBAAAh5E,EAAAD,EAAAnK,MAAAkqC,QAAA//B,EAAAnK,OAHA,CAIAS,MAAA,SAAAypC,EAAAm5C,GAAA,aAEA,IAAAvgE,EAAA,WACA,GAAA,oBAAAhjB,OAAA,CACA,GAAAA,OAAAgjB,iBACA,OAAAhjB,OAAAgjB,iBAMA,IAAAwgE,EAAAxjF,OAAAwjF,OACA,GAAAA,EACA,OAAAA,EAAAC,YAAA,IAAAD,EAAAE,aAAA,GAIA,OAAA,EAfA,GAkBAC,EAEA,SAAAprD,GACA,IACA7a,EADA8P,EAAA,GAIA,IADA+K,EAAA,GAAAkE,OAAAlE,GACAA,EAAAn5B,QAEA,iBADAse,EAAA6a,EAAA3qB,OAEA4f,EAAA07C,QAAA7lE,MAAAmqB,EAAA9P,EAAA+E,MAAA,OACAxhB,MAAAC,QAAAwc,GACA6a,EAAAjqB,KAAAjL,MAAAk1B,EAAA7a,GACA0sB,EAAA9qB,cAAAiZ,IACA/K,EAAA07C,QAAA,GAAAxrD,GAIA,OAAA8P,GAlBAm2D,EAuBA,SAAAjgE,EAAA8J,EAAAvmB,GACA,IAIAxI,EAJA6O,EAAA,GAAAmvB,OAAAjP,GACAjN,EAAAjT,EAAAlO,OACAokC,EAAA9f,EAAAzc,KACAwiB,EAAA,EAKA,IAFA/F,EAAAzc,KAAAA,EAAAqiB,OAEA7qB,EAAA,EAAAA,EAAA8hB,IAAA9hB,EACAgrB,EAAArmB,KAAAF,IAAAwgB,EAAA8F,YAAAlc,EAAA7O,IAAAgrB,MAAAA,GAKA,OAFA/F,EAAAzc,KAAAu8B,EAEA,CACA5Y,OAAArK,EAAAtZ,EAAAsc,WACAkG,MAAAA,IAxCAk6D,EAiDA,SAAA3/E,EAAAW,EAAAzB,GACA,OAAAE,KAAAF,IAAAc,EAAAZ,KAAAY,IAAAW,EAAAzB,KAlDAygF,EA0DA,SAAAtjE,EAAAC,GACA,IAEA7hB,EAAAme,EAAA2D,EAAA3Q,EAFA4zB,EAAAnjB,EAAApW,QACA25E,EAAA,GAGA,IAAAnlF,EAAA,EAAA8hB,EAAAD,EAAAlhB,OAAAX,EAAA8hB,IAAA9hB,EACAmR,EAAA0Q,EAAA7hB,IAGA,KAFAme,EAAA4mB,EAAAviB,QAAArR,IAGAg0E,EAAAt1E,KAAA,CAAAsB,EAAA,IAEA4zB,EAAApZ,OAAAxN,EAAA,GAIA,IAAAne,EAAA,EAAA8hB,EAAAijB,EAAApkC,OAAAX,EAAA8hB,IAAA9hB,EACAmlF,EAAAt1E,KAAA,CAAAk1B,EAAA/kC,IAAA,IAGA,OAAAmlF,GAWA,SAAAC,EAAA13D,EAAA23D,GACA,IAAAC,EAAAD,EAAAjyE,EACAmyE,EAAAF,EAAA/8D,EAEA,GAAA,OAAAg9D,EACA,MAAA,CAAAlyE,EAAA,EAAAkV,GAAA,GAEA,GAAA,OAAAi9D,EACA,MAAA,CAAAnyE,EAAA,EAAAkV,EAAA,GAGA,IAAAihD,EAAA77C,EAAAta,EAAAkyE,EACAE,EAAA93D,EAAApF,EAAAi9D,EACAE,EAAA9gF,KAAAwjB,KAAAohD,EAAAA,EAAAic,EAAAA,GAEA,MAAA,CACApyE,EAAAqyE,EAAAlc,EAAAkc,EAAA,EACAn9D,EAAAm9D,EAAAD,EAAAC,GAAA,GAyDA,SAAAC,EAAAtyE,EAAAkV,EAAAgF,GACA,IAAAuE,EAPA,EAoBA,OAXAze,EAAAka,EAAAjgB,KACAwkB,GATA,EAUAze,EAAAka,EAAAhgB,QACAukB,GAVA,GAYAvJ,EAAAgF,EAAAO,IACAgE,GAXA,EAYAvJ,EAAAgF,EAAAQ,SACA+D,GAdA,GAiBAA,EAuDA,SAAA8zD,EAAAj+D,EAAA5lB,GACA,IAEAsR,EAAAkV,EAFA3f,EAAA7G,EAAA6G,OACA6gC,EAAA9hB,EAkBA,OAfA5lB,EAAA8jF,QACAp8C,EA1DA,SAAAA,EAAA7b,GAUA,IATA,IAMAhuB,EAAAyT,EAAAkV,EANAg9D,EAAA97C,EAAA87C,GACAC,EAAA/7C,EAAA+7C,GACA59B,EAAAne,EAAAme,GACAC,EAAApe,EAAAoe,GACAi+B,EAAAH,EAAAJ,EAAAC,EAAA53D,GACAm4D,EAAAJ,EAAA/9B,EAAAC,EAAAj6B,GAKAk4D,EAAAC,KAAAD,EAAAC,IA9BA,GAoCAnmF,EAAAkmF,GAAAC,IAGA1yE,EAAAkyE,GAAA39B,EAAA29B,IAAA33D,EAAAE,IAAA03D,IAAA39B,EAAA29B,GACAj9D,EAAAqF,EAAAE,KAzCA,EA0CAluB,GACAyT,EAAAkyE,GAAA39B,EAAA29B,IAAA33D,EAAAG,OAAAy3D,IAAA39B,EAAA29B,GACAj9D,EAAAqF,EAAAG,QA7CA,EA8CAnuB,GACA2oB,EAAAi9D,GAAA39B,EAAA29B,IAAA53D,EAAArgB,MAAAg4E,IAAA39B,EAAA29B,GACAlyE,EAAAua,EAAArgB,OAjDA,EAkDA3N,IACA2oB,EAAAi9D,GAAA39B,EAAA29B,IAAA53D,EAAAtgB,KAAAi4E,IAAA39B,EAAA29B,GACAlyE,EAAAua,EAAAtgB,MAGA1N,IAAAkmF,EAGAA,EAAAH,EAFAJ,EAAAlyE,EACAmyE,EAAAj9D,EACAqF,GAIAm4D,EAAAJ,EAFA/9B,EAAAv0C,EACAw0C,EAAAt/B,EACAqF,GAIA,MAAA,CACA23D,GAAAA,EACA39B,GAAAA,EACA49B,GAAAA,EACA39B,GAAAA,GAUAm+B,CAAAv8C,EAAA1nC,EAAA6rB,OAGA,UAAAhlB,GACAyK,EAAAo2B,EAAA87C,GACAh9D,EAAAkhB,EAAA+7C,IACA,QAAA58E,GACAyK,EAAAo2B,EAAAme,GACAr/B,EAAAkhB,EAAAoe,KAEAx0C,GAAAo2B,EAAA87C,GAAA97C,EAAAme,IAAA,EACAr/B,GAAAkhB,EAAA+7C,GAAA/7C,EAAAoe,IAAA,GA3IA,SAAAx0C,EAAAkV,EAAA09D,EAAAC,EAAAv9E,GACA,OAAAA,GACA,IAAA,SACAs9E,EAAAC,EAAA,EACA,MACA,IAAA,SACAD,EAAA,EACAC,EAAA,EACA,MACA,IAAA,QACAD,EAAA,EACAC,EAAA,EACA,MACA,IAAA,OACAD,GAAA,EACAC,EAAA,EACA,MACA,IAAA,MACAD,EAAA,EACAC,GAAA,EACA,MACA,IAAA,QACAD,GAAAA,EACAC,GAAAA,EACA,MACA,IAAA,MAEA,MACA,QAEAv9E,GAAA/D,KAAAmiB,GAAA,IACAk/D,EAAArhF,KAAAwoB,IAAAzkB,GACAu9E,EAAAthF,KAAAuoB,IAAAxkB,GAIA,MAAA,CACA0K,EAAAA,EACAkV,EAAAA,EACA09D,GAAAA,EACAC,GAAAA,GAsGAC,CAAA9yE,EAAAkV,EAAAZ,EAAAs+D,GAAAt+D,EAAAu+D,GAAAnkF,EAAA4G,OAGA,IAAA8oE,EACA,SAAApvE,EAAAN,GACA,IAAA2nB,GAAArnB,EAAAi6D,WAAAj6D,EAAAk6D,UAAA,EACA0pB,EAAArhF,KAAAwoB,IAAA1D,GACAw8D,EAAAthF,KAAAuoB,IAAAzD,GACAo8D,EAAAzjF,EAAAk5D,YACAwqB,EAAA1jF,EAAAm5D,YAEA,OAAAoqB,EAAA,CACAL,GAAAljF,EAAAgR,EAAA4yE,EAAAH,EACAN,GAAAnjF,EAAAkmB,EAAA29D,EAAAJ,EACAl+B,GAAAvlD,EAAAgR,EAAA4yE,EAAAF,EACAl+B,GAAAxlD,EAAAkmB,EAAA29D,EAAAH,EACAE,GAAAA,EACAC,GAAAA,GACAnkF,IAfA0vE,EAkBA,SAAApvE,EAAAN,GACA,IAAAqP,EAAAi0E,EAAAhjF,EAAAN,EAAAujF,QACAc,EAAAh1E,EAAAiC,EAAAhR,EAAAoB,QAAAkpB,OACA05D,EAAAj1E,EAAAmX,EAAAlmB,EAAAoB,QAAAkpB,OAEA,OAAAi5D,EAAA,CACAL,GAAAljF,EAAAgR,EAAA+yE,EACAZ,GAAAnjF,EAAAkmB,EAAA89D,EACAz+B,GAAAvlD,EAAAgR,EAAA+yE,EACAv+B,GAAAxlD,EAAAkmB,EAAA89D,EACAJ,GAAA70E,EAAAiC,EACA6yE,GAAA90E,EAAAmX,GACAxmB,IA9BA0vE,EAiCA,SAAApvE,EAAAN,GACA,IAAAqP,EAAAi0E,EAAAhjF,EAAAN,EAAAujF,QACAjyE,EAAAhR,EAAAgR,EACAkV,EAAAlmB,EAAAkmB,EACA+9D,EAAA,EACAC,EAAA,EAUA,OARAlkF,EAAAs5B,YACAtoB,EAAAzO,KAAAY,IAAAnD,EAAAgR,EAAAhR,EAAAwvB,MACAy0D,EAAA1hF,KAAA6jB,IAAApmB,EAAAwvB,KAAAxvB,EAAAgR,KAEAkV,EAAA3jB,KAAAY,IAAAnD,EAAAkmB,EAAAlmB,EAAAwvB,MACA00D,EAAA3hF,KAAA6jB,IAAApmB,EAAAwvB,KAAAxvB,EAAAkmB,IAGAq9D,EAAA,CACAL,GAAAlyE,EACAmyE,GAAAj9D,EAAAg+D,EACA3+B,GAAAv0C,EAAAizE,EACAz+B,GAAAt/B,EACA09D,GAAA70E,EAAAiC,EACA6yE,GAAA90E,EAAAmX,GACAxmB,IAvDA0vE,EA0DA,SAAApvE,EAAAN,GACA,IAAAqP,EAAAi0E,EAAAhjF,EAAAN,EAAAujF,QAEA,OAAAM,EAAA,CACAL,GAAAljF,EAAAgR,EACAmyE,GAAAnjF,EAAAkmB,EACAq/B,GAAAvlD,EAAAgR,EACAw0C,GAAAxlD,EAAAkmB,EACA09D,GAAA70E,EAAAiC,EACA6yE,GAAA90E,EAAAmX,GACAxmB,IAIAykF,EAnPA,SAAAp1E,GACA,OAAAxM,KAAAqB,MAAAmL,EAAAoT,GAAAA,GA4QA,SAAAiiE,EAAApkF,EAAAa,GACA,IAAA4iB,EAAA5iB,EAAA8F,MAAA6vB,eAAA31B,EAAAgf,cAAA8xB,OAEA,IAAAluB,EACA,OAAA,KAGA,QAAA7jB,IAAA6jB,EAAAo6C,cAAAj+D,IAAA6jB,EAAAq6C,QACA,MAAA,CAAA9sD,EAAAyS,EAAAo6C,QAAA33C,EAAAzC,EAAAq6C,SAGA,IAAAr0C,EAAAhG,EAAA4yC,eACA,OAAAr2D,EAAAs5B,WACA,CAAAtoB,EAAAyY,EAAAvD,EAAA,MACA,CAAAlV,EAAA,KAAAkV,EAAAuD,GAiDA,SAAA46D,EAAAxhE,EAAAqI,EAAAo5D,GACA,IAAAC,EAAAD,EAAAt+E,gBACAC,EAAAq+E,EAAAr+E,YACAtE,EAAA2iF,EAAA3iF,aAEA4iF,GAAAt+E,GAAAtE,KAIAkhB,EAAA6H,YA1CA,SAAA7H,EAAA7R,EAAAkV,EAAAlW,EAAAZ,EAAAkb,GACA,IAAAtF,EAAAziB,KAAAmiB,GAAA,EAEA,GAAA4F,EAAA,CACA,IAAA/sB,EAAAgF,KAAAY,IAAAmnB,EAAAlb,EAAA,EAAAY,EAAA,GACA/E,EAAA+F,EAAAzT,EACAkuB,EAAAvF,EAAA3oB,EACA2N,EAAA8F,EAAAhB,EAAAzS,EACAmuB,EAAAxF,EAAA9W,EAAA7R,EAEAslB,EAAAgI,OAAA7Z,EAAAya,GACAxgB,EAAAC,GAAAugB,EAAAC,GACA7I,EAAA8H,IAAA1f,EAAAwgB,EAAAluB,GAAAgF,KAAAmiB,IAAAM,GACAnC,EAAA8H,IAAAzf,EAAAugB,EAAAluB,GAAAynB,EAAA,GACAnC,EAAA8H,IAAAzf,EAAAwgB,EAAAnuB,EAAA,EAAAynB,GACAnC,EAAA8H,IAAA1f,EAAAygB,EAAAnuB,EAAAynB,EAAAziB,KAAAmiB,KACAzZ,EAAAC,GACA2X,EAAAgI,OAAA5f,EAAAib,GACArD,EAAA8H,IAAAzf,EAAAugB,EAAAluB,GAAAynB,EAAAA,GACAnC,EAAA8H,IAAA1f,EAAAwgB,EAAAluB,EAAAynB,EAAAziB,KAAAmiB,GAAAM,IACAyG,EAAAC,GACA7I,EAAA8H,IAAA1f,EAAAwgB,EAAAluB,GAAAgF,KAAAmiB,GAAA,GACA7B,EAAA8H,IAAA1f,EAAAygB,EAAAnuB,EAAA,EAAAgF,KAAAmiB,KAEA7B,EAAA8H,IAAA1f,EAAAwgB,EAAAluB,GAAAgF,KAAAmiB,GAAAniB,KAAAmiB,IAEA7B,EAAA+H,YACA/H,EAAAgI,OAAA7Z,EAAAkV,QAEArD,EAAAqI,KAAAla,EAAAkV,EAAAlW,EAAAZ,GAeAo1E,CACA3hE,EACAshE,EAAAj5D,EAAAla,GAAArP,EAAA,EACAwiF,EAAAj5D,EAAAhF,GAAAvkB,EAAA,EACAwiF,EAAAj5D,EAAAlb,GAAArO,EACAwiF,EAAAj5D,EAAA9b,GAAAzN,EACA2iF,EAAAp+E,cAEA2c,EAAA+H,YAEA25D,IACA1hE,EAAAmK,UAAAu3D,EACA1hE,EAAAsI,QAGAllB,GAAAtE,IACAkhB,EAAAuK,YAAAnnB,EACA4c,EAAAwK,UAAA1rB,EACAkhB,EAAAi+C,SAAA,QACAj+C,EAAAuI,WAwBA,SAAAq5D,EAAA5hE,EAAA4J,EAAAwhB,GACA,IAAAy2C,EAAA7hE,EAAA8hE,WACAC,EAAA32C,EAAA22C,QACA5zE,EAAAmzE,EAAAl2C,EAAAj9B,GACAkV,EAAAi+D,EAAAl2C,EAAA/nB,GACAlW,EAAAm0E,EAAAl2C,EAAAj+B,GAEA40E,GACA/hE,EAAAyK,WAAAb,EAAAzb,EAAAkV,EAAAlW,GAGAi+B,EAAA42C,SACAH,GAAAE,IAGA/hE,EAAA8hE,WAAA,GAGA9hE,EAAA2K,SAAAf,EAAAzb,EAAAkV,EAAAlW,GAEA00E,GAAAE,IACA/hE,EAAA8hE,WAAAD,IAiDA,IAAAI,EAAA,SAAAplF,EAAAmjB,EAAA7iB,EAAAyB,GACA,IAAAyK,EAAApM,KAEAoM,EAAA8/C,QAAAtsD,EACAwM,EAAA64E,OAAAtjF,EACAyK,EAAA84E,OAAA,KACA94E,EAAA+4E,OAAA,KACA/4E,EAAA8mC,KAAAnwB,EACA3W,EAAAg5E,IAAAllF,GAGAupC,EAAA/oB,MAAAskE,EAAA97E,UAAA,CAIAm8E,UAAA,SAAA9oD,EAAA1P,EAAAjtB,EAAAmB,GACA,IA1LAb,EA0LAkM,EAAApM,KACA2B,EAAAyK,EAAA64E,OACA3+E,EAAAmjC,EAAAjS,OAAAiS,EAAA9R,QAAA,CAAA/3B,EAAA0G,KAAA,IAAAvF,EAAAY,IACA0E,EAAAojC,EAAA9R,QAAA,CAAA/3B,EAAAyG,MAAAu8E,EAAA1gE,SAAA7b,OAAAtF,EAAAY,GAEA,MAAA,CACA6E,MAAAijC,EAAA9R,QAAA,CAAA/3B,EAAA4G,MAAA,UAAAzF,EAAAY,GACA8E,OAAAgjC,EAAA9R,QAAA,CAAA/3B,EAAA6G,OAAA,UAAA1F,EAAAY,GACA8pB,KAAA1qB,EAAA8F,MAAAyuB,UACApvB,gBAAAujC,EAAA9R,QAAA,CAAA/3B,EAAAsG,gBAAA,MAAAnF,EAAAY,GACAwE,YAAAsjC,EAAA9R,QAAA,CAAA/3B,EAAAuG,YAAA,MAAApF,EAAAY,GACAyE,aAAAqjC,EAAA9R,QAAA,CAAA/3B,EAAAwG,aAAA,GAAArF,EAAAY,GACAE,YAAA4nC,EAAA9R,QAAA,CAAA/3B,EAAAiC,YAAA,GAAAd,EAAAY,GACA+hF,MAAAj6C,EAAA9R,QAAA,CAAA/3B,EAAA8jF,OAAA,GAAA3iF,EAAAY,GACAmqB,KAAA2d,EAAA9R,QAAA,CAAA/3B,EAAAksB,MAAA,GAAA/qB,EAAAY,GACA0E,MAAAA,EACAk2B,QAAAA,EACAj2B,KAAAA,EACAumB,MAAAA,EACAnmB,OAAA+iC,EAAA9R,QAAA,CAAA/3B,EAAA8G,OAAA,GAAA3F,EAAAY,GACA8wE,QAAAhpC,EAAA9R,QAAA,CAAA/3B,EAAA6yE,QAAA,GAAA1xE,EAAAY,GACAwhF,OAAAmB,EAAAl4E,EAAAg5E,IAAArkF,GACAwF,QAAAkjC,EAAAlS,UAAAkS,EAAA9R,QAAA,CAAA/3B,EAAA2G,QAAA,GAAAxF,EAAAY,IACA2jF,YAjNAplF,EAiNAkM,EAAAg5E,IAhNAllF,aAAA0iF,EAAAzhB,WACAmO,EAEApvE,aAAA0iF,EAAA5e,aACAsL,EAEApvE,aAAA0iF,EAAAvd,WACAiK,EAEAA,GAwMA/kD,SAAAkf,EAAA9R,QAAA,CAAA/3B,EAAA2qB,SAAA,GAAAxpB,EAAAY,IAAAc,KAAAmiB,GAAA,KACApD,KAAAwhE,EAAA52E,EAAA8mC,KAAArmB,EAAAvmB,GACA6mB,UAAAsc,EAAA9R,QAAA,CAAA/3B,EAAAutB,UAAA,SAAApsB,EAAAY,GACA4jF,eAAA97C,EAAA9R,QAAA,CAAA/3B,EAAA2lF,eAAA,GAAAxkF,EAAAY,GACA6jF,gBAAA/7C,EAAA9R,QAAA,CAAA/3B,EAAA4lF,gBAAAn/E,GAAAtF,EAAAY,GACAw7C,gBAAA1T,EAAA9R,QAAA,CAAA/3B,EAAAu9C,gBAAA92C,GAAAtF,EAAAY,GACAu7C,gBAAAzT,EAAA9R,QAAA,CAAA/3B,EAAAs9C,gBAAA,GAAAn8C,EAAAY,KAIAq5B,OAAA,SAAAj6B,GACA,IAKAiD,EAAAa,EAAAgoB,EALAzgB,EAAApM,KACAwkF,EAAA,KACA3rB,EAAA,KACAl3D,EAAAyK,EAAA64E,OACArlF,EAAAwM,EAAA8/C,QAKA3vB,EAAAkN,EAAA9R,QAAA,CAAA/3B,EAAA28B,SAAA,GAAAx7B,EAAAY,GAEA46B,IACAv4B,EAAAjD,EAAA+D,QAAAzE,KAAAsB,GACAkD,EAAA4kC,EAAAvqB,eAAAuqB,EAAA1lC,SAAAnE,EAAAoG,UAAA,CAAAhC,EAAAjD,IAAAiD,IACA6oB,EAAA4c,EAAA9qB,cAAA9Z,GAAA,GAAAm+E,EAAAn+E,IAEApG,SAEAo6D,EAxRA,SAAA2rB,GACA,IAAA3iF,EAAA2iF,EAAA3iF,aAAA,EACA0E,EAAAi+E,EAAAj+E,QACAk/E,EAAAjB,EAAAhjE,KAAAyI,OACAy7D,EAAAlB,EAAAhjE,KAAAsH,MACA68D,GAAAD,EAAA,EACAE,GAAAH,EAAA,EAEA,MAAA,CACAI,MAAA,CACA30E,EAAAy0E,EAAAp/E,EAAA4E,KAAAtJ,EACAukB,EAAAw/D,EAAAr/E,EAAAolB,IAAA9pB,EACAqO,EAAAw1E,EAAAn/E,EAAAuiB,MAAA,EAAAjnB,EACAyN,EAAAm2E,EAAAl/E,EAAA0jB,OAAA,EAAApoB,GAEA8qB,KAAA,CACAzb,EAAAy0E,EACAv/D,EAAAw/D,EACA11E,EAAAw1E,EACAp2E,EAAAm2E,IAqQAjhB,CADAggB,EAAAp4E,EAAAi5E,UAAA9oD,EAAA1P,EAAAjtB,EAAAmB,MAKAqL,EAAA84E,OAAAV,EACAp4E,EAAA+4E,OAAAtsB,GAGAitB,SAAA,WACA,OAAA9lF,KAAAmlF,OAAAnlF,KAAAmlF,OAAAU,MAAA,IAGAt7D,SAAA,WACA,OAAAvqB,KAAAklF,OAAAllF,KAAAklF,OAAA36D,SAAA,GAGAmlB,QAAA,WACA,OAAA1vC,KAAAklF,QAAAllF,KAAAklF,OAAAzS,SAGA+R,MAAA,WACA,OAAAxkF,KAAAklF,QAGAr4E,KAAA,SAAAhG,EAAAovB,GACA,IAIAxK,EAHA1I,EAAAlc,EAAAkc,IACAyhE,EAFAxkF,KAEAklF,OACArsB,EAHA74D,KAGAmlF,OAGAnlF,KAAA0vC,YAIA3sB,EAAAoG,OAEAq7D,EAAA14D,OACAL,EAAA+4D,EAAA/4D,KACA1I,EAAA6H,YACA7H,EAAAqI,KACAK,EAAAtgB,KACAsgB,EAAAE,IACAF,EAAArgB,MAAAqgB,EAAAtgB,KACAsgB,EAAAG,OAAAH,EAAAE,KACA5I,EAAA+I,QAGA/I,EAAA4zD,YAAAqM,EAAA,EAAAwB,EAAA/R,QAAA,GACA1vD,EAAA2H,UAAA25D,EAAApuD,EAAA/kB,GAAAmzE,EAAApuD,EAAA7P,IACArD,EAAA/E,OAAAwmE,EAAAj6D,UAEAg6D,EAAAxhE,EAAA81C,EAAAgtB,MAAArB,GArKA,SAAAzhE,EAAA8J,EAAAzB,EAAAo5D,GACA,IAQA1mF,EARA0I,EAAAg+E,EAAAr3D,UACA9mB,EAAAm+E,EAAAn+E,MACA0+E,IAAA1+E,EACAC,EAAAk+E,EAAAl+E,KACAsZ,EAAAiN,EAAApuB,OACAsuB,EAAAy3D,EAAArnC,gBACArwB,EAAA03D,EAAAtnC,gBACA4nC,EAAA/3D,GAAAD,EAGA,GAAAlN,IAAAmlE,GAAAD,GAsBA,IAjBA15D,EA9DA,SAAAA,EAAA5kB,EAAAF,GACA,IAAAgJ,EAAAhJ,EAAAsc,WACA1S,EAAAkb,EAAAlb,EACAgB,EAAAka,EAAAla,EASA,MANA,WAAA1K,EACA0K,GAAAhB,EAAA,EACA,QAAA1J,GAAA,UAAAA,IACA0K,GAAAhB,GAGA,CACAZ,EAAAA,EACAY,EAAAA,EACAgB,EAAAA,EACAkV,EAZAgF,EAAAhF,EAAA9W,EAAA,GA0DAy2E,CAAA36D,EAAA5kB,EAAAF,GAEAyc,EAAAzc,KAAAA,EAAAqiB,OACA5F,EAAAoK,UAAA3mB,EACAuc,EAAAqK,aAAA,SACArK,EAAA8hE,WAAAL,EAAAe,eACAxiE,EAAAijE,YAAAxB,EAAAgB,gBAEAT,IACAhiE,EAAAmK,UAAA7mB,GAEAy+E,IACA/hE,EAAAi+C,SAAA,QACAj+C,EAAAwK,UAAAT,EACA/J,EAAAuK,YAAAP,GAGAjvB,EAAA,EAAA8hB,EAAAiN,EAAApuB,OAAAX,EAAA8hB,IAAA9hB,EACA6mF,EAAA5hE,EAAA8J,EAAA/uB,GAAA,CACAgnF,QAAAA,EACAC,OAAAA,EACA70E,EAAAkb,EAAAlb,EACAgB,EAAAka,EAAAla,EACAkV,EAAAgF,EAAAhF,EAAAgF,EAAA9b,EAAAxR,IA+HAmoF,CAAAljE,EAAAyhE,EAAA33D,MAAAgsC,EAAAlsC,KAAA63D,GAEAzhE,EAAAwG,cAIA,IAAA28D,EAAAviF,OAAA00E,mBAAA,iBACA8N,EAAAxiF,OAAAy0E,kBAAA,iBAEA,SAAAgO,EAAA56D,EAAAyK,EAAA1O,GACA,IAAA0D,EAAAxoB,KAAAwoB,IAAA1D,GACAyD,EAAAvoB,KAAAuoB,IAAAzD,GACA8+D,EAAApwD,EAAA/kB,EACAo1E,EAAArwD,EAAA7P,EAEA,MAAA,CACAlV,EAAAm1E,EAAAp7D,GAAAO,EAAAta,EAAAm1E,GAAAr7D,GAAAQ,EAAApF,EAAAkgE,GACAlgE,EAAAkgE,EAAAt7D,GAAAQ,EAAAta,EAAAm1E,GAAAp7D,GAAAO,EAAApF,EAAAkgE,IAIA,SAAAC,EAAAjmD,EAAAt+B,GACA,IAGAlE,EAAAykC,EAAAuhD,EAAAC,EAAAyC,EAHAnjF,EAAA8iF,EACA5jF,EAAA2jF,EACA/C,EAAAnhF,EAAAmhF,OAGA,IAAArlF,EAAA,EAAAA,EAAAwiC,EAAA7hC,SAAAX,EAEAgmF,GADAvhD,EAAAjC,EAAAxiC,IACAoT,EAAAiyE,EAAAjyE,EACA6yE,EAAAxhD,EAAAnc,EAAA+8D,EAAA/8D,EACAogE,EAAAxkF,EAAA8hF,GAAAA,EAAA9hF,EAAA+hF,GAAAA,EACA1gF,EAAAZ,KAAAY,IAAAA,EAAAmjF,GACAjkF,EAAAE,KAAAF,IAAAA,EAAAikF,GAGA,MAAA,CACAnjF,IAAAA,EACAd,IAAAA,GAIA,SAAAkkF,EAAA19C,EAAAl4B,GACA,IAAAizE,EAAAjzE,EAAAK,EAAA63B,EAAA73B,EACA6yE,EAAAlzE,EAAAuV,EAAA2iB,EAAA3iB,EACAm9D,EAAA9gF,KAAAwjB,KAAA69D,EAAAA,EAAAC,EAAAA,GAEA,MAAA,CACAD,IAAAjzE,EAAAK,EAAA63B,EAAA73B,GAAAqyE,EACAQ,IAAAlzE,EAAAuV,EAAA2iB,EAAA3iB,GAAAm9D,EACAJ,OAAAp6C,EACAw6C,GAAAA,GAIA,IAAAmD,EAAA,WACA1mF,KAAA2mF,UAAA,EACA3mF,KAAA4mF,MAAA,CACA11E,EAAA,EACAkV,EAAA,EACAlW,EAAA,EACAZ,EAAA,IAsFA,SAAAu3E,EAAA3mF,EAAAskF,EAAAsB,GACA,IAAAt6D,EAAAg5D,EAAAc,WAAAplF,EAAAskF,GACAV,EAAAt4D,EAAAs4D,GACAC,EAAAv4D,EAAAu4D,GAEA,IAAAD,IAAAC,EAEA,MAAA,CAAA7yE,EAAAsa,EAAAta,EAAAkV,EAAAoF,EAAApF,GAGA,IAAAlW,EAAA41E,EAAA51E,EACAZ,EAAAw2E,EAAAx2E,EAGAib,EAAAi6D,EAAAj6D,SACA88C,EAAA5kE,KAAA6jB,IAAApW,EAAA,EAAAzN,KAAAwoB,IAAAV,IAAA9nB,KAAA6jB,IAAAhX,EAAA,EAAA7M,KAAAuoB,IAAAT,IACA+4D,EAAA7gF,KAAA6jB,IAAApW,EAAA,EAAAzN,KAAAuoB,IAAAT,IAAA9nB,KAAA6jB,IAAAhX,EAAA,EAAA7M,KAAAwoB,IAAAV,IAKAu8D,EAAA,EAAArkF,KAAAF,IAAAE,KAAA6jB,IAAAw9D,GAAArhF,KAAA6jB,IAAAy9D,IAQA,OAPA1c,GAAAyc,EAAAgD,EACAxD,GAAAS,EAAA+C,EAGAzf,GAAAmd,EAAA99E,OAAAo9E,EACAR,GAAAkB,EAAA99E,OAAAq9E,EAEA,CACA7yE,EAAAsa,EAAAta,EAAAm2D,EACAjhD,EAAAoF,EAAApF,EAAAk9D,GAjHA75C,EAAA/oB,MAAAgmE,EAAAx9E,UAAA,CACA+sB,OAAA,WACA,IAAAx4B,EAAAuC,KAAA4mF,MACA,MAAA,CACA11E,EAAAzT,EAAAyT,EAAAzT,EAAAyS,EAAA,EACAkW,EAAA3oB,EAAA2oB,EAAA3oB,EAAA6R,EAAA,IAIA0rB,OAAA,SAAA/E,EAAA7K,EAAAb,GACAvqB,KAAA2mF,UAAAp8D,EACAvqB,KAAA4mF,MAAA,CACA11E,EAAAka,EAAAla,EAAA+kB,EAAA/kB,EACAkV,EAAAgF,EAAAhF,EAAA6P,EAAA7P,EACAlW,EAAAkb,EAAAlb,EACAZ,EAAA8b,EAAA9b,IAIAy3E,SAAA,SAAAv7D,GACA,IAAApf,EAAApM,KAEAorB,EAAAhf,EAAAw6E,MAIA,SAFAp7D,EAAA46D,EAAA56D,EAAApf,EAAA6pB,UAAA7pB,EAAAu6E,YAEAz1E,EAAAka,EAAAla,EALA,GAMAsa,EAAApF,EAAAgF,EAAAhF,EANA,GAOAoF,EAAAta,EAAAka,EAAAla,EAAAka,EAAAlb,EAAAwb,GACAF,EAAApF,EAAAgF,EAAAhF,EAAAgF,EAAA9b,EAAAoc,IAKAs7D,WAAA,SAAAxsD,GACA,IAMA18B,EAAAmpF,EAAAC,EANAvD,EAAA3jF,KAAAwjE,UACAogB,EAAAppD,EAAAgpC,UACA2jB,EAAA,CACAV,EAAA9C,EAAA,GAAAA,EAAA,IACA8C,EAAA9C,EAAA,GAAAA,EAAA,KAaA,IATA3jF,KAAA2mF,YAAAnsD,EAAAmsD,WAGAQ,EAAAx5E,KACA84E,EAAA7C,EAAA,GAAAA,EAAA,IACA6C,EAAA7C,EAAA,GAAAA,EAAA,KAIA9lF,EAAA,EAAAA,EAAAqpF,EAAA1oF,SAAAX,EAIA,GAHAmpF,EAAAV,EAAA5C,EAAAwD,EAAArpF,IACAopF,EAAAX,EAAA3C,EAAAuD,EAAArpF,IAEAmpF,EAAA1kF,IAAA2kF,EAAA7jF,KAAA6jF,EAAA3kF,IAAA0kF,EAAA5jF,IACA,OAAA,EAIA,OAAA,GAMAmgE,QAAA,WACA,IAAAp3D,EAAApM,KACAorB,EAAAhf,EAAAw6E,MACAr/D,EAAAnb,EAAAu6E,UACA1wD,EAAA7pB,EAAA6pB,SAEA,MAAA,CACAmwD,EAAA,CAAAl1E,EAAAka,EAAAla,EAAAkV,EAAAgF,EAAAhF,GAAA6P,EAAA1O,GACA6+D,EAAA,CAAAl1E,EAAAka,EAAAla,EAAAka,EAAAlb,EAAAkW,EAAAgF,EAAAhF,GAAA6P,EAAA1O,GACA6+D,EAAA,CAAAl1E,EAAAka,EAAAla,EAAAka,EAAAlb,EAAAkW,EAAAgF,EAAAhF,EAAAgF,EAAA9b,GAAA2mB,EAAA1O,GACA6+D,EAAA,CAAAl1E,EAAAka,EAAAla,EAAAkV,EAAAgF,EAAAhF,EAAAgF,EAAA9b,GAAA2mB,EAAA1O,OAiGA,IAAA8R,EAAA,CACA+tD,QAAA,SAAAnmF,GACA,IACAnD,EAAAme,EAAA2D,EAAAwJ,EAAAvkB,EADAxD,EAAA,GAGA,IAAAvD,EAAA,EAAA8hB,EAAA3e,EAAAxC,OAAAX,EAAA8hB,IAAA9hB,EACA,IAAAme,EAAA,EAAAmN,EAAAnoB,EAAAnD,GAAAW,OAAAwd,EAAAmN,IAAAnN,EACApX,EAAA5D,EAAAnD,GAAAme,GACA5a,EAAAsM,KAAA9I,GACAA,EAAAwiF,QAAA,CACAC,KAAA,IAAAZ,EACAa,UAAA,EACAC,UAAA,EACAtoF,KAAApB,EACAk0D,KAAA/1C,GAmBA,OAXA5a,EAAA6kB,MAAA,SAAA/nB,EAAAuQ,GACA,IAAA+4E,EAAAtpF,EAAAkpF,QACAK,EAAAh5E,EAAA24E,QAEA,OAAAI,EAAAz1B,OAAA01B,EAAA11B,KACA01B,EAAAxoF,KAAAuoF,EAAAvoF,KACAwoF,EAAA11B,KAAAy1B,EAAAz1B,QAGAhyD,KAAAg7B,OAAA35B,GAEAA,GAGA25B,OAAA,SAAA35B,GACA,IACAvD,EAAA8hB,EAAA/a,EAAA2/E,EAAAmD,EADAC,GAAA,EAGA,IAAA9pF,EAAA,EAAA8hB,EAAAve,EAAA5C,OAAAX,EAAA8hB,IAAA9hB,EAEA0mF,GADA3/E,EAAAxD,EAAAvD,IACA0mF,SACAmD,EAAA9iF,EAAAwiF,SACAE,SAAA/C,GAAA,SAAAA,EAAAjoD,QACAorD,EAAAH,SAAA3iF,EAAA6qC,UACAk4C,GAAAD,EAAAJ,SAGAK,GApFA,SAAAvmF,GACA,IAAAvD,EAAA8hB,EAAA/a,EAAA8iF,EAAA7B,EAAA7vD,EAAA2H,EAGA,IAAA9/B,EAAA,EAAA8hB,EAAAve,EAAA5C,OAAAX,EAAA8hB,IAAA9hB,GAEA6pF,GADA9iF,EAAAxD,EAAAvD,IACAupF,SAEAG,WAMA5pD,EAAA,IAAAJ,MAAA34B,EAAAugF,IAAA,CAAAh4E,IAAA,CAAAlN,EAAA5B,IAAA4B,EAAAy5C,SAAA,CAAAr7C,IAAA,GAAAA,KAEAwnF,EAAAjhF,EAAAihF,WACA7vD,EAAA4wD,EAAAjpD,EAAA/4B,EAAA2/E,QAAAsB,GACA6B,EAAAL,KAAAtsD,OAAA/E,EAAA6vD,EAAAjhF,EAAA0lB,cAxCA,SAAAlpB,EAAAwmF,GACA,IAAA/pF,EAAAme,EAAA6rE,EAAAC,EAMA,IAAAjqF,EAAAuD,EAAA5C,OAAA,EAAAX,GAAA,IAAAA,EAGA,IAFAgqF,EAAAzmF,EAAAvD,GAAAupF,QAEAprE,EAAAne,EAAA,EAAAme,GAAA,GAAA6rE,EAAAN,WAAAvrE,GACA8rE,EAAA1mF,EAAA4a,GAAAorE,SAEAG,UAAAM,EAAAR,KAAAN,WAAAe,EAAAT,OACAO,EAAAC,EAAAC,IA+BAC,CAAA3mF,GAAA,SAAAymF,EAAAC,GACA,IAAAE,EAAAH,EAAAP,SACA14E,EAAAk5E,EAAAR,SAEAU,GAAAp5E,GAAAA,EACAk5E,EAAAP,UAAA,EACAS,IACAH,EAAAN,UAAA,MAuDAU,CAAA7mF,IAIA8mF,OAAA,SAAA9mF,EAAAmqB,GACA,IAAA1tB,EAAA6pF,EAKA,IAAA7pF,EAAAuD,EAAA5C,OAAA,EAAAX,GAAA,IAAAA,EAGA,IAFA6pF,EAAAtmF,EAAAvD,GAAAupF,UAEAM,EAAAH,UAAAG,EAAAL,KAAAP,SAAAv7D,GACA,OAAAnqB,EAAAvD,GAIA,OAAA,MAGA+O,KAAA,SAAAhG,EAAAxF,GACA,IAAAvD,EAAA8hB,EAAA/a,EAAA8iF,EAAA7B,EAAA7vD,EAEA,IAAAn4B,EAAA,EAAA8hB,EAAAve,EAAA5C,OAAAX,EAAA8hB,IAAA9hB,GAEA6pF,GADA9iF,EAAAxD,EAAAvD,IACAupF,SAEAG,WACA1B,EAAAjhF,EAAAihF,WACA7vD,EAAA4wD,EAAAhiF,EAAAugF,IAAAvgF,EAAA2/E,QAAAsB,GACA6B,EAAAL,KAAAtsD,OAAA/E,EAAA6vD,EAAAjhF,EAAA0lB,YACA1lB,EAAAgI,KAAAhG,EAAAovB,MA6EAmyD,EAAA,WAoDA,SAAAC,EAAAxhF,EAAAkF,EAAAlH,GACA,GAAAkH,EAAA,CAIA,IAEAhI,EAFAhD,EAAA8D,EAAA8uC,SACA20C,EAAAzjF,EAAA0jF,QAGAx8E,EAAAu8E,EAAAppF,QAIA6E,EAAAgI,EAAAu8E,EAAAppF,MAAAopF,EAAAE,SAKA,IAAA/+C,EAAA1lC,SAAAA,EAAA,CAAAhD,MAKA8F,EAAA,YAAA4hF,QAAA,EACA5jF,EAAAm2B,OAAAj6B,KA2BA,SAAA2nF,EAAA7hF,EAAA2G,GACA,IAEAye,EAAApnB,EAFA8jF,EAAA9hF,EAAA,YACAkF,EAAA48E,EAAAn6B,WAGA,GAAAziD,EAAA68E,OAAA78E,EAAA88E,MAAA,CAIA,GAAA,cAAAr7E,EAAArM,KACA0D,EAAAw0B,EAAA8uD,OAAAQ,EAAAG,QAAAt7E,QACA,GAAA,aAAAA,EAAArM,KACA,OAGA8qB,EAAA08D,EAAAI,SACAJ,EAAAI,SAAAlkF,EAvCA,SAAAgC,EAAAkF,EAAAkgB,EAAApnB,GACA,IAAA+jF,EAAAC,GAEA58D,GAAApnB,KAIAonB,EAEApnB,EAEAonB,IAAApnB,IACAgkF,EAAAD,GAAA,GAFAC,GAAA,EAFAD,GAAA,EAOAC,GACAR,EAAAxhF,EAAAkF,EAAA88E,MAAA58D,GAEA28D,GACAP,EAAAxhF,EAAAkF,EAAA68E,MAAA/jF,IAqBAmkF,CAAAniF,EAAAkF,EAAAkgB,EAAApnB,IAiJA,MArIA,CACA6Z,GAAA,aAEAwD,SAjLA,CACA1b,MAAA,SACAC,OAAA,SACAP,gBAAA,KACAC,YAAA,KACAC,aAAA,EACAvE,YAAA,EACA6hF,OAAA,EACA53D,MAAA,EACAzlB,WAAAvG,EACAy8B,SAAA,EACAj2B,KAAA,CACAoc,YAAA5iB,EACA8iB,WAAA,IACApB,UAAA1hB,EACA6iB,WAAA7iB,EACA2d,OAAA,MAEAzX,UA/CA,SAAAhC,GACA,GAAAylC,EAAA9qB,cAAA3a,GACA,OAAA,KAGA,IACA+X,EAAAqE,EAAArQ,EADAlL,EAAAb,EAEA,GAAAylC,EAAA5qB,SAAA7a,GACA,GAAAylC,EAAA9qB,cAAA3a,EAAAa,OAEA,GAAA4kC,EAAA9qB,cAAA3a,EAAAvG,GAKA,IAFAoH,EAAA,GAEAkL,EAAA,EAAAqQ,GADArE,EAAAvb,OAAAub,KAAA/X,IACAvF,OAAAsR,EAAAqQ,IAAArQ,EACAlL,IAAA,IAAAkL,EAAA,KAAA,IAAAgM,EAAAhM,GAAA,KAAA/L,EAAA+X,EAAAhM,SALAlL,EAAAb,EAAAvG,OAFAoH,EAAAb,EAAAa,MAYA,MAAA,GAAAA,GA2BAxD,YAAAvB,EACAiM,UAAA,GACArF,OAAA,EACA+rE,QAAA,EACAlsE,QAAA,CACAolB,IAAA,EACAvgB,MAAA,EACAwgB,OAAA,EACAzgB,KAAA,GAEAof,SAAA,EACA4C,UAAA,QACAgwB,qBAAAr9C,EACAo9C,gBAAA,EACAqoC,eAAA,EACAC,qBAAA1lF,GAiJAmpF,WAAA,SAAApiF,GACAA,EAAA,YAAA,CACAqiF,SAAA,KAIA3oC,aAAA,SAAA15C,GACA,IAAA8hF,EAAA9hF,EAAA,YACA8hF,EAAAQ,WAAA,EACAR,EAAAn6B,WAAA,GACAm6B,EAAAS,UAAA,GACAT,EAAAG,QAAA,IAGAO,mBAAA,SAAAxiF,EAAAyD,EAAAhJ,GACA,IAQAxD,EAAAme,EAAA2D,EAAAwJ,EAAA+kB,EAAAvsC,EAAA1B,EAAA2E,EARAkb,EAAAzV,EAAA3I,MACAgnF,EAAA9hF,EAAA,YACAxF,EAAAsnF,EAAAS,UAAArpE,GAAA,GACA2vB,EAAA7oC,EAAA6pD,iBAAA3wC,GACAjb,EAAA+B,EAAAxG,KAAAY,SAAA8e,GACAngB,EA3JA,SAAAkF,EAAAxD,GACA,IACAyK,EAEA1K,EAAA0a,EAHAwhB,EAAAz4B,EAAAU,WAEA8jF,EAAA,GAGA,OAAA,IAAA/rD,EACA,OAEA,IAAAA,IACAA,EAAA,IAGAj8B,EAAAmoC,EAAA/oB,MAAA,GAAA,CAAApf,EAAAi8B,IACAl8B,EAAAC,EAAAD,QAAA,GACA0a,EAAAvb,OAAAub,KAAA1a,UACAC,EAAAD,OAEA0a,EAAAtd,OACAsd,EAAAra,SAAA,SAAAE,GACAP,EAAAO,IACA0nF,EAAA37E,KAAA87B,EAAA/oB,MAAA,GAAA,CACApf,EACAD,EAAAO,GACA,CAAA4mF,KAAA5mF,SAMA0nF,EAAA37E,KAAArM,GAIAyK,EAAAu9E,EAAA17E,QAAA,SAAAsS,EAAAtgB,GAOA,OANA6pC,EAAAxpC,KAAAL,EAAAmM,WAAA,IAAA,SAAArM,EAAA8N,GACA0S,EAAA1S,GAAA0S,EAAA1S,IAAA,GACA0S,EAAA1S,GAAA5N,EAAA4oF,MAAAJ,GAAA1oF,YAGAE,EAAAmM,UACAmU,IACA,IAEA,CACA7e,OAAAioF,EACAv9E,UAAAA,IA6GA+jC,CAAAhrC,EAAAxD,GACAkhB,EAAAlY,EAAAmsB,KAAAp2B,MAAA,GACA0iB,EAAAlc,EAAAkc,IAKA,IAFAA,EAAAoG,OAEArrB,EAAA,EAAA8hB,EAAA4C,EAAA/jB,OAAAX,EAAA8hB,IAAA9hB,EAIA,IAHAoC,EAAAsiB,EAAA1kB,IACA,YAAA,GAEA4xC,GAAAxvC,GAAA2G,EAAAkxD,kBAAAj6D,KAAAoC,EAAAi1B,KACA,IAAAlZ,EAAA,EAAAmN,EAAAxpB,EAAAyB,OAAA5C,OAAAwd,EAAAmN,IAAAnN,EAEAra,GADAusC,EAAAvuC,EAAAyB,OAAA4a,IACAusE,MAEA3jF,EAAA,IAAAmgF,EAAA72C,EAAAprB,EAAA7iB,EAAApC,IACAyqF,QAAA,CACArpF,KAAA6gB,EACAyoE,KAAA5mF,GAAAwmF,GAEAvjF,EAAA8uC,SAAA,CACAnE,QAAA,EACA3oC,MAAAA,EACA5B,UAAAnH,EACAgH,QAAAA,EACAib,aAAAA,GAGAlb,EAAAm2B,OAAAn2B,EAAA8uC,UACAzzC,EAAA,YAAAyN,KAAA9I,GACAxD,EAAAsM,KAAA9I,GAKAke,EAAAwG,UAIAkgB,EAAA/oB,MAAAioE,EAAAn6B,WAAA5uD,EAAAmM,UAAA,CACA6U,OAAA,SAAApT,EAAA0S,EAAAD,GACAC,EAAA1S,GAAA0S,EAAA1S,IAAA,GACA0S,EAAA1S,GAAAlD,EAAA3I,OAAAse,EAAAzS,GACAm7E,EAAAQ,WAAA,MAKAznC,YAAA,SAAA76C,EAAAvF,GACAuF,EAAA,YAAAiiF,QAAAzvD,EAAA+tD,QACAvgF,EAAA,YAAAuiF,UACA9nF,IAMAioF,kBAAA,SAAA1iF,GACAwyB,EAAAxsB,KAAAhG,EAAAA,EAAA,YAAAiiF,UAGAU,YAAA,SAAA3iF,EAAAyD,GAIA,GAAAzD,EAAA,YAAAsiF,UAAA,CACA,IAAA37E,EAAAlD,EAAAkD,MACA,OAAAA,EAAArM,MACA,IAAA,YACA,IAAA,WACAunF,EAAA7hF,EAAA2G,GACA,MACA,IAAA,SA3GA,SAAA3G,EAAA2G,GACA,IAAAm7E,EAAA9hF,EAAA,YACA4iF,EAAAd,EAAAn6B,WAAAk7B,MACA7kF,EAAA4kF,GAAApwD,EAAA8uD,OAAAQ,EAAAG,QAAAt7E,GACA3I,GACAwjF,EAAAxhF,EAAA4iF,EAAA5kF,GAuGA8kF,CAAA9iF,EAAA2G,MAMAo8E,WAAA,SAAA/iF,GACA,IAIA/I,EAAA8hB,EAAA3D,EAAAmN,EAAA4R,EAAAn2B,EAAAxD,EAJAsnF,EAAA9hF,EAAA,YACAolB,EAAA08D,EAAAO,SACAW,EAAAlB,EAAAO,SAAAriF,EAAAijF,oBACA7G,EAAAD,EAAA/2D,EAAA49D,GAGA,IAAA/rF,EAAA,EAAA8hB,EAAAqjE,EAAAxkF,OAAAX,EAAA8hB,IAAA9hB,EAEA,IADAk9B,EAAAioD,EAAAnlF,IACA,GAEA,IAAAme,EAAA,EAAAmN,GADA/nB,EAAA25B,EAAA,GAAAnK,QAAA,aAAA,IACApyB,OAAAwd,EAAAmN,IAAAnN,GACApX,EAAAxD,EAAA4a,IACA03B,SAAAnE,OAAA,IAAAxU,EAAA,GACAn2B,EAAAm2B,OAAAn2B,EAAA8uC,WAKAg1C,EAAAF,QAAAxF,EAAAxkF,UACA46B,EAAA2B,OAAA2tD,EAAAG,SACAjiF,EAAA4oD,iBAGAk5B,EAAAF,aZg5aE,CAACxhF,WAAW,GAAG8iF,mBAAmB,KAAKC,GAAG,CAAC,SAAS/rF,EAAQU,EAAOJ,GavtdrE,IAAA0rF,EAAAhsF,EAAA,gBACAisF,EAAAjsF,EAAA,iBACAksF,EAAAlsF,EAAA,cACAmsF,EAAAnsF,EAAA,cACAosF,EAAApsF,EAAA,cASA,SAAAqsF,EAAAn/C,GACA,IAAAxpC,GAAA,EACAlD,EAAA,MAAA0sC,EAAA,EAAAA,EAAA1sC,OAGA,IADAuB,KAAAusD,UACA5qD,EAAAlD,GAAA,CACA,IAAA2sC,EAAAD,EAAAxpC,GACA3B,KAAAuN,IAAA69B,EAAA,GAAAA,EAAA,KAKAk/C,EAAAphF,UAAAqjD,MAAA09B,EACAK,EAAAphF,UAAA,OAAAghF,EACAI,EAAAphF,UAAAkE,IAAA+8E,EACAG,EAAAphF,UAAAuY,IAAA2oE,EACAE,EAAAphF,UAAAqE,IAAA88E,EAEA1rF,EAAAJ,QAAA+rF,Gb0tdE,CAACC,eAAe,GAAGC,gBAAgB,GAAGC,aAAa,GAAGC,aAAa,GAAGC,aAAa,KAAKC,GAAG,CAAC,SAAS3sF,EAAQU,EAAOJ,GczvdtH,IAAAssF,EAAA5sF,EAAA,qBACA6sF,EAAA7sF,EAAA,sBACA8sF,EAAA9sF,EAAA,mBACA+sF,EAAA/sF,EAAA,mBACAgtF,EAAAhtF,EAAA,mBASA,SAAAitF,EAAA//C,GACA,IAAAxpC,GAAA,EACAlD,EAAA,MAAA0sC,EAAA,EAAAA,EAAA1sC,OAGA,IADAuB,KAAAusD,UACA5qD,EAAAlD,GAAA,CACA,IAAA2sC,EAAAD,EAAAxpC,GACA3B,KAAAuN,IAAA69B,EAAA,GAAAA,EAAA,KAKA8/C,EAAAhiF,UAAAqjD,MAAAs+B,EACAK,EAAAhiF,UAAA,OAAA4hF,EACAI,EAAAhiF,UAAAkE,IAAA29E,EACAG,EAAAhiF,UAAAuY,IAAAupE,EACAE,EAAAhiF,UAAAqE,IAAA09E,EAEAtsF,EAAAJ,QAAA2sF,Gd4vdE,CAACC,oBAAoB,GAAGC,qBAAqB,GAAGC,kBAAkB,GAAGC,kBAAkB,GAAGC,kBAAkB,KAAKC,GAAG,CAAC,SAASvtF,EAAQU,EAAOJ,Ge3xd/I,IAIAmN,EAJAzN,EAAA,eAIAwtF,CAHAxtF,EAAA,WAGA,OAEAU,EAAAJ,QAAAmN,Gf8xdE,CAACggF,eAAe,GAAGC,UAAU,KAAKC,GAAG,CAAC,SAAS3tF,EAAQU,EAAOJ,GgBpydhE,IAAAstF,EAAA5tF,EAAA,oBACA6tF,EAAA7tF,EAAA,qBACA8tF,EAAA9tF,EAAA,kBACA+tF,EAAA/tF,EAAA,kBACAguF,EAAAhuF,EAAA,kBASA,SAAAiuF,EAAA/gD,GACA,IAAAxpC,GAAA,EACAlD,EAAA,MAAA0sC,EAAA,EAAAA,EAAA1sC,OAGA,IADAuB,KAAAusD,UACA5qD,EAAAlD,GAAA,CACA,IAAA2sC,EAAAD,EAAAxpC,GACA3B,KAAAuN,IAAA69B,EAAA,GAAAA,EAAA,KAKA8gD,EAAAhjF,UAAAqjD,MAAAs/B,EACAK,EAAAhjF,UAAA,OAAA4iF,EACAI,EAAAhjF,UAAAkE,IAAA2+E,EACAG,EAAAhjF,UAAAuY,IAAAuqE,EACAE,EAAAhjF,UAAAqE,IAAA0+E,EAEAttF,EAAAJ,QAAA2tF,GhBuydE,CAACC,mBAAmB,GAAGC,oBAAoB,GAAGC,iBAAiB,GAAGC,iBAAiB,GAAGC,iBAAiB,KAAKC,GAAG,CAAC,SAASvuF,EAAQU,EAAOJ,GiBt0d1I,IAGA0J,EAHAhK,EAAA,WAGAgK,OAEAtJ,EAAAJ,QAAA0J,GjBy0dE,CAAC0jF,UAAU,KAAKc,GAAG,CAAC,SAASxuF,EAAQU,EAAOJ,GkB1zd9CI,EAAAJ,QAXA,SAAAmoB,EAAAgmE,GAKA,IAJA,IAAA/qF,GAAA,EACAlD,EAAA,MAAAioB,EAAA,EAAAA,EAAAjoB,OACAunB,EAAA1lB,MAAA7B,KAEAkD,EAAAlD,GACAunB,EAAArkB,GAAA+qF,EAAAhmE,EAAA/kB,GAAAA,EAAA+kB,GAEA,OAAAV,IlBo1dE,IAAI2mE,GAAG,CAAC,SAAS1uF,EAAQU,EAAOJ,GmBr2dlC,IAAAquF,EAAA3uF,EAAA,sBACA8Q,EAAA9Q,EAAA,QAMA8iB,EAHAvgB,OAAA0I,UAGA6X,eAoBApiB,EAAAJ,QARA,SAAAqxB,EAAAhuB,EAAAoC,GACA,IAAA6oF,EAAAj9D,EAAAhuB,GACAmf,EAAAviB,KAAAoxB,EAAAhuB,IAAAmN,EAAA89E,EAAA7oF,UACAlE,IAAAkE,GAAApC,KAAAguB,IACAg9D,EAAAh9D,EAAAhuB,EAAAoC,KnB42dE,CAAC8oF,qBAAqB,GAAGC,OAAO,KAAKC,GAAG,CAAC,SAAS/uF,EAAQU,EAAOJ,GoBn4dnE,IAAAwQ,EAAA9Q,EAAA,QAoBAU,EAAAJ,QAVA,SAAAmoB,EAAA9kB,GAEA,IADA,IAAAnD,EAAAioB,EAAAjoB,OACAA,KACA,GAAAsQ,EAAA2X,EAAAjoB,GAAA,GAAAmD,GACA,OAAAnD,EAGA,OAAA,IpBy4dE,CAACsuF,OAAO,KAAKE,GAAG,CAAC,SAAShvF,EAAQU,EAAOJ,GqB15d3C,IAAAgxB,EAAAtxB,EAAA,qBAwBAU,EAAAJ,QAbA,SAAAqxB,EAAAhuB,EAAAoC,GACA,aAAApC,GAAA2tB,EACAA,EAAAK,EAAAhuB,EAAA,CACA4tB,cAAA,EACAlL,YAAA,EACAtgB,MAAAA,EACAqgB,UAAA,IAGAuL,EAAAhuB,GAAAoC,IrBi6dE,CAACkpF,oBAAoB,KAAKC,GAAG,CAAC,SAASlvF,EAAQU,EAAOJ,GsBr7dxD,IAAA6uF,EAAAnvF,EAAA,eACAovF,EAAApvF,EAAA,YAsBAU,EAAAJ,QAZA,SAAAqxB,EAAAszC,GAMA,IAHA,IAAAvhE,EAAA,EACAlD,GAHAykE,EAAAkqB,EAAAlqB,EAAAtzC,IAGAnxB,OAEA,MAAAmxB,GAAAjuB,EAAAlD,GACAmxB,EAAAA,EAAAy9D,EAAAnqB,EAAAvhE,OAEA,OAAAA,GAAAA,GAAAlD,EAAAmxB,OAAA9vB,ItB27dE,CAACwtF,cAAc,GAAGC,WAAW,KAAKC,GAAG,CAAC,SAASvvF,EAAQU,EAAOJ,GuB/8dhE,IAAA0J,EAAAhK,EAAA,aACAwvF,EAAAxvF,EAAA,gBACAyvF,EAAAzvF,EAAA,qBAOA0vF,EAAA1lF,EAAAA,EAAAi1B,iBAAAp9B,EAkBAnB,EAAAJ,QATA,SAAAyF,GACA,OAAA,MAAAA,OACAlE,IAAAkE,EAdA,qBADA,gBAiBA2pF,GAAAA,KAAAntF,OAAAwD,GACAypF,EAAAzpF,GACA0pF,EAAA1pF,KvBq9dE,CAAC4pF,YAAY,GAAGC,eAAe,GAAGC,oBAAoB,KAAKC,GAAG,CAAC,SAAS9vF,EAAQU,EAAOJ,GwB7+dzF,IAAA+iB,EAAArjB,EAAA,gBACA+vF,EAAA/vF,EAAA,eACA4gB,EAAA5gB,EAAA,cACAgwF,EAAAhwF,EAAA,eASAiwF,EAAA,8BAGAC,EAAAC,SAAAllF,UACAmlF,EAAA7tF,OAAA0I,UAGAolF,EAAAH,EAAA9kF,SAGA0X,EAAAstE,EAAAttE,eAGAwtE,EAAA13D,OAAA,IACAy3D,EAAA9vF,KAAAuiB,GAAA3E,QAjBA,sBAiBA,QACAA,QAAA,yDAAA,SAAA,KAmBAzd,EAAAJ,QARA,SAAAyF,GACA,SAAA6a,EAAA7a,IAAAgqF,EAAAhqF,MAGAsd,EAAAtd,GAAAuqF,EAAAL,GACA1kF,KAAAykF,EAAAjqF,MxBm/dE,CAACwqF,cAAc,GAAGC,cAAc,GAAGC,eAAe,GAAGC,aAAa,KAAKC,GAAG,CAAC,SAAS3wF,EAAQU,EAAOJ,GyB9herG,IAAAswF,EAAA5wF,EAAA,kBACAmvF,EAAAnvF,EAAA,eACA6wF,EAAA7wF,EAAA,cACA4gB,EAAA5gB,EAAA,cACAovF,EAAApvF,EAAA,YA8CAU,EAAAJ,QAlCA,SAAAqxB,EAAAszC,EAAAl/D,EAAA+qF,GACA,IAAAlwE,EAAA+Q,GACA,OAAAA,EASA,IALA,IAAAjuB,GAAA,EACAlD,GAHAykE,EAAAkqB,EAAAlqB,EAAAtzC,IAGAnxB,OACA6oE,EAAA7oE,EAAA,EACAuwF,EAAAp/D,EAEA,MAAAo/D,KAAArtF,EAAAlD,GAAA,CACA,IAAAmD,EAAAyrF,EAAAnqB,EAAAvhE,IACAstF,EAAAjrF,EAEA,GAAA,cAAApC,GAAA,gBAAAA,GAAA,cAAAA,EACA,OAAAguB,EAGA,GAAAjuB,GAAA2lE,EAAA,CACA,IAAAulB,EAAAmC,EAAAptF,QAEA9B,KADAmvF,EAAAF,EAAAA,EAAAlC,EAAAjrF,EAAAotF,QAAAlvF,KAEAmvF,EAAApwE,EAAAguE,GACAA,EACAiC,EAAA5rB,EAAAvhE,EAAA,IAAA,GAAA,IAGAktF,EAAAG,EAAAptF,EAAAqtF,GACAD,EAAAA,EAAAptF,GAEA,OAAAguB,IzBoieE,CAACs/D,iBAAiB,GAAG5B,cAAc,GAAG6B,aAAa,GAAG5B,WAAW,GAAGoB,aAAa,KAAKS,GAAG,CAAC,SAASnxF,EAAQU,EAAOJ,G0BnlepH,IAAA0J,EAAAhK,EAAA,aACAoxF,EAAApxF,EAAA,eACAsC,EAAAtC,EAAA,aACAqxF,EAAArxF,EAAA,cAMAsxF,EAAAtnF,EAAAA,EAAAiB,eAAApJ,EACA0vF,EAAAD,EAAAA,EAAAlmF,cAAAvJ,EA0BAnB,EAAAJ,QAhBA,SAAAkxF,EAAAzrF,GAEA,GAAA,iBAAAA,EACA,OAAAA,EAEA,GAAAzD,EAAAyD,GAEA,OAAAqrF,EAAArrF,EAAAyrF,GAAA,GAEA,GAAAH,EAAAtrF,GACA,OAAAwrF,EAAAA,EAAAhxF,KAAAwF,GAAA,GAEA,IAAAgiB,EAAAhiB,EAAA,GACA,MAAA,KAAAgiB,GAAA,EAAAhiB,IA3BA,SA2BA,KAAAgiB,I1ByleE,CAAC4nE,YAAY,GAAG8B,cAAc,GAAGC,YAAY,GAAGC,aAAa,KAAKC,GAAG,CAAC,SAAS5xF,EAAQU,EAAOJ,G2B1nehG,IAAAgC,EAAAtC,EAAA,aACA6xF,EAAA7xF,EAAA,YACA8xF,EAAA9xF,EAAA,mBACAoL,EAAApL,EAAA,cAiBAU,EAAAJ,QAPA,SAAAyF,EAAA4rB,GACA,OAAArvB,EAAAyD,GACAA,EAEA8rF,EAAA9rF,EAAA4rB,GAAA,CAAA5rB,GAAA+rF,EAAA1mF,EAAArF,M3BgoeE,CAACgsF,WAAW,GAAGC,kBAAkB,GAAGN,YAAY,GAAGO,aAAa,KAAKC,GAAG,CAAC,SAASlyF,EAAQU,EAAOJ,G4BjpenG,IAGA6xF,EAHAnyF,EAAA,WAGA,sBAEAU,EAAAJ,QAAA6xF,G5BopeE,CAACzE,UAAU,KAAK0E,GAAG,CAAC,SAASpyF,EAAQU,EAAOJ,G6Bzpe9C,IAAAktF,EAAAxtF,EAAA,gBAEAsxB,EAAA,WACA,IACA,IAAA+gE,EAAA7E,EAAAjrF,OAAA,kBAEA,OADA8vF,EAAA,GAAA,GAAA,IACAA,EACA,MAAA5yF,KALA,GAQAiB,EAAAJ,QAAAgxB,G7B4peE,CAACm8D,eAAe,KAAK6E,GAAG,CAAC,SAAStyF,EAAQU,EAAOJ,IACnD,SAAWmL,IAAQ,W8BtqenB,IAAA8mF,EAAA,iBAAA9mF,GAAAA,GAAAA,EAAAlJ,SAAAA,QAAAkJ,EAEA/K,EAAAJ,QAAAiyF,I9B0qeGhyF,KAAKwB,QAAQxB,KAAKwB,KAAuB,oBAAX0J,OAAyBA,OAAyB,oBAATK,KAAuBA,KAAyB,oBAAX1K,OAAyBA,OAAS,KAE/I,IAAIoxF,GAAG,CAAC,SAASxyF,EAAQU,EAAOJ,G+B/qelC,IAAAmyF,EAAAzyF,EAAA,gBAiBAU,EAAAJ,QAPA,SAAA+R,EAAA1O,GACA,IAAAvB,EAAAiQ,EAAAqgF,SACA,OAAAD,EAAA9uF,GACAvB,EAAA,iBAAAuB,EAAA,SAAA,QACAvB,EAAAiQ,M/BqreE,CAACsgF,eAAe,KAAKC,GAAG,CAAC,SAAS5yF,EAAQU,EAAOJ,GgCnsenD,IAAAuyF,EAAA7yF,EAAA,mBACA8yF,EAAA9yF,EAAA,eAeAU,EAAAJ,QALA,SAAAqxB,EAAAhuB,GACA,IAAAoC,EAAA+sF,EAAAnhE,EAAAhuB,GACA,OAAAkvF,EAAA9sF,GAAAA,OAAAlE,IhCyseE,CAACkxF,kBAAkB,GAAGC,cAAc,KAAKC,GAAG,CAAC,SAASjzF,EAAQU,EAAOJ,GiCttevE,IAAA0J,EAAAhK,EAAA,aAGAowF,EAAA7tF,OAAA0I,UAGA6X,EAAAstE,EAAAttE,eAOAowE,EAAA9C,EAAAhlF,SAGAskF,EAAA1lF,EAAAA,EAAAi1B,iBAAAp9B,EA6BAnB,EAAAJ,QApBA,SAAAyF,GACA,IAAAotF,EAAArwE,EAAAviB,KAAAwF,EAAA2pF,GACA0D,EAAArtF,EAAA2pF,GAEA,IACA3pF,EAAA2pF,QAAA7tF,EACA,IAAAwxF,GAAA,EACA,MAAA5zF,IAEA,IAAAsoB,EAAAmrE,EAAA3yF,KAAAwF,GAQA,OAPAstF,IACAF,EACAptF,EAAA2pF,GAAA0D,SAEArtF,EAAA2pF,IAGA3nE,IjC4teE,CAAC4nE,YAAY,KAAK2D,GAAG,CAAC,SAAStzF,EAAQU,EAAOJ,GkC1vehDI,EAAAJ,QAJA,SAAAqxB,EAAAhuB,GACA,OAAA,MAAAguB,OAAA9vB,EAAA8vB,EAAAhuB,KlC4weE,IAAI4vF,GAAG,CAAC,SAASvzF,EAAQU,EAAOJ,GmCrxelC,IAAAkzF,EAAAxzF,EAAA,mBAcAU,EAAAJ,QALA,WACAyB,KAAA2wF,SAAAc,EAAAA,EAAA,MAAA,GACAzxF,KAAAwhB,KAAA,InC2xeE,CAACkwE,kBAAkB,KAAKC,GAAG,CAAC,SAAS1zF,EAAQU,EAAOJ,GoCtxetDI,EAAAJ,QANA,SAAAqD,GACA,IAAAokB,EAAAhmB,KAAAyhB,IAAA7f,WAAA5B,KAAA2wF,SAAA/uF,GAEA,OADA5B,KAAAwhB,MAAAwE,EAAA,EAAA,EACAA,IpC4yeE,IAAI4rE,GAAG,CAAC,SAAS3zF,EAAQU,EAAOJ,GqCzzelC,IAAAkzF,EAAAxzF,EAAA,mBASA8iB,EAHAvgB,OAAA0I,UAGA6X,eAoBApiB,EAAAJ,QATA,SAAAqD,GACA,IAAAvB,EAAAL,KAAA2wF,SACA,GAAAc,EAAA,CACA,IAAAzrE,EAAA3lB,EAAAuB,GACA,MArBA,8BAqBAokB,OAAAlmB,EAAAkmB,EAEA,OAAAjF,EAAAviB,KAAA6B,EAAAuB,GAAAvB,EAAAuB,QAAA9B,IrC+zeE,CAAC4xF,kBAAkB,KAAKG,GAAG,CAAC,SAAS5zF,EAAQU,EAAOJ,GsCz1etD,IAAAkzF,EAAAxzF,EAAA,mBAMA8iB,EAHAvgB,OAAA0I,UAGA6X,eAgBApiB,EAAAJ,QALA,SAAAqD,GACA,IAAAvB,EAAAL,KAAA2wF,SACA,OAAAc,OAAA3xF,IAAAO,EAAAuB,GAAAmf,EAAAviB,KAAA6B,EAAAuB,KtC+1eE,CAAC8vF,kBAAkB,KAAKI,GAAG,CAAC,SAAS7zF,EAAQU,EAAOJ,GuCl3etD,IAAAkzF,EAAAxzF,EAAA,mBAsBAU,EAAAJ,QAPA,SAAAqD,EAAAoC,GACA,IAAA3D,EAAAL,KAAA2wF,SAGA,OAFA3wF,KAAAwhB,MAAAxhB,KAAAyhB,IAAA7f,GAAA,EAAA,EACAvB,EAAAuB,GAAA6vF,QAAA3xF,IAAAkE,EAfA,4BAeAA,EACAhE,OvCw3eE,CAAC0xF,kBAAkB,KAAKK,GAAG,CAAC,SAAS9zF,EAAQU,EAAOJ,GwC14etD,IAGAyzF,EAAA,mBAoBArzF,EAAAJ,QAVA,SAAAyF,EAAAvF,GACA,IAAA0C,SAAA6C,EAGA,SAFAvF,EAAA,MAAAA,EAfA,iBAeAA,KAGA,UAAA0C,GACA,UAAAA,GAAA6wF,EAAAxoF,KAAAxF,KACAA,GAAA,GAAAA,EAAA,GAAA,GAAAA,EAAAvF,IxCi5eE,IAAIwzF,GAAG,CAAC,SAASh0F,EAAQU,EAAOJ,GyCt6elC,IAAAgC,EAAAtC,EAAA,aACAqxF,EAAArxF,EAAA,cAGAi0F,EAAA,mDACAC,EAAA,QAuBAxzF,EAAAJ,QAbA,SAAAyF,EAAA4rB,GACA,GAAArvB,EAAAyD,GACA,OAAA,EAEA,IAAA7C,SAAA6C,EACA,QAAA,UAAA7C,GAAA,UAAAA,GAAA,WAAAA,GACA,MAAA6C,IAAAsrF,EAAAtrF,MAGAmuF,EAAA3oF,KAAAxF,KAAAkuF,EAAA1oF,KAAAxF,IACA,MAAA4rB,GAAA5rB,KAAAxD,OAAAovB,MzC46eE,CAAC+/D,YAAY,GAAGC,aAAa,KAAKwC,GAAG,CAAC,SAASn0F,EAAQU,EAAOJ,G0Cv7ehEI,EAAAJ,QAPA,SAAAyF,GACA,IAAA7C,SAAA6C,EACA,MAAA,UAAA7C,GAAA,UAAAA,GAAA,UAAAA,GAAA,WAAAA,EACA,cAAA6C,EACA,OAAAA,I1C28eE,IAAIquF,GAAG,CAAC,SAASp0F,EAAQU,EAAOJ,G2Ct9elC,IAIAkgB,EAJA2xE,EAAAnyF,EAAA,iBAGAq0F,GACA7zE,EAAA,SAAA7N,KAAAw/E,GAAAA,EAAAr0E,MAAAq0E,EAAAr0E,KAAAw2E,UAAA,KACA,iBAAA9zE,EAAA,GAcA9f,EAAAJ,QAJA,SAAA+xF,GACA,QAAAgC,GAAAA,KAAAhC,I3C49eE,CAACkC,gBAAgB,KAAKC,GAAG,CAAC,SAASx0F,EAAQU,EAAOJ,G4Ch+epDI,EAAAJ,QALA,WACAyB,KAAA2wF,SAAA,GACA3wF,KAAAwhB,KAAA,I5Ck/eE,IAAIkxE,GAAG,CAAC,SAASz0F,EAAQU,EAAOJ,G6C3/elC,IAAAo0F,EAAA10F,EAAA,mBAMAwrB,EAHAnpB,MAAA4I,UAGAugB,OA4BA9qB,EAAAJ,QAjBA,SAAAqD,GACA,IAAAvB,EAAAL,KAAA2wF,SACAhvF,EAAAgxF,EAAAtyF,EAAAuB,GAEA,QAAAD,EAAA,KAIAA,GADAtB,EAAA5B,OAAA,EAEA4B,EAAA4M,MAEAwc,EAAAjrB,KAAA6B,EAAAsB,EAAA,KAEA3B,KAAAwhB,MACA,K7CigfE,CAACoxE,kBAAkB,KAAKC,GAAG,CAAC,SAAS50F,EAAQU,EAAOJ,G8ChiftD,IAAAo0F,EAAA10F,EAAA,mBAkBAU,EAAAJ,QAPA,SAAAqD,GACA,IAAAvB,EAAAL,KAAA2wF,SACAhvF,EAAAgxF,EAAAtyF,EAAAuB,GAEA,OAAAD,EAAA,OAAA7B,EAAAO,EAAAsB,GAAA,K9CsifE,CAACixF,kBAAkB,KAAKE,GAAG,CAAC,SAAS70F,EAAQU,EAAOJ,G+CrjftD,IAAAo0F,EAAA10F,EAAA,mBAeAU,EAAAJ,QAJA,SAAAqD,GACA,OAAA+wF,EAAA3yF,KAAA2wF,SAAA/uF,IAAA,I/C2jfE,CAACgxF,kBAAkB,KAAKG,GAAG,CAAC,SAAS90F,EAAQU,EAAOJ,GgDvkftD,IAAAo0F,EAAA10F,EAAA,mBAyBAU,EAAAJ,QAbA,SAAAqD,EAAAoC,GACA,IAAA3D,EAAAL,KAAA2wF,SACAhvF,EAAAgxF,EAAAtyF,EAAAuB,GAQA,OANAD,EAAA,KACA3B,KAAAwhB,KACAnhB,EAAAsN,KAAA,CAAA/L,EAAAoC,KAEA3D,EAAAsB,GAAA,GAAAqC,EAEAhE,OhD6kfE,CAAC4yF,kBAAkB,KAAKI,GAAG,CAAC,SAAS/0F,EAAQU,EAAOJ,GiDnmftD,IAAA+rF,EAAArsF,EAAA,WACAitF,EAAAjtF,EAAA,gBACAyN,EAAAzN,EAAA,UAkBAU,EAAAJ,QATA,WACAyB,KAAAwhB,KAAA,EACAxhB,KAAA2wF,SAAA,CACAsC,KAAA,IAAA3I,EACAh6E,IAAA,IAAA5E,GAAAw/E,GACAviE,OAAA,IAAA2hE,KjD0mfE,CAAC4I,UAAU,GAAGC,eAAe,GAAGC,SAAS,KAAKC,GAAG,CAAC,SAASp1F,EAAQU,EAAOJ,GkD1nf5E,IAAA+0F,EAAAr1F,EAAA,iBAiBAU,EAAAJ,QANA,SAAAqD,GACA,IAAAokB,EAAAstE,EAAAtzF,KAAA4B,GAAA,OAAAA,GAEA,OADA5B,KAAAwhB,MAAAwE,EAAA,EAAA,EACAA,IlDgofE,CAACutE,gBAAgB,KAAKC,GAAG,CAAC,SAASv1F,EAAQU,EAAOJ,GmD9ofpD,IAAA+0F,EAAAr1F,EAAA,iBAeAU,EAAAJ,QAJA,SAAAqD,GACA,OAAA0xF,EAAAtzF,KAAA4B,GAAAwL,IAAAxL,KnDopfE,CAAC2xF,gBAAgB,KAAKE,GAAG,CAAC,SAASx1F,EAAQU,EAAOJ,GoDhqfpD,IAAA+0F,EAAAr1F,EAAA,iBAeAU,EAAAJ,QAJA,SAAAqD,GACA,OAAA0xF,EAAAtzF,KAAA4B,GAAA6f,IAAA7f,KpDsqfE,CAAC2xF,gBAAgB,KAAKG,GAAG,CAAC,SAASz1F,EAAQU,EAAOJ,GqDlrfpD,IAAA+0F,EAAAr1F,EAAA,iBAqBAU,EAAAJ,QATA,SAAAqD,EAAAoC,GACA,IAAA3D,EAAAizF,EAAAtzF,KAAA4B,GACA4f,EAAAnhB,EAAAmhB,KAIA,OAFAnhB,EAAAkN,IAAA3L,EAAAoC,GACAhE,KAAAwhB,MAAAnhB,EAAAmhB,MAAAA,EAAA,EAAA,EACAxhB,OrDwrfE,CAACuzF,gBAAgB,KAAKI,GAAG,CAAC,SAAS11F,EAAQU,EAAOJ,GsD1sfpD,IAAAq1F,EAAA31F,EAAA,aAyBAU,EAAAJ,QAZA,SAAA+xF,GACA,IAAAtqE,EAAA4tE,EAAAtD,GAAA,SAAA1uF,GAIA,OAfA,MAYAqnB,EAAAzH,MACAyH,EAAAsjC,QAEA3qD,KAGAqnB,EAAAjD,EAAAiD,MACA,OAAAjD,ItDgtfE,CAAC6tE,YAAY,KAAKC,GAAG,CAAC,SAAS71F,EAAQU,EAAOJ,GuDtufhD,IAGAkzF,EAHAxzF,EAAA,eAGAwtF,CAAAjrF,OAAA,UAEA7B,EAAAJ,QAAAkzF,GvDyufE,CAAC/F,eAAe,KAAKqI,GAAG,CAAC,SAAS91F,EAAQU,EAAOJ,GwD7ufnD,IAOA4yF,EAPA3wF,OAAA0I,UAOAG,SAaA1K,EAAAJ,QAJA,SAAAyF,GACA,OAAAmtF,EAAA3yF,KAAAwF,KxDovfE,IAAIgwF,GAAG,CAAC,SAAS/1F,EAAQU,EAAOJ,GyDtwflC,IAAAiyF,EAAAvyF,EAAA,iBAGAg2F,EAAA,iBAAAlqF,MAAAA,MAAAA,KAAAvJ,SAAAA,QAAAuJ,KAGAgY,EAAAyuE,GAAAyD,GAAA7F,SAAA,cAAAA,GAEAzvF,EAAAJ,QAAAwjB,GzDywfE,CAACmyE,gBAAgB,KAAKC,GAAG,CAAC,SAASl2F,EAAQU,EAAOJ,G0DjxfpD,IAAA61F,EAAAn2F,EAAA,oBAGAo2F,EAAA,mGAGAC,EAAA,WASAvE,EAAAqE,GAAA,SAAAzrE,GACA,IAAA3C,EAAA,GAOA,OANA,KAAA2C,EAAA4rE,WAAA,IACAvuE,EAAArY,KAAA,IAEAgb,EAAAvM,QAAAi4E,GAAA,SAAAngE,EAAA+Z,EAAAumD,EAAAC,GACAzuE,EAAArY,KAAA6mF,EAAAC,EAAAr4E,QAAAk4E,EAAA,MAAArmD,GAAA/Z,MAEAlO,KAGArnB,EAAAJ,QAAAwxF,G1DoxfE,CAAC2E,mBAAmB,KAAKC,GAAG,CAAC,SAAS12F,EAAQU,EAAOJ,G2D9yfvD,IAAA+wF,EAAArxF,EAAA,cAoBAU,EAAAJ,QARA,SAAAyF,GACA,GAAA,iBAAAA,GAAAsrF,EAAAtrF,GACA,OAAAA,EAEA,IAAAgiB,EAAAhiB,EAAA,GACA,MAAA,KAAAgiB,GAAA,EAAAhiB,IAdA,SAcA,KAAAgiB,I3DozfE,CAAC4pE,aAAa,KAAKgF,GAAG,CAAC,SAAS32F,EAAQU,EAAOJ,G4Dp0fjD,IAGA+vF,EAHAF,SAAAllF,UAGAG,SAqBA1K,EAAAJ,QAZA,SAAA+xF,GACA,GAAA,MAAAA,EAAA,CACA,IACA,OAAAhC,EAAA9vF,KAAA8xF,GACA,MAAA5yF,IACA,IACA,OAAA4yF,EAAA,GACA,MAAA5yF,KAEA,MAAA,K5D20fE,IAAIm3F,GAAG,CAAC,SAAS52F,EAAQU,EAAOJ,G6D7zflCI,EAAAJ,QAJA,SAAAyF,EAAAw2B,GACA,OAAAx2B,IAAAw2B,GAAAx2B,GAAAA,GAAAw2B,GAAAA,I7Du2fE,IAAIs6D,GAAG,CAAC,SAAS72F,EAAQU,EAAOJ,G8Dx4flC,IAAAw2F,EAAA92F,EAAA,cAgCAU,EAAAJ,QALA,SAAAqxB,EAAAszC,EAAAjkD,GACA,IAAA+G,EAAA,MAAA4J,OAAA9vB,EAAAi1F,EAAAnlE,EAAAszC,GACA,YAAApjE,IAAAkmB,EAAA/G,EAAA+G,I9D84fE,CAACgvE,aAAa,KAAKC,GAAG,CAAC,SAASh3F,EAAQU,EAAOJ,G+Dp5fjD,IAAAgC,EAAAD,MAAAC,QAEA5B,EAAAJ,QAAAgC,G/D86fE,IAAI20F,GAAG,CAAC,SAASj3F,EAAQU,EAAOJ,GgEv8flC,IAAA42F,EAAAl3F,EAAA,iBACA4gB,EAAA5gB,EAAA,cAmCAU,EAAAJ,QAVA,SAAAyF,GACA,IAAA6a,EAAA7a,GACA,OAAA,EAIA,IAAAqtF,EAAA8D,EAAAnxF,GACA,MA5BA,qBA4BAqtF,GA3BA,8BA2BAA,GA7BA,0BA6BAA,GA1BA,kBA0BAA,IhE68fE,CAAC+D,gBAAgB,GAAGzG,aAAa,KAAK0G,GAAG,CAAC,SAASp3F,EAAQU,EAAOJ,GiEh9fpEI,EAAAJ,QALA,SAAAyF,GACA,IAAA7C,SAAA6C,EACA,OAAA,MAAAA,IAAA,UAAA7C,GAAA,YAAAA,KjEo/fE,IAAIm0F,GAAG,CAAC,SAASr3F,EAAQU,EAAOJ,GkEn/flCI,EAAAJ,QAJA,SAAAyF,GACA,OAAA,MAAAA,GAAA,iBAAAA,IlEqhgBE,IAAIuxF,GAAG,CAAC,SAASt3F,EAAQU,EAAOJ,GmE9igBlC,IAAA42F,EAAAl3F,EAAA,iBACAu3F,EAAAv3F,EAAA,kBA2BAU,EAAAJ,QALA,SAAAyF,GACA,MAAA,iBAAAA,GACAwxF,EAAAxxF,IArBA,mBAqBAmxF,EAAAnxF,KnEojgBE,CAACoxF,gBAAgB,GAAGK,iBAAiB,KAAKC,GAAG,CAAC,SAASz3F,EAAQU,EAAOJ,GoE7kgBxE,IAAA2tF,EAAAjuF,EAAA,eAiDA,SAAA21F,EAAAtD,EAAAlxD,GACA,GAAA,mBAAAkxD,GAAA,MAAAlxD,GAAA,mBAAAA,EACA,MAAA,IAAA/2B,UAhDA,uBAkDA,IAAAstF,EAAA,WACA,IAAArrF,EAAAzK,UACA+B,EAAAw9B,EAAAA,EAAA18B,MAAA1C,KAAAsK,GAAAA,EAAA,GACA2e,EAAA0sE,EAAA1sE,MAEA,GAAAA,EAAAxH,IAAA7f,GACA,OAAAqnB,EAAA7b,IAAAxL,GAEA,IAAAokB,EAAAsqE,EAAA5tF,MAAA1C,KAAAsK,GAEA,OADAqrF,EAAA1sE,MAAAA,EAAA1b,IAAA3L,EAAAokB,IAAAiD,EACAjD,GAGA,OADA2vE,EAAA1sE,MAAA,IAAA2qE,EAAAgC,OAAA1J,GACAyJ,EAIA/B,EAAAgC,MAAA1J,EAEAvtF,EAAAJ,QAAAq1F,GpEglgBE,CAACiC,cAAc,KAAKC,GAAG,CAAC,SAAS73F,EAAQU,EAAOJ,GqExpgBlD,IAAAw3F,EAAA93F,EAAA,cAkCAU,EAAAJ,QAJA,SAAAqxB,EAAAszC,EAAAl/D,GACA,OAAA,MAAA4rB,EAAAA,EAAAmmE,EAAAnmE,EAAAszC,EAAAl/D,KrE8pgBE,CAACgyF,aAAa,KAAKC,GAAG,CAAC,SAASh4F,EAAQU,EAAOJ,GsE7rgBjD,IAAAkxF,EAAAxxF,EAAA,mBA2BAU,EAAAJ,QAJA,SAAAyF,GACA,OAAA,MAAAA,EAAA,GAAAyrF,EAAAzrF,KtEmsgBE,CAACkyF,kBAAkB,MAAM,GAAG,CAAC","file":"chart.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import Chart from 'chart.js'\nimport ChartDataLabels from 'chartjs-plugin-datalabels'\n// Register the plugin to all charts:\nChart.register(ChartDataLabels);\n\nimport get from 'lodash/get'\nimport set from 'lodash/set'\n\nwindow.Tangible = window.Tangible || {}\nwindow.Tangible.Chart = Chart\n\nconst $ = window.jQuery\n\n$.fn.tangibleChart = function (config = {}) {\n\n  const $el = this // jQuery object\n\n  if ($el.length === 0) {\n    return $el\n  }\n\n  if ($el.length > 1) {\n    $el.each(function () {\n      $(this).tangibleChart(config)\n    })\n    return $el\n  }\n\n  const el = $el[0] // DOMElement\n\n  if (el.tangibleChartLoaded) return\n  el.tangibleChartLoaded = true\n\n  // Merge options from element's data attribtue\n\n  const optionsFromElement = $el.data('tangibleDynamicModuleOptions')\n\n  if (optionsFromElement && typeof optionsFromElement==='object' && !Array.isArray(optionsFromElement)) {\n    // Valid options\n    Object.assign(config, optionsFromElement)\n  }\n\n  // Canvas\n\n  let canvas = $el.find('canvas')[0]\n\n  if (!canvas) {\n    canvas = document.createElement('canvas')\n    $el.append(canvas)\n  }\n\n  const context = canvas.getContext('2d')\n\n  // Data\n\n  // Check child nodes to see if data was passed by extended tags, such as GFChartData\n\n  if ( ! config.data.datasets.length ) {\n\n    const $data = $el.find('[data-tangible-dynamic-module=\"chart-data\"]')\n    if ($data.length) {\n      const data = $data.data('tangibleDynamicModuleOptions')\n      if (typeof data==='object') {\n        Object.assign(config.data, data)\n      }\n    }\n  }\n\n  //console.log('config',config)\n  //console.log(Chart.defaults)\n\n  // Prepare chart options\n\n  const {\n    type,\n    data: {\n      labels,\n      datasets,\n    },\n    options,\n    tickValues,\n    tooltipValues\n  } = config\n\n  const styleOptionNames = [\n    'fill', 'backgroundColor', 'borderColor', 'borderWidth'\n  ]\n\n  datasets.forEach((data, index) => {\n\n    styleOptionNames.forEach((key) => {\n      data[key] = data[key] || config[key]\n    })\n\n    if (!data.borderWidth) data.borderWidth = 1\n\n    // Cast colors for specific types\n    if (type==='bar') {\n      ;['backgroundColor', 'borderColor'].forEach((key) => {\n        if (config[key] && config[key][index]) {\n          data[key] = config[key][index]\n        }\n      })\n    }\n  })\n\n  const chartOptions = {\n    type,\n    data: {\n      labels,\n      datasets,\n    },\n    options,\n    tickValues,\n    tooltipValues\n  }\n\n  // indexAxis - if 'y' it is horizontal bar for example\n\n  const indexAxis = get(chartOptions, 'options.indexAxis');\n  const axis = indexAxis === 'y' ? 'x' : 'y'\n\n  // if we have 'y' value, let's flip axis titles accordingly\n  if(indexAxis === 'y'){\n    const x_title = get(chartOptions, 'options.scales.x.title')\n    const y_title = get(chartOptions, 'options.scales.y.title')\n\n    set(chartOptions, 'options.scales.x.title', y_title)\n    set(chartOptions, 'options.scales.y.title', x_title)\n  }\n\n  // axis chartOptions object path\n  var axes_path = indexAxis === 'y' ? 'options.scales.x' : 'options.scales.y'\n\n  // data from datasets\n\n  var axes_data = get(chartOptions, 'data.datasets[0].data');\n\n  // Set ticks\n\n  const tick_values = get(chartOptions, 'tickValues')\n\n  // Set max value if max_value was passed by extended tags,such as GFChartData, and override\n\n  const set_max_value = (axes_data = [], max) => {\n\n    // Check child nodes to see\n    const $max_value = $el.find('[data-tangible-dynamic-module=\"chart-data\"]')\n    if ($max_value.length) max = $max_value.data('tangibleMaxPossibleValue')\n\n    // If we still don't have max value try to assign maximum value from data array\n    if (!max) {\n      max = axes_data.length ? Math.max(...axes_data) : 0\n    }\n    return max\n  }\n\n  if (tick_values && typeof tick_values==='object' && !Array.isArray(tick_values)) {\n\n    const {\n      min_value,\n      max_value,\n      min_percent,\n      max_percent,\n      show_in,\n      text_before,\n      text_after,\n    } = tick_values\n\n    // show percentage\n\n    const show_in_percent = (show_in && show_in == 'percent') ? true : false\n\n    // text before and after\n\n    const before = (text_before) ? text_before : '';\n    const after = (text_after) ? text_after : '';\n\n    //min values\n\n    const min = (!min_value) ? 0 : min_value;\n    const min_p = (!min_percent) ? 0 : min_percent;\n\n    //max values\n\n    const max = set_max_value(axes_data, max_value);\n    const max_p = (!max_percent) ? 100 : max_percent;\n\n    if(show_in_percent) {\n\n      // check if all data are number and replace with percent\n\n      if (axes_data) {\n        var is_number = true\n        var percent_data = []\n        axes_data.forEach((el,idx) => {\n          if (!Number.isNaN(Number.parseFloat(el)) === false) {\n            is_number = false\n            return\n          }else{\n            percent_data[idx] = Math.round(el/max * 100 * 100) / 100\n          }\n        })\n\n        if (is_number) {\n\n          //callback\n\n          const callback = (value) => {\n            return before + ' ' + value  + '%' + ' ' +after\n          }\n\n          // set all things up\n\n          // percent data\n          set(chartOptions, 'data.datasets[0].data', percent_data)\n\n          // axes min/max percentage\n          set(chartOptions, axes_path +'.min', min_p)\n          set(chartOptions, axes_path +'.max', max_p)\n\n          //callback\n          set(chartOptions, axes_path +'.ticks.callback', callback)\n        }\n      }\n\n    } else if(!show_in_percent && (before || after)) {\n\n      //callback\n\n      const callback = (value) => {\n        return before + ' ' + value  +  ' ' +after\n      }\n\n      // axes min/max percentage\n      set(chartOptions, axes_path +'.min', min)\n      set(chartOptions, axes_path +'.max', max)\n\n      // set\n      set(chartOptions, axes_path +'.ticks.callback', callback)\n    }\n  }\n\n  // Set tooltip\n\n  const tooltip_values = get(chartOptions, 'tooltipValues')\n\n  if (tooltip_values && typeof tooltip_values==='object' && !Array.isArray(tooltip_values)) {\n\n    const {\n      max_value,\n      show, //percent,value,both; default: value\n      show_label,\n      custom_label,\n      custom_label_text\n    } = tooltip_values\n\n    // if to display label\n\n    const if_show_label = (show_label === true || undefined === show_label) ? true : false\n\n    //max value\n\n    const max = set_max_value(axes_data, max_value);\n\n    // tooltip enabled\n\n    const tooltip_enabled = get(chartOptions, 'options.plugins.tooltip.enabled')\n\n    if(tooltip_enabled === true || undefined === tooltip_enabled){\n\n      let callbacks = {}\n\n      if(show === 'percent'){\n\n        //callback\n\n        const label_cb= (context) => {\n\n          var label = context.dataset.label || ''\n\n          if(custom_label === true) label =  custom_label_text ? custom_label_text : ''\n\n          if (label) {\n            label += ': '\n          }\n\n          //if ticks set in percent data already overriden, just add '%', otherwise calculate percent\n          if (context.parsed[axis] !== null) {\n            if(tick_values.show_in == 'percent') {\n              label += context.parsed[axis] + '%'\n            } else{\n              const data =axes_data[context.dataIndex]\n              const percent = Math.round(data/max * 100 * 100) / 100\n              label += percent + '%'\n            }\n          }\n\n          return if_show_label ? label : ''\n        }\n\n        callbacks.label = label_cb\n\n      } else if(show === 'both'){\n\n        //callback\n\n        const label_cb = (context) => {\n\n          const data =axes_data[context.dataIndex]\n          var label = context.dataset.label || ''\n\n          if(custom_label === true) label =  custom_label_text ? custom_label_text : ''\n\n          if (label) {\n            label += ': '\n          }\n\n          if (context.parsed[axis] !== null) {\n            label += data\n          }\n\n          return if_show_label ? label : ''\n        }\n\n        // afterBody callback\n\n        const afterBody_cb = (context) => {\n\n          var after_body = '';\n\n          //if ticks set in percent data are already overriden, just add '%', otherwise calculate percent\n          if (context[0].parsed[axis] !== null) {\n            if(tick_values.show_in == 'percent') {\n              after_body += '('+context[0].parsed[axis]+'%'+')'\n            } else{\n              const data =axes_data[context[0].dataIndex]\n              const percent = Math.round(data/max * 100 * 100) / 100\n              after_body += '('+percent+'%'+')'\n            }\n          }\n\n          return if_show_label ? after_body : ''\n        }\n\n        callbacks.label = label_cb\n        callbacks.afterBody = afterBody_cb\n\n      } else {\n\n        //callback\n\n        const label_cb = (context) => {\n\n          const data = axes_data[context.dataIndex]\n          var label = context.dataset.label || ''\n\n          if(custom_label === true) label =  custom_label_text ? custom_label_text : ''\n\n          if (label) {\n            label += ': '\n          }\n\n          if (context.parsed[axis] !== null) {\n            if(tick_values.show_in == 'percent' && show !=='value') {\n              label +=context.parsed[axis]+'%'\n            } else{\n              label += data\n            }\n          }\n\n          return if_show_label ? label : ''\n        }\n\n        callbacks.label = label_cb\n      }\n\n      set(chartOptions, 'options.plugins.tooltip.callbacks',callbacks)\n    }\n  }\n\n  // Set datalabels\n\n  const datalabels = get(chartOptions, 'options.plugins.datalabels')\n\n  //percent label\n\n  const pl = get(datalabels, 'percent_label')\n\n  //value label\n\n  const vl = get(datalabels, 'value_label')\n\n  if(get(datalabels, 'display') === true  || undefined === get(datalabels, 'display')) {\n\n    //max value\n\n    const max = set_max_value(axes_data, 0);\n\n    const pf = (value, context) => {\n      if(tick_values.show_in == 'percent') {\n        return value + '%'\n      } else{\n        const data =axes_data[context.dataIndex]\n        const percent = Math.round(data/max * 100 * 100) / 100\n        return percent + '%'\n      }\n    }\n\n    const vf = (value, context) => {\n      if(tick_values.show_in == 'percent') {\n        return axes_data[context.dataIndex]\n      } else{\n        return value\n      }\n    }\n\n    var labels_data = [pl,vl]\n\n    labels_data.forEach((data, index) => {\n\n      var formatter = data === pl ? pf : vf\n      var label_name = data === pl ? 'percent' : 'value'\n\n      var label={\n        'backgroundColor': get(data, 'backgroundColor') ? get(data, 'backgroundColor') : 'rgba(0,0,0,0)',\n        'borderColor': get(data, 'borderColor') ? get(data, 'borderColor') : 'rgba(0,0,0,0)',\n        'borderRadius': get(data, 'borderRadius') ? get(data, 'borderRadius') : '0',\n        'borderWidth': get(data, 'borderWidth') ? get(data, 'borderWidth') : '0',\n        'color': get(data, 'color') ? get(data, 'color') : '',\n        'font': get(data, 'font') ? get(data, 'font') : {},\n        'padding': get(data, 'padding') ? get(data, 'padding') : {},\n        'align': get(data, 'align') ? get(data, 'align') : (data === pl ? 'end' :'start'),\n        'anchor': get(data, 'anchor') ? get(data, 'anchor') : (data === pl ? 'start' :'end'),\n        'offset': get(data, 'offset') ? get(data, 'offset') : (data === pl ? '0' : '4'),\n        'formatter': formatter,\n      }\n\n      if(get(data, 'display_label') === true || undefined ===get(data, 'display_label'))\n        set(chartOptions, 'options.plugins.datalabels.labels.'+label_name, label)\n    })\n\n  } else{\n    set(chartOptions, 'options.plugins.datalabels.display', false)\n  }\n\n  // Create chart\n\n  console.log('Tangible chart', chartOptions)\n\n  const chart = new Chart(context, chartOptions)\n\n  // Hang it on DOMElement for convenience\n  $el.data('chart', chart)\n\n  return chart\n}\n\n$('.tangible-chart').tangibleChart()\n","import Chart from 'chart.js'\nimport ChartDataLabels from 'chartjs-plugin-datalabels'\n// Register the plugin to all charts:\nChart.register(ChartDataLabels);\n\nimport get from 'lodash/get'\nimport set from 'lodash/set'\n\nwindow.Tangible = window.Tangible || {}\nwindow.Tangible.Chart = Chart\n\nconst $ = window.jQuery\n\n$.fn.tangibleChart = function (config = {}) {\n\n  const $el = this // jQuery object\n\n  if ($el.length === 0) {\n    return $el\n  }\n\n  if ($el.length > 1) {\n    $el.each(function () {\n      $(this).tangibleChart(config)\n    })\n    return $el\n  }\n\n  const el = $el[0] // DOMElement\n\n  if (el.tangibleChartLoaded) return\n  el.tangibleChartLoaded = true\n\n  // Merge options from element's data attribtue\n\n  const optionsFromElement = $el.data('tangibleDynamicModuleOptions')\n\n  if (optionsFromElement && typeof optionsFromElement==='object' && !Array.isArray(optionsFromElement)) {\n    // Valid options\n    Object.assign(config, optionsFromElement)\n  }\n\n  // Canvas\n\n  let canvas = $el.find('canvas')[0]\n\n  if (!canvas) {\n    canvas = document.createElement('canvas')\n    $el.append(canvas)\n  }\n\n  const context = canvas.getContext('2d')\n\n  // Data\n\n  // Check child nodes to see if data was passed by extended tags, such as GFChartData\n\n  if ( ! config.data.datasets.length ) {\n\n    const $data = $el.find('[data-tangible-dynamic-module=\"chart-data\"]')\n    if ($data.length) {\n      const data = $data.data('tangibleDynamicModuleOptions')\n      if (typeof data==='object') {\n        Object.assign(config.data, data)\n      }\n    }\n  }\n\n  //console.log('config',config)\n  //console.log(Chart.defaults)\n\n  // Prepare chart options\n\n  const {\n    type,\n    data: {\n      labels,\n      datasets,\n    },\n    options,\n    tickValues,\n    tooltipValues\n  } = config\n\n  const styleOptionNames = [\n    'fill', 'backgroundColor', 'borderColor', 'borderWidth'\n  ]\n\n  datasets.forEach((data, index) => {\n\n    styleOptionNames.forEach((key) => {\n      data[key] = data[key] || config[key]\n    })\n\n    if (!data.borderWidth) data.borderWidth = 1\n\n    // Cast colors for specific types\n    if (type==='bar') {\n      ;['backgroundColor', 'borderColor'].forEach((key) => {\n        if (config[key] && config[key][index]) {\n          data[key] = config[key][index]\n        }\n      })\n    }\n  })\n\n  const chartOptions = {\n    type,\n    data: {\n      labels,\n      datasets,\n    },\n    options,\n    tickValues,\n    tooltipValues\n  }\n\n  // indexAxis - if 'y' it is horizontal bar for example\n\n  const indexAxis = get(chartOptions, 'options.indexAxis');\n  const axis = indexAxis === 'y' ? 'x' : 'y'\n\n  // if we have 'y' value, let's flip axis titles accordingly\n  if(indexAxis === 'y'){\n    const x_title = get(chartOptions, 'options.scales.x.title')\n    const y_title = get(chartOptions, 'options.scales.y.title')\n\n    set(chartOptions, 'options.scales.x.title', y_title)\n    set(chartOptions, 'options.scales.y.title', x_title)\n  }\n\n  // axis chartOptions object path\n  var axes_path = indexAxis === 'y' ? 'options.scales.x' : 'options.scales.y'\n\n  // data from datasets\n\n  var axes_data = get(chartOptions, 'data.datasets[0].data');\n\n  // Set ticks\n\n  const tick_values = get(chartOptions, 'tickValues')\n\n  // Set max value if max_value was passed by extended tags,such as GFChartData, and override\n\n  const set_max_value = (axes_data = [], max) => {\n\n    // Check child nodes to see\n    const $max_value = $el.find('[data-tangible-dynamic-module=\"chart-data\"]')\n    if ($max_value.length) max = $max_value.data('tangibleMaxPossibleValue')\n\n    // If we still don't have max value try to assign maximum value from data array\n    if (!max) {\n      max = axes_data.length ? Math.max(...axes_data) : 0\n    }\n    return max\n  }\n\n  if (tick_values && typeof tick_values==='object' && !Array.isArray(tick_values)) {\n\n    const {\n      min_value,\n      max_value,\n      min_percent,\n      max_percent,\n      show_in,\n      text_before,\n      text_after,\n    } = tick_values\n\n    // show percentage\n\n    const show_in_percent = (show_in && show_in == 'percent') ? true : false\n\n    // text before and after\n\n    const before = (text_before) ? text_before : '';\n    const after = (text_after) ? text_after : '';\n\n    //min values\n\n    const min = (!min_value) ? 0 : min_value;\n    const min_p = (!min_percent) ? 0 : min_percent;\n\n    //max values\n\n    const max = set_max_value(axes_data, max_value);\n    const max_p = (!max_percent) ? 100 : max_percent;\n\n    if(show_in_percent) {\n\n      // check if all data are number and replace with percent\n\n      if (axes_data) {\n        var is_number = true\n        var percent_data = []\n        axes_data.forEach((el,idx) => {\n          if (!Number.isNaN(Number.parseFloat(el)) === false) {\n            is_number = false\n            return\n          }else{\n            percent_data[idx] = Math.round(el/max * 100 * 100) / 100\n          }\n        })\n\n        if (is_number) {\n\n          //callback\n\n          const callback = (value) => {\n            return before + ' ' + value  + '%' + ' ' +after\n          }\n\n          // set all things up\n\n          // percent data\n          set(chartOptions, 'data.datasets[0].data', percent_data)\n\n          // axes min/max percentage\n          set(chartOptions, axes_path +'.min', min_p)\n          set(chartOptions, axes_path +'.max', max_p)\n\n          //callback\n          set(chartOptions, axes_path +'.ticks.callback', callback)\n        }\n      }\n\n    } else if(!show_in_percent && (before || after)) {\n\n      //callback\n\n      const callback = (value) => {\n        return before + ' ' + value  +  ' ' +after\n      }\n\n      // axes min/max percentage\n      set(chartOptions, axes_path +'.min', min)\n      set(chartOptions, axes_path +'.max', max)\n\n      // set\n      set(chartOptions, axes_path +'.ticks.callback', callback)\n    }\n  }\n\n  // Set tooltip\n\n  const tooltip_values = get(chartOptions, 'tooltipValues')\n\n  if (tooltip_values && typeof tooltip_values==='object' && !Array.isArray(tooltip_values)) {\n\n    const {\n      max_value,\n      show, //percent,value,both; default: value\n      show_label,\n      custom_label,\n      custom_label_text\n    } = tooltip_values\n\n    // if to display label\n\n    const if_show_label = (show_label === true || undefined === show_label) ? true : false\n\n    //max value\n\n    const max = set_max_value(axes_data, max_value);\n\n    // tooltip enabled\n\n    const tooltip_enabled = get(chartOptions, 'options.plugins.tooltip.enabled')\n\n    if(tooltip_enabled === true || undefined === tooltip_enabled){\n\n      let callbacks = {}\n\n      if(show === 'percent'){\n\n        //callback\n\n        const label_cb= (context) => {\n\n          var label = context.dataset.label || ''\n\n          if(custom_label === true) label =  custom_label_text ? custom_label_text : ''\n\n          if (label) {\n            label += ': '\n          }\n\n          //if ticks set in percent data already overriden, just add '%', otherwise calculate percent\n          if (context.parsed[axis] !== null) {\n            if(tick_values.show_in == 'percent') {\n              label += context.parsed[axis] + '%'\n            } else{\n              const data =axes_data[context.dataIndex]\n              const percent = Math.round(data/max * 100 * 100) / 100\n              label += percent + '%'\n            }\n          }\n\n          return if_show_label ? label : ''\n        }\n\n        callbacks.label = label_cb\n\n      } else if(show === 'both'){\n\n        //callback\n\n        const label_cb = (context) => {\n\n          const data =axes_data[context.dataIndex]\n          var label = context.dataset.label || ''\n\n          if(custom_label === true) label =  custom_label_text ? custom_label_text : ''\n\n          if (label) {\n            label += ': '\n          }\n\n          if (context.parsed[axis] !== null) {\n            label += data\n          }\n\n          return if_show_label ? label : ''\n        }\n\n        // afterBody callback\n\n        const afterBody_cb = (context) => {\n\n          var after_body = '';\n\n          //if ticks set in percent data are already overriden, just add '%', otherwise calculate percent\n          if (context[0].parsed[axis] !== null) {\n            if(tick_values.show_in == 'percent') {\n              after_body += '('+context[0].parsed[axis]+'%'+')'\n            } else{\n              const data =axes_data[context[0].dataIndex]\n              const percent = Math.round(data/max * 100 * 100) / 100\n              after_body += '('+percent+'%'+')'\n            }\n          }\n\n          return if_show_label ? after_body : ''\n        }\n\n        callbacks.label = label_cb\n        callbacks.afterBody = afterBody_cb\n\n      } else {\n\n        //callback\n\n        const label_cb = (context) => {\n\n          const data = axes_data[context.dataIndex]\n          var label = context.dataset.label || ''\n\n          if(custom_label === true) label =  custom_label_text ? custom_label_text : ''\n\n          if (label) {\n            label += ': '\n          }\n\n          if (context.parsed[axis] !== null) {\n            if(tick_values.show_in == 'percent' && show !=='value') {\n              label +=context.parsed[axis]+'%'\n            } else{\n              label += data\n            }\n          }\n\n          return if_show_label ? label : ''\n        }\n\n        callbacks.label = label_cb\n      }\n\n      set(chartOptions, 'options.plugins.tooltip.callbacks',callbacks)\n    }\n  }\n\n  // Set datalabels\n\n  const datalabels = get(chartOptions, 'options.plugins.datalabels')\n\n  //percent label\n\n  const pl = get(datalabels, 'percent_label')\n\n  //value label\n\n  const vl = get(datalabels, 'value_label')\n\n  if(get(datalabels, 'display') === true  || undefined === get(datalabels, 'display')) {\n\n    //max value\n\n    const max = set_max_value(axes_data, 0);\n\n    const pf = (value, context) => {\n      if(tick_values.show_in == 'percent') {\n        return value + '%'\n      } else{\n        const data =axes_data[context.dataIndex]\n        const percent = Math.round(data/max * 100 * 100) / 100\n        return percent + '%'\n      }\n    }\n\n    const vf = (value, context) => {\n      if(tick_values.show_in == 'percent') {\n        return axes_data[context.dataIndex]\n      } else{\n        return value\n      }\n    }\n\n    var labels_data = [pl,vl]\n\n    labels_data.forEach((data, index) => {\n\n      var formatter = data === pl ? pf : vf\n      var label_name = data === pl ? 'percent' : 'value'\n\n      var label={\n        'backgroundColor': get(data, 'backgroundColor') ? get(data, 'backgroundColor') : 'rgba(0,0,0,0)',\n        'borderColor': get(data, 'borderColor') ? get(data, 'borderColor') : 'rgba(0,0,0,0)',\n        'borderRadius': get(data, 'borderRadius') ? get(data, 'borderRadius') : '0',\n        'borderWidth': get(data, 'borderWidth') ? get(data, 'borderWidth') : '0',\n        'color': get(data, 'color') ? get(data, 'color') : '',\n        'font': get(data, 'font') ? get(data, 'font') : {},\n        'padding': get(data, 'padding') ? get(data, 'padding') : {},\n        'align': get(data, 'align') ? get(data, 'align') : (data === pl ? 'end' :'start'),\n        'anchor': get(data, 'anchor') ? get(data, 'anchor') : (data === pl ? 'start' :'end'),\n        'offset': get(data, 'offset') ? get(data, 'offset') : (data === pl ? '0' : '4'),\n        'formatter': formatter,\n      }\n\n      if(get(data, 'display_label') === true || undefined ===get(data, 'display_label'))\n        set(chartOptions, 'options.plugins.datalabels.labels.'+label_name, label)\n    })\n\n  } else{\n    set(chartOptions, 'options.plugins.datalabels.display', false)\n  }\n\n  // Create chart\n\n  console.log('Tangible chart', chartOptions)\n\n  const chart = new Chart(context, chartOptions)\n\n  // Hang it on DOMElement for convenience\n  $el.data('chart', chart)\n\n  return chart\n}\n\n$('.tangible-chart').tangibleChart()\n","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nmodule.exports = _iterableToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\n\nvar iterableToArray = require(\"./iterableToArray.js\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n\n    module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n\n    module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","/*!\n * Chart.js v3.5.1\n * https://www.chartjs.org\n * (c) 2021 Chart.js Contributors\n * Released under the MIT License\n */\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\ntypeof define === 'function' && define.amd ? define(factory) :\n(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Chart = factory());\n}(this, (function () { 'use strict';\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n  return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\nconst requestAnimFrame = (function() {\n  if (typeof window === 'undefined') {\n    return function(callback) {\n      return callback();\n    };\n  }\n  return window.requestAnimationFrame;\n}());\nfunction throttled(fn, thisArg, updateFn) {\n  const updateArgs = updateFn || ((args) => Array.prototype.slice.call(args));\n  let ticking = false;\n  let args = [];\n  return function(...rest) {\n    args = updateArgs(rest);\n    if (!ticking) {\n      ticking = true;\n      requestAnimFrame.call(window, () => {\n        ticking = false;\n        fn.apply(thisArg, args);\n      });\n    }\n  };\n}\nfunction debounce(fn, delay) {\n  let timeout;\n  return function() {\n    if (delay) {\n      clearTimeout(timeout);\n      timeout = setTimeout(fn, delay);\n    } else {\n      fn();\n    }\n    return delay;\n  };\n}\nconst _toLeftRightCenter = (align) => align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\nconst _alignStartEnd = (align, start, end) => align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\nconst _textX = (align, left, right, rtl) => {\n  const check = rtl ? 'left' : 'right';\n  return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    const me = this;\n    if (me._request) {\n      return;\n    }\n    me._running = true;\n    me._request = requestAnimFrame.call(window, () => {\n      me._update();\n      me._request = null;\n      if (me._running) {\n        me._refresh();\n      }\n    });\n  }\n  _update(date = Date.now()) {\n    const me = this;\n    let remaining = 0;\n    me._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        me._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        me._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    me._lastDate = date;\n    if (remaining === 0) {\n      me._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = new Animator();\n\n/*!\n * @kurkle/color v0.1.9\n * https://github.com/kurkle/color#readme\n * (c) 2020 Jukka Kurkela\n * Released under the MIT License\n */\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = '0123456789ABCDEF';\nconst h1 = (b) => hex[b & 0xF];\nconst h2 = (b) => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = (b) => (((b & 0xF0) >> 4) === (b & 0xF));\nfunction isShort(v) {\n\treturn eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\n}\nfunction hexParse(str) {\n\tvar len = str.length;\n\tvar ret;\n\tif (str[0] === '#') {\n\t\tif (len === 4 || len === 5) {\n\t\t\tret = {\n\t\t\t\tr: 255 & map$1[str[1]] * 17,\n\t\t\t\tg: 255 & map$1[str[2]] * 17,\n\t\t\t\tb: 255 & map$1[str[3]] * 17,\n\t\t\t\ta: len === 5 ? map$1[str[4]] * 17 : 255\n\t\t\t};\n\t\t} else if (len === 7 || len === 9) {\n\t\t\tret = {\n\t\t\t\tr: map$1[str[1]] << 4 | map$1[str[2]],\n\t\t\t\tg: map$1[str[3]] << 4 | map$1[str[4]],\n\t\t\t\tb: map$1[str[5]] << 4 | map$1[str[6]],\n\t\t\t\ta: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n\t\t\t};\n\t\t}\n\t}\n\treturn ret;\n}\nfunction hexString(v) {\n\tvar f = isShort(v) ? h1 : h2;\n\treturn v\n\t\t? '#' + f(v.r) + f(v.g) + f(v.b) + (v.a < 255 ? f(v.a) : '')\n\t\t: v;\n}\nfunction round(v) {\n\treturn v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n\treturn lim(round(v * 2.55), 0, 255);\n}\nfunction n2b(v) {\n\treturn lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n\treturn lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n\treturn lim(round(v * 100), 0, 100);\n}\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n\tconst m = RGB_RE.exec(str);\n\tlet a = 255;\n\tlet r, g, b;\n\tif (!m) {\n\t\treturn;\n\t}\n\tif (m[7] !== r) {\n\t\tconst v = +m[7];\n\t\ta = 255 & (m[8] ? p2b(v) : v * 255);\n\t}\n\tr = +m[1];\n\tg = +m[3];\n\tb = +m[5];\n\tr = 255 & (m[2] ? p2b(r) : r);\n\tg = 255 & (m[4] ? p2b(g) : g);\n\tb = 255 & (m[6] ? p2b(b) : b);\n\treturn {\n\t\tr: r,\n\t\tg: g,\n\t\tb: b,\n\t\ta: a\n\t};\n}\nfunction rgbString(v) {\n\treturn v && (\n\t\tv.a < 255\n\t\t\t? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n\t\t\t: `rgb(${v.r}, ${v.g}, ${v.b})`\n\t);\n}\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n\tconst a = s * Math.min(l, 1 - l);\n\tconst f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n\treturn [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n\tconst f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n\treturn [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n\tconst rgb = hsl2rgbn(h, 1, 0.5);\n\tlet i;\n\tif (w + b > 1) {\n\t\ti = 1 / (w + b);\n\t\tw *= i;\n\t\tb *= i;\n\t}\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] *= 1 - w - b;\n\t\trgb[i] += w;\n\t}\n\treturn rgb;\n}\nfunction rgb2hsl(v) {\n\tconst range = 255;\n\tconst r = v.r / range;\n\tconst g = v.g / range;\n\tconst b = v.b / range;\n\tconst max = Math.max(r, g, b);\n\tconst min = Math.min(r, g, b);\n\tconst l = (max + min) / 2;\n\tlet h, s, d;\n\tif (max !== min) {\n\t\td = max - min;\n\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t\th = max === r\n\t\t\t? ((g - b) / d) + (g < b ? 6 : 0)\n\t\t\t: max === g\n\t\t\t\t? (b - r) / d + 2\n\t\t\t\t: (r - g) / d + 4;\n\t\th = h * 60 + 0.5;\n\t}\n\treturn [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n\treturn (\n\t\tArray.isArray(a)\n\t\t\t? f(a[0], a[1], a[2])\n\t\t\t: f(a, b, c)\n\t).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n\treturn calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n\treturn calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n\treturn calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n\treturn (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n\tconst m = HUE_RE.exec(str);\n\tlet a = 255;\n\tlet v;\n\tif (!m) {\n\t\treturn;\n\t}\n\tif (m[5] !== v) {\n\t\ta = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n\t}\n\tconst h = hue(+m[2]);\n\tconst p1 = +m[3] / 100;\n\tconst p2 = +m[4] / 100;\n\tif (m[1] === 'hwb') {\n\t\tv = hwb2rgb(h, p1, p2);\n\t} else if (m[1] === 'hsv') {\n\t\tv = hsv2rgb(h, p1, p2);\n\t} else {\n\t\tv = hsl2rgb(h, p1, p2);\n\t}\n\treturn {\n\t\tr: v[0],\n\t\tg: v[1],\n\t\tb: v[2],\n\t\ta: a\n\t};\n}\nfunction rotate(v, deg) {\n\tvar h = rgb2hsl(v);\n\th[0] = hue(h[0] + deg);\n\th = hsl2rgb(h);\n\tv.r = h[0];\n\tv.g = h[1];\n\tv.b = h[2];\n}\nfunction hslString(v) {\n\tif (!v) {\n\t\treturn;\n\t}\n\tconst a = rgb2hsl(v);\n\tconst h = a[0];\n\tconst s = n2p(a[1]);\n\tconst l = n2p(a[2]);\n\treturn v.a < 255\n\t\t? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n\t\t: `hsl(${h}, ${s}%, ${l}%)`;\n}\nconst map$1$1 = {\n\tx: 'dark',\n\tZ: 'light',\n\tY: 're',\n\tX: 'blu',\n\tW: 'gr',\n\tV: 'medium',\n\tU: 'slate',\n\tA: 'ee',\n\tT: 'ol',\n\tS: 'or',\n\tB: 'ra',\n\tC: 'lateg',\n\tD: 'ights',\n\tR: 'in',\n\tQ: 'turquois',\n\tE: 'hi',\n\tP: 'ro',\n\tO: 'al',\n\tN: 'le',\n\tM: 'de',\n\tL: 'yello',\n\tF: 'en',\n\tK: 'ch',\n\tG: 'arks',\n\tH: 'ea',\n\tI: 'ightg',\n\tJ: 'wh'\n};\nconst names = {\n\tOiceXe: 'f0f8ff',\n\tantiquewEte: 'faebd7',\n\taqua: 'ffff',\n\taquamarRe: '7fffd4',\n\tazuY: 'f0ffff',\n\tbeige: 'f5f5dc',\n\tbisque: 'ffe4c4',\n\tblack: '0',\n\tblanKedOmond: 'ffebcd',\n\tXe: 'ff',\n\tXeviTet: '8a2be2',\n\tbPwn: 'a52a2a',\n\tburlywood: 'deb887',\n\tcaMtXe: '5f9ea0',\n\tKartYuse: '7fff00',\n\tKocTate: 'd2691e',\n\tcSO: 'ff7f50',\n\tcSnflowerXe: '6495ed',\n\tcSnsilk: 'fff8dc',\n\tcrimson: 'dc143c',\n\tcyan: 'ffff',\n\txXe: '8b',\n\txcyan: '8b8b',\n\txgTMnPd: 'b8860b',\n\txWay: 'a9a9a9',\n\txgYF: '6400',\n\txgYy: 'a9a9a9',\n\txkhaki: 'bdb76b',\n\txmagFta: '8b008b',\n\txTivegYF: '556b2f',\n\txSange: 'ff8c00',\n\txScEd: '9932cc',\n\txYd: '8b0000',\n\txsOmon: 'e9967a',\n\txsHgYF: '8fbc8f',\n\txUXe: '483d8b',\n\txUWay: '2f4f4f',\n\txUgYy: '2f4f4f',\n\txQe: 'ced1',\n\txviTet: '9400d3',\n\tdAppRk: 'ff1493',\n\tdApskyXe: 'bfff',\n\tdimWay: '696969',\n\tdimgYy: '696969',\n\tdodgerXe: '1e90ff',\n\tfiYbrick: 'b22222',\n\tflSOwEte: 'fffaf0',\n\tfoYstWAn: '228b22',\n\tfuKsia: 'ff00ff',\n\tgaRsbSo: 'dcdcdc',\n\tghostwEte: 'f8f8ff',\n\tgTd: 'ffd700',\n\tgTMnPd: 'daa520',\n\tWay: '808080',\n\tgYF: '8000',\n\tgYFLw: 'adff2f',\n\tgYy: '808080',\n\thoneyMw: 'f0fff0',\n\thotpRk: 'ff69b4',\n\tRdianYd: 'cd5c5c',\n\tRdigo: '4b0082',\n\tivSy: 'fffff0',\n\tkhaki: 'f0e68c',\n\tlavFMr: 'e6e6fa',\n\tlavFMrXsh: 'fff0f5',\n\tlawngYF: '7cfc00',\n\tNmoncEffon: 'fffacd',\n\tZXe: 'add8e6',\n\tZcSO: 'f08080',\n\tZcyan: 'e0ffff',\n\tZgTMnPdLw: 'fafad2',\n\tZWay: 'd3d3d3',\n\tZgYF: '90ee90',\n\tZgYy: 'd3d3d3',\n\tZpRk: 'ffb6c1',\n\tZsOmon: 'ffa07a',\n\tZsHgYF: '20b2aa',\n\tZskyXe: '87cefa',\n\tZUWay: '778899',\n\tZUgYy: '778899',\n\tZstAlXe: 'b0c4de',\n\tZLw: 'ffffe0',\n\tlime: 'ff00',\n\tlimegYF: '32cd32',\n\tlRF: 'faf0e6',\n\tmagFta: 'ff00ff',\n\tmaPon: '800000',\n\tVaquamarRe: '66cdaa',\n\tVXe: 'cd',\n\tVScEd: 'ba55d3',\n\tVpurpN: '9370db',\n\tVsHgYF: '3cb371',\n\tVUXe: '7b68ee',\n\tVsprRggYF: 'fa9a',\n\tVQe: '48d1cc',\n\tVviTetYd: 'c71585',\n\tmidnightXe: '191970',\n\tmRtcYam: 'f5fffa',\n\tmistyPse: 'ffe4e1',\n\tmoccasR: 'ffe4b5',\n\tnavajowEte: 'ffdead',\n\tnavy: '80',\n\tTdlace: 'fdf5e6',\n\tTive: '808000',\n\tTivedBb: '6b8e23',\n\tSange: 'ffa500',\n\tSangeYd: 'ff4500',\n\tScEd: 'da70d6',\n\tpOegTMnPd: 'eee8aa',\n\tpOegYF: '98fb98',\n\tpOeQe: 'afeeee',\n\tpOeviTetYd: 'db7093',\n\tpapayawEp: 'ffefd5',\n\tpHKpuff: 'ffdab9',\n\tperu: 'cd853f',\n\tpRk: 'ffc0cb',\n\tplum: 'dda0dd',\n\tpowMrXe: 'b0e0e6',\n\tpurpN: '800080',\n\tYbeccapurpN: '663399',\n\tYd: 'ff0000',\n\tPsybrown: 'bc8f8f',\n\tPyOXe: '4169e1',\n\tsaddNbPwn: '8b4513',\n\tsOmon: 'fa8072',\n\tsandybPwn: 'f4a460',\n\tsHgYF: '2e8b57',\n\tsHshell: 'fff5ee',\n\tsiFna: 'a0522d',\n\tsilver: 'c0c0c0',\n\tskyXe: '87ceeb',\n\tUXe: '6a5acd',\n\tUWay: '708090',\n\tUgYy: '708090',\n\tsnow: 'fffafa',\n\tsprRggYF: 'ff7f',\n\tstAlXe: '4682b4',\n\ttan: 'd2b48c',\n\tteO: '8080',\n\ttEstN: 'd8bfd8',\n\ttomato: 'ff6347',\n\tQe: '40e0d0',\n\tviTet: 'ee82ee',\n\tJHt: 'f5deb3',\n\twEte: 'ffffff',\n\twEtesmoke: 'f5f5f5',\n\tLw: 'ffff00',\n\tLwgYF: '9acd32'\n};\nfunction unpack() {\n\tconst unpacked = {};\n\tconst keys = Object.keys(names);\n\tconst tkeys = Object.keys(map$1$1);\n\tlet i, j, k, ok, nk;\n\tfor (i = 0; i < keys.length; i++) {\n\t\tok = nk = keys[i];\n\t\tfor (j = 0; j < tkeys.length; j++) {\n\t\t\tk = tkeys[j];\n\t\t\tnk = nk.replace(k, map$1$1[k]);\n\t\t}\n\t\tk = parseInt(names[ok], 16);\n\t\tunpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n\t}\n\treturn unpacked;\n}\nlet names$1;\nfunction nameParse(str) {\n\tif (!names$1) {\n\t\tnames$1 = unpack();\n\t\tnames$1.transparent = [0, 0, 0, 0];\n\t}\n\tconst a = names$1[str.toLowerCase()];\n\treturn a && {\n\t\tr: a[0],\n\t\tg: a[1],\n\t\tb: a[2],\n\t\ta: a.length === 4 ? a[3] : 255\n\t};\n}\nfunction modHSL(v, i, ratio) {\n\tif (v) {\n\t\tlet tmp = rgb2hsl(v);\n\t\ttmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n\t\ttmp = hsl2rgb(tmp);\n\t\tv.r = tmp[0];\n\t\tv.g = tmp[1];\n\t\tv.b = tmp[2];\n\t}\n}\nfunction clone$1(v, proto) {\n\treturn v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n\tvar v = {r: 0, g: 0, b: 0, a: 255};\n\tif (Array.isArray(input)) {\n\t\tif (input.length >= 3) {\n\t\t\tv = {r: input[0], g: input[1], b: input[2], a: 255};\n\t\t\tif (input.length > 3) {\n\t\t\t\tv.a = n2b(input[3]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tv = clone$1(input, {r: 0, g: 0, b: 0, a: 1});\n\t\tv.a = n2b(v.a);\n\t}\n\treturn v;\n}\nfunction functionParse(str) {\n\tif (str.charAt(0) === 'r') {\n\t\treturn rgbParse(str);\n\t}\n\treturn hueParse(str);\n}\nclass Color {\n\tconstructor(input) {\n\t\tif (input instanceof Color) {\n\t\t\treturn input;\n\t\t}\n\t\tconst type = typeof input;\n\t\tlet v;\n\t\tif (type === 'object') {\n\t\t\tv = fromObject(input);\n\t\t} else if (type === 'string') {\n\t\t\tv = hexParse(input) || nameParse(input) || functionParse(input);\n\t\t}\n\t\tthis._rgb = v;\n\t\tthis._valid = !!v;\n\t}\n\tget valid() {\n\t\treturn this._valid;\n\t}\n\tget rgb() {\n\t\tvar v = clone$1(this._rgb);\n\t\tif (v) {\n\t\t\tv.a = b2n(v.a);\n\t\t}\n\t\treturn v;\n\t}\n\tset rgb(obj) {\n\t\tthis._rgb = fromObject(obj);\n\t}\n\trgbString() {\n\t\treturn this._valid ? rgbString(this._rgb) : this._rgb;\n\t}\n\thexString() {\n\t\treturn this._valid ? hexString(this._rgb) : this._rgb;\n\t}\n\thslString() {\n\t\treturn this._valid ? hslString(this._rgb) : this._rgb;\n\t}\n\tmix(color, weight) {\n\t\tconst me = this;\n\t\tif (color) {\n\t\t\tconst c1 = me.rgb;\n\t\t\tconst c2 = color.rgb;\n\t\t\tlet w2;\n\t\t\tconst p = weight === w2 ? 0.5 : weight;\n\t\t\tconst w = 2 * p - 1;\n\t\t\tconst a = c1.a - c2.a;\n\t\t\tconst w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\t\tw2 = 1 - w1;\n\t\t\tc1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n\t\t\tc1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n\t\t\tc1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n\t\t\tc1.a = p * c1.a + (1 - p) * c2.a;\n\t\t\tme.rgb = c1;\n\t\t}\n\t\treturn me;\n\t}\n\tclone() {\n\t\treturn new Color(this.rgb);\n\t}\n\talpha(a) {\n\t\tthis._rgb.a = n2b(a);\n\t\treturn this;\n\t}\n\tclearer(ratio) {\n\t\tconst rgb = this._rgb;\n\t\trgb.a *= 1 - ratio;\n\t\treturn this;\n\t}\n\tgreyscale() {\n\t\tconst rgb = this._rgb;\n\t\tconst val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n\t\trgb.r = rgb.g = rgb.b = val;\n\t\treturn this;\n\t}\n\topaquer(ratio) {\n\t\tconst rgb = this._rgb;\n\t\trgb.a *= 1 + ratio;\n\t\treturn this;\n\t}\n\tnegate() {\n\t\tconst v = this._rgb;\n\t\tv.r = 255 - v.r;\n\t\tv.g = 255 - v.g;\n\t\tv.b = 255 - v.b;\n\t\treturn this;\n\t}\n\tlighten(ratio) {\n\t\tmodHSL(this._rgb, 2, ratio);\n\t\treturn this;\n\t}\n\tdarken(ratio) {\n\t\tmodHSL(this._rgb, 2, -ratio);\n\t\treturn this;\n\t}\n\tsaturate(ratio) {\n\t\tmodHSL(this._rgb, 1, ratio);\n\t\treturn this;\n\t}\n\tdesaturate(ratio) {\n\t\tmodHSL(this._rgb, 1, -ratio);\n\t\treturn this;\n\t}\n\trotate(deg) {\n\t\trotate(this._rgb, deg);\n\t\treturn this;\n\t}\n}\nfunction index_esm(input) {\n\treturn new Color(input);\n}\n\nconst isPatternOrGradient = (value) => value instanceof CanvasGradient || value instanceof CanvasPattern;\nfunction color(value) {\n  return isPatternOrGradient(value) ? value : index_esm(value);\n}\nfunction getHoverColor(value) {\n  return isPatternOrGradient(value)\n    ? value\n    : index_esm(value).saturate(0.5).darken(0.1).hexString();\n}\n\nfunction noop() {}\nconst uid = (function() {\n  let id = 0;\n  return function() {\n    return id++;\n  };\n}());\nfunction isNullOrUndef(value) {\n  return value === null || typeof value === 'undefined';\n}\nfunction isArray(value) {\n  if (Array.isArray && Array.isArray(value)) {\n    return true;\n  }\n  const type = Object.prototype.toString.call(value);\n  if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {\n    return true;\n  }\n  return false;\n}\nfunction isObject(value) {\n  return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\nconst isNumberFinite = (value) => (typeof value === 'number' || value instanceof Number) && isFinite(+value);\nfunction finiteOrDefault(value, defaultValue) {\n  return isNumberFinite(value) ? value : defaultValue;\n}\nfunction valueOrDefault(value, defaultValue) {\n  return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension) =>\n  typeof value === 'string' && value.endsWith('%') ?\n    parseFloat(value) / 100\n    : value / dimension;\nconst toDimension = (value, dimension) =>\n  typeof value === 'string' && value.endsWith('%') ?\n    parseFloat(value) / 100 * dimension\n    : +value;\nfunction callback(fn, args, thisArg) {\n  if (fn && typeof fn.call === 'function') {\n    return fn.apply(thisArg, args);\n  }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n  let i, len, keys;\n  if (isArray(loopable)) {\n    len = loopable.length;\n    if (reverse) {\n      for (i = len - 1; i >= 0; i--) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    } else {\n      for (i = 0; i < len; i++) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    }\n  } else if (isObject(loopable)) {\n    keys = Object.keys(loopable);\n    len = keys.length;\n    for (i = 0; i < len; i++) {\n      fn.call(thisArg, loopable[keys[i]], keys[i]);\n    }\n  }\n}\nfunction _elementsEqual(a0, a1) {\n  let i, ilen, v0, v1;\n  if (!a0 || !a1 || a0.length !== a1.length) {\n    return false;\n  }\n  for (i = 0, ilen = a0.length; i < ilen; ++i) {\n    v0 = a0[i];\n    v1 = a1[i];\n    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction clone(source) {\n  if (isArray(source)) {\n    return source.map(clone);\n  }\n  if (isObject(source)) {\n    const target = Object.create(null);\n    const keys = Object.keys(source);\n    const klen = keys.length;\n    let k = 0;\n    for (; k < klen; ++k) {\n      target[keys[k]] = clone(source[keys[k]]);\n    }\n    return target;\n  }\n  return source;\n}\nfunction isValidKey(key) {\n  return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;\n}\nfunction _merger(key, target, source, options) {\n  if (!isValidKey(key)) {\n    return;\n  }\n  const tval = target[key];\n  const sval = source[key];\n  if (isObject(tval) && isObject(sval)) {\n    merge(tval, sval, options);\n  } else {\n    target[key] = clone(sval);\n  }\n}\nfunction merge(target, source, options) {\n  const sources = isArray(source) ? source : [source];\n  const ilen = sources.length;\n  if (!isObject(target)) {\n    return target;\n  }\n  options = options || {};\n  const merger = options.merger || _merger;\n  for (let i = 0; i < ilen; ++i) {\n    source = sources[i];\n    if (!isObject(source)) {\n      continue;\n    }\n    const keys = Object.keys(source);\n    for (let k = 0, klen = keys.length; k < klen; ++k) {\n      merger(keys[k], target, source, options);\n    }\n  }\n  return target;\n}\nfunction mergeIf(target, source) {\n  return merge(target, source, {merger: _mergerIf});\n}\nfunction _mergerIf(key, target, source) {\n  if (!isValidKey(key)) {\n    return;\n  }\n  const tval = target[key];\n  const sval = source[key];\n  if (isObject(tval) && isObject(sval)) {\n    mergeIf(tval, sval);\n  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n    target[key] = clone(sval);\n  }\n}\nfunction _deprecated(scope, value, previous, current) {\n  if (value !== undefined) {\n    console.warn(scope + ': \"' + previous +\n\t\t\t'\" is deprecated. Please use \"' + current + '\" instead');\n  }\n}\nconst emptyString = '';\nconst dot = '.';\nfunction indexOfDotOrLength(key, start) {\n  const idx = key.indexOf(dot, start);\n  return idx === -1 ? key.length : idx;\n}\nfunction resolveObjectKey(obj, key) {\n  if (key === emptyString) {\n    return obj;\n  }\n  let pos = 0;\n  let idx = indexOfDotOrLength(key, pos);\n  while (obj && idx > pos) {\n    obj = obj[key.substr(pos, idx - pos)];\n    pos = idx + 1;\n    idx = indexOfDotOrLength(key, pos);\n  }\n  return obj;\n}\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value) => typeof value !== 'undefined';\nconst isFunction = (value) => typeof value === 'function';\nconst setsEqual = (a, b) => {\n  if (a.size !== b.size) {\n    return false;\n  }\n  for (const item of a) {\n    if (!b.has(item)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\nfunction getScope$1(node, key) {\n  if (!key) {\n    return node;\n  }\n  const keys = key.split('.');\n  for (let i = 0, n = keys.length; i < n; ++i) {\n    const k = keys[i];\n    node = node[k] || (node[k] = Object.create(null));\n  }\n  return node;\n}\nfunction set(root, scope, values) {\n  if (typeof scope === 'string') {\n    return merge(getScope$1(root, scope), values);\n  }\n  return merge(getScope$1(root, ''), scope);\n}\nclass Defaults {\n  constructor(_descriptors) {\n    this.animation = undefined;\n    this.backgroundColor = 'rgba(0,0,0,0.1)';\n    this.borderColor = 'rgba(0,0,0,0.1)';\n    this.color = '#666';\n    this.datasets = {};\n    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();\n    this.elements = {};\n    this.events = [\n      'mousemove',\n      'mouseout',\n      'click',\n      'touchstart',\n      'touchmove'\n    ];\n    this.font = {\n      family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n      size: 12,\n      style: 'normal',\n      lineHeight: 1.2,\n      weight: null\n    };\n    this.hover = {};\n    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);\n    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);\n    this.hoverColor = (ctx, options) => getHoverColor(options.color);\n    this.indexAxis = 'x';\n    this.interaction = {\n      mode: 'nearest',\n      intersect: true\n    };\n    this.maintainAspectRatio = true;\n    this.onHover = null;\n    this.onClick = null;\n    this.parsing = true;\n    this.plugins = {};\n    this.responsive = true;\n    this.scale = undefined;\n    this.scales = {};\n    this.showLine = true;\n    this.describe(_descriptors);\n  }\n  set(scope, values) {\n    return set(this, scope, values);\n  }\n  get(scope) {\n    return getScope$1(this, scope);\n  }\n  describe(scope, values) {\n    return set(descriptors, scope, values);\n  }\n  override(scope, values) {\n    return set(overrides, scope, values);\n  }\n  route(scope, name, targetScope, targetName) {\n    const scopeObject = getScope$1(this, scope);\n    const targetScopeObject = getScope$1(this, targetScope);\n    const privateName = '_' + name;\n    Object.defineProperties(scopeObject, {\n      [privateName]: {\n        value: scopeObject[name],\n        writable: true\n      },\n      [name]: {\n        enumerable: true,\n        get() {\n          const local = this[privateName];\n          const target = targetScopeObject[targetName];\n          if (isObject(local)) {\n            return Object.assign({}, target, local);\n          }\n          return valueOrDefault(local, target);\n        },\n        set(value) {\n          this[privateName] = value;\n        }\n      }\n    });\n  }\n}\nvar defaults = new Defaults({\n  _scriptable: (name) => !name.startsWith('on'),\n  _indexable: (name) => name !== 'events',\n  hover: {\n    _fallback: 'interaction'\n  },\n  interaction: {\n    _scriptable: false,\n    _indexable: false,\n  }\n});\n\nconst PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction niceNum(range) {\n  const roundedRange = Math.round(range);\n  range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n  const niceRange = Math.pow(10, Math.floor(log10(range)));\n  const fraction = range / niceRange;\n  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n  return niceFraction * niceRange;\n}\nfunction _factorize(value) {\n  const result = [];\n  const sqrt = Math.sqrt(value);\n  let i;\n  for (i = 1; i < sqrt; i++) {\n    if (value % i === 0) {\n      result.push(i);\n      result.push(value / i);\n    }\n  }\n  if (sqrt === (sqrt | 0)) {\n    result.push(sqrt);\n  }\n  result.sort((a, b) => a - b).pop();\n  return result;\n}\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostEquals(x, y, epsilon) {\n  return Math.abs(x - y) < epsilon;\n}\nfunction almostWhole(x, epsilon) {\n  const rounded = Math.round(x);\n  return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);\n}\nfunction _setMinAndMaxByKey(array, target, property) {\n  let i, ilen, value;\n  for (i = 0, ilen = array.length; i < ilen; i++) {\n    value = array[i][property];\n    if (!isNaN(value)) {\n      target.min = Math.min(target.min, value);\n      target.max = Math.max(target.max, value);\n    }\n  }\n}\nfunction toRadians(degrees) {\n  return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n  return radians * (180 / PI);\n}\nfunction _decimalPlaces(x) {\n  if (!isNumberFinite(x)) {\n    return;\n  }\n  let e = 1;\n  let p = 0;\n  while (Math.round(x * e) / e !== x) {\n    e *= 10;\n    p++;\n  }\n  return p;\n}\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n  const distanceFromXCenter = anglePoint.x - centrePoint.x;\n  const distanceFromYCenter = anglePoint.y - centrePoint.y;\n  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n  if (angle < (-0.5 * PI)) {\n    angle += TAU;\n  }\n  return {\n    angle,\n    distance: radialDistanceFromCenter\n  };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\nfunction _angleDiff(a, b) {\n  return (a - b + PITAU) % TAU - PI;\n}\nfunction _normalizeAngle(a) {\n  return (a % TAU + TAU) % TAU;\n}\nfunction _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n  const a = _normalizeAngle(angle);\n  const s = _normalizeAngle(start);\n  const e = _normalizeAngle(end);\n  const angleToStart = _normalizeAngle(s - a);\n  const angleToEnd = _normalizeAngle(e - a);\n  const startToAngle = _normalizeAngle(a - s);\n  const endToAngle = _normalizeAngle(a - e);\n  return a === s || a === e || (sameAngleIsFullCircle && s === e)\n    || (angleToStart > angleToEnd && startToAngle < endToAngle);\n}\nfunction _limitValue(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\nfunction _int16Range(value) {\n  return _limitValue(value, -32768, 32767);\n}\n\nfunction toFontString(font) {\n  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n    return null;\n  }\n  return (font.style ? font.style + ' ' : '')\n\t\t+ (font.weight ? font.weight + ' ' : '')\n\t\t+ font.size + 'px '\n\t\t+ font.family;\n}\nfunction _measureText(ctx, data, gc, longest, string) {\n  let textWidth = data[string];\n  if (!textWidth) {\n    textWidth = data[string] = ctx.measureText(string).width;\n    gc.push(string);\n  }\n  if (textWidth > longest) {\n    longest = textWidth;\n  }\n  return longest;\n}\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n  cache = cache || {};\n  let data = cache.data = cache.data || {};\n  let gc = cache.garbageCollect = cache.garbageCollect || [];\n  if (cache.font !== font) {\n    data = cache.data = {};\n    gc = cache.garbageCollect = [];\n    cache.font = font;\n  }\n  ctx.save();\n  ctx.font = font;\n  let longest = 0;\n  const ilen = arrayOfThings.length;\n  let i, j, jlen, thing, nestedThing;\n  for (i = 0; i < ilen; i++) {\n    thing = arrayOfThings[i];\n    if (thing !== undefined && thing !== null && isArray(thing) !== true) {\n      longest = _measureText(ctx, data, gc, longest, thing);\n    } else if (isArray(thing)) {\n      for (j = 0, jlen = thing.length; j < jlen; j++) {\n        nestedThing = thing[j];\n        if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n          longest = _measureText(ctx, data, gc, longest, nestedThing);\n        }\n      }\n    }\n  }\n  ctx.restore();\n  const gcLen = gc.length / 2;\n  if (gcLen > arrayOfThings.length) {\n    for (i = 0; i < gcLen; i++) {\n      delete data[gc[i]];\n    }\n    gc.splice(0, gcLen);\n  }\n  return longest;\n}\nfunction _alignPixel(chart, pixel, width) {\n  const devicePixelRatio = chart.currentDevicePixelRatio;\n  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\nfunction clearCanvas(canvas, ctx) {\n  ctx = ctx || canvas.getContext('2d');\n  ctx.save();\n  ctx.resetTransform();\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n  let type, xOffset, yOffset, size, cornerRadius;\n  const style = options.pointStyle;\n  const rotation = options.rotation;\n  const radius = options.radius;\n  let rad = (rotation || 0) * RAD_PER_DEG;\n  if (style && typeof style === 'object') {\n    type = style.toString();\n    if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.rotate(rad);\n      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n      ctx.restore();\n      return;\n    }\n  }\n  if (isNaN(radius) || radius <= 0) {\n    return;\n  }\n  ctx.beginPath();\n  switch (style) {\n  default:\n    ctx.arc(x, y, radius, 0, TAU);\n    ctx.closePath();\n    break;\n  case 'triangle':\n    ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n    rad += TWO_THIRDS_PI;\n    ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n    rad += TWO_THIRDS_PI;\n    ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n    ctx.closePath();\n    break;\n  case 'rectRounded':\n    cornerRadius = radius * 0.516;\n    size = radius - cornerRadius;\n    xOffset = Math.cos(rad + QUARTER_PI) * size;\n    yOffset = Math.sin(rad + QUARTER_PI) * size;\n    ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n    ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n    ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n    ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n    ctx.closePath();\n    break;\n  case 'rect':\n    if (!rotation) {\n      size = Math.SQRT1_2 * radius;\n      ctx.rect(x - size, y - size, 2 * size, 2 * size);\n      break;\n    }\n    rad += QUARTER_PI;\n  case 'rectRot':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    ctx.closePath();\n    break;\n  case 'crossRot':\n    rad += QUARTER_PI;\n  case 'cross':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.moveTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    break;\n  case 'star':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.moveTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    rad += QUARTER_PI;\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.moveTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    break;\n  case 'line':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    break;\n  case 'dash':\n    ctx.moveTo(x, y);\n    ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n    break;\n  }\n  ctx.fill();\n  if (options.borderWidth > 0) {\n    ctx.stroke();\n  }\n}\nfunction _isPointInArea(point, area, margin) {\n  margin = margin || 0.5;\n  return !area || (point && point.x > area.left - margin && point.x < area.right + margin &&\n\t\tpoint.y > area.top - margin && point.y < area.bottom + margin);\n}\nfunction clipArea(ctx, area) {\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n  ctx.clip();\n}\nfunction unclipArea(ctx) {\n  ctx.restore();\n}\nfunction _steppedLineTo(ctx, previous, target, flip, mode) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n  if (mode === 'middle') {\n    const midpoint = (previous.x + target.x) / 2.0;\n    ctx.lineTo(midpoint, previous.y);\n    ctx.lineTo(midpoint, target.y);\n  } else if (mode === 'after' !== !!flip) {\n    ctx.lineTo(previous.x, target.y);\n  } else {\n    ctx.lineTo(target.x, previous.y);\n  }\n  ctx.lineTo(target.x, target.y);\n}\nfunction _bezierCurveTo(ctx, previous, target, flip) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n  ctx.bezierCurveTo(\n    flip ? previous.cp1x : previous.cp2x,\n    flip ? previous.cp1y : previous.cp2y,\n    flip ? target.cp2x : target.cp1x,\n    flip ? target.cp2y : target.cp1y,\n    target.x,\n    target.y);\n}\nfunction renderText(ctx, text, x, y, font, opts = {}) {\n  const lines = isArray(text) ? text : [text];\n  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n  let i, line;\n  ctx.save();\n  ctx.font = font.string;\n  setRenderOpts(ctx, opts);\n  for (i = 0; i < lines.length; ++i) {\n    line = lines[i];\n    if (stroke) {\n      if (opts.strokeColor) {\n        ctx.strokeStyle = opts.strokeColor;\n      }\n      if (!isNullOrUndef(opts.strokeWidth)) {\n        ctx.lineWidth = opts.strokeWidth;\n      }\n      ctx.strokeText(line, x, y, opts.maxWidth);\n    }\n    ctx.fillText(line, x, y, opts.maxWidth);\n    decorateText(ctx, x, y, line, opts);\n    y += font.lineHeight;\n  }\n  ctx.restore();\n}\nfunction setRenderOpts(ctx, opts) {\n  if (opts.translation) {\n    ctx.translate(opts.translation[0], opts.translation[1]);\n  }\n  if (!isNullOrUndef(opts.rotation)) {\n    ctx.rotate(opts.rotation);\n  }\n  if (opts.color) {\n    ctx.fillStyle = opts.color;\n  }\n  if (opts.textAlign) {\n    ctx.textAlign = opts.textAlign;\n  }\n  if (opts.textBaseline) {\n    ctx.textBaseline = opts.textBaseline;\n  }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n  if (opts.strikethrough || opts.underline) {\n    const metrics = ctx.measureText(line);\n    const left = x - metrics.actualBoundingBoxLeft;\n    const right = x + metrics.actualBoundingBoxRight;\n    const top = y - metrics.actualBoundingBoxAscent;\n    const bottom = y + metrics.actualBoundingBoxDescent;\n    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n    ctx.strokeStyle = ctx.fillStyle;\n    ctx.beginPath();\n    ctx.lineWidth = opts.decorationWidth || 2;\n    ctx.moveTo(left, yDecoration);\n    ctx.lineTo(right, yDecoration);\n    ctx.stroke();\n  }\n}\nfunction addRoundedRectPath(ctx, rect) {\n  const {x, y, w, h, radius} = rect;\n  ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);\n  ctx.lineTo(x, y + h - radius.bottomLeft);\n  ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n  ctx.lineTo(x + w - radius.bottomRight, y + h);\n  ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n  ctx.lineTo(x + w, y + radius.topRight);\n  ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n  ctx.lineTo(x + radius.topLeft, y);\n}\n\nfunction _lookup(table, value, cmp) {\n  cmp = cmp || ((index) => table[index] < value);\n  let hi = table.length - 1;\n  let lo = 0;\n  let mid;\n  while (hi - lo > 1) {\n    mid = (lo + hi) >> 1;\n    if (cmp(mid)) {\n      lo = mid;\n    } else {\n      hi = mid;\n    }\n  }\n  return {lo, hi};\n}\nconst _lookupByKey = (table, key, value) =>\n  _lookup(table, value, index => table[index][key] < value);\nconst _rlookupByKey = (table, key, value) =>\n  _lookup(table, value, index => table[index][key] >= value);\nfunction _filterBetween(values, min, max) {\n  let start = 0;\n  let end = values.length;\n  while (start < end && values[start] < min) {\n    start++;\n  }\n  while (end > start && values[end - 1] > max) {\n    end--;\n  }\n  return start > 0 || end < values.length\n    ? values.slice(start, end)\n    : values;\n}\nconst arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\nfunction listenArrayEvents(array, listener) {\n  if (array._chartjs) {\n    array._chartjs.listeners.push(listener);\n    return;\n  }\n  Object.defineProperty(array, '_chartjs', {\n    configurable: true,\n    enumerable: false,\n    value: {\n      listeners: [listener]\n    }\n  });\n  arrayEvents.forEach((key) => {\n    const method = '_onData' + _capitalize(key);\n    const base = array[key];\n    Object.defineProperty(array, key, {\n      configurable: true,\n      enumerable: false,\n      value(...args) {\n        const res = base.apply(this, args);\n        array._chartjs.listeners.forEach((object) => {\n          if (typeof object[method] === 'function') {\n            object[method](...args);\n          }\n        });\n        return res;\n      }\n    });\n  });\n}\nfunction unlistenArrayEvents(array, listener) {\n  const stub = array._chartjs;\n  if (!stub) {\n    return;\n  }\n  const listeners = stub.listeners;\n  const index = listeners.indexOf(listener);\n  if (index !== -1) {\n    listeners.splice(index, 1);\n  }\n  if (listeners.length > 0) {\n    return;\n  }\n  arrayEvents.forEach((key) => {\n    delete array[key];\n  });\n  delete array._chartjs;\n}\nfunction _arrayUnique(items) {\n  const set = new Set();\n  let i, ilen;\n  for (i = 0, ilen = items.length; i < ilen; ++i) {\n    set.add(items[i]);\n  }\n  if (set.size === ilen) {\n    return items;\n  }\n  return Array.from(set);\n}\n\nfunction _isDomSupported() {\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\nfunction _getParentNode(domNode) {\n  let parent = domNode.parentNode;\n  if (parent && parent.toString() === '[object ShadowRoot]') {\n    parent = parent.host;\n  }\n  return parent;\n}\nfunction parseMaxStyle(styleValue, node, parentProperty) {\n  let valueInPixels;\n  if (typeof styleValue === 'string') {\n    valueInPixels = parseInt(styleValue, 10);\n    if (styleValue.indexOf('%') !== -1) {\n      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n    }\n  } else {\n    valueInPixels = styleValue;\n  }\n  return valueInPixels;\n}\nconst getComputedStyle = (element) => window.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n  return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = ['top', 'right', 'bottom', 'left'];\nfunction getPositionedStyle(styles, style, suffix) {\n  const result = {};\n  suffix = suffix ? '-' + suffix : '';\n  for (let i = 0; i < 4; i++) {\n    const pos = positions[i];\n    result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n  }\n  result.width = result.left + result.right;\n  result.height = result.top + result.bottom;\n  return result;\n}\nconst useOffsetPos = (x, y, target) => (x > 0 || y > 0) && (!target || !target.shadowRoot);\nfunction getCanvasPosition(evt, canvas) {\n  const e = evt.native || evt;\n  const touches = e.touches;\n  const source = touches && touches.length ? touches[0] : e;\n  const {offsetX, offsetY} = source;\n  let box = false;\n  let x, y;\n  if (useOffsetPos(offsetX, offsetY, e.target)) {\n    x = offsetX;\n    y = offsetY;\n  } else {\n    const rect = canvas.getBoundingClientRect();\n    x = source.clientX - rect.left;\n    y = source.clientY - rect.top;\n    box = true;\n  }\n  return {x, y, box};\n}\nfunction getRelativePosition$1(evt, chart) {\n  const {canvas, currentDevicePixelRatio} = chart;\n  const style = getComputedStyle(canvas);\n  const borderBox = style.boxSizing === 'border-box';\n  const paddings = getPositionedStyle(style, 'padding');\n  const borders = getPositionedStyle(style, 'border', 'width');\n  const {x, y, box} = getCanvasPosition(evt, canvas);\n  const xOffset = paddings.left + (box && borders.left);\n  const yOffset = paddings.top + (box && borders.top);\n  let {width, height} = chart;\n  if (borderBox) {\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n  return {\n    x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n    y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n  };\n}\nfunction getContainerSize(canvas, width, height) {\n  let maxWidth, maxHeight;\n  if (width === undefined || height === undefined) {\n    const container = _getParentNode(canvas);\n    if (!container) {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    } else {\n      const rect = container.getBoundingClientRect();\n      const containerStyle = getComputedStyle(container);\n      const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n      const containerPadding = getPositionedStyle(containerStyle, 'padding');\n      width = rect.width - containerPadding.width - containerBorder.width;\n      height = rect.height - containerPadding.height - containerBorder.height;\n      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n    }\n  }\n  return {\n    width,\n    height,\n    maxWidth: maxWidth || INFINITY,\n    maxHeight: maxHeight || INFINITY\n  };\n}\nconst round1 = v => Math.round(v * 10) / 10;\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n  const style = getComputedStyle(canvas);\n  const margins = getPositionedStyle(style, 'margin');\n  const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n  const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n  let {width, height} = containerSize;\n  if (style.boxSizing === 'content-box') {\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const paddings = getPositionedStyle(style, 'padding');\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n  width = Math.max(0, width - margins.width);\n  height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);\n  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n  if (width && !height) {\n    height = round1(width / 2);\n  }\n  return {\n    width,\n    height\n  };\n}\nfunction retinaScale(chart, forceRatio, forceStyle) {\n  const pixelRatio = forceRatio || 1;\n  const deviceHeight = Math.floor(chart.height * pixelRatio);\n  const deviceWidth = Math.floor(chart.width * pixelRatio);\n  chart.height = deviceHeight / pixelRatio;\n  chart.width = deviceWidth / pixelRatio;\n  const canvas = chart.canvas;\n  if (canvas.style && (forceStyle || (!canvas.style.height && !canvas.style.width))) {\n    canvas.style.height = `${chart.height}px`;\n    canvas.style.width = `${chart.width}px`;\n  }\n  if (chart.currentDevicePixelRatio !== pixelRatio\n      || canvas.height !== deviceHeight\n      || canvas.width !== deviceWidth) {\n    chart.currentDevicePixelRatio = pixelRatio;\n    canvas.height = deviceHeight;\n    canvas.width = deviceWidth;\n    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    return true;\n  }\n  return false;\n}\nconst supportsEventListenerOptions = (function() {\n  let passiveSupported = false;\n  try {\n    const options = {\n      get passive() {\n        passiveSupported = true;\n        return false;\n      }\n    };\n    window.addEventListener('test', null, options);\n    window.removeEventListener('test', null, options);\n  } catch (e) {\n  }\n  return passiveSupported;\n}());\nfunction readUsedSize(element, property) {\n  const value = getStyle(element, property);\n  const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n  return matches ? +matches[1] : undefined;\n}\n\nfunction getRelativePosition(e, chart) {\n  if ('native' in e) {\n    return {\n      x: e.x,\n      y: e.y\n    };\n  }\n  return getRelativePosition$1(e, chart);\n}\nfunction evaluateAllVisibleItems(chart, handler) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  let index, data, element;\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    ({index, data} = metasets[i]);\n    for (let j = 0, jlen = data.length; j < jlen; ++j) {\n      element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  return {lo: 0, hi: data.length - 1};\n}\nfunction optimizedEvaluateItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition) {\n  const items = [];\n  if (!_isPointInArea(position, chart.chartArea, chart._minPadding)) {\n    return items;\n  }\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n  optimizedEvaluateItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition) {\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  let items = [];\n  if (!_isPointInArea(position, chart.chartArea, chart._minPadding)) {\n    return items;\n  }\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (intersect && !element.inRange(position.x, position.y, useFinalPosition)) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    if (!_isPointInArea(center, chart.chartArea, chart._minPadding) && !element.inRange(position.x, position.y, useFinalPosition)) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n  optimizedEvaluateItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getAxisItems(chart, e, options, useFinalPosition) {\n  const position = getRelativePosition(e, chart);\n  const items = [];\n  const axis = options.axis;\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateAllVisibleItems(chart, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      intersectsItem = true;\n    }\n  });\n  if (options.intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition)\n        : getNearestItems(chart, position, axis, false, useFinalPosition);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition) :\n        getNearestItems(chart, position, axis, false, useFinalPosition);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      return getIntersectItems(chart, position, axis, useFinalPosition);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition);\n    },\n    x(chart, e, options, useFinalPosition) {\n      options.axis = 'x';\n      return getAxisItems(chart, e, options, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      options.axis = 'y';\n      return getAxisItems(chart, e, options, useFinalPosition);\n    }\n  }\n};\n\nconst LINE_HEIGHT = new RegExp(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\nconst FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);\nfunction toLineHeight(value, size) {\n  const matches = ('' + value).match(LINE_HEIGHT);\n  if (!matches || matches[1] === 'normal') {\n    return size * 1.2;\n  }\n  value = +matches[2];\n  switch (matches[3]) {\n  case 'px':\n    return value;\n  case '%':\n    value /= 100;\n    break;\n  }\n  return size * value;\n}\nconst numberOrZero$1 = v => +v || 0;\nfunction _readValueToProps(value, props) {\n  const ret = {};\n  const objProps = isObject(props);\n  const keys = objProps ? Object.keys(props) : props;\n  const read = isObject(value)\n    ? objProps\n      ? prop => valueOrDefault(value[prop], value[props[prop]])\n      : prop => value[prop]\n    : () => value;\n  for (const prop of keys) {\n    ret[prop] = numberOrZero$1(read(prop));\n  }\n  return ret;\n}\nfunction toTRBL(value) {\n  return _readValueToProps(value, {top: 'y', right: 'x', bottom: 'y', left: 'x'});\n}\nfunction toTRBLCorners(value) {\n  return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);\n}\nfunction toPadding(value) {\n  const obj = toTRBL(value);\n  obj.width = obj.left + obj.right;\n  obj.height = obj.top + obj.bottom;\n  return obj;\n}\nfunction toFont(options, fallback) {\n  options = options || {};\n  fallback = fallback || defaults.font;\n  let size = valueOrDefault(options.size, fallback.size);\n  if (typeof size === 'string') {\n    size = parseInt(size, 10);\n  }\n  let style = valueOrDefault(options.style, fallback.style);\n  if (style && !('' + style).match(FONT_STYLE)) {\n    console.warn('Invalid font style specified: \"' + style + '\"');\n    style = '';\n  }\n  const font = {\n    family: valueOrDefault(options.family, fallback.family),\n    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n    size,\n    style,\n    weight: valueOrDefault(options.weight, fallback.weight),\n    string: ''\n  };\n  font.string = toFontString(font);\n  return font;\n}\nfunction resolve(inputs, context, index, info) {\n  let cacheable = true;\n  let i, ilen, value;\n  for (i = 0, ilen = inputs.length; i < ilen; ++i) {\n    value = inputs[i];\n    if (value === undefined) {\n      continue;\n    }\n    if (context !== undefined && typeof value === 'function') {\n      value = value(context);\n      cacheable = false;\n    }\n    if (index !== undefined && isArray(value)) {\n      value = value[index % value.length];\n      cacheable = false;\n    }\n    if (value !== undefined) {\n      if (info && !cacheable) {\n        info.cacheable = false;\n      }\n      return value;\n    }\n  }\n}\nfunction _addGrace(minmax, grace) {\n  const {min, max} = minmax;\n  return {\n    min: min - Math.abs(toDimension(grace, min)),\n    max: max + toDimension(grace, max)\n  };\n}\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\ndefaults.set('layout', {\n  padding: {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  }\n});\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h);\n    });\n  }\n};\n\nfunction _createResolver(scopes, prefixes = [''], rootScopes = scopes, fallback, getTarget = () => scopes[0]) {\n  if (!defined(fallback)) {\n    fallback = _resolve('_fallback', scopes);\n  }\n  const cache = {\n    [Symbol.toStringTag]: 'Object',\n    _cacheable: true,\n    _scopes: scopes,\n    _rootScopes: rootScopes,\n    _fallback: fallback,\n    _getTarget: getTarget,\n    override: (scope) => _createResolver([scope, ...scopes], prefixes, rootScopes, fallback),\n  };\n  return new Proxy(cache, {\n    deleteProperty(target, prop) {\n      delete target[prop];\n      delete target._keys;\n      delete scopes[0][prop];\n      return true;\n    },\n    get(target, prop) {\n      return _cached(target, prop,\n        () => _resolveWithPrefixes(prop, prefixes, scopes, target));\n    },\n    getOwnPropertyDescriptor(target, prop) {\n      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n    },\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(scopes[0]);\n    },\n    has(target, prop) {\n      return getKeysFromAllScopes(target).includes(prop);\n    },\n    ownKeys(target) {\n      return getKeysFromAllScopes(target);\n    },\n    set(target, prop, value) {\n      const storage = target._storage || (target._storage = getTarget());\n      storage[prop] = value;\n      delete target[prop];\n      delete target._keys;\n      return true;\n    }\n  });\n}\nfunction _attachContext(proxy, context, subProxy, descriptorDefaults) {\n  const cache = {\n    _cacheable: false,\n    _proxy: proxy,\n    _context: context,\n    _subProxy: subProxy,\n    _stack: new Set(),\n    _descriptors: _descriptors(proxy, descriptorDefaults),\n    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),\n    override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n  };\n  return new Proxy(cache, {\n    deleteProperty(target, prop) {\n      delete target[prop];\n      delete proxy[prop];\n      return true;\n    },\n    get(target, prop, receiver) {\n      return _cached(target, prop,\n        () => _resolveWithContext(target, prop, receiver));\n    },\n    getOwnPropertyDescriptor(target, prop) {\n      return target._descriptors.allKeys\n        ? Reflect.has(proxy, prop) ? {enumerable: true, configurable: true} : undefined\n        : Reflect.getOwnPropertyDescriptor(proxy, prop);\n    },\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(proxy);\n    },\n    has(target, prop) {\n      return Reflect.has(proxy, prop);\n    },\n    ownKeys() {\n      return Reflect.ownKeys(proxy);\n    },\n    set(target, prop, value) {\n      proxy[prop] = value;\n      delete target[prop];\n      return true;\n    }\n  });\n}\nfunction _descriptors(proxy, defaults = {scriptable: true, indexable: true}) {\n  const {_scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys} = proxy;\n  return {\n    allKeys: _allKeys,\n    scriptable: _scriptable,\n    indexable: _indexable,\n    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,\n    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable\n  };\n}\nconst readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value) => isObject(value) && prop !== 'adapters';\nfunction _cached(target, prop, resolve) {\n  let value = target[prop];\n  if (defined(value)) {\n    return value;\n  }\n  value = resolve();\n  if (defined(value)) {\n    target[prop] = value;\n  }\n  return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\n  let value = _proxy[prop];\n  if (isFunction(value) && descriptors.isScriptable(prop)) {\n    value = _resolveScriptable(prop, value, target, receiver);\n  }\n  if (isArray(value) && value.length) {\n    value = _resolveArray(prop, value, target, descriptors.isIndexable);\n  }\n  if (needsSubResolver(prop, value)) {\n    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n  }\n  return value;\n}\nfunction _resolveScriptable(prop, value, target, receiver) {\n  const {_proxy, _context, _subProxy, _stack} = target;\n  if (_stack.has(prop)) {\n    throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n  }\n  _stack.add(prop);\n  value = value(_context, _subProxy || receiver);\n  _stack.delete(prop);\n  if (isObject(value)) {\n    value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n  }\n  return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\n  if (defined(_context.index) && isIndexable(prop)) {\n    value = value[_context.index % value.length];\n  } else if (isObject(value[0])) {\n    const arr = value;\n    const scopes = _proxy._scopes.filter(s => s !== arr);\n    value = [];\n    for (const item of arr) {\n      const resolver = createSubResolver(scopes, _proxy, prop, item);\n      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n    }\n  }\n  return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n  return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent) => key === true ? parent\n  : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback) {\n  for (const parent of parentScopes) {\n    const scope = getScope(key, parent);\n    if (scope) {\n      set.add(scope);\n      const fallback = resolveFallback(scope._fallback, key, scope);\n      if (defined(fallback) && fallback !== key && fallback !== parentFallback) {\n        return fallback;\n      }\n    } else if (scope === false && defined(parentFallback) && key !== parentFallback) {\n      return null;\n    }\n  }\n  return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n  const rootScopes = resolver._rootScopes;\n  const fallback = resolveFallback(resolver._fallback, prop, value);\n  const allScopes = [...parentScopes, ...rootScopes];\n  const set = new Set();\n  set.add(value);\n  let key = addScopesFromKey(set, allScopes, prop, fallback || prop);\n  if (key === null) {\n    return false;\n  }\n  if (defined(fallback) && fallback !== prop) {\n    key = addScopesFromKey(set, allScopes, fallback, key);\n    if (key === null) {\n      return false;\n    }\n  }\n  return _createResolver(Array.from(set), [''], rootScopes, fallback,\n    () => subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback) {\n  while (key) {\n    key = addScopes(set, allScopes, key, fallback);\n  }\n  return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n  const parent = resolver._getTarget();\n  if (!(prop in parent)) {\n    parent[prop] = {};\n  }\n  const target = parent[prop];\n  if (isArray(target) && isObject(value)) {\n    return value;\n  }\n  return target;\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n  let value;\n  for (const prefix of prefixes) {\n    value = _resolve(readKey(prefix, prop), scopes);\n    if (defined(value)) {\n      return needsSubResolver(prop, value)\n        ? createSubResolver(scopes, proxy, prop, value)\n        : value;\n    }\n  }\n}\nfunction _resolve(key, scopes) {\n  for (const scope of scopes) {\n    if (!scope) {\n      continue;\n    }\n    const value = scope[key];\n    if (defined(value)) {\n      return value;\n    }\n  }\n}\nfunction getKeysFromAllScopes(target) {\n  let keys = target._keys;\n  if (!keys) {\n    keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n  }\n  return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n  const set = new Set();\n  for (const scope of scopes) {\n    for (const key of Object.keys(scope).filter(k => !k.startsWith('_'))) {\n      set.add(key);\n    }\n  }\n  return Array.from(set);\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i) => i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis) => indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n  const previous = firstPoint.skip ? middlePoint : firstPoint;\n  const current = middlePoint;\n  const next = afterPoint.skip ? middlePoint : afterPoint;\n  const d01 = distanceBetweenPoints(current, previous);\n  const d12 = distanceBetweenPoints(next, current);\n  let s01 = d01 / (d01 + d12);\n  let s12 = d12 / (d01 + d12);\n  s01 = isNaN(s01) ? 0 : s01;\n  s12 = isNaN(s12) ? 0 : s12;\n  const fa = t * s01;\n  const fb = t * s12;\n  return {\n    previous: {\n      x: current.x - fa * (next.x - previous.x),\n      y: current.y - fa * (next.y - previous.y)\n    },\n    next: {\n      x: current.x + fb * (next.x - previous.x),\n      y: current.y + fb * (next.y - previous.y)\n    }\n  };\n}\nfunction monotoneAdjust(points, deltaK, mK) {\n  const pointsLen = points.length;\n  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n  for (let i = 0; i < pointsLen - 1; ++i) {\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent || !pointAfter) {\n      continue;\n    }\n    if (almostEquals(deltaK[i], 0, EPSILON)) {\n      mK[i] = mK[i + 1] = 0;\n      continue;\n    }\n    alphaK = mK[i] / deltaK[i];\n    betaK = mK[i + 1] / deltaK[i];\n    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n    if (squaredMagnitude <= 9) {\n      continue;\n    }\n    tauK = 3 / Math.sqrt(squaredMagnitude);\n    mK[i] = alphaK * tauK * deltaK[i];\n    mK[i + 1] = betaK * tauK * deltaK[i];\n  }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n  const valueAxis = getValueAxis(indexAxis);\n  const pointsLen = points.length;\n  let delta, pointBefore, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n  for (let i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent) {\n      continue;\n    }\n    const iPixel = pointCurrent[indexAxis];\n    const vPixel = pointCurrent[valueAxis];\n    if (pointBefore) {\n      delta = (iPixel - pointBefore[indexAxis]) / 3;\n      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n    }\n    if (pointAfter) {\n      delta = (pointAfter[indexAxis] - iPixel) / 3;\n      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n    }\n  }\n}\nfunction splineCurveMonotone(points, indexAxis = 'x') {\n  const valueAxis = getValueAxis(indexAxis);\n  const pointsLen = points.length;\n  const deltaK = Array(pointsLen).fill(0);\n  const mK = Array(pointsLen);\n  let i, pointBefore, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n  for (i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent) {\n      continue;\n    }\n    if (pointAfter) {\n      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n    }\n    mK[i] = !pointBefore ? deltaK[i]\n      : !pointAfter ? deltaK[i - 1]\n      : (sign(deltaK[i - 1]) !== sign(deltaK[i])) ? 0\n      : (deltaK[i - 1] + deltaK[i]) / 2;\n  }\n  monotoneAdjust(points, deltaK, mK);\n  monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n  return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n  let i, ilen, point, inArea, inAreaPrev;\n  let inAreaNext = _isPointInArea(points[0], area);\n  for (i = 0, ilen = points.length; i < ilen; ++i) {\n    inAreaPrev = inArea;\n    inArea = inAreaNext;\n    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n    if (!inArea) {\n      continue;\n    }\n    point = points[i];\n    if (inAreaPrev) {\n      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n    }\n    if (inAreaNext) {\n      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n    }\n  }\n}\nfunction _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n  let i, ilen, point, controlPoints;\n  if (options.spanGaps) {\n    points = points.filter((pt) => !pt.skip);\n  }\n  if (options.cubicInterpolationMode === 'monotone') {\n    splineCurveMonotone(points, indexAxis);\n  } else {\n    let prev = loop ? points[points.length - 1] : points[0];\n    for (i = 0, ilen = points.length; i < ilen; ++i) {\n      point = points[i];\n      controlPoints = splineCurve(\n        prev,\n        point,\n        points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen],\n        options.tension\n      );\n      point.cp1x = controlPoints.previous.x;\n      point.cp1y = controlPoints.previous.y;\n      point.cp2x = controlPoints.next.x;\n      point.cp2y = controlPoints.next.y;\n      prev = point;\n    }\n  }\n  if (options.capBezierPoints) {\n    capBezierPoints(points, area);\n  }\n}\n\nconst atEdge = (t) => t === 0 || t === 1;\nconst elasticIn = (t, s, p) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\nconst effects = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => -t * (t - 2),\n  easeInOutQuad: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t\n    : -0.5 * ((--t) * (t - 2) - 1),\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => (t -= 1) * t * t + 1,\n  easeInOutCubic: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t\n    : 0.5 * ((t -= 2) * t * t + 2),\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => -((t -= 1) * t * t * t - 1),\n  easeInOutQuart: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t * t\n    : -0.5 * ((t -= 2) * t * t * t - 2),\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => (t -= 1) * t * t * t * t + 1,\n  easeInOutQuint: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t * t * t\n    : 0.5 * ((t -= 2) * t * t * t * t + 2),\n  easeInSine: t => -Math.cos(t * HALF_PI) + 1,\n  easeOutSine: t => Math.sin(t * HALF_PI),\n  easeInOutSine: t => -0.5 * (Math.cos(PI * t) - 1),\n  easeInExpo: t => (t === 0) ? 0 : Math.pow(2, 10 * (t - 1)),\n  easeOutExpo: t => (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1,\n  easeInOutExpo: t => atEdge(t) ? t : t < 0.5\n    ? 0.5 * Math.pow(2, 10 * (t * 2 - 1))\n    : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n  easeInCirc: t => (t >= 1) ? t : -(Math.sqrt(1 - t * t) - 1),\n  easeOutCirc: t => Math.sqrt(1 - (t -= 1) * t),\n  easeInOutCirc: t => ((t /= 0.5) < 1)\n    ? -0.5 * (Math.sqrt(1 - t * t) - 1)\n    : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n  easeInElastic: t => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n  easeOutElastic: t => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n  easeInOutElastic(t) {\n    const s = 0.1125;\n    const p = 0.45;\n    return atEdge(t) ? t :\n      t < 0.5\n        ? 0.5 * elasticIn(t * 2, s, p)\n        : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n  },\n  easeInBack(t) {\n    const s = 1.70158;\n    return t * t * ((s + 1) * t - s);\n  },\n  easeOutBack(t) {\n    const s = 1.70158;\n    return (t -= 1) * t * ((s + 1) * t + s) + 1;\n  },\n  easeInOutBack(t) {\n    let s = 1.70158;\n    if ((t /= 0.5) < 1) {\n      return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));\n    }\n    return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n  },\n  easeInBounce: t => 1 - effects.easeOutBounce(1 - t),\n  easeOutBounce(t) {\n    const m = 7.5625;\n    const d = 2.75;\n    if (t < (1 / d)) {\n      return m * t * t;\n    }\n    if (t < (2 / d)) {\n      return m * (t -= (1.5 / d)) * t + 0.75;\n    }\n    if (t < (2.5 / d)) {\n      return m * (t -= (2.25 / d)) * t + 0.9375;\n    }\n    return m * (t -= (2.625 / d)) * t + 0.984375;\n  },\n  easeInOutBounce: t => (t < 0.5)\n    ? effects.easeInBounce(t * 2) * 0.5\n    : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5,\n};\n\nfunction _pointInLine(p1, p2, t, mode) {\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: p1.y + t * (p2.y - p1.y)\n  };\n}\nfunction _steppedInterpolation(p1, p2, t, mode) {\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y\n    : mode === 'after' ? t < 1 ? p1.y : p2.y\n    : t > 0 ? p2.y : p1.y\n  };\n}\nfunction _bezierInterpolation(p1, p2, t, mode) {\n  const cp1 = {x: p1.cp2x, y: p1.cp2y};\n  const cp2 = {x: p2.cp1x, y: p2.cp1y};\n  const a = _pointInLine(p1, cp1, t);\n  const b = _pointInLine(cp1, cp2, t);\n  const c = _pointInLine(cp2, p2, t);\n  const d = _pointInLine(a, b, t);\n  const e = _pointInLine(b, c, t);\n  return _pointInLine(d, e, t);\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n  options = options || {};\n  const cacheKey = locale + JSON.stringify(options);\n  let formatter = intlCache.get(cacheKey);\n  if (!formatter) {\n    formatter = new Intl.NumberFormat(locale, options);\n    intlCache.set(cacheKey, formatter);\n  }\n  return formatter;\n}\nfunction formatNumber(num, locale, options) {\n  return getNumberFormat(locale, options).format(num);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n  return {\n    x(x) {\n      return rectX + rectX + width - x;\n    },\n    setWidth(w) {\n      width = w;\n    },\n    textAlign(align) {\n      if (align === 'center') {\n        return align;\n      }\n      return align === 'right' ? 'left' : 'right';\n    },\n    xPlus(x, value) {\n      return x - value;\n    },\n    leftForLtr(x, itemWidth) {\n      return x - itemWidth;\n    },\n  };\n};\nconst getLeftToRightAdapter = function() {\n  return {\n    x(x) {\n      return x;\n    },\n    setWidth(w) {\n    },\n    textAlign(align) {\n      return align;\n    },\n    xPlus(x, value) {\n      return x + value;\n    },\n    leftForLtr(x, _itemWidth) {\n      return x;\n    },\n  };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n  let style, original;\n  if (direction === 'ltr' || direction === 'rtl') {\n    style = ctx.canvas.style;\n    original = [\n      style.getPropertyValue('direction'),\n      style.getPropertyPriority('direction'),\n    ];\n    style.setProperty('direction', direction, 'important');\n    ctx.prevTextDirection = original;\n  }\n}\nfunction restoreTextDirection(ctx, original) {\n  if (original !== undefined) {\n    delete ctx.prevTextDirection;\n    ctx.canvas.style.setProperty('direction', original[0], original[1]);\n  }\n}\n\nfunction propertyFn(property) {\n  if (property === 'angle') {\n    return {\n      between: _angleBetween,\n      compare: _angleDiff,\n      normalize: _normalizeAngle,\n    };\n  }\n  return {\n    between: (n, s, e) => n >= Math.min(s, e) && n <= Math.max(e, s),\n    compare: (a, b) => a - b,\n    normalize: x => x\n  };\n}\nfunction normalizeSegment({start, end, count, loop, style}) {\n  return {\n    start: start % count,\n    end: end % count,\n    loop: loop && (end - start + 1) % count === 0,\n    style\n  };\n}\nfunction getSegment(segment, points, bounds) {\n  const {property, start: startBound, end: endBound} = bounds;\n  const {between, normalize} = propertyFn(property);\n  const count = points.length;\n  let {start, end, loop} = segment;\n  let i, ilen;\n  if (loop) {\n    start += count;\n    end += count;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n        break;\n      }\n      start--;\n      end--;\n    }\n    start %= count;\n    end %= count;\n  }\n  if (end < start) {\n    end += count;\n  }\n  return {start, end, loop, style: segment.style};\n}\nfunction _boundSegment(segment, points, bounds) {\n  if (!bounds) {\n    return [segment];\n  }\n  const {property, start: startBound, end: endBound} = bounds;\n  const count = points.length;\n  const {compare, between, normalize} = propertyFn(property);\n  const {start, end, loop, style} = getSegment(segment, points, bounds);\n  const result = [];\n  let inside = false;\n  let subStart = null;\n  let value, point, prevValue;\n  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);\n  const shouldStart = () => inside || startIsBefore();\n  const shouldStop = () => !inside || endIsBefore();\n  for (let i = start, prev = start; i <= end; ++i) {\n    point = points[i % count];\n    if (point.skip) {\n      continue;\n    }\n    value = normalize(point[property]);\n    if (value === prevValue) {\n      continue;\n    }\n    inside = between(value, startBound, endBound);\n    if (subStart === null && shouldStart()) {\n      subStart = compare(value, startBound) === 0 ? i : prev;\n    }\n    if (subStart !== null && shouldStop()) {\n      result.push(normalizeSegment({start: subStart, end: i, loop, count, style}));\n      subStart = null;\n    }\n    prev = i;\n    prevValue = value;\n  }\n  if (subStart !== null) {\n    result.push(normalizeSegment({start: subStart, end, loop, count, style}));\n  }\n  return result;\n}\nfunction _boundSegments(line, bounds) {\n  const result = [];\n  const segments = line.segments;\n  for (let i = 0; i < segments.length; i++) {\n    const sub = _boundSegment(segments[i], line.points, bounds);\n    if (sub.length) {\n      result.push(...sub);\n    }\n  }\n  return result;\n}\nfunction findStartAndEnd(points, count, loop, spanGaps) {\n  let start = 0;\n  let end = count - 1;\n  if (loop && !spanGaps) {\n    while (start < count && !points[start].skip) {\n      start++;\n    }\n  }\n  while (start < count && points[start].skip) {\n    start++;\n  }\n  start %= count;\n  if (loop) {\n    end += start;\n  }\n  while (end > start && points[end % count].skip) {\n    end--;\n  }\n  end %= count;\n  return {start, end};\n}\nfunction solidSegments(points, start, max, loop) {\n  const count = points.length;\n  const result = [];\n  let last = start;\n  let prev = points[start];\n  let end;\n  for (end = start + 1; end <= max; ++end) {\n    const cur = points[end % count];\n    if (cur.skip || cur.stop) {\n      if (!prev.skip) {\n        loop = false;\n        result.push({start: start % count, end: (end - 1) % count, loop});\n        start = last = cur.stop ? end : null;\n      }\n    } else {\n      last = end;\n      if (prev.skip) {\n        start = end;\n      }\n    }\n    prev = cur;\n  }\n  if (last !== null) {\n    result.push({start: start % count, end: last % count, loop});\n  }\n  return result;\n}\nfunction _computeSegments(line, segmentOptions) {\n  const points = line.points;\n  const spanGaps = line.options.spanGaps;\n  const count = points.length;\n  if (!count) {\n    return [];\n  }\n  const loop = !!line._loop;\n  const {start, end} = findStartAndEnd(points, count, loop, spanGaps);\n  if (spanGaps === true) {\n    return splitByStyles(line, [{start, end, loop}], points, segmentOptions);\n  }\n  const max = end < start ? end + count : end;\n  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\nfunction splitByStyles(line, segments, points, segmentOptions) {\n  if (!segmentOptions || !segmentOptions.setContext || !points) {\n    return segments;\n  }\n  return doSplitByStyles(line, segments, points, segmentOptions);\n}\nfunction doSplitByStyles(line, segments, points, segmentOptions) {\n  const baseStyle = readStyle(line.options);\n  const count = points.length;\n  const result = [];\n  let start = segments[0].start;\n  let i = start;\n  for (const segment of segments) {\n    let prevStyle = baseStyle;\n    let prev = points[start % count];\n    let style;\n    for (i = start + 1; i <= segment.end; i++) {\n      const pt = points[i % count];\n      style = readStyle(segmentOptions.setContext({\n        type: 'segment',\n        p0: prev,\n        p1: pt,\n        p0DataIndex: (i - 1) % count,\n        p1DataIndex: i % count,\n        datasetIndex: line._datasetIndex\n      }));\n      if (styleChanged(style, prevStyle)) {\n        result.push({start: start, end: i - 1, loop: segment.loop, style: prevStyle});\n        prevStyle = style;\n        start = i - 1;\n      }\n      prev = pt;\n      prevStyle = style;\n    }\n    if (start < i - 1) {\n      result.push({start, end: i - 1, loop: segment.loop, style});\n      start = i - 1;\n    }\n  }\n  return result;\n}\nfunction readStyle(options) {\n  return {\n    backgroundColor: options.backgroundColor,\n    borderCapStyle: options.borderCapStyle,\n    borderDash: options.borderDash,\n    borderDashOffset: options.borderDashOffset,\n    borderJoinStyle: options.borderJoinStyle,\n    borderWidth: options.borderWidth,\n    borderColor: options.borderColor\n  };\n}\nfunction styleChanged(style, prevStyle) {\n  return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);\n}\n\nvar helpers = /*#__PURE__*/Object.freeze({\n__proto__: null,\neasingEffects: effects,\ncolor: color,\ngetHoverColor: getHoverColor,\nnoop: noop,\nuid: uid,\nisNullOrUndef: isNullOrUndef,\nisArray: isArray,\nisObject: isObject,\nisFinite: isNumberFinite,\nfiniteOrDefault: finiteOrDefault,\nvalueOrDefault: valueOrDefault,\ntoPercentage: toPercentage,\ntoDimension: toDimension,\ncallback: callback,\neach: each,\n_elementsEqual: _elementsEqual,\nclone: clone,\n_merger: _merger,\nmerge: merge,\nmergeIf: mergeIf,\n_mergerIf: _mergerIf,\n_deprecated: _deprecated,\nresolveObjectKey: resolveObjectKey,\n_capitalize: _capitalize,\ndefined: defined,\nisFunction: isFunction,\nsetsEqual: setsEqual,\ntoFontString: toFontString,\n_measureText: _measureText,\n_longestText: _longestText,\n_alignPixel: _alignPixel,\nclearCanvas: clearCanvas,\ndrawPoint: drawPoint,\n_isPointInArea: _isPointInArea,\nclipArea: clipArea,\nunclipArea: unclipArea,\n_steppedLineTo: _steppedLineTo,\n_bezierCurveTo: _bezierCurveTo,\nrenderText: renderText,\naddRoundedRectPath: addRoundedRectPath,\n_lookup: _lookup,\n_lookupByKey: _lookupByKey,\n_rlookupByKey: _rlookupByKey,\n_filterBetween: _filterBetween,\nlistenArrayEvents: listenArrayEvents,\nunlistenArrayEvents: unlistenArrayEvents,\n_arrayUnique: _arrayUnique,\n_createResolver: _createResolver,\n_attachContext: _attachContext,\n_descriptors: _descriptors,\nsplineCurve: splineCurve,\nsplineCurveMonotone: splineCurveMonotone,\n_updateBezierControlPoints: _updateBezierControlPoints,\n_isDomSupported: _isDomSupported,\n_getParentNode: _getParentNode,\ngetStyle: getStyle,\ngetRelativePosition: getRelativePosition$1,\ngetMaximumSize: getMaximumSize,\nretinaScale: retinaScale,\nsupportsEventListenerOptions: supportsEventListenerOptions,\nreadUsedSize: readUsedSize,\nfontString: fontString,\nrequestAnimFrame: requestAnimFrame,\nthrottled: throttled,\ndebounce: debounce,\n_toLeftRightCenter: _toLeftRightCenter,\n_alignStartEnd: _alignStartEnd,\n_textX: _textX,\n_pointInLine: _pointInLine,\n_steppedInterpolation: _steppedInterpolation,\n_bezierInterpolation: _bezierInterpolation,\nformatNumber: formatNumber,\ntoLineHeight: toLineHeight,\n_readValueToProps: _readValueToProps,\ntoTRBL: toTRBL,\ntoTRBLCorners: toTRBLCorners,\ntoPadding: toPadding,\ntoFont: toFont,\nresolve: resolve,\n_addGrace: _addGrace,\nPI: PI,\nTAU: TAU,\nPITAU: PITAU,\nINFINITY: INFINITY,\nRAD_PER_DEG: RAD_PER_DEG,\nHALF_PI: HALF_PI,\nQUARTER_PI: QUARTER_PI,\nTWO_THIRDS_PI: TWO_THIRDS_PI,\nlog10: log10,\nsign: sign,\nniceNum: niceNum,\n_factorize: _factorize,\nisNumber: isNumber,\nalmostEquals: almostEquals,\nalmostWhole: almostWhole,\n_setMinAndMaxByKey: _setMinAndMaxByKey,\ntoRadians: toRadians,\ntoDegrees: toDegrees,\n_decimalPlaces: _decimalPlaces,\ngetAngleFromPoint: getAngleFromPoint,\ndistanceBetweenPoints: distanceBetweenPoints,\n_angleDiff: _angleDiff,\n_normalizeAngle: _normalizeAngle,\n_angleBetween: _angleBetween,\n_limitValue: _limitValue,\n_int16Range: _int16Range,\ngetRtlAdapter: getRtlAdapter,\noverrideTextDirection: overrideTextDirection,\nrestoreTextDirection: restoreTextDirection,\n_boundSegment: _boundSegment,\n_boundSegments: _boundSegments,\n_computeSegments: _computeSegments\n});\n\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n}\n\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n}\n\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition$1(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  const element = container || canvas;\n  const observer = new MutationObserver(entries => {\n    const parent = _getParentNode(element);\n    entries.forEach(entry => {\n      for (let i = 0; i < entry.addedNodes.length; i++) {\n        const added = entry.addedNodes[i];\n        if (added === element || added === parent) {\n          listener(entry.target);\n        }\n      }\n    });\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const observer = new MutationObserver(entries => {\n    entries.forEach(entry => {\n      for (let i = 0; i < entry.removedNodes.length; i++) {\n        if (entry.removedNodes[i] === canvas) {\n          listener();\n          break;\n        }\n      }\n    });\n  });\n  observer.observe(container, {childList: true});\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart, (args) => {\n    const event = args[0];\n    return [event, event.offsetX, event.offsetY];\n  });\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nvar platforms = /*#__PURE__*/Object.freeze({\n__proto__: null,\n_detectPlatform: _detectPlatform,\nBasePlatform: BasePlatform,\nBasicPlatform: BasicPlatform,\nDomPlatform: DomPlatform\n});\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    const me = this;\n    if (me._active) {\n      me._notify(false);\n      const currentValue = me._target[me._prop];\n      const elapsed = date - me._start;\n      const remain = me._duration - elapsed;\n      me._start = date;\n      me._duration = Math.floor(Math.max(remain, cfg.duration));\n      me._total += elapsed;\n      me._loop = !!cfg.loop;\n      me._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      me._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    const me = this;\n    if (me._active) {\n      me.tick(Date.now());\n      me._active = false;\n      me._notify(false);\n    }\n  }\n  tick(date) {\n    const me = this;\n    const elapsed = date - me._start;\n    const duration = me._duration;\n    const prop = me._prop;\n    const from = me._from;\n    const loop = me._loop;\n    const to = me._to;\n    let factor;\n    me._active = from !== to && (loop || (elapsed < duration));\n    if (!me._active) {\n      me._target[prop] = to;\n      me._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      me._target[prop] = from;\n      return;\n    }\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = me._easing(Math.min(1, Math.max(0, factor)));\n    me._target[prop] = me._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n\nconst numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];\nconst colors = ['color', 'borderColor', 'backgroundColor'];\ndefaults.set('animation', {\n  delay: undefined,\n  duration: 1000,\n  easing: 'easeOutQuart',\n  fn: undefined,\n  from: undefined,\n  loop: undefined,\n  to: undefined,\n  type: undefined,\n});\nconst animationOptions = Object.keys(defaults.animation);\ndefaults.describe('animation', {\n  _fallback: false,\n  _indexable: false,\n  _scriptable: (name) => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn',\n});\ndefaults.set('animations', {\n  colors: {\n    type: 'color',\n    properties: colors\n  },\n  numbers: {\n    type: 'number',\n    properties: numbers\n  },\n});\ndefaults.describe('animations', {\n  _fallback: 'animation',\n});\ndefaults.set('transitions', {\n  active: {\n    animation: {\n      duration: 400\n    }\n  },\n  resize: {\n    animation: {\n      duration: 0\n    }\n  },\n  show: {\n    animations: {\n      colors: {\n        from: 'transparent'\n      },\n      visible: {\n        type: 'boolean',\n        duration: 0\n      },\n    }\n  },\n  hide: {\n    animations: {\n      colors: {\n        to: 'transparent'\n      },\n      visible: {\n        type: 'boolean',\n        easing: 'linear',\n        fn: v => v | 0\n      },\n    }\n  }\n});\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n      });\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex, options) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive) {\n  for (const meta of vScale.getMatchingVisibleMetas('bar').reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true);\n    stack._bottom = getLastIndexInStack(stack, vScale, false);\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return Object.assign(Object.create(parent),\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\nfunction createDataContext(parent, index, element) {\n  return Object.assign(Object.create(parent), {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n  }\n}\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nclass DatasetController {\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.initialize();\n  }\n  initialize() {\n    const me = this;\n    const meta = me._cachedMeta;\n    me.configure();\n    me.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    me.addElements();\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const me = this;\n    const chart = me.chart;\n    const meta = me._cachedMeta;\n    const dataset = me.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = me.getScaleForId(xid);\n    meta.yScale = me.getScaleForId(yid);\n    meta.rScale = me.getScaleForId(rid);\n    meta.iScale = me.getScaleForId(iid);\n    meta.vScale = me.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const me = this;\n    const dataset = me.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = me._data;\n    if (isObject(data)) {\n      me._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, me);\n        const meta = me._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, me);\n      }\n      me._syncList = [];\n      me._data = data;\n    }\n  }\n  addElements() {\n    const me = this;\n    const meta = me._cachedMeta;\n    me._dataCheck();\n    if (me.datasetElementType) {\n      meta.dataset = new me.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const me = this;\n    const meta = me._cachedMeta;\n    const dataset = me.getDataset();\n    let stackChanged = false;\n    me._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    me._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(me, meta._parsed);\n    }\n  }\n  configure() {\n    const me = this;\n    const config = me.chart.config;\n    const scopeKeys = config.datasetScopeKeys(me._type);\n    const scopes = config.getOptionScopes(me.getDataset(), scopeKeys, true);\n    me.options = config.createResolver(scopes, me.getContext());\n    me._parsing = me.options.parsing;\n  }\n  parse(start, count) {\n    const me = this;\n    const {_cachedMeta: meta, _data: data} = me;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (me._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = me.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = me.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = me.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(me, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      range.min = Math.min(range.min, value);\n      range.max = Math.max(range.max, value);\n      value = applyStack(stack, parsedValue, this._cachedMeta.index, {all: true});\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const me = this;\n    const meta = me._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = me._getOtherScale(scale);\n    const stack = canStack && meta._stacked && {keys: getSortedDatasetIndices(me.chart, true), values: null};\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, value, parsed, otherValue;\n    function _skip() {\n      parsed = _parsed[i];\n      value = parsed[scale.axis];\n      otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(value) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      me.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        me.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const me = this;\n    const meta = me._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = me.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const me = this;\n    const meta = me._cachedMeta;\n    me.configure();\n    me._cachedDataOpts = {};\n    me.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(me.options.clip, defaultClip(meta.xScale, meta.yScale, me.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const me = this;\n    const ctx = me._ctx;\n    const chart = me.chart;\n    const meta = me._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = me._drawStart || 0;\n    const count = me._drawCount || (elements.length - start);\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const me = this;\n    const dataset = me.getDataset();\n    let context;\n    if (index >= 0 && index < me._cachedMeta.data.length) {\n      const element = me._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(me.getContext(), index, element));\n      context.parsed = me.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = me.$context ||\n        (me.$context = createDatasetContext(me.chart.getContext(), me.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = me.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const me = this;\n    const active = mode === 'active';\n    const cache = me._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = me.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = me.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(me._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(me.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    const context = () => me.getContext(index, active);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const me = this;\n    const chart = me.chart;\n    const cache = me._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = me.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(me._type, transition);\n      const scopes = config.getOptionScopes(me.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, me.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const me = this;\n    const data = me._data;\n    const elements = me._cachedMeta.data;\n    for (const [method, arg1, arg2] of me._syncList) {\n      me[method](arg1, arg2);\n    }\n    me._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      me.parse(0, count);\n    }\n    if (numData > numMeta) {\n      me._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      me._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count, resetNewElements = true) {\n    const me = this;\n    const meta = me._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new me.dataElementType();\n    }\n    if (me._parsing) {\n      move(meta._parsed);\n    }\n    me.parse(start, count);\n    if (resetNewElements) {\n      me.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const me = this;\n    const meta = me._cachedMeta;\n    if (me._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    this._sync(['_removeElements', start, count]);\n    this._sync(['_insertElements', start, arguments.length - 2]);\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\nDatasetController.defaults = {};\nDatasetController.prototype.datasetElementType = null;\nDatasetController.prototype.dataElementType = null;\n\nclass Element {\n  constructor() {\n    this.x = undefined;\n    this.y = undefined;\n    this.active = false;\n    this.options = undefined;\n    this.$animations = undefined;\n  }\n  tooltipPosition(useFinalPosition) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n  getProps(props, final) {\n    const me = this;\n    const anims = this.$animations;\n    if (!final || !anims) {\n      return me;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : me[prop];\n    });\n    return ret;\n  }\n}\nElement.defaults = {};\nElement.defaultRoutes = undefined;\n\nconst formatters = {\n  values(value) {\n    return isArray(value) ? value : '' + value;\n  },\n  numeric(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n    const locale = this.chart.options.locale;\n    let notation;\n    let delta = tickValue;\n    if (ticks.length > 1) {\n      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n      if (maxTick < 1e-4 || maxTick > 1e+15) {\n        notation = 'scientific';\n      }\n      delta = calculateDelta(tickValue, ticks);\n    }\n    const logDelta = log10(Math.abs(delta));\n    const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n    const options = {notation, minimumFractionDigits: numDecimal, maximumFractionDigits: numDecimal};\n    Object.assign(options, this.options.ticks.format);\n    return formatNumber(tickValue, locale, options);\n  },\n  logarithmic(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n    const remain = tickValue / (Math.pow(10, Math.floor(log10(tickValue))));\n    if (remain === 1 || remain === 2 || remain === 5) {\n      return formatters.numeric.call(this, tickValue, index, ticks);\n    }\n    return '';\n  }\n};\nfunction calculateDelta(tickValue, ticks) {\n  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n    delta = tickValue - Math.floor(tickValue);\n  }\n  return delta;\n}\nvar Ticks = {formatters};\n\ndefaults.set('scale', {\n  display: true,\n  offset: false,\n  reverse: false,\n  beginAtZero: false,\n  bounds: 'ticks',\n  grace: 0,\n  grid: {\n    display: true,\n    lineWidth: 1,\n    drawBorder: true,\n    drawOnChartArea: true,\n    drawTicks: true,\n    tickLength: 8,\n    tickWidth: (_ctx, options) => options.lineWidth,\n    tickColor: (_ctx, options) => options.color,\n    offset: false,\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderWidth: 1\n  },\n  title: {\n    display: false,\n    text: '',\n    padding: {\n      top: 4,\n      bottom: 4\n    }\n  },\n  ticks: {\n    minRotation: 0,\n    maxRotation: 50,\n    mirror: false,\n    textStrokeWidth: 0,\n    textStrokeColor: '',\n    padding: 3,\n    display: true,\n    autoSkip: true,\n    autoSkipPadding: 3,\n    labelOffset: 0,\n    callback: Ticks.formatters.values,\n    minor: {},\n    major: {},\n    align: 'center',\n    crossAlign: 'near',\n    showLabelBackdrop: false,\n    backdropColor: 'rgba(255, 255, 255, 0.75)',\n    backdropPadding: 2,\n  }\n});\ndefaults.route('scale.ticks', 'color', '', 'color');\ndefaults.route('scale.grid', 'color', '', 'borderColor');\ndefaults.route('scale.grid', 'borderColor', '', 'borderColor');\ndefaults.route('scale.title', 'color', '', 'color');\ndefaults.describe('scale', {\n  _fallback: false,\n  _scriptable: (name) => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n  _indexable: (name) => name !== 'borderDash' && name !== 'tickBorderDash',\n});\ndefaults.describe('scales', {\n  _fallback: 'scale',\n});\ndefaults.describe('scale.ticks', {\n  _scriptable: (name) => name !== 'backdropPadding' && name !== 'callback',\n  _indexable: (name) => name !== 'backdropPadding',\n});\n\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const ticksLimit = tickOpts.maxTicksLimit || determineMaxTicks(scale);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return (lines * font.lineHeight) + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return Object.assign(Object.create(parent), {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return Object.assign(Object.create(parent), {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    const me = this;\n    me.options = options.setContext(me.getContext());\n    me.axis = options.axis;\n    me._userMin = me.parse(options.min);\n    me._userMax = me.parse(options.max);\n    me._suggestedMin = me.parse(options.suggestedMin);\n    me._suggestedMax = me.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    const me = this;\n    let {min, max, minDefined, maxDefined} = me.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n    const metas = me.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(me, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    const me = this;\n    return {\n      left: me.paddingLeft || 0,\n      top: me.paddingTop || 0,\n      right: me.paddingRight || 0,\n      bottom: me.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const me = this;\n    const tickOpts = me.options.ticks;\n    const sampleSize = tickOpts.sampleSize;\n    me.beforeUpdate();\n    me.maxWidth = maxWidth;\n    me.maxHeight = maxHeight;\n    me._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    me.ticks = null;\n    me._labelSizes = null;\n    me._gridLineItems = null;\n    me._labelItems = null;\n    me.beforeSetDimensions();\n    me.setDimensions();\n    me.afterSetDimensions();\n    me._maxLength = me.isHorizontal()\n      ? me.width + margins.left + margins.right\n      : me.height + margins.top + margins.bottom;\n    if (!me._dataLimitsCached) {\n      me.beforeDataLimits();\n      me.determineDataLimits();\n      me.afterDataLimits();\n      me._range = _addGrace(me, me.options.grace);\n      me._dataLimitsCached = true;\n    }\n    me.beforeBuildTicks();\n    me.ticks = me.buildTicks() || [];\n    me.afterBuildTicks();\n    const samplingEnabled = sampleSize < me.ticks.length;\n    me._convertTicksToLabels(samplingEnabled ? sample(me.ticks, sampleSize) : me.ticks);\n    me.configure();\n    me.beforeCalculateLabelRotation();\n    me.calculateLabelRotation();\n    me.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      me.ticks = autoSkip(me, me.ticks);\n      me._labelSizes = null;\n    }\n    if (samplingEnabled) {\n      me._convertTicksToLabels(me.ticks);\n    }\n    me.beforeFit();\n    me.fit();\n    me.afterFit();\n    me.afterUpdate();\n  }\n  configure() {\n    const me = this;\n    let reversePixels = me.options.reverse;\n    let startPixel, endPixel;\n    if (me.isHorizontal()) {\n      startPixel = me.left;\n      endPixel = me.right;\n    } else {\n      startPixel = me.top;\n      endPixel = me.bottom;\n      reversePixels = !reversePixels;\n    }\n    me._startPixel = startPixel;\n    me._endPixel = endPixel;\n    me._reversePixels = reversePixels;\n    me._length = endPixel - startPixel;\n    me._alignToPixels = me.options.alignToPixels;\n  }\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    const me = this;\n    if (me.isHorizontal()) {\n      me.width = me.maxWidth;\n      me.left = 0;\n      me.right = me.width;\n    } else {\n      me.height = me.maxHeight;\n      me.top = 0;\n      me.bottom = me.height;\n    }\n    me.paddingLeft = 0;\n    me.paddingTop = 0;\n    me.paddingRight = 0;\n    me.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    const me = this;\n    me.chart.notifyPlugins(name, me.getContext());\n    callback(me.options[name], [me]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const me = this;\n    const tickOpts = me.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], me);\n    }\n  }\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const me = this;\n    const options = me.options;\n    const tickOpts = options.ticks;\n    const numTicks = me.ticks.length;\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {\n      me.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = me._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = _limitValue(me.chart.width - maxLabelWidth, 0, me.maxWidth);\n    tickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = me.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, me.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    me.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const me = this;\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = me;\n    const display = me._isVisible();\n    const isHorizontal = me.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = me.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = me.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && me.ticks.length) {\n        const {first, last, widest, highest} = me._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(me.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        me._calculatePadding(first, last, sin, cos);\n      }\n    }\n    me._handleMargins();\n    if (isHorizontal) {\n      me.width = me._length = chart.width - me._margins.left - me._margins.right;\n      me.height = minSize.height;\n    } else {\n      me.width = minSize.width;\n      me.height = me._length = chart.height - me._margins.top - me._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const me = this;\n    const {ticks: {align, padding}, position} = me.options;\n    const isRotated = me.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && me.axis === 'x';\n    if (me.isHorizontal()) {\n      const offsetLeft = me.getPixelForTick(0) - me.left;\n      const offsetRight = me.right - me.getPixelForTick(me.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      me.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * me.width / (me.width - offsetLeft), 0);\n      me.paddingRight = Math.max((paddingRight - offsetRight + padding) * me.width / (me.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      me.paddingTop = paddingTop + padding;\n      me.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    const me = this;\n    if (me._margins) {\n      me._margins.left = Math.max(me.paddingLeft, me._margins.left);\n      me._margins.top = Math.max(me.paddingTop, me._margins.top);\n      me._margins.right = Math.max(me.paddingRight, me._margins.right);\n      me._margins.bottom = Math.max(me.paddingBottom, me._margins.bottom);\n    }\n  }\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    const me = this;\n    me.beforeTickToLabelConversion();\n    me.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    me.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    const me = this;\n    let labelSizes = me._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = me.options.ticks.sampleSize;\n      let ticks = me.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      me._labelSizes = labelSizes = me._computeLabelSizes(ticks, ticks.length);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; ++i) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    const me = this;\n    if (me._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = me._startPixel + decimal * me._length;\n    return _int16Range(me._alignToPixels ? _alignPixel(me.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {min, max} = this;\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n  getContext(index) {\n    const me = this;\n    const ticks = me.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(me.getContext(), index, tick));\n    }\n    return me.$context ||\n\t\t\t(me.$context = createScaleContext(me.chart.getContext(), me));\n  }\n  _tickSize() {\n    const me = this;\n    const optionTicks = me.options.ticks;\n    const rot = toRadians(me.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = me._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return me.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const me = this;\n    const axis = me.axis;\n    const chart = me.chart;\n    const options = me.options;\n    const {grid, position} = options;\n    const offset = grid.offset;\n    const isHorizontal = me.isHorizontal();\n    const ticks = me.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = grid.setContext(me.getContext());\n    const axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(me.bottom);\n      ty1 = me.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(me.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = me.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(me.right);\n      tx1 = me.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(me.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = me.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(me.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(me.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const optsAtIndex = grid.setContext(me.getContext(i));\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = grid.borderDash || [];\n      const borderDashOffset = optsAtIndex.borderDashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(me, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n    me._ticksLength = ticksLength;\n    me._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const me = this;\n    const axis = me.axis;\n    const options = me.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = me.isHorizontal();\n    const ticks = me.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(me.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = me.bottom - hTickAndPadding;\n      textAlign = me._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = me.top + hTickAndPadding;\n      textAlign = me._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = me._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = me._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = me.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = me._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = me.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = me._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = me._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(me.getContext(i));\n      pixel = me.getPixelForTick(i) + optionTicks.labelOffset;\n      font = me._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      if (isHorizontal) {\n        x = pixel;\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = y + textOffset - labelPadding.top;\n        let left = x - labelPadding.left;\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        }\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor,\n        };\n      }\n      items.push({\n        rotation,\n        label,\n        font,\n        color,\n        strokeColor,\n        strokeWidth,\n        textOffset,\n        textAlign,\n        textBaseline,\n        translation: [x, y],\n        backdrop,\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const me = this;\n    const {position, ticks} = me.options;\n    const rotation = -toRadians(me.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const me = this;\n    const {position, ticks: {crossAlign, mirror, padding}} = me.options;\n    const labelSizes = me._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = me.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = me.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = me.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = me.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = me.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = me.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {textAlign, x};\n  }\n  _computeLabelArea() {\n    const me = this;\n    if (me.options.ticks.mirror) {\n      return;\n    }\n    const chart = me.chart;\n    const position = me.options.position;\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: me.left, bottom: chart.height, right: me.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: me.top, left: 0, bottom: me.bottom, right: chart.width};\n    }\n  }\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const me = this;\n    const grid = me.options.grid;\n    if (!me._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = me.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(me.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const me = this;\n    const grid = me.options.grid;\n    const ctx = me.ctx;\n    const items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const me = this;\n    const {chart, ctx, options: {grid}} = me;\n    const borderOpts = grid.setContext(me.getContext());\n    const axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(me.getContext(0)).lineWidth;\n    const borderValue = me._borderValue;\n    let x1, x2, y1, y2;\n    if (me.isHorizontal()) {\n      x1 = _alignPixel(chart, me.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, me.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.borderWidth;\n    ctx.strokeStyle = borderOpts.borderColor;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const me = this;\n    const optionTicks = me.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = me.ctx;\n    const area = me._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n    const items = me._labelItems || (me._labelItems = me._computeLabelItems(chartArea));\n    let i, ilen;\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      const item = items[i];\n      const tickFont = item.font;\n      const label = item.label;\n      if (item.backdrop) {\n        ctx.fillStyle = item.backdrop.color;\n        ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);\n      }\n      let y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, item);\n    }\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n    if (!title.display) {\n      return;\n    }\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n  draw(chartArea) {\n    const me = this;\n    if (!me._isVisible()) {\n      return;\n    }\n    me.drawBackground();\n    me.drawGrid(chartArea);\n    me.drawBorder();\n    me.drawTitle();\n    me.drawLabels(chartArea);\n  }\n  _layers() {\n    const me = this;\n    const opts = me.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    if (!me._isVisible() || me.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw(chartArea) {\n          me.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw(chartArea) {\n        me.drawBackground();\n        me.drawGrid(chartArea);\n        me.drawTitle();\n      }\n    }, {\n      z: gz + 1,\n      draw() {\n        me.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw(chartArea) {\n        me.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const me = this;\n    const metas = me.chart.getSortedVisibleDatasetMetas();\n    const axisID = me.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === me.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n  _maxDigits() {\n    const me = this;\n    const fontSize = me._resolveTickFontOptions(0).lineHeight;\n    return (me.isHorizontal() ? me.width : me.height) / fontSize;\n  }\n}\n\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const me = this;\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = me.register(proto);\n    }\n    const items = me.items;\n    const id = item.id;\n    const scope = me.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (me.override) {\n      defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add(...args) {\n    this._each('register', args);\n  }\n  remove(...args) {\n    this._each('unregister', args);\n  }\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    const me = this;\n    [...args].forEach(arg => {\n      const reg = typedRegistry || me._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === me.plugins && arg.id)) {\n        me._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || me._getRegistryForType(item);\n          me._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = new Registry();\n\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n  notify(chart, hook, args, filter) {\n    const me = this;\n    if (hook === 'beforeInit') {\n      me._init = me._createDescriptors(chart, true);\n      me._notify(me._init, chart, 'install');\n    }\n    const descriptors = filter ? me._descriptors(chart).filter(filter) : me._descriptors(chart);\n    const result = me._notify(descriptors, chart, hook, args);\n    if (hook === 'destroy') {\n      me._notify(descriptors, chart, 'stop');\n      me._notify(me._init, chart, 'uninstall');\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n    }\n  }\n  return plugins;\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, plugins, options, all) {\n  const result = [];\n  const context = chart.getContext();\n  for (let i = 0; i < plugins.length; i++) {\n    const plugin = plugins[i];\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, plugin, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, plugin, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  return config.createResolver(scopes, context, [''], {scriptable: false, indexable: false, allKeys: true});\n}\n\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y') {\n    return id;\n  }\n  return scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const firstIDs = Object.create(null);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    firstIDs[axis] = firstIDs[axis] || id;\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || firstIDs[axis] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {options, type} = this;\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {},\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n  for (const prop of names) {\n    if ((isScriptable(prop) && isFunction(proxy[prop]))\n      || (isIndexable(prop) && isArray(proxy[prop]))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nvar version = \"3.5.1\";\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\nclass Chart {\n  constructor(item, userConfig) {\n    const me = this;\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas can be reused.'\n      );\n    }\n    const options = config.createResolver(config.chartOptionScopes(), me.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    const context = me.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(() => this.update('resize'), options.resizeDelay || 0);\n    instances[me.id] = me;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(me, 'complete', onAnimationsComplete);\n    animator.listen(me, 'progress', onAnimationProgress);\n    me._initialize();\n    if (me.attached) {\n      me.update();\n    }\n  }\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  _initialize() {\n    const me = this;\n    me.notifyPlugins('beforeInit');\n    if (me.options.responsive) {\n      me.resize();\n    } else {\n      retinaScale(me, me.options.devicePixelRatio);\n    }\n    me.bindEvents();\n    me.notifyPlugins('afterInit');\n    return me;\n  }\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n  _resize(width, height) {\n    const me = this;\n    const options = me.options;\n    const canvas = me.canvas;\n    const aspectRatio = options.maintainAspectRatio && me.aspectRatio;\n    const newSize = me.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || me.platform.getDevicePixelRatio();\n    me.width = newSize.width;\n    me.height = newSize.height;\n    me._aspectRatio = me.aspectRatio;\n    if (!retinaScale(me, newRatio, true)) {\n      return;\n    }\n    me.notifyPlugins('resize', {size: newSize});\n    callback(options.onResize, [me, newSize], me);\n    if (me.attached) {\n      if (me._doResize()) {\n        me.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const me = this;\n    const options = me.options;\n    const scaleOpts = options.scales;\n    const scales = me.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: me.ctx,\n          chart: me\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, (scale) => {\n      layouts.configure(me, scale, scale.options);\n      layouts.addBox(me, scale);\n    });\n  }\n  _updateMetasets() {\n    const me = this;\n    const metasets = me._metasets;\n    const numData = me.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        me._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    me._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const me = this;\n    const {_metasets: metasets, data: {datasets}} = me;\n    if (metasets.length > datasets.length) {\n      delete me._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        me._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const me = this;\n    const newControllers = [];\n    const datasets = me.data.datasets;\n    let i, ilen;\n    me._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = me.getDatasetMeta(i);\n      const type = dataset.type || me.config.type;\n      if (meta.type && meta.type !== type) {\n        me._destroyDatasetMeta(i);\n        meta = me.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, me.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = me.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass.prototype, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(me, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    me._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    const me = this;\n    each(me.data.datasets, (dataset, datasetIndex) => {\n      me.getDatasetMeta(datasetIndex).controller.reset();\n    }, me);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const me = this;\n    const config = me.config;\n    config.update();\n    me._options = config.createResolver(config.chartOptionScopes(), me.getContext());\n    each(me.scales, (scale) => {\n      layouts.removeBox(me, scale);\n    });\n    const animsDisabled = me._animationsDisabled = !me.options.animation;\n    me.ensureScalesHaveIDs();\n    me.buildOrUpdateScales();\n    const existingEvents = new Set(Object.keys(me._listeners));\n    const newEvents = new Set(me.options.events);\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== me.options.responsive) {\n      me.unbindEvents();\n      me.bindEvents();\n    }\n    me._plugins.invalidate();\n    if (me.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n    const newControllers = me.buildOrUpdateControllers();\n    me.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = me.data.datasets.length; i < ilen; i++) {\n      const {controller} = me.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    me._minPadding = minPadding;\n    me._updateLayout(minPadding);\n    if (!animsDisabled) {\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n    me._updateDatasets(mode);\n    me.notifyPlugins('afterUpdate', {mode});\n    me._layers.sort(compare2Level('z', '_idx'));\n    if (me._lastEvent) {\n      me._eventHandler(me._lastEvent, true);\n    }\n    me.render();\n  }\n  _updateLayout(minPadding) {\n    const me = this;\n    if (me.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n    layouts.update(me, me.width, me.height, minPadding);\n    const area = me.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    me._layers = [];\n    each(me.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      me._layers.push(...box._layers());\n    }, me);\n    me._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    me.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    const me = this;\n    const isFunction = typeof mode === 'function';\n    if (me.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n    for (let i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n      me._updateDataset(i, isFunction ? mode({datasetIndex: i}) : mode);\n    }\n    me.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n  _updateDataset(index, mode) {\n    const me = this;\n    const meta = me.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n    if (me.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    me.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    const me = this;\n    if (me.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n    if (animator.has(me)) {\n      if (me.attached && !animator.running(me)) {\n        animator.start(me);\n      }\n    } else {\n      me.draw();\n      onAnimationsComplete({chart: me});\n    }\n  }\n  draw() {\n    const me = this;\n    let i;\n    if (me._resizeBeforeDraw) {\n      const {width, height} = me._resizeBeforeDraw;\n      me._resize(width, height);\n      me._resizeBeforeDraw = null;\n    }\n    me.clear();\n    if (me.width <= 0 || me.height <= 0) {\n      return;\n    }\n    if (me.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n    const layers = me._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(me.chartArea);\n    }\n    me._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(me.chartArea);\n    }\n    me.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const me = this;\n    const metasets = me._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    const me = this;\n    if (me.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n    const metasets = me.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      me._drawDataset(metasets[i]);\n    }\n    me.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const me = this;\n    const ctx = me.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = me.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    if (me.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? me.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? me.height : area.bottom + clip.bottom\n      });\n    }\n    meta.controller.draw();\n    if (useClip) {\n      unclipArea(ctx);\n    }\n    args.cancelable = false;\n    me.notifyPlugins('afterDatasetDraw', args);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const me = this;\n    const dataset = me.data.datasets[datasetIndex];\n    const metasets = me._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = {chart: this, type: 'chart'});\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const me = this;\n    const mode = visible ? 'show' : 'hide';\n    const meta = me.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      me.update();\n    } else {\n      me.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {visible});\n      me.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const me = this;\n    const meta = me._metasets && me._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n      delete me._metasets[datasetIndex];\n    }\n  }\n  destroy() {\n    const me = this;\n    const {canvas, ctx} = me;\n    let i, ilen;\n    me.stop();\n    animator.remove(me);\n    for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {\n      me._destroyDatasetMeta(i);\n    }\n    me.config.clearCache();\n    if (canvas) {\n      me.unbindEvents();\n      clearCanvas(canvas, ctx);\n      me.platform.releaseContext(ctx);\n      me.canvas = null;\n      me.ctx = null;\n    }\n    me.notifyPlugins('destroy');\n    delete instances[me.id];\n  }\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const me = this;\n    const listeners = me._listeners;\n    const platform = me.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(me, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = function(e, x, y) {\n      e.offsetX = x;\n      e.offsetY = y;\n      me._eventHandler(e);\n    };\n    each(me.options.events, (type) => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    const me = this;\n    if (!me._responsiveListeners) {\n      me._responsiveListeners = {};\n    }\n    const listeners = me._responsiveListeners;\n    const platform = me.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(me, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(me, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (me.canvas) {\n        me.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      me.attached = true;\n      me.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      me.attached = false;\n      _remove('resize', listener);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(me.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    const me = this;\n    each(me._listeners, (listener, type) => {\n      me.platform.removeEventListener(me, type, listener);\n    });\n    me._listeners = {};\n    each(me._responsiveListeners, (listener, type) => {\n      me.platform.removeEventListener(me, type, listener);\n    });\n    me._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const me = this;\n    const lastActive = me._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = me.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed) {\n      me._active = active;\n      me._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const me = this;\n    const hoverOptions = me.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      me.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      me.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const me = this;\n    const args = {event: e, replay, cancelable: true};\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.type);\n    if (me.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = me._handleEvent(e, replay);\n    args.cancelable = false;\n    me.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      me.render();\n    }\n    return me;\n  }\n  _handleEvent(e, replay) {\n    const me = this;\n    const {_active: lastActive = [], options} = me;\n    const hoverOptions = options.hover;\n    const useFinalPosition = replay;\n    let active = [];\n    let changed = false;\n    let lastEvent = null;\n    if (e.type !== 'mouseout') {\n      active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n      lastEvent = e.type === 'click' ? me._lastEvent : e;\n    }\n    me._lastEvent = null;\n    if (_isPointInArea(e, me.chartArea, me._minPadding)) {\n      callback(options.onHover, [e, active, me], me);\n      if (e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu') {\n        callback(options.onClick, [e, active, me], me);\n      }\n    }\n    changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      me._active = active;\n      me._updateHoverStyles(active, lastActive, replay);\n    }\n    me._lastEvent = lastEvent;\n    return changed;\n  }\n}\nconst invalidatePlugins = () => each(Chart.instances, (chart) => chart._plugins.invalidate());\nconst enumerable = true;\nObject.defineProperties(Chart, {\n  defaults: {\n    enumerable,\n    value: defaults\n  },\n  instances: {\n    enumerable,\n    value: instances\n  },\n  overrides: {\n    enumerable,\n    value: overrides\n  },\n  registry: {\n    enumerable,\n    value: registry\n  },\n  version: {\n    enumerable,\n    value: version\n  },\n  getChart: {\n    enumerable,\n    value: getChart\n  },\n  register: {\n    enumerable,\n    value: (...items) => {\n      registry.add(...items);\n      invalidatePlugins();\n    }\n  },\n  unregister: {\n    enumerable,\n    value: (...items) => {\n      registry.remove(...items);\n      invalidatePlugins();\n    }\n  }\n});\n\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\nclass DateAdapter {\n  constructor(options) {\n    this.options = options || {};\n  }\n  formats() {\n    return abstract();\n  }\n  parse(value, format) {\n    return abstract();\n  }\n  format(timestamp, format) {\n    return abstract();\n  }\n  add(timestamp, amount, unit) {\n    return abstract();\n  }\n  diff(a, b, unit) {\n    return abstract();\n  }\n  startOf(timestamp, unit, weekday) {\n    return abstract();\n  }\n  endOf(timestamp, unit) {\n    return abstract();\n  }\n}\nDateAdapter.override = function(members) {\n  Object.assign(DateAdapter.prototype, members);\n};\nvar _adapters = {\n  _date: DateAdapter\n};\n\nfunction getAllScaleValues(scale) {\n  if (!scale._cache.$bar) {\n    const metas = scale.getMatchingVisibleMetas('bar');\n    let values = [];\n    for (let i = 0, ilen = metas.length; i < ilen; i++) {\n      values = values.concat(metas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(scale) {\n  const values = getAllScaleValues(scale);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nclass BarController extends DatasetController {\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const me = this;\n    const meta = me._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = me.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    const me = this;\n    me.enableOptionSharing = true;\n    super.initialize();\n    const meta = me._cachedMeta;\n    meta.stack = me.getDataset().stack;\n  }\n  update(mode) {\n    const me = this;\n    const meta = me._cachedMeta;\n    me.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const me = this;\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = me;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = me._getRuler();\n    const firstOpts = me.resolveDataElementOptions(start, mode);\n    const sharedOptions = me.getSharedOptions(firstOpts);\n    const includeOptions = me.includeOptions(mode, sharedOptions);\n    me.updateSharedOptions(sharedOptions, mode, firstOpts);\n    for (let i = start; i < start + count; i++) {\n      const parsed = me.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : me._calculateBarValuePixels(i);\n      const ipixels = me._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || me.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      setBorderSkipped(properties, properties.options || bars[i].options, stack, index);\n      me.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const me = this;\n    const meta = me._cachedMeta;\n    const iScale = meta.iScale;\n    const metasets = iScale.getMatchingVisibleMetas(me._type);\n    const stacked = iScale.options.stacked;\n    const ilen = metasets.length;\n    const stacks = [];\n    let i, item;\n    for (i = 0; i < ilen; ++i) {\n      item = metasets[i];\n      if (!item.controller.options.grouped) {\n        continue;\n      }\n      if (typeof dataIndex !== 'undefined') {\n        const val = item.controller.getParsed(dataIndex)[\n          item.controller._cachedMeta.vScale.axis\n        ];\n        if (isNullOrUndef(val) || isNaN(val)) {\n          continue;\n        }\n      }\n      if (stacked === false || stacks.indexOf(item.stack) === -1 ||\n\t\t\t\t(stacked === undefined && item.stack === undefined)) {\n        stacks.push(item.stack);\n      }\n      if (item.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1;\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n  _getRuler() {\n    const me = this;\n    const opts = me.options;\n    const meta = me._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(me.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(iScale);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: me._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const me = this;\n    const {_cachedMeta: {vScale, _stacked}, options: {base: baseValue, minBarLength}} = me;\n    const actualBase = baseValue || 0;\n    const parsed = me.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? me.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (me.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      head = base + size;\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const me = this;\n    const scale = ruler.scale;\n    const options = me.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? me._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n      const stackIndex = me._getStackIndex(me.index, me._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(me.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const me = this;\n    const meta = me._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (me.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(me._ctx);\n      }\n    }\n  }\n}\nBarController.id = 'bar';\nBarController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'bar',\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: true,\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'base', 'width', 'height']\n    }\n  }\n};\nBarController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category',\n      offset: true,\n      grid: {\n        offset: true\n      }\n    },\n    _value_: {\n      type: 'linear',\n      beginAtZero: true,\n    }\n  }\n};\n\nclass BubbleController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = [];\n    let i, ilen, item;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      item = data[i];\n      parsed.push({\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), i),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), i),\n        _custom: item && item.r && +item.r\n      });\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const {data, _parsed} = this._cachedMeta;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size() / 2, _parsed[i]._custom);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const me = this;\n    const meta = me._cachedMeta;\n    const {xScale, yScale} = meta;\n    const parsed = me.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: meta.label,\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const me = this;\n    const points = me._cachedMeta.data;\n    me.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const me = this;\n    const reset = mode === 'reset';\n    const {iScale, vScale} = me._cachedMeta;\n    const firstOpts = me.resolveDataElementOptions(start, mode);\n    const sharedOptions = me.getSharedOptions(firstOpts);\n    const includeOptions = me.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && me.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = me.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      me.updateElement(point, i, properties, mode);\n    }\n    me.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\nBubbleController.id = 'bubble';\nBubbleController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'point',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'borderWidth', 'radius']\n    }\n  }\n};\nBubbleController.overrides = {\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        }\n      }\n    }\n  }\n};\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\nclass DoughnutController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    let i, ilen;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      meta._parsed[i] = +data[i];\n    }\n  }\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n    const me = this;\n    for (let i = 0; i < me.chart.data.datasets.length; ++i) {\n      if (me.chart.isDatasetVisible(i)) {\n        const controller = me.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n  update(mode) {\n    const me = this;\n    const chart = me.chart;\n    const {chartArea} = chart;\n    const meta = me._cachedMeta;\n    const arcs = meta.data;\n    const spacing = me.getMaxBorderWidth() + me.getMaxOffset(arcs) + me.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(me.options.cutout, maxSize), 1);\n    const chartWeight = me._getRingWeight(me.index);\n    const {circumference, rotation} = me._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(me.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / me._getVisibleDatasetWeightTotal();\n    me.offsetX = offsetX * outerRadius;\n    me.offsetY = offsetY * outerRadius;\n    meta.total = me.calculateTotal();\n    me.outerRadius = outerRadius - radiusLength * me._getRingWeightOffset(me.index);\n    me.innerRadius = Math.max(me.outerRadius - radiusLength * chartWeight, 0);\n    me.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const me = this;\n    const opts = me.options;\n    const meta = me._cachedMeta;\n    const circumference = me._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return me.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const me = this;\n    const reset = mode === 'reset';\n    const chart = me.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : me.innerRadius;\n    const outerRadius = animateScale ? 0 : me.outerRadius;\n    const firstOpts = me.resolveDataElementOptions(start, mode);\n    const sharedOptions = me.getSharedOptions(firstOpts);\n    const includeOptions = me.includeOptions(mode, sharedOptions);\n    let startAngle = me._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += me._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = me._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + me.offsetX,\n        y: centerY + me.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || me.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      me.updateElement(arc, i, properties, mode);\n    }\n    me.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const me = this;\n    const meta = me._cachedMeta;\n    const chart = me.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    const me = this;\n    let max = 0;\n    const chart = me.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          if (controller !== me) {\n            controller.configure();\n          }\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\nDoughnutController.id = 'doughnut';\nDoughnutController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: false\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n    },\n  },\n  cutout: '50%',\n  rotation: 0,\n  circumference: 360,\n  radius: '100%',\n  spacing: 0,\n  indexAxis: 'r',\n};\nDoughnutController.descriptors = {\n  _scriptable: (name) => name !== 'spacing',\n  _indexable: (name) => name !== 'spacing',\n};\nDoughnutController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {labels: {pointStyle}} = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    },\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(tooltipItem) {\n          let dataLabel = tooltipItem.label;\n          const value = ': ' + tooltipItem.formattedValue;\n          if (isArray(dataLabel)) {\n            dataLabel = dataLabel.slice();\n            dataLabel[0] += value;\n          } else {\n            dataLabel += value;\n          }\n          return dataLabel;\n        }\n      }\n    }\n  }\n};\n\nclass LineController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  update(mode) {\n    const me = this;\n    const meta = me._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    const animationsDisabled = me.chart._animationsDisabled;\n    let {start, count} = getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    me._drawStart = start;\n    me._drawCount = count;\n    if (scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._datasetIndex = me.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = me.resolveDatasetElementOptions(mode);\n    if (!me.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = me.options.segment;\n    me.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    me.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const me = this;\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked} = me._cachedMeta;\n    const firstOpts = me.resolveDataElementOptions(start, mode);\n    const sharedOptions = me.getSharedOptions(firstOpts);\n    const includeOptions = me.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const spanGaps = me.options.spanGaps;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = me.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && me.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = me.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? me.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      properties.parsed = parsed;\n      if (includeOptions) {\n        properties.options = sharedOptions || me.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        me.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    me.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const me = this;\n    const meta = me._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(me.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(me.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\nLineController.id = 'line';\nLineController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  showLine: true,\n  spanGaps: false,\n};\nLineController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category',\n    },\n    _value_: {\n      type: 'linear',\n    },\n  }\n};\nfunction getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n  const pointCount = points.length;\n  let start = 0;\n  let count = pointCount;\n  if (meta._sorted) {\n    const {iScale, _parsed} = meta;\n    const axis = iScale.axis;\n    const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n    if (minDefined) {\n      start = _limitValue(Math.min(\n        _lookupByKey(_parsed, iScale.axis, min).lo,\n        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo),\n      0, pointCount - 1);\n    }\n    if (maxDefined) {\n      count = _limitValue(Math.max(\n        _lookupByKey(_parsed, iScale.axis, max).hi + 1,\n        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max)).hi + 1),\n      start, pointCount) - start;\n    } else {\n      count = pointCount - start;\n    }\n  }\n  return {start, count};\n}\nfunction scaleRangesChanged(meta) {\n  const {xScale, yScale, _scaleRanges} = meta;\n  const newRanges = {\n    xmin: xScale.min,\n    xmax: xScale.max,\n    ymin: yScale.min,\n    ymax: yScale.max\n  };\n  if (!_scaleRanges) {\n    meta._scaleRanges = newRanges;\n    return true;\n  }\n  const changed = _scaleRanges.xmin !== xScale.min\n\t\t|| _scaleRanges.xmax !== xScale.max\n\t\t|| _scaleRanges.ymin !== yScale.min\n\t\t|| _scaleRanges.ymax !== yScale.max;\n  Object.assign(_scaleRanges, newRanges);\n  return changed;\n}\n\nclass PolarAreaController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const me = this;\n    const meta = me._cachedMeta;\n    const chart = me.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _updateRadius() {\n    const me = this;\n    const chart = me.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    me.outerRadius = outerRadius - (radiusLength * me.index);\n    me.innerRadius = me.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const me = this;\n    const reset = mode === 'reset';\n    const chart = me.chart;\n    const dataset = me.getDataset();\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = me._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / me.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += me._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + me._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(dataset.data[i]) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: me.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      me.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const dataset = this.getDataset();\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(dataset.data[index]) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\nPolarAreaController.id = 'polarArea';\nPolarAreaController.defaults = {\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: true\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n    },\n  },\n  indexAxis: 'r',\n  startAngle: 0,\n};\nPolarAreaController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {labels: {pointStyle}} = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    },\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(context) {\n          return context.chart.data.labels[context.dataIndex] + ': ' + context.formattedValue;\n        }\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      beginAtZero: true,\n      grid: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      startAngle: 0\n    }\n  }\n};\n\nclass PieController extends DoughnutController {\n}\nPieController.id = 'pie';\nPieController.defaults = {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: '100%'\n};\n\nclass RadarController extends DatasetController {\n  getLabelAndValue(index) {\n    const me = this;\n    const vScale = me._cachedMeta.vScale;\n    const parsed = me.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  update(mode) {\n    const me = this;\n    const meta = me._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = me.resolveDatasetElementOptions(mode);\n      if (!me.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      me.updateElement(line, undefined, properties, mode);\n    }\n    me.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const me = this;\n    const dataset = me.getDataset();\n    const scale = me._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = me.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, dataset.data[i]);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      me.updateElement(point, i, properties, mode);\n    }\n  }\n}\nRadarController.id = 'radar';\nRadarController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  indexAxis: 'r',\n  showLine: true,\n  elements: {\n    line: {\n      fill: 'start'\n    }\n  },\n};\nRadarController.overrides = {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: 'radialLinear',\n    }\n  }\n};\n\nclass ScatterController extends LineController {\n}\nScatterController.id = 'scatter';\nScatterController.defaults = {\n  showLine: false,\n  fill: false\n};\nScatterController.overrides = {\n  interaction: {\n    mode: 'point'\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(item) {\n          return '(' + item.label + ', ' + item.formattedValue + ')';\n        }\n      }\n    }\n  },\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n};\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPolarAreaController: PolarAreaController,\nPieController: PieController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\nfunction clipArc(ctx, element, endAngle) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\nfunction pathArc(ctx, element, offset, spacing, end) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);\n  if (outerEnd > 0) {\n    const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n    ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n  }\n  const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n  ctx.lineTo(p4.x, p4.y);\n  if (innerEnd > 0) {\n    const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n    ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n  }\n  ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), startAngle + (innerStart / innerRadius), true);\n  if (innerStart > 0) {\n    const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n    ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n  }\n  const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n  ctx.lineTo(p8.x, p8.y);\n  if (outerStart > 0) {\n    const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n    ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, startAngle + TAU);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + circumference % TAU;\n      if (circumference % TAU === 0) {\n        endAngle += TAU;\n      }\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawFullCircleBorders(ctx, element, inner) {\n  const {x, y, startAngle, pixelMargin, fullCircles} = element;\n  const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);\n  const innerRadius = element.innerRadius + pixelMargin;\n  let i;\n  if (inner) {\n    clipArc(ctx, element, startAngle + TAU);\n  }\n  ctx.beginPath();\n  ctx.arc(x, y, innerRadius, startAngle + TAU, startAngle, true);\n  for (i = 0; i < fullCircles; ++i) {\n    ctx.stroke();\n  }\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle, startAngle + TAU);\n  for (i = 0; i < fullCircles; ++i) {\n    ctx.stroke();\n  }\n}\nfunction drawBorder(ctx, element, offset, spacing, endAngle) {\n  const {options} = element;\n  const inner = options.borderAlign === 'inner';\n  if (!options.borderWidth) {\n    return;\n  }\n  if (inner) {\n    ctx.lineWidth = options.borderWidth * 2;\n    ctx.lineJoin = 'round';\n  } else {\n    ctx.lineWidth = options.borderWidth;\n    ctx.lineJoin = 'bevel';\n  }\n  if (element.fullCircles) {\n    drawFullCircleBorders(ctx, element, inner);\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  pathArc(ctx, element, offset, spacing, endAngle);\n  ctx.stroke();\n}\nclass ArcElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n    const betweenAngles = circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = (distance >= innerRadius + rAdjust && distance <= outerRadius + rAdjust);\n    return (betweenAngles && withinRadius);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference',\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const me = this;\n    const {options, circumference} = me;\n    const offset = (options.offset || 0) / 2;\n    const spacing = (options.spacing || 0) / 2;\n    me.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    me.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n    if (circumference === 0 || me.innerRadius < 0 || me.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    let radiusOffset = 0;\n    if (offset) {\n      radiusOffset = offset / 2;\n      const halfAngle = (me.startAngle + me.endAngle) / 2;\n      ctx.translate(Math.cos(halfAngle) * radiusOffset, Math.sin(halfAngle) * radiusOffset);\n      if (me.circumference >= PI) {\n        radiusOffset = offset;\n      }\n    }\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    const endAngle = drawArc(ctx, me, radiusOffset, spacing);\n    drawBorder(ctx, me, radiusOffset, spacing, endAngle);\n    ctx.restore();\n  }\n}\nArcElement.id = 'arc';\nArcElement.defaults = {\n  borderAlign: 'center',\n  borderColor: '#fff',\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  spacing: 0,\n  angle: undefined,\n};\nArcElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor'\n};\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && line.segments.length === 1) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const me = this;\n    const options = me.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !me._pointsUpdated) {\n      const loop = options.spanGaps ? me._loop : me._fullLoop;\n      _updateBezierControlPoints(me._points, options, chartArea, loop, indexAxis);\n      me._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    const me = this;\n    me._points = points;\n    delete me._segments;\n    delete me._path;\n    me._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const me = this;\n    const options = me.options;\n    const value = point[property];\n    const points = me.points;\n    const segments = _boundSegments(me, {property, start: value, end: value});\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const me = this;\n    const segments = me.segments;\n    const segmentMethod = _getSegmentMethod(me);\n    let loop = me._loop;\n    start = start || 0;\n    count = count || (me.points.length - start);\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, me, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const me = this;\n    const options = me.options || {};\n    const points = me.points || [];\n    if (!points.length || !options.borderWidth) {\n      return;\n    }\n    ctx.save();\n    draw(ctx, me, start, count);\n    ctx.restore();\n    if (me.animated) {\n      me._pointsUpdated = false;\n      me._path = undefined;\n    }\n  }\n}\nLineElement.id = 'line';\nLineElement.defaults = {\n  borderCapStyle: 'butt',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: 'miter',\n  borderWidth: 3,\n  capBezierPoints: true,\n  cubicInterpolationMode: 'default',\n  fill: false,\n  spanGaps: false,\n  stepped: false,\n  tension: 0,\n};\nLineElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\nLineElement.descriptors = {\n  _scriptable: true,\n  _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n};\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\nclass PointElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const me = this;\n    const options = me.options;\n    if (me.skip || options.radius < 0.1 || !_isPointInArea(me, area, me.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, me.x, me.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    return options.radius + options.hitRadius;\n  }\n}\nPointElement.id = 'point';\nPointElement.defaults = {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: 'circle',\n  radius: 3,\n  rotation: 0\n};\nPointElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\n\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {left, top, right, bottom};\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds\n\t\t&& (skipX || x >= bounds.left && x <= bounds.right)\n\t\t&& (skipY || y >= bounds.top && y <= bounds.bottom);\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const options = this.options;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    const inflateAmount = 0.33;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = options.borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount, outer));\n    ctx.fillStyle = options.backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\nBarElement.id = 'bar';\nBarElement.defaults = {\n  borderSkipped: 'start',\n  borderWidth: 0,\n  borderRadius: 0,\n  enableBorderRadius: true,\n  pointStyle: undefined\n};\nBarElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nLineElement: LineElement,\nPointElement: PointElement,\nBarElement: BarElement\n});\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {value: data});\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {start, count};\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (meta.type !== 'line') {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    if (fill[0] === '-' || fill[0] === '+') {\n      target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n      return false;\n    }\n    return target;\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  let target = null;\n  let horizontal;\n  if (fill === 'start') {\n    target = scale.bottom;\n  } else if (fill === 'end') {\n    target = scale.top;\n  } else if (isObject(fill)) {\n    target = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    target = scale.getBasePixel();\n  }\n  if (isNumberFinite(target)) {\n    horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? target : null,\n      y: horizontal ? null : target\n    };\n  }\n  return null;\n}\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const target = [];\n  const start = options.reverse ? scale.max : scale.min;\n  const end = options.reverse ? scale.min : scale.max;\n  let i, center, value;\n  if (fill === 'start') {\n    value = start;\n  } else if (fill === 'end') {\n    value = end;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  if (options.grid.circular) {\n    center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\nfunction buildStackLine(source) {\n  const {chart, scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(chart, index);\n  linesBelow.push(createBoundaryLine({x: null, y: scale.bottom}, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\nconst isLineAndNotInHideAnimation = (meta) => meta.type === 'line' && !meta.hidden;\nfunction getLinesBelow(chart, index) {\n  const below = [];\n  const metas = chart.getSortedVisibleDatasetMetas();\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (isLineAndNotInHideAnimation(meta)) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (pointValue >= firstValue && pointValue <= lastValue) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\nfunction getTarget(source) {\n  const {chart, fill, line} = source;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return createBoundaryLine(boundary, line);\n}\nfunction createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _clip(ctx, target, clipY) {\n  ctx.beginPath();\n  target.path(ctx);\n  ctx.lineTo(target.last().x, clipY);\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = findSegmentEnd(start, end, points);\n    const bounds = getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = _boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nfunction _fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    _clip(ctx, target, area.top);\n    _fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    _clip(ctx, target, area.bottom);\n  }\n  _fill(ctx, {line, target, color: below, scale, property});\n  ctx.restore();\n}\nfunction drawfill(ctx, source, area) {\n  const target = getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\nvar plugin_filler = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw) {\n        drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (source) {\n        drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!source || source.fill === false || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    const me = this;\n    me.maxWidth = maxWidth;\n    me.maxHeight = maxHeight;\n    me._margins = margins;\n    me.setDimensions();\n    me.buildLabels();\n    me.fit();\n  }\n  setDimensions() {\n    const me = this;\n    if (me.isHorizontal()) {\n      me.width = me.maxWidth;\n      me.left = me._margins.left;\n      me.right = me.width;\n    } else {\n      me.height = me.maxHeight;\n      me.top = me._margins.top;\n      me.bottom = me.height;\n    }\n  }\n  buildLabels() {\n    const me = this;\n    const labelOpts = me.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [me.chart], me) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, me.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, me.chart.data));\n    }\n    if (me.options.reverse) {\n      legendItems.reverse();\n    }\n    me.legendItems = legendItems;\n  }\n  fit() {\n    const me = this;\n    const {options, ctx} = me;\n    if (!options.display) {\n      me.width = me.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = me._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (me.isHorizontal()) {\n      width = me.maxWidth;\n      height = me._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = me.maxHeight;\n      width = me._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    }\n    me.width = Math.min(width, options.maxWidth || me.maxWidth);\n    me.height = Math.min(height, options.maxHeight || me.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const me = this;\n    const {ctx, maxWidth, options: {labels: {padding}}} = me;\n    const hitboxes = me.legendHitBoxes = [];\n    const lineWidths = me.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    me.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {\n    const me = this;\n    const {ctx, maxHeight, options: {labels: {padding}}} = me;\n    const hitboxes = me.legendHitBoxes = [];\n    const columnSizes = me.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    me.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight});\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight});\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    const me = this;\n    if (!me.options.display) {\n      return;\n    }\n    const titleHeight = me._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = me;\n    const rtlHelper = getRtlAdapter(rtl, me.left, me.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, me.left + padding, me.right - me.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, me.left + padding, me.right - me.lineWidths[row]);\n        }\n        hitbox.top += me.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, me.top + titleHeight + padding, me.bottom - me.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, me.top + titleHeight + padding, me.bottom - me.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += me.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    const me = this;\n    if (me.options.display) {\n      const ctx = me.ctx;\n      clipArea(ctx, me);\n      me._draw();\n      unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const me = this;\n    const {options: opts, columnSizes, lineWidths, ctx} = me;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, me.left, me.width);\n    const labelFont = toFont(labelOpts.font);\n    const {color: fontColor, padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    me.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxWidth * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPoint(ctx, drawOptions, centerX, centerY);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = me.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, me.left + padding, me.right - lineWidths[0]),\n        y: me.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: me.left + padding,\n        y: _alignStartEnd(align, me.top + titleHeight + padding, me.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    overrideTextDirection(me.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    me.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor || fontColor;\n      ctx.fillStyle = legendItem.fontColor || fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(me.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > me.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, me.left + padding, me.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > me.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, me.top + titleHeight + padding, me.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : me.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(me.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const me = this;\n    const opts = me.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = getRtlAdapter(opts.rtl, me.left, me.width);\n    const ctx = me.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = me.left;\n    let maxWidth = me.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...me.lineWidths);\n      y = me.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, me.right - maxWidth);\n    } else {\n      const maxHeight = me.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, me.top, me.bottom - maxHeight - opts.labels.padding - me._computeTitleHeight());\n    }\n    const x = _alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    const me = this;\n    let i, hitBox, lh;\n    if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {\n      lh = me.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {\n          return me.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const me = this;\n    const opts = me.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = me._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove') {\n      const previous = me._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, me], me);\n      }\n      me._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, me], me);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, me], me);\n    }\n  }\n}\nfunction isListened(type, opts) {\n  if (type === 'mousemove' && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color}} = chart.legend.options;\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: 0,\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const me = this;\n    const opts = me.options;\n    me.left = 0;\n    me.top = 0;\n    if (!opts.display) {\n      me.width = me.height = me.right = me.bottom = 0;\n      return;\n    }\n    me.width = me.right = maxWidth;\n    me.height = me.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    me._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + me._padding.height;\n    if (me.isHorizontal()) {\n      me.height = textSize;\n    } else {\n      me.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n  draw() {\n    const me = this;\n    const ctx = me.ctx;\n    const opts = me.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + me._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = me._drawArgs(offset);\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip._chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? (boxWidth + 2) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {width, height};\n}\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const radiusAndPadding = cornerRadius + caretPadding;\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= radiusAndPadding;\n  } else if (xAlign === 'right') {\n    x += radiusAndPadding;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return Object.assign(Object.create(parent), {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nclass Tooltip extends Element {\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._chart = config._chart;\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const me = this;\n    const cached = me._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = me._chart;\n    const options = me.options.setContext(me.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(me._chart, opts);\n    if (opts._cacheable) {\n      me._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    const me = this;\n    return me.$context ||\n\t\t\t(me.$context = createTooltipContext(me._chart.getContext(), me, me._tooltipItems));\n  }\n  getTitle(context, options) {\n    const me = this;\n    const {callbacks} = options;\n    const beforeTitle = callbacks.beforeTitle.apply(me, [context]);\n    const title = callbacks.title.apply(me, [context]);\n    const afterTitle = callbacks.afterTitle.apply(me, [context]);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [tooltipItems]));\n  }\n  getBody(tooltipItems, options) {\n    const me = this;\n    const {callbacks} = options;\n    const bodyItems = [];\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(scoped.beforeLabel.call(me, context)));\n      pushOrConcat(bodyItem.lines, scoped.label.call(me, context));\n      pushOrConcat(bodyItem.after, splitNewlines(scoped.afterLabel.call(me, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [tooltipItems]));\n  }\n  getFooter(tooltipItems, options) {\n    const me = this;\n    const {callbacks} = options;\n    const beforeFooter = callbacks.beforeFooter.apply(me, [tooltipItems]);\n    const footer = callbacks.footer.apply(me, [tooltipItems]);\n    const afterFooter = callbacks.afterFooter.apply(me, [tooltipItems]);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const me = this;\n    const active = me._active;\n    const data = me._chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(me._chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(scoped.labelColor.call(me, context));\n      labelPointStyles.push(scoped.labelPointStyle.call(me, context));\n      labelTextColors.push(scoped.labelTextColor.call(me, context));\n    });\n    me.labelColors = labelColors;\n    me.labelPointStyles = labelPointStyles;\n    me.labelTextColors = labelTextColors;\n    me.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const me = this;\n    const options = me.options.setContext(me.getContext());\n    const active = me._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (me.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(me, active, me._eventPosition);\n      tooltipItems = me._createItems(options);\n      me.title = me.getTitle(tooltipItems, options);\n      me.beforeBody = me.getBeforeBody(tooltipItems, options);\n      me.body = me.getBody(tooltipItems, options);\n      me.afterBody = me.getAfterBody(tooltipItems, options);\n      me.footer = me.getFooter(tooltipItems, options);\n      const size = me._size = getTooltipSize(me, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(me._chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, me._chart);\n      me.xAlign = alignment.xAlign;\n      me.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    me._tooltipItems = tooltipItems;\n    me.$context = undefined;\n    if (properties) {\n      me._resolveAnimations().update(me, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(me, {chart: me._chart, tooltip: me, replay});\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {cornerRadius, caretSize} = options;\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + cornerRadius + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - cornerRadius - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n  drawTitle(pt, ctx, options) {\n    const me = this;\n    const title = me.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, me.x, me.width);\n      pt.x = getAlignedX(me, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const me = this;\n    const labelColors = me.labelColors[i];\n    const labelPointStyle = me.labelPointStyles[i];\n    const {boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(me, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = labelColors.borderWidth || 1;\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = me.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const me = this;\n    const {body} = me;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, me.x, me.width);\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(me, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(me.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + 1) : (boxWidth + 2)\n      : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = me.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        me._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(me.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const me = this;\n    const footer = me.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, me.x, me.width);\n      pt.x = getAlignedX(me, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const radius = options.cornerRadius;\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + radius, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - radius, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - radius);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + radius, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + radius);\n    ctx.quadraticCurveTo(x, y, x + radius, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const me = this;\n    const chart = me._chart;\n    const anims = me.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(me, me._active, me._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = me._size = getTooltipSize(me, options);\n      const positionAndSize = Object.assign({}, position, me._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        me.xAlign = alignment.xAlign;\n        me.yAlign = alignment.yAlign;\n        me.width = size.width;\n        me.height = size.height;\n        me.caretX = position.x;\n        me.caretY = position.y;\n        me._resolveAnimations().update(me, point);\n      }\n    }\n  }\n  draw(ctx) {\n    const me = this;\n    const options = me.options.setContext(me.getContext());\n    let opacity = me.opacity;\n    if (!opacity) {\n      return;\n    }\n    me._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: me.width,\n      height: me.height\n    };\n    const pt = {\n      x: me.x,\n      y: me.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = me.title.length || me.beforeBody.length || me.body.length || me.afterBody.length || me.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      me.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      me.drawTitle(pt, ctx, options);\n      me.drawBody(pt, ctx, options);\n      me.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const me = this;\n    const lastActive = me._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = me._chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = me._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      me._active = active;\n      me._eventPosition = eventPosition;\n      me.update(true);\n    }\n  }\n  handleEvent(e, replay) {\n    const me = this;\n    const options = me.options;\n    const lastActive = me._active || [];\n    let changed = false;\n    let active = [];\n    if (e.type !== 'mouseout') {\n      active = me._chart.getElementsAtEventForMode(e, options.mode, options, replay);\n      if (options.reverse) {\n        active.reverse();\n      }\n    }\n    const positionChanged = me._positionChanged(active, e);\n    changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      me._active = active;\n      if (options.enabled || options.external) {\n        me._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        me.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\nTooltip.positioners = positioners;\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({_chart: chart, options});\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    const args = {\n      tooltip\n    };\n    if (chart.notifyPlugins('beforeTooltipDraw', args) === false) {\n      return;\n    }\n    if (tooltip) {\n      tooltip.draw(chart.ctx);\n    }\n    chart.notifyPlugins('afterTooltipDraw', args);\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: {\n      beforeTitle: noop,\n      title(tooltipItems) {\n        if (tooltipItems.length > 0) {\n          const item = tooltipItems[0];\n          const labels = item.chart.data.labels;\n          const labelCount = labels ? labels.length : 0;\n          if (this && this.options && this.options.mode === 'dataset') {\n            return item.dataset.label || '';\n          } else if (item.label) {\n            return item.label;\n          } else if (labelCount > 0 && item.dataIndex < labelCount) {\n            return labels[item.dataIndex];\n          }\n        }\n        return '';\n      },\n      afterTitle: noop,\n      beforeBody: noop,\n      beforeLabel: noop,\n      label(tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n          return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n          label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n          label += value;\n        }\n        return label;\n      },\n      labelColor(tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n          borderColor: options.borderColor,\n          backgroundColor: options.backgroundColor,\n          borderWidth: options.borderWidth,\n          borderDash: options.borderDash,\n          borderDashOffset: options.borderDashOffset,\n          borderRadius: 0,\n        };\n      },\n      labelTextColor() {\n        return this.options.bodyColor;\n      },\n      labelPointStyle(tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n          pointStyle: options.pointStyle,\n          rotation: options.rotation,\n        };\n      },\n      afterLabel: noop,\n      afterBody: noop,\n      beforeFooter: noop,\n      footer: noop,\n      afterFooter: noop\n    }\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nDecimation: plugin_decimation,\nFiller: plugin_filler,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index) => typeof raw === 'string'\n  ? labels.push(raw) - 1\n  : isNaN(raw) ? null : index;\nfunction findOrAddLabel(labels, raw, index) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\nclass CategoryScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw));\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const me = this;\n    const {minDefined, maxDefined} = me.getUserBounds();\n    let {min, max} = me.getMinMax(true);\n    if (me.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = me.getLabels().length - 1;\n      }\n    }\n    me.min = min;\n    me.max = max;\n  }\n  buildTicks() {\n    const me = this;\n    const min = me.min;\n    const max = me.max;\n    const offset = me.options.offset;\n    const ticks = [];\n    let labels = me.getLabels();\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n    me._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    me._startValue = me.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    const me = this;\n    const labels = me.getLabels();\n    if (value >= 0 && value < labels.length) {\n      return labels[value];\n    }\n    return value;\n  }\n  configure() {\n    const me = this;\n    super.configure();\n    if (!me.isHorizontal()) {\n      me._reversePixels = !me._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    const me = this;\n    if (typeof value !== 'number') {\n      value = me.parse(value);\n    }\n    return value === null ? NaN : me.getPixelForDecimal((value - me._startValue) / me._valueRange);\n  }\n  getPixelForTick(index) {\n    const me = this;\n    const ticks = me.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return me.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    const me = this;\n    return Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\nCategoryScale.id = 'category';\nCategoryScale.defaults = {\n  ticks: {\n    callback: CategoryScale.prototype.getLabelForValue\n  }\n};\n\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const me = this;\n    const {beginAtZero} = me.options;\n    const {minDefined, maxDefined} = me.getUserBounds();\n    let {min, max} = me;\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = 1;\n      if (max >= Number.MAX_SAFE_INTEGER || min <= Number.MIN_SAFE_INTEGER) {\n        offset = Math.abs(max * 0.05);\n      }\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    me.min = min;\n    me.max = max;\n  }\n  getTickLimit() {\n    const me = this;\n    const tickOpts = me.options.ticks;\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;\n    } else {\n      maxTicks = me.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const me = this;\n    const opts = me.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = me.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: me._maxDigits(),\n      horizontal: me.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = me._range || me;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, me, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      me.start = me.max;\n      me.end = me.min;\n    } else {\n      me.start = me.min;\n      me.end = me.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const me = this;\n    const ticks = me.ticks;\n    let start = me.min;\n    let end = me.max;\n    super.configure();\n    if (me.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    me._startValue = start;\n    me._endValue = end;\n    me._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale);\n  }\n}\n\nclass LinearScale extends LinearScaleBase {\n  determineDataLimits() {\n    const me = this;\n    const {min, max} = me.getMinMax(true);\n    me.min = isNumberFinite(min) ? min : 0;\n    me.max = isNumberFinite(max) ? max : 1;\n    me.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const me = this;\n    const horizontal = me.isHorizontal();\n    const length = horizontal ? me.width : me.height;\n    const minRotation = toRadians(me.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = me._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\nLinearScale.id = 'linear';\nLinearScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.numeric\n  }\n};\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, Math.floor(log10(tickVal))));\n  return remain === 1;\n}\nfunction generateTicks(generationOptions, dataRange) {\n  const endExp = Math.floor(log10(dataRange.max));\n  const endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n  const ticks = [];\n  let tickVal = finiteOrDefault(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));\n  let exp = Math.floor(log10(tickVal));\n  let significand = Math.floor(tickVal / Math.pow(10, exp));\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  do {\n    ticks.push({value: tickVal, major: isMajor(tickVal)});\n    ++significand;\n    if (significand === 10) {\n      significand = 1;\n      ++exp;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n  } while (exp < endExp || (exp === endExp && significand < endSignificand));\n  const lastTick = finiteOrDefault(generationOptions.max, tickVal);\n  ticks.push({value: lastTick, major: isMajor(tickVal)});\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const me = this;\n    const {min, max} = me.getMinMax(true);\n    me.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    me.max = isNumberFinite(max) ? Math.max(0, max) : null;\n    if (me.options.beginAtZero) {\n      me._zero = true;\n    }\n    me.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const me = this;\n    const {minDefined, maxDefined} = me.getUserBounds();\n    let min = me.min;\n    let max = me.max;\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n    const exp = (v, m) => Math.pow(10, Math.floor(log10(v)) + m);\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(exp(min, -1));\n        setMax(exp(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(exp(max, -1));\n    }\n    if (max <= 0) {\n      setMax(exp(min, +1));\n    }\n    if (me._zero && me.min !== me._suggestedMin && min === exp(me.min, 0)) {\n      setMin(exp(min, -1));\n    }\n    me.min = min;\n    me.max = max;\n  }\n  buildTicks() {\n    const me = this;\n    const opts = me.options;\n    const generationOptions = {\n      min: me._userMin,\n      max: me._userMax\n    };\n    const ticks = generateTicks(generationOptions, me);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, me, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      me.start = me.max;\n      me.end = me.min;\n    } else {\n      me.start = me.min;\n      me.end = me.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined ? '0' : formatNumber(value, this.chart.options.locale);\n  }\n  configure() {\n    const me = this;\n    const start = me.min;\n    super.configure();\n    me._startValue = log10(start);\n    me._valueRange = log10(me.max) - log10(start);\n  }\n  getPixelForValue(value) {\n    const me = this;\n    if (value === undefined || value === 0) {\n      value = me.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return me.getPixelForDecimal(value === me.min\n      ? 0\n      : (log10(value) - me._startValue) / me._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const me = this;\n    const decimal = me.getDecimalForPixel(pixel);\n    return Math.pow(10, me._startValue + decimal * me._valueRange);\n  }\n}\nLogarithmicScale.id = 'logarithmic';\nLogarithmicScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.logarithmic,\n    major: {\n      enabled: true\n    }\n  }\n};\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const furthestLimits = {\n    l: 0,\n    r: scale.width,\n    t: 0,\n    b: scale.height - scale.paddingTop\n  };\n  const furthestAngles = {};\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale.getLabels().length;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = scale.options.pointLabels.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i]);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = scale.getIndexAngle(i);\n    const angle = toDegrees(angleRadians);\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    if (hLimits.start < furthestLimits.l) {\n      furthestLimits.l = hLimits.start;\n      furthestAngles.l = angleRadians;\n    }\n    if (hLimits.end > furthestLimits.r) {\n      furthestLimits.r = hLimits.end;\n      furthestAngles.r = angleRadians;\n    }\n    if (vLimits.start < furthestLimits.t) {\n      furthestLimits.t = vLimits.start;\n      furthestAngles.t = angleRadians;\n    }\n    if (vLimits.end > furthestLimits.b) {\n      furthestLimits.b = vLimits.end;\n      furthestAngles.b = angleRadians;\n    }\n  }\n  scale._setReductions(scale.drawingArea, furthestLimits, furthestAngles);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale.getLabels().length;\n  const opts = scale.options;\n  const tickBackdropHeight = getTickBackdropHeight(opts);\n  const outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);\n  for (let i = 0; i < valueCount; i++) {\n    const extra = (i === 0 ? tickBackdropHeight / 2 : 0);\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i]);\n    const angle = toDegrees(scale.getIndexAngle(i));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    items.push({\n      x: pointLabelPosition.x,\n      y,\n      textAlign,\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];\n    const {backdropColor} = optsAtIndex;\n    if (!isNullOrUndef(backdropColor)) {\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n      ctx.fillRect(left - padding.left, top - padding.top, right - left + padding.width, bottom - top + padding.height);\n    }\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {color, lineWidth} = gridLineOpts;\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(gridLineOpts.borderDash);\n  ctx.lineDashOffset = gridLineOpts.borderDashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction numberOrZero(param) {\n  return isNumber(param) ? param : 0;\n}\nfunction createPointLabelContext(parent, index, label) {\n  return Object.assign(Object.create(parent), {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    const me = this;\n    me.width = me.maxWidth;\n    me.height = me.maxHeight;\n    me.paddingTop = getTickBackdropHeight(me.options) / 2;\n    me.xCenter = Math.floor(me.width / 2);\n    me.yCenter = Math.floor((me.height - me.paddingTop) / 2);\n    me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;\n  }\n  determineDataLimits() {\n    const me = this;\n    const {min, max} = me.getMinMax(false);\n    me.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    me.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    me.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    const me = this;\n    LinearScaleBase.prototype.generateTickLabels.call(me, ticks);\n    me._pointLabels = me.getLabels().map((value, index) => {\n      const label = callback(me.options.pointLabels.callback, [value, index], me);\n      return label || label === 0 ? label : '';\n    });\n  }\n  fit() {\n    const me = this;\n    const opts = me.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(me);\n    } else {\n      me.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  _setReductions(largestPossibleRadius, furthestLimits, furthestAngles) {\n    const me = this;\n    let radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);\n    let radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);\n    let radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);\n    let radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);\n    radiusReductionLeft = numberOrZero(radiusReductionLeft);\n    radiusReductionRight = numberOrZero(radiusReductionRight);\n    radiusReductionTop = numberOrZero(radiusReductionTop);\n    radiusReductionBottom = numberOrZero(radiusReductionBottom);\n    me.drawingArea = Math.max(largestPossibleRadius / 2, Math.min(\n      Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),\n      Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2)));\n    me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    const me = this;\n    const maxRight = me.width - rightMovement - me.drawingArea;\n    const maxLeft = leftMovement + me.drawingArea;\n    const maxTop = topMovement + me.drawingArea;\n    const maxBottom = (me.height - me.paddingTop) - bottomMovement - me.drawingArea;\n    me.xCenter = Math.floor(((maxLeft + maxRight) / 2) + me.left);\n    me.yCenter = Math.floor(((maxTop + maxBottom) / 2) + me.top + me.paddingTop);\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / this.getLabels().length;\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    const me = this;\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = me.drawingArea / (me.max - me.min);\n    if (me.options.reverse) {\n      return (me.max - value) * scalingFactor;\n    }\n    return (value - me.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const me = this;\n    const scaledDistance = distance / (me.drawingArea / (me.max - me.min));\n    return me.options.reverse ? me.max - scaledDistance : me.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const me = this;\n    const pointLabels = me._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(me.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter) {\n    const me = this;\n    const angle = me.getIndexAngle(index) - HALF_PI;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + me.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + me.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n  drawBackground() {\n    const me = this;\n    const {backgroundColor, grid: {circular}} = me.options;\n    if (backgroundColor) {\n      const ctx = me.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(me, me.getDistanceFromCenterForValue(me._endValue), circular, me.getLabels().length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const me = this;\n    const ctx = me.ctx;\n    const opts = me.options;\n    const {angleLines, grid} = opts;\n    const labelCount = me.getLabels().length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(me, labelCount);\n    }\n    if (grid.display) {\n      me.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = me.getDistanceFromCenterForValue(tick.value);\n          const optsAtIndex = grid.setContext(me.getContext(index - 1));\n          drawRadiusLine(me, optsAtIndex, offset, labelCount);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = me.getLabels().length - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(me.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);\n        position = me.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(me.xCenter, me.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const me = this;\n    const ctx = me.ctx;\n    const opts = me.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = me.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(me.xCenter, me.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    me.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(me.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = me.getDistanceFromCenterForValue(me.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\nRadialLinearScale.id = 'radialLinear';\nRadialLinearScale.defaults = {\n  display: true,\n  animate: true,\n  position: 'chartArea',\n  angleLines: {\n    display: true,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0.0\n  },\n  grid: {\n    circular: false\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: true,\n    callback: Ticks.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: undefined,\n    backdropPadding: 2,\n    display: true,\n    font: {\n      size: 10\n    },\n    callback(label) {\n      return label;\n    },\n    padding: 5\n  }\n};\nRadialLinearScale.defaultRoutes = {\n  'angleLines.color': 'borderColor',\n  'pointLabels.color': 'color',\n  'ticks.color': 'color'\n};\nRadialLinearScale.descriptors = {\n  angleLines: {\n    _fallback: 'grid'\n  }\n};\n\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\nconst UNITS = (Object.keys(INTERVALS));\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, parser)\n      : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts, opts) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new _adapters._date(scaleOpts.adapters.date);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const me = this;\n    const options = me.options;\n    const adapter = me._adapter;\n    const unit = options.time.unit || 'day';\n    let {min, max, minDefined, maxDefined} = me.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(me._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(me.getMinMax(false));\n      }\n    }\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    me.min = Math.min(min, max - 1);\n    me.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n  buildTicks() {\n    const me = this;\n    const options = me.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? me.getLabelTimestamps() : me._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      me.min = me._userMin || timestamps[0];\n      me.max = me._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = me.min;\n    const max = me.max;\n    const ticks = _filterBetween(timestamps, min, max);\n    me._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, me._getLabelCapacity(min))\n      : determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));\n    me._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined\n      : determineMajorUnit(me._unit);\n    me.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(me, ticks, me._majorUnit);\n  }\n  initOffsets(timestamps) {\n    const me = this;\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (me.options.offset && timestamps.length) {\n      first = me.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (me.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = me.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - me.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    me._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n  _generate() {\n    const me = this;\n    const adapter = me._adapter;\n    const min = me.min;\n    const max = me.max;\n    const options = me.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, me._getLabelCapacity(min));\n    const stepSize = valueOrDefault(timeOpts.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && me.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const me = this;\n    const adapter = me._adapter;\n    const timeOpts = me.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const me = this;\n    const options = me.options;\n    const formats = options.time.displayFormats;\n    const unit = me._unit;\n    const majorUnit = me._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    const label = me._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    const formatter = options.ticks.callback;\n    return formatter ? callback(formatter, [label, index, ticks], me) : label;\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    const me = this;\n    return value === null ? NaN : (value - me.min) / (me.max - me.min);\n  }\n  getPixelForValue(value) {\n    const me = this;\n    const offsets = me._offsets;\n    const pos = me.getDecimalForValue(value);\n    return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const me = this;\n    const offsets = me._offsets;\n    const pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return me.min + pos * (me.max - me.min);\n  }\n  _getLabelSize(label) {\n    const me = this;\n    const ticksOpts = me.options.ticks;\n    const tickLabelWidth = me.ctx.measureText(label).width;\n    const angle = toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = me._resolveTickFontOptions(0).size;\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const me = this;\n    const timeOpts = me.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = me._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);\n    const size = me._getLabelSize(exampleLabel);\n    const capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    const me = this;\n    let timestamps = me._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = me.getMatchingVisibleMetas();\n    if (me._normalized && metas.length) {\n      return (me._cache.data = metas[0].controller.getAllParsedValues(me));\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(me));\n    }\n    return (me._cache.data = me.normalize(timestamps));\n  }\n  getLabelTimestamps() {\n    const me = this;\n    const timestamps = me._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = me.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(me, labels[i]));\n    }\n    return (me._cache.labels = me._normalized ? timestamps : me.normalize(timestamps));\n  }\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n}\nTimeScale.id = 'time';\nTimeScale.defaults = {\n  bounds: 'data',\n  adapters: {},\n  time: {\n    parser: false,\n    unit: false,\n    round: false,\n    isoWeekday: false,\n    minUnit: 'millisecond',\n    displayFormats: {}\n  },\n  ticks: {\n    source: 'auto',\n    major: {\n      enabled: false\n    }\n  }\n};\n\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const me = this;\n    const timestamps = me._getTimestampsForTable();\n    const table = me._table = me.buildLookupTable(timestamps);\n    me._minPos = interpolate(table, me.min);\n    me._tableRange = interpolate(table, me.max) - me._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n  _getTimestampsForTable() {\n    const me = this;\n    let timestamps = me._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = me.getDataTimestamps();\n    const label = me.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = me.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = me._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const me = this;\n    const offsets = me._offsets;\n    const decimal = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(me._table, decimal * me._tableRange + me._minPos, true);\n  }\n}\nTimeSeriesScale.id = 'timeseries';\nTimeSeriesScale.defaults = TimeScale.defaults;\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nChart.register(controllers, scales, elements, plugins);\nChart.helpers = {...helpers};\nChart._adapters = _adapters;\nChart.Animation = Animation;\nChart.Animations = Animations;\nChart.animator = animator;\nChart.controllers = registry.controllers.items;\nChart.DatasetController = DatasetController;\nChart.Element = Element;\nChart.elements = elements;\nChart.Interaction = Interaction;\nChart.layouts = layouts;\nChart.platforms = platforms;\nChart.Scale = Scale;\nChart.Ticks = Ticks;\nObject.assign(Chart, controllers, scales, elements, plugins, platforms);\nChart.Chart = Chart;\nif (typeof window !== 'undefined') {\n  window.Chart = Chart;\n}\n\nreturn Chart;\n\n})));\n","module.exports = require('..').helpers;\n","/*!\n * chartjs-plugin-datalabels v2.0.0\n * https://chartjs-plugin-datalabels.netlify.app\n * (c) 2017-2021 chartjs-plugin-datalabels contributors\n * Released under the MIT license\n */\n(function (global, factory) {\ntypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('chart.js/helpers'), require('chart.js')) :\ntypeof define === 'function' && define.amd ? define(['chart.js/helpers', 'chart.js'], factory) :\n(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.ChartDataLabels = factory(global.Chart.helpers, global.Chart));\n}(this, (function (helpers, chart_js) { 'use strict';\n\nvar devicePixelRatio = (function() {\n  if (typeof window !== 'undefined') {\n    if (window.devicePixelRatio) {\n      return window.devicePixelRatio;\n    }\n\n    // devicePixelRatio is undefined on IE10\n    // https://stackoverflow.com/a/20204180/8837887\n    // https://github.com/chartjs/chartjs-plugin-datalabels/issues/85\n    var screen = window.screen;\n    if (screen) {\n      return (screen.deviceXDPI || 1) / (screen.logicalXDPI || 1);\n    }\n  }\n\n  return 1;\n}());\n\nvar utils = {\n  // @todo move this in Chart.helpers.toTextLines\n  toTextLines: function(inputs) {\n    var lines = [];\n    var input;\n\n    inputs = [].concat(inputs);\n    while (inputs.length) {\n      input = inputs.pop();\n      if (typeof input === 'string') {\n        lines.unshift.apply(lines, input.split('\\n'));\n      } else if (Array.isArray(input)) {\n        inputs.push.apply(inputs, input);\n      } else if (!helpers.isNullOrUndef(inputs)) {\n        lines.unshift('' + input);\n      }\n    }\n\n    return lines;\n  },\n\n  // @todo move this in Chart.helpers.canvas.textSize\n  // @todo cache calls of measureText if font doesn't change?!\n  textSize: function(ctx, lines, font) {\n    var items = [].concat(lines);\n    var ilen = items.length;\n    var prev = ctx.font;\n    var width = 0;\n    var i;\n\n    ctx.font = font.string;\n\n    for (i = 0; i < ilen; ++i) {\n      width = Math.max(ctx.measureText(items[i]).width, width);\n    }\n\n    ctx.font = prev;\n\n    return {\n      height: ilen * font.lineHeight,\n      width: width\n    };\n  },\n\n  /**\n   * Returns value bounded by min and max. This is equivalent to max(min, min(value, max)).\n   * @todo move this method in Chart.helpers.bound\n   * https://doc.qt.io/qt-5/qtglobal.html#qBound\n   */\n  bound: function(min, value, max) {\n    return Math.max(min, Math.min(value, max));\n  },\n\n  /**\n   * Returns an array of pair [value, state] where state is:\n   * * -1: value is only in a0 (removed)\n   * *  1: value is only in a1 (added)\n   */\n  arrayDiff: function(a0, a1) {\n    var prev = a0.slice();\n    var updates = [];\n    var i, j, ilen, v;\n\n    for (i = 0, ilen = a1.length; i < ilen; ++i) {\n      v = a1[i];\n      j = prev.indexOf(v);\n\n      if (j === -1) {\n        updates.push([v, 1]);\n      } else {\n        prev.splice(j, 1);\n      }\n    }\n\n    for (i = 0, ilen = prev.length; i < ilen; ++i) {\n      updates.push([prev[i], -1]);\n    }\n\n    return updates;\n  },\n\n  /**\n   * https://github.com/chartjs/chartjs-plugin-datalabels/issues/70\n   */\n  rasterize: function(v) {\n    return Math.round(v * devicePixelRatio) / devicePixelRatio;\n  }\n};\n\nfunction orient(point, origin) {\n  var x0 = origin.x;\n  var y0 = origin.y;\n\n  if (x0 === null) {\n    return {x: 0, y: -1};\n  }\n  if (y0 === null) {\n    return {x: 1, y: 0};\n  }\n\n  var dx = point.x - x0;\n  var dy = point.y - y0;\n  var ln = Math.sqrt(dx * dx + dy * dy);\n\n  return {\n    x: ln ? dx / ln : 0,\n    y: ln ? dy / ln : -1\n  };\n}\n\nfunction aligned(x, y, vx, vy, align) {\n  switch (align) {\n  case 'center':\n    vx = vy = 0;\n    break;\n  case 'bottom':\n    vx = 0;\n    vy = 1;\n    break;\n  case 'right':\n    vx = 1;\n    vy = 0;\n    break;\n  case 'left':\n    vx = -1;\n    vy = 0;\n    break;\n  case 'top':\n    vx = 0;\n    vy = -1;\n    break;\n  case 'start':\n    vx = -vx;\n    vy = -vy;\n    break;\n  case 'end':\n    // keep natural orientation\n    break;\n  default:\n    // clockwise rotation (in degree)\n    align *= (Math.PI / 180);\n    vx = Math.cos(align);\n    vy = Math.sin(align);\n    break;\n  }\n\n  return {\n    x: x,\n    y: y,\n    vx: vx,\n    vy: vy\n  };\n}\n\n// Line clipping (Cohen–Sutherland algorithm)\n// https://en.wikipedia.org/wiki/Cohen–Sutherland_algorithm\n\nvar R_INSIDE = 0;\nvar R_LEFT = 1;\nvar R_RIGHT = 2;\nvar R_BOTTOM = 4;\nvar R_TOP = 8;\n\nfunction region(x, y, rect) {\n  var res = R_INSIDE;\n\n  if (x < rect.left) {\n    res |= R_LEFT;\n  } else if (x > rect.right) {\n    res |= R_RIGHT;\n  }\n  if (y < rect.top) {\n    res |= R_TOP;\n  } else if (y > rect.bottom) {\n    res |= R_BOTTOM;\n  }\n\n  return res;\n}\n\nfunction clipped(segment, area) {\n  var x0 = segment.x0;\n  var y0 = segment.y0;\n  var x1 = segment.x1;\n  var y1 = segment.y1;\n  var r0 = region(x0, y0, area);\n  var r1 = region(x1, y1, area);\n  var r, x, y;\n\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (!(r0 | r1) || (r0 & r1)) {\n      // both points inside or on the same side: no clipping\n      break;\n    }\n\n    // at least one point is outside\n    r = r0 || r1;\n\n    if (r & R_TOP) {\n      x = x0 + (x1 - x0) * (area.top - y0) / (y1 - y0);\n      y = area.top;\n    } else if (r & R_BOTTOM) {\n      x = x0 + (x1 - x0) * (area.bottom - y0) / (y1 - y0);\n      y = area.bottom;\n    } else if (r & R_RIGHT) {\n      y = y0 + (y1 - y0) * (area.right - x0) / (x1 - x0);\n      x = area.right;\n    } else if (r & R_LEFT) {\n      y = y0 + (y1 - y0) * (area.left - x0) / (x1 - x0);\n      x = area.left;\n    }\n\n    if (r === r0) {\n      x0 = x;\n      y0 = y;\n      r0 = region(x0, y0, area);\n    } else {\n      x1 = x;\n      y1 = y;\n      r1 = region(x1, y1, area);\n    }\n  }\n\n  return {\n    x0: x0,\n    x1: x1,\n    y0: y0,\n    y1: y1\n  };\n}\n\nfunction compute$1(range, config) {\n  var anchor = config.anchor;\n  var segment = range;\n  var x, y;\n\n  if (config.clamp) {\n    segment = clipped(segment, config.area);\n  }\n\n  if (anchor === 'start') {\n    x = segment.x0;\n    y = segment.y0;\n  } else if (anchor === 'end') {\n    x = segment.x1;\n    y = segment.y1;\n  } else {\n    x = (segment.x0 + segment.x1) / 2;\n    y = (segment.y0 + segment.y1) / 2;\n  }\n\n  return aligned(x, y, range.vx, range.vy, config.align);\n}\n\nvar positioners = {\n  arc: function(el, config) {\n    var angle = (el.startAngle + el.endAngle) / 2;\n    var vx = Math.cos(angle);\n    var vy = Math.sin(angle);\n    var r0 = el.innerRadius;\n    var r1 = el.outerRadius;\n\n    return compute$1({\n      x0: el.x + vx * r0,\n      y0: el.y + vy * r0,\n      x1: el.x + vx * r1,\n      y1: el.y + vy * r1,\n      vx: vx,\n      vy: vy\n    }, config);\n  },\n\n  point: function(el, config) {\n    var v = orient(el, config.origin);\n    var rx = v.x * el.options.radius;\n    var ry = v.y * el.options.radius;\n\n    return compute$1({\n      x0: el.x - rx,\n      y0: el.y - ry,\n      x1: el.x + rx,\n      y1: el.y + ry,\n      vx: v.x,\n      vy: v.y\n    }, config);\n  },\n\n  bar: function(el, config) {\n    var v = orient(el, config.origin);\n    var x = el.x;\n    var y = el.y;\n    var sx = 0;\n    var sy = 0;\n\n    if (el.horizontal) {\n      x = Math.min(el.x, el.base);\n      sx = Math.abs(el.base - el.x);\n    } else {\n      y = Math.min(el.y, el.base);\n      sy = Math.abs(el.base - el.y);\n    }\n\n    return compute$1({\n      x0: x,\n      y0: y + sy,\n      x1: x + sx,\n      y1: y,\n      vx: v.x,\n      vy: v.y\n    }, config);\n  },\n\n  fallback: function(el, config) {\n    var v = orient(el, config.origin);\n\n    return compute$1({\n      x0: el.x,\n      y0: el.y,\n      x1: el.x,\n      y1: el.y,\n      vx: v.x,\n      vy: v.y\n    }, config);\n  }\n};\n\nvar rasterize = utils.rasterize;\n\nfunction boundingRects(model) {\n  var borderWidth = model.borderWidth || 0;\n  var padding = model.padding;\n  var th = model.size.height;\n  var tw = model.size.width;\n  var tx = -tw / 2;\n  var ty = -th / 2;\n\n  return {\n    frame: {\n      x: tx - padding.left - borderWidth,\n      y: ty - padding.top - borderWidth,\n      w: tw + padding.width + borderWidth * 2,\n      h: th + padding.height + borderWidth * 2\n    },\n    text: {\n      x: tx,\n      y: ty,\n      w: tw,\n      h: th\n    }\n  };\n}\n\nfunction getScaleOrigin(el, context) {\n  var scale = context.chart.getDatasetMeta(context.datasetIndex).vScale;\n\n  if (!scale) {\n    return null;\n  }\n\n  if (scale.xCenter !== undefined && scale.yCenter !== undefined) {\n    return {x: scale.xCenter, y: scale.yCenter};\n  }\n\n  var pixel = scale.getBasePixel();\n  return el.horizontal ?\n    {x: pixel, y: null} :\n    {x: null, y: pixel};\n}\n\nfunction getPositioner(el) {\n  if (el instanceof chart_js.ArcElement) {\n    return positioners.arc;\n  }\n  if (el instanceof chart_js.PointElement) {\n    return positioners.point;\n  }\n  if (el instanceof chart_js.BarElement) {\n    return positioners.bar;\n  }\n  return positioners.fallback;\n}\n\nfunction drawRoundedRect(ctx, x, y, w, h, radius) {\n  var HALF_PI = Math.PI / 2;\n\n  if (radius) {\n    var r = Math.min(radius, h / 2, w / 2);\n    var left = x + r;\n    var top = y + r;\n    var right = x + w - r;\n    var bottom = y + h - r;\n\n    ctx.moveTo(x, top);\n    if (left < right && top < bottom) {\n      ctx.arc(left, top, r, -Math.PI, -HALF_PI);\n      ctx.arc(right, top, r, -HALF_PI, 0);\n      ctx.arc(right, bottom, r, 0, HALF_PI);\n      ctx.arc(left, bottom, r, HALF_PI, Math.PI);\n    } else if (left < right) {\n      ctx.moveTo(left, y);\n      ctx.arc(right, top, r, -HALF_PI, HALF_PI);\n      ctx.arc(left, top, r, HALF_PI, Math.PI + HALF_PI);\n    } else if (top < bottom) {\n      ctx.arc(left, top, r, -Math.PI, 0);\n      ctx.arc(left, bottom, r, 0, Math.PI);\n    } else {\n      ctx.arc(left, top, r, -Math.PI, Math.PI);\n    }\n    ctx.closePath();\n    ctx.moveTo(x, y);\n  } else {\n    ctx.rect(x, y, w, h);\n  }\n}\n\nfunction drawFrame(ctx, rect, model) {\n  var bgColor = model.backgroundColor;\n  var borderColor = model.borderColor;\n  var borderWidth = model.borderWidth;\n\n  if (!bgColor && (!borderColor || !borderWidth)) {\n    return;\n  }\n\n  ctx.beginPath();\n\n  drawRoundedRect(\n    ctx,\n    rasterize(rect.x) + borderWidth / 2,\n    rasterize(rect.y) + borderWidth / 2,\n    rasterize(rect.w) - borderWidth,\n    rasterize(rect.h) - borderWidth,\n    model.borderRadius);\n\n  ctx.closePath();\n\n  if (bgColor) {\n    ctx.fillStyle = bgColor;\n    ctx.fill();\n  }\n\n  if (borderColor && borderWidth) {\n    ctx.strokeStyle = borderColor;\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = 'miter';\n    ctx.stroke();\n  }\n}\n\nfunction textGeometry(rect, align, font) {\n  var h = font.lineHeight;\n  var w = rect.w;\n  var x = rect.x;\n  var y = rect.y + h / 2;\n\n  if (align === 'center') {\n    x += w / 2;\n  } else if (align === 'end' || align === 'right') {\n    x += w;\n  }\n\n  return {\n    h: h,\n    w: w,\n    x: x,\n    y: y\n  };\n}\n\nfunction drawTextLine(ctx, text, cfg) {\n  var shadow = ctx.shadowBlur;\n  var stroked = cfg.stroked;\n  var x = rasterize(cfg.x);\n  var y = rasterize(cfg.y);\n  var w = rasterize(cfg.w);\n\n  if (stroked) {\n    ctx.strokeText(text, x, y, w);\n  }\n\n  if (cfg.filled) {\n    if (shadow && stroked) {\n      // Prevent drawing shadow on both the text stroke and fill, so\n      // if the text is stroked, remove the shadow for the text fill.\n      ctx.shadowBlur = 0;\n    }\n\n    ctx.fillText(text, x, y, w);\n\n    if (shadow && stroked) {\n      ctx.shadowBlur = shadow;\n    }\n  }\n}\n\nfunction drawText(ctx, lines, rect, model) {\n  var align = model.textAlign;\n  var color = model.color;\n  var filled = !!color;\n  var font = model.font;\n  var ilen = lines.length;\n  var strokeColor = model.textStrokeColor;\n  var strokeWidth = model.textStrokeWidth;\n  var stroked = strokeColor && strokeWidth;\n  var i;\n\n  if (!ilen || (!filled && !stroked)) {\n    return;\n  }\n\n  // Adjust coordinates based on text alignment and line height\n  rect = textGeometry(rect, align, font);\n\n  ctx.font = font.string;\n  ctx.textAlign = align;\n  ctx.textBaseline = 'middle';\n  ctx.shadowBlur = model.textShadowBlur;\n  ctx.shadowColor = model.textShadowColor;\n\n  if (filled) {\n    ctx.fillStyle = color;\n  }\n  if (stroked) {\n    ctx.lineJoin = 'round';\n    ctx.lineWidth = strokeWidth;\n    ctx.strokeStyle = strokeColor;\n  }\n\n  for (i = 0, ilen = lines.length; i < ilen; ++i) {\n    drawTextLine(ctx, lines[i], {\n      stroked: stroked,\n      filled: filled,\n      w: rect.w,\n      x: rect.x,\n      y: rect.y + rect.h * i\n    });\n  }\n}\n\nvar Label = function(config, ctx, el, index) {\n  var me = this;\n\n  me._config = config;\n  me._index = index;\n  me._model = null;\n  me._rects = null;\n  me._ctx = ctx;\n  me._el = el;\n};\n\nhelpers.merge(Label.prototype, {\n  /**\n   * @private\n   */\n  _modelize: function(display, lines, config, context) {\n    var me = this;\n    var index = me._index;\n    var font = helpers.toFont(helpers.resolve([config.font, {}], context, index));\n    var color = helpers.resolve([config.color, chart_js.defaults.color], context, index);\n\n    return {\n      align: helpers.resolve([config.align, 'center'], context, index),\n      anchor: helpers.resolve([config.anchor, 'center'], context, index),\n      area: context.chart.chartArea,\n      backgroundColor: helpers.resolve([config.backgroundColor, null], context, index),\n      borderColor: helpers.resolve([config.borderColor, null], context, index),\n      borderRadius: helpers.resolve([config.borderRadius, 0], context, index),\n      borderWidth: helpers.resolve([config.borderWidth, 0], context, index),\n      clamp: helpers.resolve([config.clamp, false], context, index),\n      clip: helpers.resolve([config.clip, false], context, index),\n      color: color,\n      display: display,\n      font: font,\n      lines: lines,\n      offset: helpers.resolve([config.offset, 0], context, index),\n      opacity: helpers.resolve([config.opacity, 1], context, index),\n      origin: getScaleOrigin(me._el, context),\n      padding: helpers.toPadding(helpers.resolve([config.padding, 0], context, index)),\n      positioner: getPositioner(me._el),\n      rotation: helpers.resolve([config.rotation, 0], context, index) * (Math.PI / 180),\n      size: utils.textSize(me._ctx, lines, font),\n      textAlign: helpers.resolve([config.textAlign, 'start'], context, index),\n      textShadowBlur: helpers.resolve([config.textShadowBlur, 0], context, index),\n      textShadowColor: helpers.resolve([config.textShadowColor, color], context, index),\n      textStrokeColor: helpers.resolve([config.textStrokeColor, color], context, index),\n      textStrokeWidth: helpers.resolve([config.textStrokeWidth, 0], context, index)\n    };\n  },\n\n  update: function(context) {\n    var me = this;\n    var model = null;\n    var rects = null;\n    var index = me._index;\n    var config = me._config;\n    var value, label, lines;\n\n    // We first resolve the display option (separately) to avoid computing\n    // other options in case the label is hidden (i.e. display: false).\n    var display = helpers.resolve([config.display, true], context, index);\n\n    if (display) {\n      value = context.dataset.data[index];\n      label = helpers.valueOrDefault(helpers.callback(config.formatter, [value, context]), value);\n      lines = helpers.isNullOrUndef(label) ? [] : utils.toTextLines(label);\n\n      if (lines.length) {\n        model = me._modelize(display, lines, config, context);\n        rects = boundingRects(model);\n      }\n    }\n\n    me._model = model;\n    me._rects = rects;\n  },\n\n  geometry: function() {\n    return this._rects ? this._rects.frame : {};\n  },\n\n  rotation: function() {\n    return this._model ? this._model.rotation : 0;\n  },\n\n  visible: function() {\n    return this._model && this._model.opacity;\n  },\n\n  model: function() {\n    return this._model;\n  },\n\n  draw: function(chart, center) {\n    var me = this;\n    var ctx = chart.ctx;\n    var model = me._model;\n    var rects = me._rects;\n    var area;\n\n    if (!this.visible()) {\n      return;\n    }\n\n    ctx.save();\n\n    if (model.clip) {\n      area = model.area;\n      ctx.beginPath();\n      ctx.rect(\n        area.left,\n        area.top,\n        area.right - area.left,\n        area.bottom - area.top);\n      ctx.clip();\n    }\n\n    ctx.globalAlpha = utils.bound(0, model.opacity, 1);\n    ctx.translate(rasterize(center.x), rasterize(center.y));\n    ctx.rotate(model.rotation);\n\n    drawFrame(ctx, rects.frame, model);\n    drawText(ctx, model.lines, rects.text, model);\n\n    ctx.restore();\n  }\n});\n\nvar MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991; // eslint-disable-line es/no-number-minsafeinteger\nvar MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;  // eslint-disable-line es/no-number-maxsafeinteger\n\nfunction rotated(point, center, angle) {\n  var cos = Math.cos(angle);\n  var sin = Math.sin(angle);\n  var cx = center.x;\n  var cy = center.y;\n\n  return {\n    x: cx + cos * (point.x - cx) - sin * (point.y - cy),\n    y: cy + sin * (point.x - cx) + cos * (point.y - cy)\n  };\n}\n\nfunction projected(points, axis) {\n  var min = MAX_INTEGER;\n  var max = MIN_INTEGER;\n  var origin = axis.origin;\n  var i, pt, vx, vy, dp;\n\n  for (i = 0; i < points.length; ++i) {\n    pt = points[i];\n    vx = pt.x - origin.x;\n    vy = pt.y - origin.y;\n    dp = axis.vx * vx + axis.vy * vy;\n    min = Math.min(min, dp);\n    max = Math.max(max, dp);\n  }\n\n  return {\n    min: min,\n    max: max\n  };\n}\n\nfunction toAxis(p0, p1) {\n  var vx = p1.x - p0.x;\n  var vy = p1.y - p0.y;\n  var ln = Math.sqrt(vx * vx + vy * vy);\n\n  return {\n    vx: (p1.x - p0.x) / ln,\n    vy: (p1.y - p0.y) / ln,\n    origin: p0,\n    ln: ln\n  };\n}\n\nvar HitBox = function() {\n  this._rotation = 0;\n  this._rect = {\n    x: 0,\n    y: 0,\n    w: 0,\n    h: 0\n  };\n};\n\nhelpers.merge(HitBox.prototype, {\n  center: function() {\n    var r = this._rect;\n    return {\n      x: r.x + r.w / 2,\n      y: r.y + r.h / 2\n    };\n  },\n\n  update: function(center, rect, rotation) {\n    this._rotation = rotation;\n    this._rect = {\n      x: rect.x + center.x,\n      y: rect.y + center.y,\n      w: rect.w,\n      h: rect.h\n    };\n  },\n\n  contains: function(point) {\n    var me = this;\n    var margin = 1;\n    var rect = me._rect;\n\n    point = rotated(point, me.center(), -me._rotation);\n\n    return !(point.x < rect.x - margin\n      || point.y < rect.y - margin\n      || point.x > rect.x + rect.w + margin * 2\n      || point.y > rect.y + rect.h + margin * 2);\n  },\n\n  // Separating Axis Theorem\n  // https://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169\n  intersects: function(other) {\n    var r0 = this._points();\n    var r1 = other._points();\n    var axes = [\n      toAxis(r0[0], r0[1]),\n      toAxis(r0[0], r0[3])\n    ];\n    var i, pr0, pr1;\n\n    if (this._rotation !== other._rotation) {\n      // Only separate with r1 axis if the rotation is different,\n      // else it's enough to separate r0 and r1 with r0 axis only!\n      axes.push(\n        toAxis(r1[0], r1[1]),\n        toAxis(r1[0], r1[3])\n      );\n    }\n\n    for (i = 0; i < axes.length; ++i) {\n      pr0 = projected(r0, axes[i]);\n      pr1 = projected(r1, axes[i]);\n\n      if (pr0.max < pr1.min || pr1.max < pr0.min) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  /**\n   * @private\n   */\n  _points: function() {\n    var me = this;\n    var rect = me._rect;\n    var angle = me._rotation;\n    var center = me.center();\n\n    return [\n      rotated({x: rect.x, y: rect.y}, center, angle),\n      rotated({x: rect.x + rect.w, y: rect.y}, center, angle),\n      rotated({x: rect.x + rect.w, y: rect.y + rect.h}, center, angle),\n      rotated({x: rect.x, y: rect.y + rect.h}, center, angle)\n    ];\n  }\n});\n\nfunction coordinates(el, model, geometry) {\n  var point = model.positioner(el, model);\n  var vx = point.vx;\n  var vy = point.vy;\n\n  if (!vx && !vy) {\n    // if aligned center, we don't want to offset the center point\n    return {x: point.x, y: point.y};\n  }\n\n  var w = geometry.w;\n  var h = geometry.h;\n\n  // take in account the label rotation\n  var rotation = model.rotation;\n  var dx = Math.abs(w / 2 * Math.cos(rotation)) + Math.abs(h / 2 * Math.sin(rotation));\n  var dy = Math.abs(w / 2 * Math.sin(rotation)) + Math.abs(h / 2 * Math.cos(rotation));\n\n  // scale the unit vector (vx, vy) to get at least dx or dy equal to\n  // w or h respectively (else we would calculate the distance to the\n  // ellipse inscribed in the bounding rect)\n  var vs = 1 / Math.max(Math.abs(vx), Math.abs(vy));\n  dx *= vx * vs;\n  dy *= vy * vs;\n\n  // finally, include the explicit offset\n  dx += model.offset * vx;\n  dy += model.offset * vy;\n\n  return {\n    x: point.x + dx,\n    y: point.y + dy\n  };\n}\n\nfunction collide(labels, collider) {\n  var i, j, s0, s1;\n\n  // IMPORTANT Iterate in the reverse order since items at the end of the\n  // list have an higher weight/priority and thus should be less impacted\n  // by the overlapping strategy.\n\n  for (i = labels.length - 1; i >= 0; --i) {\n    s0 = labels[i].$layout;\n\n    for (j = i - 1; j >= 0 && s0._visible; --j) {\n      s1 = labels[j].$layout;\n\n      if (s1._visible && s0._box.intersects(s1._box)) {\n        collider(s0, s1);\n      }\n    }\n  }\n\n  return labels;\n}\n\nfunction compute(labels) {\n  var i, ilen, label, state, geometry, center, proxy;\n\n  // Initialize labels for overlap detection\n  for (i = 0, ilen = labels.length; i < ilen; ++i) {\n    label = labels[i];\n    state = label.$layout;\n\n    if (state._visible) {\n      // Chart.js 3 removed el._model in favor of getProps(), making harder to\n      // abstract reading values in positioners. Also, using string arrays to\n      // read values (i.e. var {a,b,c} = el.getProps([\"a\",\"b\",\"c\"])) would make\n      // positioners inefficient in the normal case (i.e. not the final values)\n      // and the code a bit ugly, so let's use a Proxy instead.\n      proxy = new Proxy(label._el, {get: (el, p) => el.getProps([p], true)[p]});\n\n      geometry = label.geometry();\n      center = coordinates(proxy, label.model(), geometry);\n      state._box.update(center, geometry, label.rotation());\n    }\n  }\n\n  // Auto hide overlapping labels\n  return collide(labels, function(s0, s1) {\n    var h0 = s0._hidable;\n    var h1 = s1._hidable;\n\n    if ((h0 && h1) || h1) {\n      s1._visible = false;\n    } else if (h0) {\n      s0._visible = false;\n    }\n  });\n}\n\nvar layout = {\n  prepare: function(datasets) {\n    var labels = [];\n    var i, j, ilen, jlen, label;\n\n    for (i = 0, ilen = datasets.length; i < ilen; ++i) {\n      for (j = 0, jlen = datasets[i].length; j < jlen; ++j) {\n        label = datasets[i][j];\n        labels.push(label);\n        label.$layout = {\n          _box: new HitBox(),\n          _hidable: false,\n          _visible: true,\n          _set: i,\n          _idx: j\n        };\n      }\n    }\n\n    // TODO New `z` option: labels with a higher z-index are drawn\n    // of top of the ones with a lower index. Lowest z-index labels\n    // are also discarded first when hiding overlapping labels.\n    labels.sort(function(a, b) {\n      var sa = a.$layout;\n      var sb = b.$layout;\n\n      return sa._idx === sb._idx\n        ? sb._set - sa._set\n        : sb._idx - sa._idx;\n    });\n\n    this.update(labels);\n\n    return labels;\n  },\n\n  update: function(labels) {\n    var dirty = false;\n    var i, ilen, label, model, state;\n\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      label = labels[i];\n      model = label.model();\n      state = label.$layout;\n      state._hidable = model && model.display === 'auto';\n      state._visible = label.visible();\n      dirty |= state._hidable;\n    }\n\n    if (dirty) {\n      compute(labels);\n    }\n  },\n\n  lookup: function(labels, point) {\n    var i, state;\n\n    // IMPORTANT Iterate in the reverse order since items at the end of\n    // the list have an higher z-index, thus should be picked first.\n\n    for (i = labels.length - 1; i >= 0; --i) {\n      state = labels[i].$layout;\n\n      if (state && state._visible && state._box.contains(point)) {\n        return labels[i];\n      }\n    }\n\n    return null;\n  },\n\n  draw: function(chart, labels) {\n    var i, ilen, label, state, geometry, center;\n\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      label = labels[i];\n      state = label.$layout;\n\n      if (state._visible) {\n        geometry = label.geometry();\n        center = coordinates(label._el, label.model(), geometry);\n        state._box.update(center, geometry, label.rotation());\n        label.draw(chart, center);\n      }\n    }\n  }\n};\n\nvar formatter = function(value) {\n  if (helpers.isNullOrUndef(value)) {\n    return null;\n  }\n\n  var label = value;\n  var keys, klen, k;\n  if (helpers.isObject(value)) {\n    if (!helpers.isNullOrUndef(value.label)) {\n      label = value.label;\n    } else if (!helpers.isNullOrUndef(value.r)) {\n      label = value.r;\n    } else {\n      label = '';\n      keys = Object.keys(value);\n      for (k = 0, klen = keys.length; k < klen; ++k) {\n        label += (k !== 0 ? ', ' : '') + keys[k] + ': ' + value[keys[k]];\n      }\n    }\n  }\n\n  return '' + label;\n};\n\n/**\n * IMPORTANT: make sure to also update tests and TypeScript definition\n * files (`/test/specs/defaults.spec.js` and `/types/options.d.ts`)\n */\n\nvar defaults = {\n  align: 'center',\n  anchor: 'center',\n  backgroundColor: null,\n  borderColor: null,\n  borderRadius: 0,\n  borderWidth: 0,\n  clamp: false,\n  clip: false,\n  color: undefined,\n  display: true,\n  font: {\n    family: undefined,\n    lineHeight: 1.2,\n    size: undefined,\n    style: undefined,\n    weight: null\n  },\n  formatter: formatter,\n  labels: undefined,\n  listeners: {},\n  offset: 4,\n  opacity: 1,\n  padding: {\n    top: 4,\n    right: 4,\n    bottom: 4,\n    left: 4\n  },\n  rotation: 0,\n  textAlign: 'start',\n  textStrokeColor: undefined,\n  textStrokeWidth: 0,\n  textShadowBlur: 0,\n  textShadowColor: undefined\n};\n\n/**\n * @see https://github.com/chartjs/Chart.js/issues/4176\n */\n\nvar EXPANDO_KEY = '$datalabels';\nvar DEFAULT_KEY = '$default';\n\nfunction configure(dataset, options) {\n  var override = dataset.datalabels;\n  var listeners = {};\n  var configs = [];\n  var labels, keys;\n\n  if (override === false) {\n    return null;\n  }\n  if (override === true) {\n    override = {};\n  }\n\n  options = helpers.merge({}, [options, override]);\n  labels = options.labels || {};\n  keys = Object.keys(labels);\n  delete options.labels;\n\n  if (keys.length) {\n    keys.forEach(function(key) {\n      if (labels[key]) {\n        configs.push(helpers.merge({}, [\n          options,\n          labels[key],\n          {_key: key}\n        ]));\n      }\n    });\n  } else {\n    // Default label if no \"named\" label defined.\n    configs.push(options);\n  }\n\n  // listeners: {<event-type>: {<label-key>: <fn>}}\n  listeners = configs.reduce(function(target, config) {\n    helpers.each(config.listeners || {}, function(fn, event) {\n      target[event] = target[event] || {};\n      target[event][config._key || DEFAULT_KEY] = fn;\n    });\n\n    delete config.listeners;\n    return target;\n  }, {});\n\n  return {\n    labels: configs,\n    listeners: listeners\n  };\n}\n\nfunction dispatchEvent(chart, listeners, label) {\n  if (!listeners) {\n    return;\n  }\n\n  var context = label.$context;\n  var groups = label.$groups;\n  var callback;\n\n  if (!listeners[groups._set]) {\n    return;\n  }\n\n  callback = listeners[groups._set][groups._key];\n  if (!callback) {\n    return;\n  }\n\n  if (helpers.callback(callback, [context]) === true) {\n    // Users are allowed to tweak the given context by injecting values that can be\n    // used in scriptable options to display labels differently based on the current\n    // event (e.g. highlight an hovered label). That's why we update the label with\n    // the output context and schedule a new chart render by setting it dirty.\n    chart[EXPANDO_KEY]._dirty = true;\n    label.update(context);\n  }\n}\n\nfunction dispatchMoveEvents(chart, listeners, previous, label) {\n  var enter, leave;\n\n  if (!previous && !label) {\n    return;\n  }\n\n  if (!previous) {\n    enter = true;\n  } else if (!label) {\n    leave = true;\n  } else if (previous !== label) {\n    leave = enter = true;\n  }\n\n  if (leave) {\n    dispatchEvent(chart, listeners.leave, previous);\n  }\n  if (enter) {\n    dispatchEvent(chart, listeners.enter, label);\n  }\n}\n\nfunction handleMoveEvents(chart, event) {\n  var expando = chart[EXPANDO_KEY];\n  var listeners = expando._listeners;\n  var previous, label;\n\n  if (!listeners.enter && !listeners.leave) {\n    return;\n  }\n\n  if (event.type === 'mousemove') {\n    label = layout.lookup(expando._labels, event);\n  } else if (event.type !== 'mouseout') {\n    return;\n  }\n\n  previous = expando._hovered;\n  expando._hovered = label;\n  dispatchMoveEvents(chart, listeners, previous, label);\n}\n\nfunction handleClickEvents(chart, event) {\n  var expando = chart[EXPANDO_KEY];\n  var handlers = expando._listeners.click;\n  var label = handlers && layout.lookup(expando._labels, event);\n  if (label) {\n    dispatchEvent(chart, handlers, label);\n  }\n}\n\nvar plugin = {\n  id: 'datalabels',\n\n  defaults: defaults,\n\n  beforeInit: function(chart) {\n    chart[EXPANDO_KEY] = {\n      _actives: []\n    };\n  },\n\n  beforeUpdate: function(chart) {\n    var expando = chart[EXPANDO_KEY];\n    expando._listened = false;\n    expando._listeners = {};     // {<event-type>: {<dataset-index>: {<label-key>: <fn>}}}\n    expando._datasets = [];      // per dataset labels: [Label[]]\n    expando._labels = [];        // layouted labels: Label[]\n  },\n\n  afterDatasetUpdate: function(chart, args, options) {\n    var datasetIndex = args.index;\n    var expando = chart[EXPANDO_KEY];\n    var labels = expando._datasets[datasetIndex] = [];\n    var visible = chart.isDatasetVisible(datasetIndex);\n    var dataset = chart.data.datasets[datasetIndex];\n    var config = configure(dataset, options);\n    var elements = args.meta.data || [];\n    var ctx = chart.ctx;\n    var i, j, ilen, jlen, cfg, key, el, label;\n\n    ctx.save();\n\n    for (i = 0, ilen = elements.length; i < ilen; ++i) {\n      el = elements[i];\n      el[EXPANDO_KEY] = [];\n\n      if (visible && el && chart.getDataVisibility(i) && !el.skip) {\n        for (j = 0, jlen = config.labels.length; j < jlen; ++j) {\n          cfg = config.labels[j];\n          key = cfg._key;\n\n          label = new Label(cfg, ctx, el, i);\n          label.$groups = {\n            _set: datasetIndex,\n            _key: key || DEFAULT_KEY\n          };\n          label.$context = {\n            active: false,\n            chart: chart,\n            dataIndex: i,\n            dataset: dataset,\n            datasetIndex: datasetIndex\n          };\n\n          label.update(label.$context);\n          el[EXPANDO_KEY].push(label);\n          labels.push(label);\n        }\n      }\n    }\n\n    ctx.restore();\n\n    // Store listeners at the chart level and per event type to optimize\n    // cases where no listeners are registered for a specific event.\n    helpers.merge(expando._listeners, config.listeners, {\n      merger: function(event, target, source) {\n        target[event] = target[event] || {};\n        target[event][args.index] = source[event];\n        expando._listened = true;\n      }\n    });\n  },\n\n  afterUpdate: function(chart, options) {\n    chart[EXPANDO_KEY]._labels = layout.prepare(\n      chart[EXPANDO_KEY]._datasets,\n      options);\n  },\n\n  // Draw labels on top of all dataset elements\n  // https://github.com/chartjs/chartjs-plugin-datalabels/issues/29\n  // https://github.com/chartjs/chartjs-plugin-datalabels/issues/32\n  afterDatasetsDraw: function(chart) {\n    layout.draw(chart, chart[EXPANDO_KEY]._labels);\n  },\n\n  beforeEvent: function(chart, args) {\n    // If there is no listener registered for this chart, `listened` will be false,\n    // meaning we can immediately ignore the incoming event and avoid useless extra\n    // computation for users who don't implement label interactions.\n    if (chart[EXPANDO_KEY]._listened) {\n      var event = args.event;\n      switch (event.type) {\n      case 'mousemove':\n      case 'mouseout':\n        handleMoveEvents(chart, event);\n        break;\n      case 'click':\n        handleClickEvents(chart, event);\n        break;\n      }\n    }\n  },\n\n  afterEvent: function(chart) {\n    var expando = chart[EXPANDO_KEY];\n    var previous = expando._actives;\n    var actives = expando._actives = chart.getActiveElements();\n    var updates = utils.arrayDiff(previous, actives);\n    var i, ilen, j, jlen, update, label, labels;\n\n    for (i = 0, ilen = updates.length; i < ilen; ++i) {\n      update = updates[i];\n      if (update[1]) {\n        labels = update[0].element[EXPANDO_KEY] || [];\n        for (j = 0, jlen = labels.length; j < jlen; ++j) {\n          label = labels[j];\n          label.$context.active = (update[1] === 1);\n          label.update(label.$context);\n        }\n      }\n    }\n\n    if (expando._dirty || updates.length) {\n      layout.update(expando._labels);\n      chart.render();\n    }\n\n    delete expando._dirty;\n  }\n};\n\nreturn plugin;\n\n})));\n","var hashClear = require('./_hashClear'),\n    hashDelete = require('./_hashDelete'),\n    hashGet = require('./_hashGet'),\n    hashHas = require('./_hashHas'),\n    hashSet = require('./_hashSet');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n","var listCacheClear = require('./_listCacheClear'),\n    listCacheDelete = require('./_listCacheDelete'),\n    listCacheGet = require('./_listCacheGet'),\n    listCacheHas = require('./_listCacheHas'),\n    listCacheSet = require('./_listCacheSet');\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n","var mapCacheClear = require('./_mapCacheClear'),\n    mapCacheDelete = require('./_mapCacheDelete'),\n    mapCacheGet = require('./_mapCacheGet'),\n    mapCacheHas = require('./_mapCacheHas'),\n    mapCacheSet = require('./_mapCacheSet');\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","var baseAssignValue = require('./_baseAssignValue'),\n    eq = require('./eq');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n","var eq = require('./eq');\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n","var defineProperty = require('./_defineProperty');\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n","var castPath = require('./_castPath'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n","var assignValue = require('./_assignValue'),\n    castPath = require('./_castPath'),\n    isIndex = require('./_isIndex'),\n    isObject = require('./isObject'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nmodule.exports = baseSet;\n","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n","var isArray = require('./isArray'),\n    isKey = require('./_isKey'),\n    stringToPath = require('./_stringToPath'),\n    toString = require('./toString');\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n","var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n","var getNative = require('./_getNative');\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var isKeyable = require('./_isKeyable');\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n","var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n","var nativeCreate = require('./_nativeCreate');\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n","var isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n","var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n","var Hash = require('./_Hash'),\n    ListCache = require('./_ListCache'),\n    Map = require('./_Map');\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n","var getMapData = require('./_getMapData');\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n","var getMapData = require('./_getMapData');\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n","var getMapData = require('./_getMapData');\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n","var getMapData = require('./_getMapData');\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n","var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n","var getNative = require('./_getNative');\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n","var isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","var baseGet = require('./_baseGet');\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var MapCache = require('./_MapCache');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n","var baseSet = require('./_baseSet');\n\n/**\n * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\n * it's created. Arrays are created for missing index properties while objects\n * are created for all other missing properties. Use `_.setWith` to customize\n * `path` creation.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.set(object, 'a[0].b.c', 4);\n * console.log(object.a[0].b.c);\n * // => 4\n *\n * _.set(object, ['x', '0', 'y', 'z'], 5);\n * console.log(object.x[0].y.z);\n * // => 5\n */\nfunction set(object, path, value) {\n  return object == null ? object : baseSet(object, path, value);\n}\n\nmodule.exports = set;\n","var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n"]}