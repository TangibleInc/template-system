{"version":3,"file":"table.min.js.map","sources":["../src/table/utils.js","../src/table/DataSet.js","../src/table/renderEngine.js","../src/table/pagination.js","../src/table/TableSortable.js","../src/table/index.js"],"sourcesContent":["export const _isArray = (arr) => Array.isArray(arr)\r\n\r\nexport const _isNumber = (num) => typeof num === 'number'\r\n\r\nexport const _isObject = (obj) => typeof obj === 'object'\r\n\r\nexport const _isFunction = (fun) => typeof fun === 'function'\r\n\r\nexport const _isString = (str) => typeof str === 'string'\r\n\r\nexport const _isNumericString = (str) => _isNumber(parseFloat(str, 10))\r\n\r\nexport const _isDate = (str) => {\r\n  if (Object.prototype.toString.call(str) === '[object Date]') {\r\n    if (_isNumber(str.getTime())) {\r\n      return true\r\n    }\r\n  } else if (_isString(str)) {\r\n    const d = new Date(str)\r\n    if (_isNumber(d.getTime())) {\r\n      return true\r\n    }\r\n  }\r\n  return false\r\n}\r\n\r\nexport const _sort = (arr, order) => {\r\n  return arr.sort((a, b) => {\r\n    if (order === 'asc') {\r\n      return parseInt(a, 10) - parseInt(b, 10)\r\n    }\r\n    return parseInt(b, 10) - parseInt(a, 10)\r\n  })\r\n}\r\n\r\nexport const _keys = (obj) => {\r\n  if ('keys' in Object) {\r\n    return Object.keys(obj)\r\n  }\r\n  return Object.getOwnPropertyNames(obj)\r\n}\r\n\r\nexport const _forEach = (arr, callback) => {\r\n  _invariant(_isArray(arr), 'ForEach requires array input')\r\n  if (!arr.length) {\r\n    return []\r\n  }\r\n\r\n  if (!_isFunction(callback)) {\r\n    callback = () => {}\r\n  }\r\n\r\n  let i = 0,\r\n    len = arr.length\r\n\r\n  while (i < len) {\r\n    callback.apply(null, [arr[i], i])\r\n    i += 1\r\n  }\r\n  return arr\r\n}\r\n\r\nexport const _filter = (arr, callback) => {\r\n  _invariant(_isArray(arr), '_filter requires array input')\r\n  if (!arr.length) {\r\n    return []\r\n  }\r\n\r\n  if (!_isFunction(callback)) {\r\n    return arr\r\n  }\r\n\r\n  let i = 0,\r\n    len = arr.length,\r\n    farr = []\r\n\r\n  while (i < len) {\r\n    if (callback.apply(null, [arr[i], i])) {\r\n      farr.push(arr[i])\r\n    }\r\n    i += 1\r\n  }\r\n  return farr\r\n}\r\n\r\nexport const _invariant = (condition, format, ...rest) => {\r\n  let error\r\n  if (!condition) {\r\n    const args = [...rest]\r\n    let argIndex = 0\r\n    error = new Error(format.replace(/%s/g, () => args[argIndex++]))\r\n    error.name = 'TableSortable Violation'\r\n    error.framesToPop = 1\r\n    throw error\r\n  }\r\n}\r\n\r\nexport const _nativeCompare = (value, other) => {\r\n  if (value === other) return 0\r\n\r\n  if (_isNumber(value)) {\r\n    return parseFloat(value) > parseFloat(other) ? 1 : -1\r\n  }\r\n\r\n  if (!_isNumericString(value) && _isDate(value)) {\r\n    const d1 = new Date(value)\r\n    const d2 = new Date(other)\r\n    console.log('compare', value, other, value > other ? 1 : -1)\r\n    return d1.getTime() > d2.getTime() ? 1 : -1\r\n  }\r\n\r\n  if (_isString(value)) {\r\n    // Case insensitive\r\n    return value.toLowerCase() > other.toLowerCase() ? 1 : -1\r\n  }\r\n\r\n  return 1\r\n}\r\n\r\nexport const debounce = (func, delay) => {\r\n  let timer\r\n  return function () {\r\n    clearTimeout(timer)\r\n    timer = window.setTimeout(() => func.apply(this, arguments), delay)\r\n  }\r\n}\r\n\r\nexport const _lower = (str) => {\r\n  return _isString(str) ? str.toLowerCase() : String(str)\r\n}\r\n\r\nexport const lookInObject = (obj, str, columns = []) => {\r\n  if (!str && !_isNumber(str)) {\r\n    return false\r\n  }\r\n  const keys = _keys(obj)\r\n  if (!_isArray(columns)) {\r\n    columns = keys\r\n  }\r\n  let i = 0,\r\n    len = keys.length,\r\n    found = false\r\n  const source = _lower(str)\r\n  while (i < len) {\r\n    const item = keys[i]\r\n    const dest = _lower(obj[item])\r\n    if (\r\n      columns.length &&\r\n      columns.indexOf(item) > -1 &&\r\n      dest.indexOf(source) > -1\r\n    ) {\r\n      found = true\r\n      break\r\n    }\r\n    if (!columns.length && dest.indexOf(source) > -1) {\r\n      found = true\r\n      break\r\n    }\r\n    i += 1\r\n  }\r\n  return found\r\n}\r\n\r\nexport const _inRange = (a, range) => {\r\n  return _isArray(range) && range[0] <= a && range[1] > a\r\n}\r\n","import * as Utils from './utils'\r\n\r\nclass DataSet {\r\n  _name = 'dataset'\r\n  dataset = null\r\n  _cachedData = null\r\n  _datasetLen = 0\r\n  _outLen = 10\r\n  sortDirection = {\r\n    ASC: 'asc',\r\n    DESC: 'desc',\r\n  }\r\n\r\n  _formatError(condition, fn, msg, ...rest) {\r\n    Utils._invariant(condition, `${this._name}.${fn} ${msg}`, ...rest)\r\n  }\r\n\r\n  _hasDataset() {\r\n    this._formatError(\r\n      this.dataset !== null,\r\n      'data',\r\n      'No source collection is provided. Add your collection to dataset with \"dataset.fromCollection([{}])\" method.'\r\n    )\r\n  }\r\n\r\n  fromCollection(data) {\r\n    this._formatError(\r\n      Utils._isArray(data),\r\n      'fromCollection',\r\n      'Requires dataset to be a collection, like [{ }]'\r\n    )\r\n    this.dataset = data\r\n    this._cachedData = JSON.stringify(data)\r\n    this._datasetLen = data.length\r\n  }\r\n\r\n  top(len) {\r\n    this._hasDataset()\r\n    if (len) {\r\n      this._formatError(\r\n        Utils._isNumber(len),\r\n        'top',\r\n        'Requires length to be a number'\r\n      )\r\n      return this.dataset.slice(0, len)\r\n    }\r\n    return this.dataset.slice(0, this._outLen)\r\n  }\r\n\r\n  bottom(len) {\r\n    this._hasDataset()\r\n    if (len) {\r\n      this._formatError(\r\n        Utils._isNumber(len),\r\n        'bottom',\r\n        'Requires length to be a number'\r\n      )\r\n      len = Math.max(this._datasetLen - len, 0)\r\n      return this.dataset.slice(len, this._datasetLen)\r\n    }\r\n    len = Math.max(this._datasetLen - this._outLen, 0)\r\n    return this.dataset.slice(len, this._datasetLen)\r\n  }\r\n\r\n  get(from, to) {\r\n    this._hasDataset()\r\n    this._formatError(\r\n      Utils._isNumber(from),\r\n      'get',\r\n      'Requires \"from\" to be a number'\r\n    )\r\n    this._formatError(\r\n      Utils._isNumber(to),\r\n      'get',\r\n      'Requires \"to\" to be a number'\r\n    )\r\n    this._formatError(!(from > to), 'get', '\"from\" cannot be greater than \"to\"')\r\n    from = Math.max(from, 0)\r\n    to = Math.min(to, this._datasetLen)\r\n    return this.dataset.slice(from, to)\r\n  }\r\n\r\n  sort(column, direction) {\r\n    this._hasDataset()\r\n    this._formatError(\r\n      Utils._isString(column),\r\n      'sort',\r\n      'Requires \"column\" type of string'\r\n    )\r\n    this._formatError(\r\n      Utils._isString(direction),\r\n      'sort',\r\n      'Requires \"direction\" type of string'\r\n    )\r\n    this._formatError(\r\n      direction === 'asc' || direction === 'desc',\r\n      'sort',\r\n      '\"%s\" is invalid sort direction. Use \"dataset.sortDirection.ASC\" or \"dataset.sortDirection.DESC\".',\r\n      direction\r\n    )\r\n    const head = this.top(1)[0]\r\n    this._formatError(\r\n      head[column],\r\n      'sort',\r\n      'Column name \"%s\" does not exist in collection',\r\n      column\r\n    )\r\n\r\n    const dir = this.sortDirection.ASC === direction ? 1 : -1\r\n\r\n    this.dataset.sort(function (object, other) {\r\n      return Utils._nativeCompare(object[column], other[column]) * dir\r\n    })\r\n\r\n    return this.top(this._datasetLen)\r\n  }\r\n\r\n  pushData(data) {\r\n    if (Utils._isArray(data)) {\r\n      Array.prototype.push.apply(this.dataset, data)\r\n    }\r\n  }\r\n\r\n  search(str, columns) {\r\n    if (Utils._isString(str) || Utils._isNumber(str)) {\r\n      const cachedData = JSON.parse(this._cachedData)\r\n      if (str === '') {\r\n        this.dataset = cachedData\r\n      } else {\r\n        this.dataset = Utils._filter(cachedData, (item) =>\r\n          Utils.lookInObject(item, str, columns)\r\n        )\r\n      }\r\n      this._datasetLen = this.dataset.length\r\n    }\r\n  }\r\n}\r\n\r\nexport default DataSet\r\n","import $ from 'jquery'\r\nimport * as utils from './utils'\r\n\r\nconst constructNode = (node, attrs, children) => ({\r\n  node,\r\n  attrs,\r\n  children,\r\n})\r\n\r\nconst addAttrs = (elm, attrs) => {\r\n  if (!attrs) {\r\n    return elm\r\n  }\r\n  const attrKeys = Object.keys(attrs)\r\n  let i = 0\r\n\r\n  while (i < attrKeys.length) {\r\n    const key = attrKeys[i]\r\n    const attr = attrs[key]\r\n    if (attr === undefined) {\r\n      continue\r\n    }\r\n    if (/^on/.test(key) && attr) {\r\n      elm.on(key.replace(/^on/, '').toLowerCase(), attr)\r\n    } else if (key === 'text') {\r\n      elm.text(attr)\r\n    } else if (key === 'html') {\r\n      elm.html(attr)\r\n    } else if (key === 'append') {\r\n      elm.append(attr)\r\n    } else if (key === 'className') {\r\n      elm.attr('class', attr)\r\n    } else {\r\n      elm.attr(key, attr)\r\n    }\r\n    i += 1\r\n  }\r\n\r\n  return elm\r\n}\r\n\r\nconst createElement = ({ node, attrs, children }) => {\r\n  let pretNode = $(`<${node}></${node}>`)\r\n  return addAttrs(pretNode, attrs)\r\n}\r\n\r\nconst renderElement = (pretObj, rootNode, isChild) => {\r\n  if (!isChild) {\r\n    rootNode.empty()\r\n  }\r\n  if (utils._isString(pretObj) || pretObj instanceof $) {\r\n    rootNode.append(pretObj)\r\n  } else if (utils._isArray(pretObj)) {\r\n    const pretElm = []\r\n    for (let i = 0; i < pretObj.length; i++) {\r\n      let elm = createElement(pretObj[i])\r\n      if (pretObj[i].children) {\r\n        elm = renderElement(pretObj[i].children, elm, true)\r\n      }\r\n      pretElm.push(elm)\r\n    }\r\n    rootNode.append(pretElm)\r\n  } else if (utils._isObject(pretObj)) {\r\n    let elm = createElement(pretObj)\r\n    if (pretObj.children) {\r\n      elm = renderElement(pretObj.children, elm, true)\r\n    }\r\n    rootNode.append(elm)\r\n  }\r\n  return rootNode\r\n}\r\n\r\nconst Pret = () => {\r\n  return {\r\n    createElement: constructNode,\r\n    render: renderElement,\r\n  }\r\n}\r\n\r\nexport default Pret\r\n","/**\r\n * Pagination algorithm\r\n *\r\n * Based on ideas from: https://gist.github.com/kottenator/9d936eb3e4e3c3e02598\r\n */\r\n\r\nconst getRange = (start, end) => {\r\n  return Array(end - start + 1)\r\n    .fill()\r\n    .map((v, i) => i + start)\r\n}\r\n\r\nexport const generatePageRange = (currentPage, pageCount) => {\r\n  let delta\r\n\r\n  if (pageCount <= 7) {\r\n    // delta === 7: [1 2 3 4 5 6 7]\r\n    delta = 7\r\n  } else {\r\n    // delta === 2: [1 ... 4 5 6 ... 10]\r\n    // delta === 4: [1 2 3 4 5 ... 10]\r\n    delta = currentPage > 4 && currentPage < pageCount - 3 ? 2 : 4\r\n  }\r\n\r\n  const range = {\r\n    start: Math.round(currentPage - delta / 2),\r\n    end: Math.round(currentPage + delta / 2),\r\n  }\r\n\r\n  if (range.start - 1 === 1 || range.end + 1 === pageCount) {\r\n    range.start += 1\r\n    range.end += 1\r\n  }\r\n\r\n  let pages =\r\n    currentPage > delta\r\n      ? getRange(\r\n          Math.min(range.start, pageCount - delta),\r\n          Math.min(range.end, pageCount)\r\n        )\r\n      : getRange(1, Math.min(pageCount, delta + 1))\r\n\r\n  const dots = '...' // '&hellip;' or '…'\r\n  const withDots = (value, pair) =>\r\n    pages.length + 1 !== pageCount ? pair : [value]\r\n\r\n  if (pages[0] !== 1) {\r\n    pages = withDots(1, [1, dots]).concat(pages)\r\n  }\r\n\r\n  if (pages[pages.length - 1] < pageCount) {\r\n    pages = pages.concat(withDots(pageCount, [dots, pageCount]))\r\n  }\r\n\r\n  return pages\r\n}\r\n\r\n// Quick test\r\n// for (let i = 1, l = 10; i <= l; i++)\r\n//   console.log(`Selected page ${i}:`, generatePageRange(i, l));\r\n","/**\r\n * Ravi Dhiman <ravid7000@gmail.com>\r\n * TableSortable\r\n */\r\n\r\nimport $ from 'jquery'\r\nimport DataSet from './DataSet'\r\nimport Pret from './renderEngine'\r\nimport * as Utils from './utils'\r\nimport { generatePageRange } from './pagination'\r\n\r\nclass TableSortable {\r\n  _name = 'tableSortable'\r\n  _defOptions = {\r\n    element: '',\r\n    data: [],\r\n    columns: {},\r\n    visibleColumns: null, // Optional: All keys of \"columns\" by default\r\n\r\n    classPrefix: 'tangible-table',\r\n\r\n    buttonClass: 'tangible-table-button',\r\n    activeButtonClass: 'tangible-table-button active',\r\n    buttonGroupClass: 'tangible-table-button-group',\r\n\r\n    paginationContainerClass: 'tangible-table-pagination-container',\r\n    paginationLeftColumnClass: 'tangible-table-pagination-left-column',\r\n    paginationRightColumnClass: 'tangible-table-pagination-right-column',\r\n\r\n    sorting: true,\r\n    pagination: true,\r\n    paginationContainer: null,\r\n    paginationTemplate: `<span data-tangible-table-paginator-field=\"current\"></span> of <span data-tangible-table-paginator-field=\"total\"></span> pages`,\r\n    rowsPerPage: 10,\r\n\r\n    formatCell: null,\r\n    formatHeader: null,\r\n\r\n    searchField: null,\r\n    responsive: {},\r\n    totalPages: 0,\r\n    sortingIcons: {\r\n      asc: '<span> ▲</span>',\r\n      desc: '<span> ▼</span>',\r\n    },\r\n    prevText: '<span>◀︎</span>',\r\n    nextText: '<span>▶︎</span>',\r\n\r\n    tableWillMount: () => {},\r\n    tableDidMount: () => {},\r\n    tableWillUpdate: () => {},\r\n    tableDidUpdate: () => {},\r\n    tableWillUnmount: () => {},\r\n    tableDidUnmount: () => {},\r\n    onPaginationChange: null,\r\n    onColumnSort: null,\r\n    onSearch: null,\r\n    onUpdateRowsPerPage: null,\r\n  }\r\n  _styles = null\r\n  _dataset = null\r\n  _table = null\r\n  _thead = null\r\n  _tbody = null\r\n  _isMounted = false\r\n  _isUpdating = false\r\n  _sorting = {\r\n    currentCol: '',\r\n    dir: '',\r\n  }\r\n  _pagination = {\r\n    elm: null,\r\n    currentPage: 0,\r\n    totalPages: 1,\r\n    visiblePageNumbers: 5,\r\n    pageData: [], // Optional: Data per page from server-side\r\n  }\r\n  _cachedOption = null\r\n  _cachedViewPort = -1\r\n\r\n  constructor(options) {\r\n    this.options = $.extend(this._defOptions, options)\r\n    delete this._defOptions\r\n\r\n    this._rootElement = $(this.options.element)\r\n    ;[\r\n      'classPrefix',\r\n      'buttonClass',\r\n      'activeButtonClass',\r\n      'buttonGroupClass',\r\n      'paginationContainerClass',\r\n      'paginationLeftColumnClass',\r\n      'paginationRightColumnClass',\r\n    ].forEach((key) => {\r\n      this[key] = this.options[key]\r\n    })\r\n\r\n    this.engine = Pret()\r\n\r\n    this.html = this.engine.createElement\r\n\r\n    this.init()\r\n    this._debounceUpdateTable()\r\n  }\r\n\r\n  /**\r\n   * logError\r\n   * @param {bool} condition\r\n   * @param {string} fn\r\n   * @param {string} msg\r\n   * @param  {*} rest\r\n   */\r\n  logError(condition, fn, msg, ...rest) {\r\n    Utils._invariant(condition, `${this._name}.${fn} ${msg}`, ...rest)\r\n  }\r\n\r\n  logWarn(condition, opt, msg) {\r\n    if (condition) {\r\n      console.warn(`${this._name}.options.${opt} ${msg}`)\r\n    }\r\n  }\r\n\r\n  emitLifeCycles(key, ...rest) {\r\n    if (!this.options) {\r\n      return\r\n    }\r\n    const { options } = this\r\n    if (Utils._isFunction(options[key])) {\r\n      options[key].apply(this, rest)\r\n    }\r\n  }\r\n\r\n  setVisibleColumns(columnKeys) {\r\n    this.options.visibleColumns =\r\n      columnKeys || Object.keys(this.options.columns)\r\n  }\r\n\r\n  getVisibleColumns() {\r\n    return this.options.visibleColumns\r\n  }\r\n\r\n  setPage(pageNo, data) {\r\n    this.logError(\r\n      Utils._isNumber(pageNo),\r\n      'setPage',\r\n      'expect argument as number'\r\n    )\r\n\r\n    const { totalPages } = this._pagination\r\n\r\n    if (Utils._isNumber(pageNo)) {\r\n      if (pageNo > totalPages - 1) {\r\n        pageNo = totalPages - 1\r\n      }\r\n\r\n      this._pagination.currentPage = pageNo\r\n\r\n      if (data) {\r\n        this.setCurrentPageData(data)\r\n\r\n        // Original: Doesn't paginate correctly\r\n        // this._dataset.pushData(data)\r\n      }\r\n\r\n      this.updateTable()\r\n    }\r\n  }\r\n\r\n  clearPageData() {\r\n    this._pagination.pageData = []\r\n  }\r\n\r\n  setTotalPages(totalPages) {\r\n    if (totalPages === 0) totalPages = 1\r\n    this.options.totalPages = this._pagination.totalPages = totalPages\r\n    if (this._pagination.currentPage > totalPages - 1) {\r\n      this._pagination.currentPage = totalPages - 1\r\n    }\r\n  }\r\n\r\n  setCurrentPageData(data) {\r\n    // Override current page data\r\n    this._pagination.pageData[this._pagination.currentPage] = data\r\n  }\r\n\r\n  updateRowsPerPage(rowsPerPage) {\r\n    this.logError(\r\n      Utils._isNumber(rowsPerPage),\r\n      'updateRowsPerPage',\r\n      'expect argument as number'\r\n    )\r\n\r\n    if (!rowsPerPage) return\r\n\r\n    const { onUpdateRowsPerPage } = this.options\r\n\r\n    this._pagination.currentPage = 0 // Reset pagination\r\n    this.options.rowsPerPage = rowsPerPage\r\n\r\n    if (onUpdateRowsPerPage) {\r\n      // Callback should setData to refresh table\r\n      onUpdateRowsPerPage(rowsPerPage)\r\n    } else {\r\n      this.updateTable()\r\n    }\r\n  }\r\n\r\n  search(val, cols = []) {\r\n    this.logError(\r\n      cols && Utils._isArray(cols),\r\n      'search',\r\n      'second argument must be array of keys'\r\n    )\r\n\r\n    if (!cols.length) {\r\n      cols = this.getVisibleColumns()\r\n    }\r\n\r\n    this._pagination.currentPage = 0\r\n\r\n    const { onSearch } = this.options\r\n\r\n    if (onSearch) {\r\n      onSearch(val, cols)\r\n    } else {\r\n      this._dataset.search(val, cols)\r\n      this.debounceUpdateTable()\r\n    }\r\n  }\r\n\r\n  // Backward compatibility\r\n  lookUp(val, cols) {\r\n    return this.search(val, cols)\r\n  }\r\n\r\n  _bindSearchField() {\r\n    const self = this\r\n    const { searchField } = this.options\r\n    if (!searchField) {\r\n      return\r\n    }\r\n    const field = $(searchField)\r\n    this.logError(\r\n      field.length,\r\n      'searchField',\r\n      '\"%s\" is not a valid DOM element or string',\r\n      field\r\n    )\r\n    field.on('input', function () {\r\n      const val = $(this).val()\r\n      self.search(val)\r\n    })\r\n    this.options.searchField = field\r\n  }\r\n\r\n  /**\r\n   * _validateRootElement\r\n   */\r\n  _validateRootElement() {\r\n    this.logError(\r\n      this._rootElement.length,\r\n      'element',\r\n      '\"%s\" is not a valid root element',\r\n      this._rootElement\r\n    )\r\n  }\r\n\r\n  /**\r\n   * _createTable\r\n   */\r\n  _createTable() {\r\n    this._table = $('<table></table>').addClass('table ' + this.classPrefix)\r\n  }\r\n\r\n  /**\r\n   * _initDataset\r\n   */\r\n  _initDataset() {\r\n    const { data } = this.options\r\n    this.logError(\r\n      Utils._isArray(data),\r\n      'data',\r\n      'table-sortable only supports collections. Like: [{ key: value }, { key: value }]'\r\n    )\r\n    const dataset = new DataSet()\r\n    dataset.fromCollection(data)\r\n    this._dataset = dataset\r\n  }\r\n\r\n  /**\r\n   * _validateColumns\r\n   */\r\n  _validateColumns() {\r\n    const { columns } = this.options\r\n    this.logError(\r\n      Utils._isObject(columns),\r\n      'columns',\r\n      'Invalid column type, see docs'\r\n    )\r\n  }\r\n\r\n  sortData(column) {\r\n    let { dir, currentCol } = this._sorting\r\n\r\n    if (column !== currentCol) {\r\n      dir = ''\r\n    }\r\n    if (!dir) {\r\n      dir = this._dataset.sortDirection.ASC\r\n    } else if (dir === this._dataset.sortDirection.ASC) {\r\n      dir = this._dataset.sortDirection.DESC\r\n    } else if (dir === this._dataset.sortDirection.DESC) {\r\n      dir = this._dataset.sortDirection.ASC\r\n    }\r\n\r\n    currentCol = column\r\n\r\n    this._sorting = {\r\n      dir,\r\n      currentCol,\r\n    }\r\n\r\n    const { onColumnSort } = this.options\r\n\r\n    if (onColumnSort) {\r\n      onColumnSort.apply(this, [currentCol, dir])\r\n    } else {\r\n      this._dataset.sort(currentCol, dir)\r\n      this.updateCellHeader()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _addColSorting\r\n   * @param {[]} col\r\n   * @param {string} key\r\n   * @return {{ col }}\r\n   */\r\n  _addColSorting(col, key) {\r\n    const { sorting } = this.options\r\n    const self = this\r\n    if (!sorting) return col\r\n\r\n    if (sorting && !Utils._isArray(sorting)) {\r\n      col = $(col)\r\n      col.attr('role', 'button')\r\n      col.addClass(this.classPrefix + '-sortable-column-header')\r\n      if (key === this._sorting.currentCol && this._sorting.dir) {\r\n        col.append(this.options.sortingIcons[this._sorting.dir])\r\n      }\r\n      col.click(function (e) {\r\n        self.sortData(key)\r\n      })\r\n    }\r\n\r\n    if (Utils._isArray(sorting)) {\r\n      Utils._forEach(sorting, (part) => {\r\n        if (key === part) {\r\n          col = $(col)\r\n          col.attr('role', 'button')\r\n          col.addClass(this.classPrefix + '-sortable-column-header')\r\n          if (key === this._sorting.currentCol && this._sorting.dir) {\r\n            col.append(this.options.sortingIcons[this._sorting.dir])\r\n          }\r\n          col.click(function (e) {\r\n            self.sortData(key)\r\n          })\r\n        }\r\n      })\r\n    }\r\n\r\n    return col\r\n  }\r\n\r\n  /**\r\n   * getCurrentPageIndex\r\n   * @returns {{ from: Number, to: Number? }} obj\r\n   */\r\n  getCurrentPageIndex() {\r\n    const { _datasetLen } = this._dataset\r\n    const { pagination, rowsPerPage } = this.options\r\n    const { currentPage } = this._pagination // current page in pagination\r\n    if (!pagination) {\r\n      return {\r\n        from: 0,\r\n      }\r\n    }\r\n    let from = currentPage * rowsPerPage // list start index\r\n    const to = Math.min(from + rowsPerPage, _datasetLen)\r\n    from = Math.min(from, to)\r\n    return {\r\n      from,\r\n      to,\r\n    }\r\n  }\r\n\r\n  _renderHeader(parentElm) {\r\n    if (!parentElm) {\r\n      parentElm = $('<thead class=\"' + this.classPrefix + '-head\"></thead>')\r\n    }\r\n\r\n    const { html } = this\r\n    const { columns, formatHeader } = this.options\r\n    const cols = []\r\n\r\n    const colKeys = this.getVisibleColumns() // Utils._keys(columns)\r\n\r\n    // create header\r\n    Utils._forEach(colKeys, (part, i) => {\r\n      let c\r\n      if (Utils._isFunction(formatHeader)) {\r\n        c = formatHeader(columns[part], part, i)\r\n      } else {\r\n        c = `<div>${columns[part]}</div>`\r\n      }\r\n      c = this._addColSorting(c, part)\r\n      const tbd = html('th', {\r\n        html: c,\r\n      })\r\n      cols.push(tbd)\r\n    })\r\n\r\n    const thr = html('tr', null, cols)\r\n    return this.engine.render(thr, parentElm)\r\n  }\r\n\r\n  _renderBody(parentElm) {\r\n    if (!parentElm) {\r\n      parentElm = $('<tbody class=\"' + this.classPrefix + '-body\"></tbody>')\r\n    }\r\n    const engine = this.engine\r\n    const { html } = this\r\n\r\n    const { columns, formatCell } = this.options\r\n    const { from, to } = this.getCurrentPageIndex()\r\n    const { currentPage } = this._pagination\r\n\r\n    let currentPageData = []\r\n\r\n    if (this._pagination.pageData[currentPage]) {\r\n      // Current page data set by onPaginationChange\r\n      currentPageData = this._pagination.pageData[currentPage]\r\n    } else if (to === undefined) {\r\n      currentPageData = this._dataset.top()\r\n    } else {\r\n      currentPageData = this._dataset.get(from, to)\r\n    }\r\n\r\n    const rows = [] // list of rows in body\r\n\r\n    const colKeys = this.getVisibleColumns() // Utils._keys(columns)\r\n\r\n    // create body\r\n    Utils._forEach(currentPageData, function (part, i) {\r\n      const cols = []\r\n      Utils._forEach(colKeys, (key) => {\r\n        const tbd = html('td', {\r\n          html: Utils._isFunction(formatCell)\r\n            ? formatCell(part, key)\r\n            : part[key + '__display'] !== undefined\r\n            ? part[key + '__display']\r\n            : part[key],\r\n        })\r\n\r\n        cols.push(tbd)\r\n      })\r\n      rows.push(html('tr', null, cols))\r\n    })\r\n    return engine.render(rows, parentElm)\r\n  }\r\n\r\n  /**\r\n   * _createCells\r\n   * @returns {{ thead: [], tbody: [] }}\r\n   */\r\n  _createCells() {\r\n    const thead = this._renderHeader()\r\n    const tbody = this._renderBody()\r\n    return { thead, tbody }\r\n  }\r\n\r\n  onPaginationBtnClick(dir, currPage) {\r\n    let { totalPages, currentPage } = this._pagination\r\n    const { onPaginationChange } = this.options\r\n\r\n    if (dir === 'up') {\r\n      if (currentPage < totalPages - 1) {\r\n        currentPage += 1\r\n      }\r\n    } else if (dir === 'down') {\r\n      if (currentPage >= 0) {\r\n        currentPage -= 1\r\n      }\r\n    }\r\n\r\n    const setPage = this.setPage.bind(this)\r\n\r\n    if (Utils._isFunction(onPaginationChange)) {\r\n      const cp = !isNaN(currPage) ? currPage : currentPage\r\n      onPaginationChange.apply(this, [cp, setPage])\r\n    } else {\r\n      if (currPage !== undefined) {\r\n        this._pagination.currentPage = currPage\r\n      } else {\r\n        this._pagination.currentPage = currentPage\r\n      }\r\n      this.updateTable()\r\n    }\r\n  }\r\n\r\n  renderPagination(parentElm) {\r\n    const self = this\r\n    const engine = this.engine\r\n    const { html } = this\r\n\r\n    const {\r\n      pagination,\r\n      paginationContainer,\r\n      paginationTemplate,\r\n      prevText,\r\n      nextText,\r\n    } = this.options\r\n\r\n    if (!pagination) {\r\n      return parentElm\r\n    }\r\n\r\n    const { currentPage, totalPages, visiblePageNumbers } = this._pagination\r\n\r\n    if (!parentElm) {\r\n      parentElm = $('<div class=\"' + this.classPrefix + '-pagination\"></div>')\r\n      const existingPaginationContainer = $(paginationContainer)\r\n      if (existingPaginationContainer.length) {\r\n        existingPaginationContainer.append(parentElm)\r\n      } else {\r\n        this._rootElement.after(parentElm) // Original: this._table.after(parentElm)\r\n      }\r\n    }\r\n\r\n    const buttons = []\r\n    const prevBtn = html('button', {\r\n      className: this.buttonClass,\r\n      html: prevText,\r\n      disabled: currentPage === 0,\r\n      onClick: () => self.onPaginationBtnClick('down'),\r\n    })\r\n\r\n    buttons.push(prevBtn)\r\n\r\n    const pages = generatePageRange(currentPage + 1, totalPages)\r\n\r\n    for (const page of pages) {\r\n      if (page === '...') {\r\n        buttons.push(\r\n          html('button', {\r\n            className: this.buttonClass,\r\n            disabled: true,\r\n            text: '…', //'...',\r\n          })\r\n        )\r\n\r\n        continue\r\n      }\r\n\r\n      const isActive = currentPage + 1 === page\r\n      const toPage = page\r\n\r\n      buttons.push(\r\n        html('button', {\r\n          className: isActive ? this.activeButtonClass : this.buttonClass,\r\n          onClick: function (e) {\r\n            self.onPaginationBtnClick(null, toPage - 1)\r\n          },\r\n          text: page,\r\n          'data-page': page,\r\n        })\r\n      )\r\n    }\r\n\r\n    const nextBtn = html('button', {\r\n      className: this.buttonClass,\r\n      html: nextText,\r\n      disabled: currentPage >= totalPages - 1,\r\n      onClick: () => self.onPaginationBtnClick('up'),\r\n    })\r\n\r\n    buttons.push(nextBtn)\r\n\r\n    let paginationLabel = ''\r\n\r\n    if (totalPages >= 2) {\r\n      const $pagination = $(`<div>${paginationTemplate}</div>`)\r\n\r\n      $pagination\r\n        .find('[data-tangible-table-paginator-field=\"current\"]')\r\n        .text(currentPage + 1)\r\n      $pagination\r\n        .find('[data-tangible-table-paginator-field=\"total\"]')\r\n        .text(totalPages)\r\n\r\n      paginationLabel = $pagination\r\n    }\r\n\r\n    const pageRow = html(\r\n      'div',\r\n      {\r\n        className: this.paginationContainerClass,\r\n      },\r\n      [\r\n        html(\r\n          'div',\r\n          {\r\n            className: this.paginationLeftColumnClass,\r\n          },\r\n          paginationLabel\r\n        ),\r\n        html(\r\n          'div',\r\n          {\r\n            className: this.paginationRightColumnClass,\r\n          },\r\n          html(\r\n            'div',\r\n            {\r\n              className: this.buttonGroupClass,\r\n            },\r\n            totalPages < 2 ? '' : buttons\r\n          )\r\n        ),\r\n      ]\r\n    )\r\n\r\n    return engine.render(pageRow, parentElm)\r\n  }\r\n\r\n  createPagination() {\r\n    const { pagination, totalPages, rowsPerPage } = this.options\r\n    if (!pagination) {\r\n      return false\r\n    }\r\n\r\n    this.logError(\r\n      rowsPerPage && Utils._isNumber(rowsPerPage),\r\n      'rowsPerPage',\r\n      'should be a number greater than zero.'\r\n    )\r\n\r\n    this.logError(\r\n      Utils._isNumber(totalPages),\r\n      'totalPages',\r\n      'should be a number greater than zero.'\r\n    )\r\n\r\n    let totalP = totalPages\r\n      ? totalPages\r\n      : Math.ceil(this._dataset._datasetLen / rowsPerPage)\r\n    if (0 >= totalP) {\r\n      totalP = 1\r\n    }\r\n\r\n    this._pagination.totalPages = totalP\r\n\r\n    if (this._pagination.elm) {\r\n      this.renderPagination(this._pagination.elm)\r\n    } else {\r\n      this._pagination.elm = this.renderPagination()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _generateTable\r\n   * @param {[]]} thead\r\n   * @param {[]} tbody\r\n   */\r\n  _generateTable(thead, tbody) {\r\n    this._table.html('')\r\n    this._table.append(thead)\r\n    this._table.append(tbody)\r\n    this._thead = thead\r\n    this._tbody = tbody\r\n  }\r\n\r\n  /**\r\n   * _renderTable\r\n   */\r\n  _renderTable() {\r\n    if (this._rootElement.is('table')) {\r\n      this._rootElement.html(this._table.html())\r\n    } else {\r\n      const div = this.html('div', {\r\n        className: this.classPrefix + '-container',\r\n        append: this._table,\r\n      })\r\n      this._rootElement = this.engine.render(div, this._rootElement)\r\n    }\r\n  }\r\n\r\n  _initStyles() {\r\n    /*\r\n      const { responsive } = this.options\r\n      if (responsive) {\r\n        return\r\n      }\r\n\r\n      const css =\r\n            '.' + this.classPrefix + '-container .table{table-layout:fixed}@media(max-width:767px){.' + this.classPrefix + '-container{overflow:auto;max-width:100%}}'\r\n\r\n      const style = $('<style></style>')\r\n      style.attr('id', this.classPrefix)\r\n      style.html(css)\r\n      $('head').append(style)\r\n\r\n      this._styles = style\r\n*/\r\n  }\r\n\r\n  /**\r\n   * init\r\n   * @description Initial rendering\r\n   */\r\n  init() {\r\n    this.emitLifeCycles('tableWillMount')\r\n    this._validateRootElement()\r\n    this._initDataset()\r\n    this._createTable()\r\n    this.setVisibleColumns()\r\n    this._validateColumns()\r\n    const { thead, tbody } = this._createCells()\r\n    this._generateTable(thead, tbody)\r\n    this._renderTable()\r\n    this.createPagination()\r\n    this._bindSearchField()\r\n    this._initStyles()\r\n    this._isMounted = true\r\n    this.emitLifeCycles('tableDidMount')\r\n    if (this._cachedViewPort === -1) {\r\n      this.resizeSideEffect()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updation phase\r\n   * 1. When clicked on sorting\r\n   * 2. When clicked on pagination\r\n   * 3. When external data changed\r\n   *\r\n   * Updation phase will not distroy table completely. It will re-render table cells and pagination.\r\n   */\r\n\r\n  _debounceUpdateTable() {\r\n    this.debounceUpdateTable = Utils.debounce(this.updateTable, 400)\r\n  }\r\n\r\n  updateTable() {\r\n    if (this._isUpdating) {\r\n      return\r\n    }\r\n\r\n    this.emitLifeCycles('tableWillUpdate')\r\n    this._isUpdating = true\r\n    this._renderHeader(this._thead)\r\n    this._renderBody(this._tbody)\r\n    this.createPagination()\r\n    this._isUpdating = false\r\n    this.emitLifeCycles('tableDidUpdate')\r\n  }\r\n\r\n  updateCellHeader() {\r\n    if (this._isUpdating) {\r\n      return\r\n    }\r\n\r\n    this._isUpdating = true\r\n    this.emitLifeCycles('tableWillUpdate')\r\n    this._renderHeader(this._thead)\r\n    this._renderBody(this._tbody)\r\n    this._isUpdating = false\r\n    this.emitLifeCycles('tableDidUpdate')\r\n  }\r\n\r\n  resizeSideEffect() {\r\n    const mkRes = Utils.debounce(this.makeResponsive, 500)\r\n    window.addEventListener('resize', mkRes.bind(this))\r\n    this.makeResponsive()\r\n  }\r\n\r\n  makeResponsive() {\r\n    const { responsive } = this.options\r\n    const { innerWidth } = window\r\n    const keys = Utils._sort(Utils._keys(responsive), 'desc')\r\n    let minPort\r\n\r\n    this.logError(\r\n      Utils._isObject(responsive),\r\n      'responsive',\r\n      'Invalid type of responsive option provided: \"%s\"',\r\n      responsive\r\n    )\r\n\r\n    Utils._forEach(keys, (viewPort) => {\r\n      if (parseInt(viewPort, 10) > innerWidth) {\r\n        minPort = viewPort\r\n      }\r\n    })\r\n\r\n    if (this._cachedViewPort === minPort) {\r\n      return\r\n    }\r\n    this._cachedViewPort = minPort\r\n    const resOptions = responsive[minPort]\r\n    if (Utils._isObject(resOptions)) {\r\n      if (!this._cachedOption) {\r\n        this._cachedOption = $.extend({}, this.options)\r\n      }\r\n      this.options = $.extend(this.options, resOptions)\r\n      this.refresh()\r\n    } else if (this._cachedOption) {\r\n      this.options = $.extend({}, this._cachedOption)\r\n      this._cachedOption = null\r\n      this._cachedViewPort = -1\r\n      this.refresh()\r\n    }\r\n    return\r\n  }\r\n\r\n  /**\r\n   * public APIs\r\n   */\r\n  setData = (data, columns, pushData) => {\r\n    this.logError(\r\n      Utils._isArray(data),\r\n      'setData',\r\n      'expect first argument as array of objects'\r\n    )\r\n    if (this._isMounted && data) {\r\n      if (pushData) {\r\n        this._dataset.pushData(data)\r\n      } else {\r\n        this._dataset.fromCollection(data)\r\n      }\r\n      if (columns) {\r\n        this.logError(\r\n          Utils._isObject(columns),\r\n          'setData',\r\n          'expect second argument as objects'\r\n        )\r\n        this.options.columns = columns\r\n      }\r\n      this.refresh()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * getData\r\n   * @returns {[{}]}\r\n   */\r\n  getData = () => {\r\n    if (this._isMounted) {\r\n      return this._dataset.top()\r\n    }\r\n    return []\r\n  }\r\n\r\n  /**\r\n   * getCurrentPageData\r\n   * @returns {[{}]}\r\n   */\r\n  getCurrentPageData = () => {\r\n    if (this._isMounted) {\r\n      const { rowsPerPage } = this.options\r\n      const { currentPage } = this._pagination\r\n      const from = currentPage * rowsPerPage\r\n      const to = from + rowsPerPage\r\n      return this._dataset.get(from, to)\r\n    }\r\n    return []\r\n  }\r\n\r\n  /**\r\n   * refresh\r\n   * @description This method will distroy and create a fresh table.\r\n   * @param {boolean?} hardRefresh\r\n   */\r\n  refresh = (hardRefresh) => {\r\n    if (hardRefresh) {\r\n      this.distroy()\r\n      this.create()\r\n    } else if (this._isMounted) {\r\n      this.updateTable()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * distroy\r\n   * @description This method will distroy table.\r\n   */\r\n  distroy = () => {\r\n    if (this._isMounted) {\r\n      this.emitLifeCycles('tableWillUnmount')\r\n      this._table.remove()\r\n      if (this._styles && this._styles.length) {\r\n        this._styles.remove()\r\n        this._styles = null\r\n      }\r\n      this._dataset = null\r\n      this._table = null\r\n      this._thead = null\r\n      this._tbody = null\r\n      if (this._pagination.elm) {\r\n        this._pagination.elm.remove()\r\n      }\r\n      this._pagination = {\r\n        elm: null,\r\n        currentPage: 0,\r\n        totalPages: 0,\r\n        visiblePageNumbers: 5,\r\n      }\r\n      this._isMounted = false\r\n      this._isUpdating = false\r\n      this._sorting = {\r\n        currentCol: '',\r\n        dir: '',\r\n      }\r\n      this._cachedViewPort = -1\r\n      this._cachedOption = null\r\n      this.emitLifeCycles('tableDidUnmount')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * create\r\n   * @description This method will create a fresh table.\r\n   */\r\n  create = () => {\r\n    if (!this._isMounted) {\r\n      this.init()\r\n    }\r\n  }\r\n}\r\n\r\nTableSortable.Pret = Pret\r\nTableSortable.DataSet = DataSet\r\n;(function ($) {\r\n  $.fn.tangibleTable = function (options) {\r\n    this.each(function () {\r\n      options.element = $(this)\r\n      return new TableSortable(options)\r\n    })\r\n  }\r\n})(jQuery)\r\n\r\nexport default TableSortable\r\n","/**\r\n * Based on: https://github.com/ravid7000/table-sortable\r\n */\r\n\r\nimport TableSortable from './TableSortable'\r\n\r\nfunction create(options) {\r\n  if (!options.element.length) {\r\n    console.warn('Tangible table requires element in options', options)\r\n    return\r\n  }\r\n\r\n  return new TableSortable(options)\r\n}\r\n\r\n// Export\r\n\r\nwindow.Tangible = window.Tangible || {}\r\nwindow.Tangible.Table = TableSortable\r\nwindow.Tangible.Table.create = create // Backward compatibility\r\n"],"names":["_isArray","__name","arr","_isNumber","num","_isObject","obj","_isFunction","fun","_isString","str","_isNumericString","_isDate","d","_sort","order","a","b","_keys","_forEach","callback","_invariant","i","len","_filter","farr","condition","format","rest","error","args","argIndex","_nativeCompare","value","other","d1","d2","debounce","func","delay","timer","_lower","lookInObject","columns","keys","found","source","item","dest","range","DataSet","__publicField","fn","msg","Utils","data","from","to","column","direction","head","dir","object","cachedData","o","l","e","u","r","h","n","s","$","rootNode","getRange","start","end","v","generatePageRange","currentPage","pageCount","delta","pages","dots","withDots","pair","create","options","TableSortable"],"mappings":"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"}