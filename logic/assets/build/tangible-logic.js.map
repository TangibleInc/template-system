{"version":3,"sources":["../../../../../../../modules/builder/node_modules/browser-pack/_prelude.js","tangible-logic.js","../src/tangible-logic.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","jQuery","document","ready","$","$html","$body","$root","append","on","$input","this","parent","find","config","data","JSON","parse","console","warn","value","val","addClass","$modal","html","title","description","each","ruleGroupIndex","ruleGroupData","buildRuleGroup","buildFormFields","$form","closeUI","formData","ruleGroups","$rules","rules","rule","name","push","getFormData","log","stringify","trigger","saveForm","$ruleGroups","ruleGroupHtml","closest","ruleHtml","buildRule","$rule","remove","fieldMap","fields","index","field","buildFieldMap","updateRuleBasedOnField","updateRuleBasedOnOperand","openUI","removeClass","empty","ruleIndex","ruleData","escapeHtml","buildRuleColumn","fieldName","buildSelect","buildFieldSelect","type","content","buildValueSelect","values","currentOperand","subvalueIndex","arguments","undefined","valueKey","valueFieldName","replace","valueConfig","default","buildNumberInput","buildTextInput","options","valuesForOperand","keep","operands","indexOf","excludeOperands","buildSubfieldSelect","selectType","inputName","valueDefined","label","concat","option","isSelected","toString","isNumeric","min","max","step","unit","unitConfig","placeholder","buildInputLabel","fieldConfig","key","buildInputDescription","$field","attr","ruleField","$columns","$subFields","$operand","$value","$subValues","$fieldColumn","fieldLabel","fieldDescription","prepend","subFields","operandFieldName","foundOperand","len","operand","buildOperandSelect","$operandSelect","$ruleWithNoOperand","$fieldSelect","$el","column","withLabel","hasOwnProperty","before_operand","before","visibilities","addVisibility","_i","subvalueKey","subvalues","_column","applyVisibility","applyVisibilities","visibility","show","constructor","Array","$container","hide","entityMap","&","<",">","\"","'","/","`","=","string","String","s"],"mappings":"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","file":"tangible-logic.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","jQuery(document).ready(function($) {\n  // Conditional logic modal window\n\n  var $html = $('html')\n  var $body = $('body')\n  var $root = $('<div id=\"tangible-logic-root\"></div>')\n\n  $body.append($root)\n\n  // Open button - can be dynamically added, so bind on body\n  $body.on('click', '[data-tangible-logic=\"open\"]', function() {\n    var $input = $(this)\n      .parent()\n      .find('[data-tangible-logic=\"input\"]')\n\n    if (!$input.length) {\n      console.warn('tangible/logic - Input field not found')\n      return\n    }\n\n    // Logic config\n    var config = $input.data('tangibleLogicConfig')\n\n    if (typeof config === 'string') {\n      try {\n        config = JSON.parse(config)\n      } catch (e) {\n        console.warn('tangible/logic - Config failed to parse', config)\n        config = []\n      }\n    }\n\n    // Current data\n    var value = $input.val()\n    var data = []\n\n    if (value) {\n      try {\n        data = JSON.parse(value)\n      } catch (e) {\n        console.warn('tangible/logic - Input value failed to parse', value)\n        data = []\n      }\n      // Fix for literal \"[]\"\n      if (typeof data === 'string') data = []\n    }\n\n    openUI($input, data, config)\n  })\n\n  var openClass = 'tangible-logic-open'\n  var hideScrollbarClass = 'tangible-logic-hide-scrollbar'\n\n  function closeUI() {\n    $root.removeClass(openClass)\n    $root.empty()\n    $html.removeClass(hideScrollbarClass)\n  }\n\n  var modalActionsHtml =\n    '<div class=\"tangible-logic-modal-actions tangible-logic-clear\">' +\n    '<button type=\"button\" class=\"tangible-logic-button\" data-tangible-logic=\"save\">Save</button>' +\n    '<button type=\"button\" class=\"tangible-logic-button\" data-tangible-logic=\"close\">Cancel</button>' +\n    '</div>'\n\n  function openUI($input, data, config) {\n    $html.addClass(hideScrollbarClass)\n\n    // Build modal\n\n    var $modal = $(\n      '<div class=\"tangible-logic-modal\">' +\n        '<form>' +\n        buildFormFields(data, config) +\n        modalActionsHtml +\n        '</form>' +\n        '</div>'\n    )\n\n    $root.append($modal)\n    $root.addClass(openClass)\n\n    // Form actions\n\n    var $form = $modal.find('form')\n\n    // Close\n    $form.find('[data-tangible-logic=\"close\"]').on('click', closeUI)\n\n    // Save\n    $form.find('[data-tangible-logic=\"save\"]').on('click', function() {\n      saveForm($form, $input)\n      closeUI()\n    })\n\n    // Add rule group\n\n    var $ruleGroups = $form.find('.tangible-logic-rule-groups')\n\n    $form\n      .find('[data-tangible-logic=\"add-rule-group\"]')\n      .on('click', function() {\n        var ruleGroupHtml = buildRuleGroup([{}], config)\n\n        $ruleGroups.append(ruleGroupHtml)\n      })\n\n    // Rule actions - can be dynamically added, so bind on form\n\n    // Add rule\n    $form.on('click', '[data-tangible-logic=\"add-rule\"]', function() {\n      var $rules = $(this)\n        .closest('.tangible-logic-rule-group')\n        .find('.tangible-logic-rule-group-rules')\n      var ruleHtml = buildRule({}, config)\n\n      $rules.append(ruleHtml)\n    })\n\n    // Remove rule\n    $form.on('click', '[data-tangible-logic=\"remove-rule\"]', function() {\n      var $rule = $(this).closest('.tangible-logic-rule')\n      var $rules = $rule.closest('.tangible-logic-rule-group-rules')\n\n      $rule.remove()\n\n      var $remainingRules = $rules.find('.tangible-logic-rule')\n\n      if (!$remainingRules.length) {\n        // Remove rule group\n        $rules.closest('.tangible-logic-rule-group').remove()\n      }\n    })\n\n    // Rule field - Update rules based on selected field\n\n    config.fieldMap = buildFieldMap(config)\n\n    var fieldSelectSelector = '.tangible-logic-rule-field-select'\n    $form.find(fieldSelectSelector).each(function() {\n      updateRuleBasedOnField($(this), config)\n    })\n    $form.on('change', fieldSelectSelector, function(e) {\n      updateRuleBasedOnField($(this), config)\n    })\n\n    var operandSelectSelector = '.tangible-logic-rule-operand-select'\n    // Called by updateRuleBasedOnField above\n    /*$form.find(operandSelectSelector).each(function() {\n      updateRuleBasedOnOperand($(this), config)\n    })*/\n    $form.on('change', operandSelectSelector, function(e) {\n      updateRuleBasedOnOperand($(this), config)\n    })\n  }\n\n  function buildFieldMap(config) {\n    // Field map for dynamically showing operands and values\n\n    var fieldMap = {} // { name: { operands, values }, .. }\n\n    $.each(config.fields || [], function(index, field) {\n      fieldMap[field.name] = field\n    })\n\n    return fieldMap\n  }\n\n  function buildFormFields(data, config) {\n    var html = ''\n\n    if (config.title) {\n      html += '<div class=\"tangible-logic-title\">' + config.title + '</div>'\n    }\n    if (config.description) {\n      html +=\n        '<div class=\"tangible-logic-description\">' +\n        config.description +\n        '</div>'\n    }\n\n    // Rule groups\n\n    html += '<div class=\"tangible-logic-rule-groups\">'\n\n    if (!data.length) {\n      // Default when empty\n      html += buildRuleGroup([{}], config)\n    } else {\n      $.each(data, function(ruleGroupIndex, ruleGroupData) {\n        html += buildRuleGroup(ruleGroupData, config)\n      })\n    }\n\n    html += '</div>'\n\n    // Add rule group\n    html +=\n      '<div class=\"tangible-logic-modal-actions tangible-logic-clear\">' +\n      '<button type=\"button\" class=\"tangible-logic-button\" data-tangible-logic=\"add-rule-group\">' +\n      'Add rule group' +\n      '</button>' +\n      '</div>'\n\n    return html\n  }\n\n  function buildRuleGroup(ruleGroupData, config) {\n    var html = ''\n\n    html +=\n      '<div class=\"tangible-logic-rule-group\">' +\n      '<div class=\"tangible-logic-rule-group-separator tangible-logic-clear\">' +\n      '<div class=\"tangible-logic-rule-column\">' +\n      'or' +\n      '</div>' +\n      '</div>'\n\n    html += '<div class=\"tangible-logic-rule-group-box\">'\n\n    // Rules\n    html += '<div class=\"tangible-logic-rule-group-rules\">'\n    $.each(ruleGroupData, function(ruleIndex, ruleData) {\n      html += buildRule(ruleData, config)\n    })\n    html += '</div>'\n\n    // Add rule\n    html +=\n      '<div class=\"tangible-logic-modal-actions tangible-logic-clear\">' +\n      '<button type=\"button\" class=\"tangible-logic-button\" data-tangible-logic=\"add-rule\">Add rule</button>' +\n      '</div>'\n\n    html +=\n      '</div>' + '</div>' // rule-group-box // rule group\n\n    return html\n  }\n\n  function buildRule(ruleData, config) {\n    var fieldName = 'tangible_logic[][][field]'\n\n    var html =\n      '<div class=\"tangible-logic-rule tangible-logic-clear\"'\n        +' data-tangible-logic-rule-data=\\''\n\n          // Important: Escape '\"<>\n          + escapeHtml( JSON.stringify(ruleData || {}) )\n\n        +'\\''\n      +'>'\n        +'<div class=\"tangible-logic-rule-columns\">'\n\n          +buildRuleColumn('field',\n            buildFieldSelect(fieldName, ruleData, config)\n          )\n\n      // Add these columns as needed\n      /*\n          +'<div class=\"tangible-logic-rule-column tangible-logic-rule-operand\">'\n      //+ buildOperandSelect(fieldName, ruleData, config)\n          +'</div>'\n          +'<div class=\"tangible-logic-rule-column tangible-logic-rule-value\">'\n      //+ buildValueSelect(fieldName, ruleData, config)\n          +'</div>'\n          +'<div class=\"tangible-logic-rule-column tangible-logic-rule-subvalue\">'\n          +'</div>'\n          */\n        +'</div>'\n        +'<div class=\"tangible-logic-rule-actions\">'\n          +'<button type=\"button\" class=\"tangible-logic-action-icon\" data-tangible-logic=\"remove-rule\">'\n            +'Remove'\n          +'</button>'\n        +'</div>'\n      +'</div>'\n\n    return html\n  }\n\n  function buildRuleColumn(type, content) {\n    return (\n      '<div class=\"tangible-logic-rule-column tangible-logic-rule-' +\n      type +\n      '\">' +\n      '<div class=\"tangible-logic-rule-column-content\">' +\n      content +\n      '</div>' +\n      '</div>'\n    )\n  }\n\n  function buildOperandSelect(fieldName, ruleData, operands) {\n    var operandFieldName = fieldName.replace('[field]', '[operand]')\n\n    if (!operands || !operands.length) return ''\n\n    // If current operand not found, select first one\n    // The result is passed back to caller via ruleData.operand\n    var foundOperand = false\n    for (let i = 0, len = operands.length; i < len; i++) {\n      if (operands[i].name === ruleData.operand) foundOperand = true\n    }\n    if (!foundOperand && operands[0] && operands[0].name) {\n      ruleData.operand = operands[0].name\n    }\n\n    return buildSelect(operandFieldName, ruleData.operand, operands, 'operand')\n  }\n\n  function buildValueSelect(\n    fieldName,\n    ruleData,\n    values,\n    currentOperand,\n    subvalueIndex = 0\n  ) {\n    if (!values) return ''\n\n    var valueKey = 'value' + (subvalueIndex ? '_' + subvalueIndex : '')\n    var valueFieldName = fieldName.replace('[field]', '[' + valueKey + ']')\n\n    // Value type\n    if (values[0] && values[0].type) {\n      var valueConfig = values[0]\n\n      // Default value\n      if (\n        (ruleData[valueKey] === undefined || ruleData[valueKey] === '') &&\n        valueConfig.default !== undefined\n      )\n        ruleData[valueKey] = valueConfig.default\n\n      if (valueConfig.type === 'number') {\n        return buildNumberInput(\n          valueFieldName,\n          ruleData[valueKey],\n          valueConfig,\n          'value',\n          valueKey\n        )\n      } else if (valueConfig.type === 'text') {\n        return buildTextInput(\n          valueFieldName,\n          ruleData[valueKey],\n          valueConfig,\n          'value',\n          valueKey\n        )\n      } else if (valueConfig.type === 'select') {\n        values = valueConfig.options\n      }\n    }\n\n    // Values for operand\n    var valuesForOperand = []\n\n    $.each(values, function(index, value) {\n      var keep = true\n      if (value.operands) keep = value.operands.indexOf(currentOperand) >= 0\n      if (value.excludeOperands)\n        keep = value.excludeOperands.indexOf(currentOperand) < 0\n      if (!keep) return\n      valuesForOperand.push(value)\n    })\n\n    if (!valuesForOperand.length) return ''\n\n    return buildSelect(\n      valueFieldName,\n      ruleData[valueKey],\n      valuesForOperand,\n      'value',\n      valueKey\n    )\n  }\n\n  function buildFieldSelect(fieldName, ruleData, config) {\n    return buildSelect(fieldName, ruleData.field, config.fields, 'field')\n  }\n\n  // Similar to buildValueSelect, to support input types\n  function buildSubfieldSelect(\n    fieldName,\n    ruleData,\n    values,\n    subvalueIndex = 0\n  ) {\n    if (!values) return ''\n\n    var valueKey = 'field' + (subvalueIndex ? '_' + subvalueIndex : '')\n    var valueFieldName = fieldName.replace('[field]', '[' + valueKey + ']')\n\n    // Value type\n    if (values.type) {\n      var valueConfig = values\n\n      // Default value\n      if (\n        (ruleData[valueKey] === undefined || ruleData[valueKey] === '') &&\n          valueConfig.default !== undefined\n      )\n        ruleData[valueKey] = valueConfig.default\n\n      if (valueConfig.type === 'number') {\n        return buildNumberInput(\n          valueFieldName,\n          ruleData[valueKey],\n          valueConfig,\n          'subfield', // 'value',\n          valueKey\n        )\n      } else if (valueConfig.type === 'text') {\n        return buildTextInput(\n          valueFieldName,\n          ruleData[valueKey],\n          valueConfig,\n          'subfield', // 'value',\n          valueKey\n        )\n      } else if (valueConfig.type === 'select') {\n        values = valueConfig.options\n      }\n    }\n\n    return buildSelect(\n      valueFieldName,\n      ruleData[valueKey],\n      values,\n      'subfield', // 'value',\n      valueKey\n    )\n  }\n\n  function buildSelect(name, value, fields, selectType, inputName) {\n    var html = '<select name=\"' + name + '\"'\n    if (selectType) {\n      html +=\n        ' class=\"tangible-logic-rule-input tangible-logic-rule-' +\n        selectType +\n        '-select\"' +\n        ' data-tangible-logic-rule-input-name=\"' +\n        (inputName || selectType) +\n        '\"'\n    }\n    html += '>'\n\n    var valueDefined = value !== undefined\n    var options = []\n\n    if (!valueDefined && selectType === 'field') {\n      options.push({ name: '', label: 'Choose..' })\n    }\n\n    options = options.concat(fields || [])\n\n    $.each(options, function(i, option) {\n      if (!option) return\n      var isSelected = (!i && !valueDefined) || option.name.toString()===value\n\n      html +=\n        '<option value=\"' +\n        option.name +\n        '\"' +\n        (isSelected ? ' selected=\"selected\"' : '') +\n        '>' +\n        option.label +\n        '</option>'\n    })\n\n    html += '</select>'\n\n    return html\n  }\n\n  function buildNumberInput(name, value, valueConfig, selectType, inputName) {\n    if (!$.isNumeric(value)) value = 0\n\n    var html = '<input type=\"number\" name=\"' + name + '\"'\n    if (selectType) {\n      html +=\n        ' class=\"tangible-logic-rule-input tangible-logic-rule-' +\n        selectType +\n        '-select\"' +\n        ' data-tangible-logic-rule-input-name=\"' +\n        (inputName || selectType) +\n        '\"'\n    }\n    html +=\n      ' value=\"' +\n      (value !== undefined ? value : 0) +\n      '\"' +\n      ' min=\"' +\n      (valueConfig.min !== undefined ? valueConfig.min : 0) +\n      '\"'\n\n    if (valueConfig.max) html += ' max=\"' + valueConfig.max + '\"'\n    if (valueConfig.step) html += ' step=\"' + valueConfig.step + '\"'\n\n    html += ' />'\n\n    if (valueConfig.unit) {\n      if (typeof valueConfig.unit === 'string') {\n        html +=\n          '<span class=\"tangible-logic-rule-value-unit\">' +\n          valueConfig.unit +\n          '</span>'\n      } else {\n        // Unit select\n        html +=\n          '<select name=\"' +\n          name +\n          '_unit\"' +\n          ' class=\"tangible-logic-rule-input tangible-logic-rule-' +\n          selectType +\n          '-unit-select\"' +\n          ' data-tangible-logic-rule-input-name=\"' +\n          (inputName || selectType) +\n          '_unit\"' +\n          '>'\n\n        $.each(valueConfig.unit, function(index, unitConfig) {\n          if (typeof unitConfig === 'string') {\n            unitConfig = { name: unitConfig, label: unitConfig }\n          }\n\n          html +=\n            '<option value=\"' +\n            unitConfig.name +\n            '\"' +\n            (!index ? ' selected=\"selected\"' : '') +\n            '>' +\n            unitConfig.label +\n            '</option>'\n        })\n\n        html += '</select>'\n      }\n    }\n\n    return (\n      '<div class=\"tangible-logic-rule-number-input-wrap\">' + html + '</div>'\n    )\n  }\n\n  function buildTextInput(name, value = '', valueConfig, selectType, inputName) {\n\n    var html = '<input type=\"text\" name=\"'+name+'\"'\n    if (selectType) {\n      html +=\n        ' class=\"tangible-logic-rule-input tangible-logic-rule-' +\n        selectType +\n        '-select\"' +\n        ' data-tangible-logic-rule-input-name=\"' +\n        (inputName || selectType) +\n        '\"'\n    }\n    html +=\n      ' value=\"'\n        // Important: Escape user input text\n        + escapeHtml(value)\n      +'\"'\n      +(valueConfig.placeholder ? ' placeholder=\"'+valueConfig.placeholder+'\"' : '')\n      +' />'\n\n    return html\n  }\n\n  function buildInputLabel(fieldConfig, key) {\n    var label = fieldConfig[key + '_label'] || ''\n    if (!label) return label\n    return (\n      '<label class=\"tangible-logic-rule-input-label\">' + label + '</label>'\n    )\n  }\n\n  function buildInputDescription(fieldConfig, key) {\n    var label = fieldConfig[key + '_description'] || ''\n    if (!label) return label\n    return (\n      '<div class=\"tangible-logic-rule-input-description\">' + label + '</div>'\n    )\n  }\n\n  function updateRuleBasedOnField($field, config) {\n    var fieldName = $field.attr('name')\n    var ruleField = $field.val()\n\n    var $rule = $field.closest('.tangible-logic-rule')\n    var $columns = $rule.find('.tangible-logic-rule-columns')\n\n    // From previous rule\n    var $subFields = $rule.find('.tangible-logic-rule-subfield')\n    var $operand = $rule.find('.tangible-logic-rule-operand')\n    var $value = $rule.find('.tangible-logic-rule-value')\n    var $subValues = $rule.find('.tangible-logic-rule-subvalue')\n\n    $subFields.remove()\n    $operand.remove()\n    $value.remove()\n    $subValues.remove()\n\n    if (!ruleField) {\n      return\n    }\n\n    var ruleData = $rule.data('tangibleLogicRuleData') || {}\n    var fieldConfig = config.fieldMap[ruleField] || {}\n\n    // Field label\n\n    var $fieldColumn = $rule.find(\n      '.tangible-logic-rule-field .tangible-logic-rule-column-content'\n    )\n    var fieldLabel = buildInputLabel(fieldConfig, 'field')\n    var fieldDescription = buildInputDescription(fieldConfig, 'field')\n\n    $fieldColumn.find('.tangible-logic-rule-input-label').remove()\n    $fieldColumn.find('.tangible-logic-rule-input-description').remove()\n\n    if (fieldLabel) $fieldColumn.prepend($(fieldLabel))\n    if (fieldDescription) $fieldColumn.append($(fieldDescription))\n\n    // Subfields: field_2, ..\n    for (let i=0; i < 3; i++) {\n\n      const subvalueIndex = i + 2 // Start with 2\n      const subFieldKey = 'field_' + subvalueIndex\n      const subFields = fieldConfig[subFieldKey]\n\n      // No more subfields\n      if (!subFields) break\n\n      $columns.append(\n        buildRuleColumn(\n          'subfield',\n          buildSubfieldSelect(\n            fieldName,\n            ruleData,\n            subFields,\n            subvalueIndex\n          )\n        )\n      )\n    }\n\n    // Build operand\n\n    if (fieldConfig.operands) {\n      $columns.append(\n        buildRuleColumn(\n          'operand',\n          buildOperandSelect(fieldName, ruleData, fieldConfig.operands)\n        )\n      )\n    }\n\n    updateRuleBasedOnOperand(\n      $columns.find('.tangible-logic-rule-operand-select'),\n      config,\n      $rule\n    )\n\n    // Reset rule data\n    //$rule.data('tangibleLogicRuleData', {})\n  }\n\n  function updateRuleBasedOnOperand(\n    $operandSelect,\n    config,\n    $ruleWithNoOperand\n  ) {\n    var $rule, currentOperand\n\n    if (!$operandSelect.length) {\n      if (!$ruleWithNoOperand) return\n\n      // No operand - Continue building value fields\n\n      $rule = $ruleWithNoOperand\n      currentOperand = ''\n    } else {\n      $rule = $operandSelect.closest('.tangible-logic-rule')\n      currentOperand = $operandSelect.val()\n    }\n\n    var $columns = $rule.find('.tangible-logic-rule-columns')\n\n    var $fieldSelect = $rule.find('.tangible-logic-rule-field-select')\n\n    var fieldName = $fieldSelect.attr('name')\n    var ruleField = $fieldSelect.val()\n    if (!ruleField) return\n\n    var ruleData = $rule.data('tangibleLogicRuleData') || {}\n\n    // Reset rule data\n    $rule.data('tangibleLogicRuleData', {})\n\n    // From previous rule\n    var $value = $rule.find('.tangible-logic-rule-value')\n    if ($value.length) {\n      ruleData.value = $value.find('.tangible-logic-rule-value-select').val()\n    }\n\n    var $subValues = $rule.find('.tangible-logic-rule-subvalue')\n    $subValues.each(function(i) {\n      $(this)\n        .find('.tangible-logic-rule-input')\n        .each(function() {\n          var $el = $(this)\n          var key = $el.data('tangibleLogicRuleInputName')\n          ruleData[key] = $el.val()\n        })\n    })\n\n    $value.remove()\n    $subValues.remove()\n\n    // Build value\n\n    var fieldConfig = config.fieldMap[ruleField] || {}\n\n    if (!fieldConfig.values) return\n\n    // Operand can set value=false\n    if (currentOperand && fieldConfig.operands) {\n      for (let i=0, len=fieldConfig.operands.length; i < len; i++) {\n        if (!fieldConfig.operands[i] || fieldConfig.operands[i].name!==currentOperand) continue\n        // No value field\n        if (fieldConfig.operands[i].value===false) return\n        // Found matching\n        break\n      }\n    }\n\n    function withLabel(key, content) {\n      return (\n        buildInputLabel(fieldConfig, key) +\n        content +\n        buildInputDescription(fieldConfig, key)\n      )\n    }\n\n    const column = buildRuleColumn(\n      'value',\n      withLabel(\n        'values',\n        buildValueSelect(\n          fieldName,\n          ruleData,\n          fieldConfig.values,\n          currentOperand\n        )\n      )\n    )\n\n    // If the first value needs to be before the operand field\n    if (\n      fieldConfig.values.length > 0 &&\n      fieldConfig.values[0].hasOwnProperty('before_operand') &&\n      fieldConfig.values[0].before_operand === true\n    ) {\n      $rule\n        .find('.tangible-logic-rule-operand')\n        .before( column )\n    } else {\n      $columns.append( column )\n    }\n\n    // If there is conditional displaying for field values\n    let visibilities = addVisibility(fieldConfig.values, 'values', [])\n\n    // Build subvalues\n    for (let i = 0; i < 3; i++) {\n\n      var subvalueIndex = i + 2 // Start at 2\n      var subvalueKey = 'values_' + subvalueIndex\n\n      var subvalues = fieldConfig[subvalueKey]\n\n      // If there is no other subvalue\n      if (!subvalues) break\n\n      const column = buildRuleColumn(\n        'subvalue',\n        withLabel(\n          subvalueKey,\n          buildValueSelect(\n            fieldName,\n            ruleData,\n            subvalues,\n            currentOperand,\n            subvalueIndex\n          )\n        )\n      )\n\n      // If the subfield needs to be before the operand field\n      if (\n        subvalues.length > 0 &&\n        subvalues[0].hasOwnProperty('before_operand') &&\n        subvalues[0].before_operand === true\n      ) {\n        $rule\n          .find('.tangible-logic-rule-operand')\n          .before( column )\n      } else {\n        $columns.append( column )\n      }\n\n      visibilities = addVisibility(subvalues, subvalueKey, visibilities)\n    }\n\n    // Apply the visibility when all fields are loaded\n    applyVisibilities(visibilities, $rule)\n  }\n\n  // Form: Save\n\n  function saveForm($form, $input) {\n    // Save form data to hidden input field\n\n    var formData = getFormData($form)\n\n    console.log('Tangible logic form result', formData)\n\n    formData = JSON.stringify(formData)\n\n    $input.val(formData)\n    $input.trigger('change')\n  }\n\n  // Form: Get data to save\n\n  function getFormData($form) {\n    var ruleGroups = []\n\n    $form.find('.tangible-logic-rule-group').each(function() {\n      var $rules = $(this).find('.tangible-logic-rule')\n      var rules = []\n\n      $rules.each(function() {\n        var rule = {}\n\n        $(this)\n          .find('.tangible-logic-rule-input')\n          .each(function() {\n            var $input = $(this)\n            var name = $input.data('tangibleLogicRuleInputName')\n            var value = $input.val()\n\n            if (value !== '') {\n              rule[name] = value\n            }\n          })\n\n        rules.push(rule)\n      })\n\n      ruleGroups.push(rules)\n    })\n\n    return ruleGroups\n  }\n\n  // Visibility conditions\n\n  function addVisibility(values, fieldName, visibilities) {\n    // Value type\n    if (values[0]===undefined || values[0].type===undefined) return visibilities\n\n    // Visibility conditions\n    if (values[0].visibility===undefined) return visibilities\n\n    var visibility = values[0].visibility\n\n    // We store a callback for applying the visbility when all the fields are created\n    visibilities.push({\n      name: fieldName,\n      config: visibility\n    })\n\n    return visibilities\n  }\n\n  function applyVisibilities(data, $rule) {\n    for (let i = 0; i < data.length; i++) {\n      applyVisibility(data[i].name, data[i].config, $rule)\n    }\n  }\n\n  function applyVisibility(fieldName, visibility, $rule) {\n    let show = false\n\n    // Test each visibility condition\n    for (let i = 0; i < visibility.length; i++) {\n      // We need to remove the 's' in value => name is value but backend is values\n      let $field = $rule.find('select[name=\"tangible_logic[][][' + visibility[i].field.replace('s', '') + ']\"]')\n\n      // If we have an array on multiple field\n      if (\n        visibility[i].value.constructor === Array &&\n        visibility[i].value.indexOf($field.val()) !== -1\n      ) {\n        show = true\n      }\n      // On string name\n      else if (visibility[i].value === $field.val()) {\n        show = true\n      }\n    }\n\n    let $container = $rule.find('select[name=\"tangible_logic[][][' + fieldName.replace('s', '') + ']\"]').parent().parent()\n    show !== false ? $container.show() : $container.hide()\n  }\n\n\n  // Utilities\n\n  const entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  }\n\n  function escapeHtml(string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function (s) {\n      return entityMap[s]\n    })\n  }\n\n\n})\n","jQuery(document).ready(function($) {\n  // Conditional logic modal window\n\n  var $html = $('html')\n  var $body = $('body')\n  var $root = $('<div id=\"tangible-logic-root\"></div>')\n\n  $body.append($root)\n\n  // Open button - can be dynamically added, so bind on body\n  $body.on('click', '[data-tangible-logic=\"open\"]', function() {\n    var $input = $(this)\n      .parent()\n      .find('[data-tangible-logic=\"input\"]')\n\n    if (!$input.length) {\n      console.warn('tangible/logic - Input field not found')\n      return\n    }\n\n    // Logic config\n    var config = $input.data('tangibleLogicConfig')\n\n    if (typeof config === 'string') {\n      try {\n        config = JSON.parse(config)\n      } catch (e) {\n        console.warn('tangible/logic - Config failed to parse', config)\n        config = []\n      }\n    }\n\n    // Current data\n    var value = $input.val()\n    var data = []\n\n    if (value) {\n      try {\n        data = JSON.parse(value)\n      } catch (e) {\n        console.warn('tangible/logic - Input value failed to parse', value)\n        data = []\n      }\n      // Fix for literal \"[]\"\n      if (typeof data === 'string') data = []\n    }\n\n    openUI($input, data, config)\n  })\n\n  var openClass = 'tangible-logic-open'\n  var hideScrollbarClass = 'tangible-logic-hide-scrollbar'\n\n  function closeUI() {\n    $root.removeClass(openClass)\n    $root.empty()\n    $html.removeClass(hideScrollbarClass)\n  }\n\n  var modalActionsHtml =\n    '<div class=\"tangible-logic-modal-actions tangible-logic-clear\">' +\n    '<button type=\"button\" class=\"tangible-logic-button\" data-tangible-logic=\"save\">Save</button>' +\n    '<button type=\"button\" class=\"tangible-logic-button\" data-tangible-logic=\"close\">Cancel</button>' +\n    '</div>'\n\n  function openUI($input, data, config) {\n    $html.addClass(hideScrollbarClass)\n\n    // Build modal\n\n    var $modal = $(\n      '<div class=\"tangible-logic-modal\">' +\n        '<form>' +\n        buildFormFields(data, config) +\n        modalActionsHtml +\n        '</form>' +\n        '</div>'\n    )\n\n    $root.append($modal)\n    $root.addClass(openClass)\n\n    // Form actions\n\n    var $form = $modal.find('form')\n\n    // Close\n    $form.find('[data-tangible-logic=\"close\"]').on('click', closeUI)\n\n    // Save\n    $form.find('[data-tangible-logic=\"save\"]').on('click', function() {\n      saveForm($form, $input)\n      closeUI()\n    })\n\n    // Add rule group\n\n    var $ruleGroups = $form.find('.tangible-logic-rule-groups')\n\n    $form\n      .find('[data-tangible-logic=\"add-rule-group\"]')\n      .on('click', function() {\n        var ruleGroupHtml = buildRuleGroup([{}], config)\n\n        $ruleGroups.append(ruleGroupHtml)\n      })\n\n    // Rule actions - can be dynamically added, so bind on form\n\n    // Add rule\n    $form.on('click', '[data-tangible-logic=\"add-rule\"]', function() {\n      var $rules = $(this)\n        .closest('.tangible-logic-rule-group')\n        .find('.tangible-logic-rule-group-rules')\n      var ruleHtml = buildRule({}, config)\n\n      $rules.append(ruleHtml)\n    })\n\n    // Remove rule\n    $form.on('click', '[data-tangible-logic=\"remove-rule\"]', function() {\n      var $rule = $(this).closest('.tangible-logic-rule')\n      var $rules = $rule.closest('.tangible-logic-rule-group-rules')\n\n      $rule.remove()\n\n      var $remainingRules = $rules.find('.tangible-logic-rule')\n\n      if (!$remainingRules.length) {\n        // Remove rule group\n        $rules.closest('.tangible-logic-rule-group').remove()\n      }\n    })\n\n    // Rule field - Update rules based on selected field\n\n    config.fieldMap = buildFieldMap(config)\n\n    var fieldSelectSelector = '.tangible-logic-rule-field-select'\n    $form.find(fieldSelectSelector).each(function() {\n      updateRuleBasedOnField($(this), config)\n    })\n    $form.on('change', fieldSelectSelector, function(e) {\n      updateRuleBasedOnField($(this), config)\n    })\n\n    var operandSelectSelector = '.tangible-logic-rule-operand-select'\n    // Called by updateRuleBasedOnField above\n    /*$form.find(operandSelectSelector).each(function() {\n      updateRuleBasedOnOperand($(this), config)\n    })*/\n    $form.on('change', operandSelectSelector, function(e) {\n      updateRuleBasedOnOperand($(this), config)\n    })\n  }\n\n  function buildFieldMap(config) {\n    // Field map for dynamically showing operands and values\n\n    var fieldMap = {} // { name: { operands, values }, .. }\n\n    $.each(config.fields || [], function(index, field) {\n      fieldMap[field.name] = field\n    })\n\n    return fieldMap\n  }\n\n  function buildFormFields(data, config) {\n    var html = ''\n\n    if (config.title) {\n      html += '<div class=\"tangible-logic-title\">' + config.title + '</div>'\n    }\n    if (config.description) {\n      html +=\n        '<div class=\"tangible-logic-description\">' +\n        config.description +\n        '</div>'\n    }\n\n    // Rule groups\n\n    html += '<div class=\"tangible-logic-rule-groups\">'\n\n    if (!data.length) {\n      // Default when empty\n      html += buildRuleGroup([{}], config)\n    } else {\n      $.each(data, function(ruleGroupIndex, ruleGroupData) {\n        html += buildRuleGroup(ruleGroupData, config)\n      })\n    }\n\n    html += '</div>'\n\n    // Add rule group\n    html +=\n      '<div class=\"tangible-logic-modal-actions tangible-logic-clear\">' +\n      '<button type=\"button\" class=\"tangible-logic-button\" data-tangible-logic=\"add-rule-group\">' +\n      'Add rule group' +\n      '</button>' +\n      '</div>'\n\n    return html\n  }\n\n  function buildRuleGroup(ruleGroupData, config) {\n    var html = ''\n\n    html +=\n      '<div class=\"tangible-logic-rule-group\">' +\n      '<div class=\"tangible-logic-rule-group-separator tangible-logic-clear\">' +\n      '<div class=\"tangible-logic-rule-column\">' +\n      'or' +\n      '</div>' +\n      '</div>'\n\n    html += '<div class=\"tangible-logic-rule-group-box\">'\n\n    // Rules\n    html += '<div class=\"tangible-logic-rule-group-rules\">'\n    $.each(ruleGroupData, function(ruleIndex, ruleData) {\n      html += buildRule(ruleData, config)\n    })\n    html += '</div>'\n\n    // Add rule\n    html +=\n      '<div class=\"tangible-logic-modal-actions tangible-logic-clear\">' +\n      '<button type=\"button\" class=\"tangible-logic-button\" data-tangible-logic=\"add-rule\">Add rule</button>' +\n      '</div>'\n\n    html +=\n      '</div>' + '</div>' // rule-group-box // rule group\n\n    return html\n  }\n\n  function buildRule(ruleData, config) {\n    var fieldName = 'tangible_logic[][][field]'\n\n    var html =\n      '<div class=\"tangible-logic-rule tangible-logic-clear\"'\n        +' data-tangible-logic-rule-data=\\''\n\n          // Important: Escape '\"<>\n          + escapeHtml( JSON.stringify(ruleData || {}) )\n\n        +'\\''\n      +'>'\n        +'<div class=\"tangible-logic-rule-columns\">'\n\n          +buildRuleColumn('field',\n            buildFieldSelect(fieldName, ruleData, config)\n          )\n\n      // Add these columns as needed\n      /*\n          +'<div class=\"tangible-logic-rule-column tangible-logic-rule-operand\">'\n      //+ buildOperandSelect(fieldName, ruleData, config)\n          +'</div>'\n          +'<div class=\"tangible-logic-rule-column tangible-logic-rule-value\">'\n      //+ buildValueSelect(fieldName, ruleData, config)\n          +'</div>'\n          +'<div class=\"tangible-logic-rule-column tangible-logic-rule-subvalue\">'\n          +'</div>'\n          */\n        +'</div>'\n        +'<div class=\"tangible-logic-rule-actions\">'\n          +'<button type=\"button\" class=\"tangible-logic-action-icon\" data-tangible-logic=\"remove-rule\">'\n            +'Remove'\n          +'</button>'\n        +'</div>'\n      +'</div>'\n\n    return html\n  }\n\n  function buildRuleColumn(type, content) {\n    return (\n      '<div class=\"tangible-logic-rule-column tangible-logic-rule-' +\n      type +\n      '\">' +\n      '<div class=\"tangible-logic-rule-column-content\">' +\n      content +\n      '</div>' +\n      '</div>'\n    )\n  }\n\n  function buildOperandSelect(fieldName, ruleData, operands) {\n    var operandFieldName = fieldName.replace('[field]', '[operand]')\n\n    if (!operands || !operands.length) return ''\n\n    // If current operand not found, select first one\n    // The result is passed back to caller via ruleData.operand\n    var foundOperand = false\n    for (let i = 0, len = operands.length; i < len; i++) {\n      if (operands[i].name === ruleData.operand) foundOperand = true\n    }\n    if (!foundOperand && operands[0] && operands[0].name) {\n      ruleData.operand = operands[0].name\n    }\n\n    return buildSelect(operandFieldName, ruleData.operand, operands, 'operand')\n  }\n\n  function buildValueSelect(\n    fieldName,\n    ruleData,\n    values,\n    currentOperand,\n    subvalueIndex = 0\n  ) {\n    if (!values) return ''\n\n    var valueKey = 'value' + (subvalueIndex ? '_' + subvalueIndex : '')\n    var valueFieldName = fieldName.replace('[field]', '[' + valueKey + ']')\n\n    // Value type\n    if (values[0] && values[0].type) {\n      var valueConfig = values[0]\n\n      // Default value\n      if (\n        (ruleData[valueKey] === undefined || ruleData[valueKey] === '') &&\n        valueConfig.default !== undefined\n      )\n        ruleData[valueKey] = valueConfig.default\n\n      if (valueConfig.type === 'number') {\n        return buildNumberInput(\n          valueFieldName,\n          ruleData[valueKey],\n          valueConfig,\n          'value',\n          valueKey\n        )\n      } else if (valueConfig.type === 'text') {\n        return buildTextInput(\n          valueFieldName,\n          ruleData[valueKey],\n          valueConfig,\n          'value',\n          valueKey\n        )\n      } else if (valueConfig.type === 'select') {\n        values = valueConfig.options\n      }\n    }\n\n    // Values for operand\n    var valuesForOperand = []\n\n    $.each(values, function(index, value) {\n      var keep = true\n      if (value.operands) keep = value.operands.indexOf(currentOperand) >= 0\n      if (value.excludeOperands)\n        keep = value.excludeOperands.indexOf(currentOperand) < 0\n      if (!keep) return\n      valuesForOperand.push(value)\n    })\n\n    if (!valuesForOperand.length) return ''\n\n    return buildSelect(\n      valueFieldName,\n      ruleData[valueKey],\n      valuesForOperand,\n      'value',\n      valueKey\n    )\n  }\n\n  function buildFieldSelect(fieldName, ruleData, config) {\n    return buildSelect(fieldName, ruleData.field, config.fields, 'field')\n  }\n\n  // Similar to buildValueSelect, to support input types\n  function buildSubfieldSelect(\n    fieldName,\n    ruleData,\n    values,\n    subvalueIndex = 0\n  ) {\n    if (!values) return ''\n\n    var valueKey = 'field' + (subvalueIndex ? '_' + subvalueIndex : '')\n    var valueFieldName = fieldName.replace('[field]', '[' + valueKey + ']')\n\n    // Value type\n    if (values.type) {\n      var valueConfig = values\n\n      // Default value\n      if (\n        (ruleData[valueKey] === undefined || ruleData[valueKey] === '') &&\n          valueConfig.default !== undefined\n      )\n        ruleData[valueKey] = valueConfig.default\n\n      if (valueConfig.type === 'number') {\n        return buildNumberInput(\n          valueFieldName,\n          ruleData[valueKey],\n          valueConfig,\n          'subfield', // 'value',\n          valueKey\n        )\n      } else if (valueConfig.type === 'text') {\n        return buildTextInput(\n          valueFieldName,\n          ruleData[valueKey],\n          valueConfig,\n          'subfield', // 'value',\n          valueKey\n        )\n      } else if (valueConfig.type === 'select') {\n        values = valueConfig.options\n      }\n    }\n\n    return buildSelect(\n      valueFieldName,\n      ruleData[valueKey],\n      values,\n      'subfield', // 'value',\n      valueKey\n    )\n  }\n\n  function buildSelect(name, value, fields, selectType, inputName) {\n    var html = '<select name=\"' + name + '\"'\n    if (selectType) {\n      html +=\n        ' class=\"tangible-logic-rule-input tangible-logic-rule-' +\n        selectType +\n        '-select\"' +\n        ' data-tangible-logic-rule-input-name=\"' +\n        (inputName || selectType) +\n        '\"'\n    }\n    html += '>'\n\n    var valueDefined = value !== undefined\n    var options = []\n\n    if (!valueDefined && selectType === 'field') {\n      options.push({ name: '', label: 'Choose..' })\n    }\n\n    options = options.concat(fields || [])\n\n    $.each(options, function(i, option) {\n      if (!option) return\n      var isSelected = (!i && !valueDefined) || option.name.toString()===value\n\n      html +=\n        '<option value=\"' +\n        option.name +\n        '\"' +\n        (isSelected ? ' selected=\"selected\"' : '') +\n        '>' +\n        option.label +\n        '</option>'\n    })\n\n    html += '</select>'\n\n    return html\n  }\n\n  function buildNumberInput(name, value, valueConfig, selectType, inputName) {\n    if (!$.isNumeric(value)) value = 0\n\n    var html = '<input type=\"number\" name=\"' + name + '\"'\n    if (selectType) {\n      html +=\n        ' class=\"tangible-logic-rule-input tangible-logic-rule-' +\n        selectType +\n        '-select\"' +\n        ' data-tangible-logic-rule-input-name=\"' +\n        (inputName || selectType) +\n        '\"'\n    }\n    html +=\n      ' value=\"' +\n      (value !== undefined ? value : 0) +\n      '\"' +\n      ' min=\"' +\n      (valueConfig.min !== undefined ? valueConfig.min : 0) +\n      '\"'\n\n    if (valueConfig.max) html += ' max=\"' + valueConfig.max + '\"'\n    if (valueConfig.step) html += ' step=\"' + valueConfig.step + '\"'\n\n    html += ' />'\n\n    if (valueConfig.unit) {\n      if (typeof valueConfig.unit === 'string') {\n        html +=\n          '<span class=\"tangible-logic-rule-value-unit\">' +\n          valueConfig.unit +\n          '</span>'\n      } else {\n        // Unit select\n        html +=\n          '<select name=\"' +\n          name +\n          '_unit\"' +\n          ' class=\"tangible-logic-rule-input tangible-logic-rule-' +\n          selectType +\n          '-unit-select\"' +\n          ' data-tangible-logic-rule-input-name=\"' +\n          (inputName || selectType) +\n          '_unit\"' +\n          '>'\n\n        $.each(valueConfig.unit, function(index, unitConfig) {\n          if (typeof unitConfig === 'string') {\n            unitConfig = { name: unitConfig, label: unitConfig }\n          }\n\n          html +=\n            '<option value=\"' +\n            unitConfig.name +\n            '\"' +\n            (!index ? ' selected=\"selected\"' : '') +\n            '>' +\n            unitConfig.label +\n            '</option>'\n        })\n\n        html += '</select>'\n      }\n    }\n\n    return (\n      '<div class=\"tangible-logic-rule-number-input-wrap\">' + html + '</div>'\n    )\n  }\n\n  function buildTextInput(name, value = '', valueConfig, selectType, inputName) {\n\n    var html = '<input type=\"text\" name=\"'+name+'\"'\n    if (selectType) {\n      html +=\n        ' class=\"tangible-logic-rule-input tangible-logic-rule-' +\n        selectType +\n        '-select\"' +\n        ' data-tangible-logic-rule-input-name=\"' +\n        (inputName || selectType) +\n        '\"'\n    }\n    html +=\n      ' value=\"'\n        // Important: Escape user input text\n        + escapeHtml(value)\n      +'\"'\n      +(valueConfig.placeholder ? ' placeholder=\"'+valueConfig.placeholder+'\"' : '')\n      +' />'\n\n    return html\n  }\n\n  function buildInputLabel(fieldConfig, key) {\n    var label = fieldConfig[key + '_label'] || ''\n    if (!label) return label\n    return (\n      '<label class=\"tangible-logic-rule-input-label\">' + label + '</label>'\n    )\n  }\n\n  function buildInputDescription(fieldConfig, key) {\n    var label = fieldConfig[key + '_description'] || ''\n    if (!label) return label\n    return (\n      '<div class=\"tangible-logic-rule-input-description\">' + label + '</div>'\n    )\n  }\n\n  function updateRuleBasedOnField($field, config) {\n    var fieldName = $field.attr('name')\n    var ruleField = $field.val()\n\n    var $rule = $field.closest('.tangible-logic-rule')\n    var $columns = $rule.find('.tangible-logic-rule-columns')\n\n    // From previous rule\n    var $subFields = $rule.find('.tangible-logic-rule-subfield')\n    var $operand = $rule.find('.tangible-logic-rule-operand')\n    var $value = $rule.find('.tangible-logic-rule-value')\n    var $subValues = $rule.find('.tangible-logic-rule-subvalue')\n\n    $subFields.remove()\n    $operand.remove()\n    $value.remove()\n    $subValues.remove()\n\n    if (!ruleField) {\n      return\n    }\n\n    var ruleData = $rule.data('tangibleLogicRuleData') || {}\n    var fieldConfig = config.fieldMap[ruleField] || {}\n\n    // Field label\n\n    var $fieldColumn = $rule.find(\n      '.tangible-logic-rule-field .tangible-logic-rule-column-content'\n    )\n    var fieldLabel = buildInputLabel(fieldConfig, 'field')\n    var fieldDescription = buildInputDescription(fieldConfig, 'field')\n\n    $fieldColumn.find('.tangible-logic-rule-input-label').remove()\n    $fieldColumn.find('.tangible-logic-rule-input-description').remove()\n\n    if (fieldLabel) $fieldColumn.prepend($(fieldLabel))\n    if (fieldDescription) $fieldColumn.append($(fieldDescription))\n\n    // Subfields: field_2, ..\n    for (let i=0; i < 3; i++) {\n\n      const subvalueIndex = i + 2 // Start with 2\n      const subFieldKey = 'field_' + subvalueIndex\n      const subFields = fieldConfig[subFieldKey]\n\n      // No more subfields\n      if (!subFields) break\n\n      $columns.append(\n        buildRuleColumn(\n          'subfield',\n          buildSubfieldSelect(\n            fieldName,\n            ruleData,\n            subFields,\n            subvalueIndex\n          )\n        )\n      )\n    }\n\n    // Build operand\n\n    if (fieldConfig.operands) {\n      $columns.append(\n        buildRuleColumn(\n          'operand',\n          buildOperandSelect(fieldName, ruleData, fieldConfig.operands)\n        )\n      )\n    }\n\n    updateRuleBasedOnOperand(\n      $columns.find('.tangible-logic-rule-operand-select'),\n      config,\n      $rule\n    )\n\n    // Reset rule data\n    //$rule.data('tangibleLogicRuleData', {})\n  }\n\n  function updateRuleBasedOnOperand(\n    $operandSelect,\n    config,\n    $ruleWithNoOperand\n  ) {\n    var $rule, currentOperand\n\n    if (!$operandSelect.length) {\n      if (!$ruleWithNoOperand) return\n\n      // No operand - Continue building value fields\n\n      $rule = $ruleWithNoOperand\n      currentOperand = ''\n    } else {\n      $rule = $operandSelect.closest('.tangible-logic-rule')\n      currentOperand = $operandSelect.val()\n    }\n\n    var $columns = $rule.find('.tangible-logic-rule-columns')\n\n    var $fieldSelect = $rule.find('.tangible-logic-rule-field-select')\n\n    var fieldName = $fieldSelect.attr('name')\n    var ruleField = $fieldSelect.val()\n    if (!ruleField) return\n\n    var ruleData = $rule.data('tangibleLogicRuleData') || {}\n\n    // Reset rule data\n    $rule.data('tangibleLogicRuleData', {})\n\n    // From previous rule\n    var $value = $rule.find('.tangible-logic-rule-value')\n    if ($value.length) {\n      ruleData.value = $value.find('.tangible-logic-rule-value-select').val()\n    }\n\n    var $subValues = $rule.find('.tangible-logic-rule-subvalue')\n    $subValues.each(function(i) {\n      $(this)\n        .find('.tangible-logic-rule-input')\n        .each(function() {\n          var $el = $(this)\n          var key = $el.data('tangibleLogicRuleInputName')\n          ruleData[key] = $el.val()\n        })\n    })\n\n    $value.remove()\n    $subValues.remove()\n\n    // Build value\n\n    var fieldConfig = config.fieldMap[ruleField] || {}\n\n    if (!fieldConfig.values) return\n\n    // Operand can set value=false\n    if (currentOperand && fieldConfig.operands) {\n      for (let i=0, len=fieldConfig.operands.length; i < len; i++) {\n        if (!fieldConfig.operands[i] || fieldConfig.operands[i].name!==currentOperand) continue\n        // No value field\n        if (fieldConfig.operands[i].value===false) return\n        // Found matching\n        break\n      }\n    }\n\n    function withLabel(key, content) {\n      return (\n        buildInputLabel(fieldConfig, key) +\n        content +\n        buildInputDescription(fieldConfig, key)\n      )\n    }\n\n    const column = buildRuleColumn(\n      'value',\n      withLabel(\n        'values',\n        buildValueSelect(\n          fieldName,\n          ruleData,\n          fieldConfig.values,\n          currentOperand\n        )\n      )\n    )\n\n    // If the first value needs to be before the operand field\n    if (\n      fieldConfig.values.length > 0 &&\n      fieldConfig.values[0].hasOwnProperty('before_operand') &&\n      fieldConfig.values[0].before_operand === true\n    ) {\n      $rule\n        .find('.tangible-logic-rule-operand')\n        .before( column )\n    } else {\n      $columns.append( column )\n    }\n\n    // If there is conditional displaying for field values\n    let visibilities = addVisibility(fieldConfig.values, 'values', [])\n\n    // Build subvalues\n    for (let i = 0; i < 3; i++) {\n\n      var subvalueIndex = i + 2 // Start at 2\n      var subvalueKey = 'values_' + subvalueIndex\n\n      var subvalues = fieldConfig[subvalueKey]\n\n      // If there is no other subvalue\n      if (!subvalues) break\n\n      const column = buildRuleColumn(\n        'subvalue',\n        withLabel(\n          subvalueKey,\n          buildValueSelect(\n            fieldName,\n            ruleData,\n            subvalues,\n            currentOperand,\n            subvalueIndex\n          )\n        )\n      )\n\n      // If the subfield needs to be before the operand field\n      if (\n        subvalues.length > 0 &&\n        subvalues[0].hasOwnProperty('before_operand') &&\n        subvalues[0].before_operand === true\n      ) {\n        $rule\n          .find('.tangible-logic-rule-operand')\n          .before( column )\n      } else {\n        $columns.append( column )\n      }\n\n      visibilities = addVisibility(subvalues, subvalueKey, visibilities)\n    }\n\n    // Apply the visibility when all fields are loaded\n    applyVisibilities(visibilities, $rule)\n  }\n\n  // Form: Save\n\n  function saveForm($form, $input) {\n    // Save form data to hidden input field\n\n    var formData = getFormData($form)\n\n    console.log('Tangible logic form result', formData)\n\n    formData = JSON.stringify(formData)\n\n    $input.val(formData)\n    $input.trigger('change')\n  }\n\n  // Form: Get data to save\n\n  function getFormData($form) {\n    var ruleGroups = []\n\n    $form.find('.tangible-logic-rule-group').each(function() {\n      var $rules = $(this).find('.tangible-logic-rule')\n      var rules = []\n\n      $rules.each(function() {\n        var rule = {}\n\n        $(this)\n          .find('.tangible-logic-rule-input')\n          .each(function() {\n            var $input = $(this)\n            var name = $input.data('tangibleLogicRuleInputName')\n            var value = $input.val()\n\n            if (value !== '') {\n              rule[name] = value\n            }\n          })\n\n        rules.push(rule)\n      })\n\n      ruleGroups.push(rules)\n    })\n\n    return ruleGroups\n  }\n\n  // Visibility conditions\n\n  function addVisibility(values, fieldName, visibilities) {\n    // Value type\n    if (values[0]===undefined || values[0].type===undefined) return visibilities\n\n    // Visibility conditions\n    if (values[0].visibility===undefined) return visibilities\n\n    var visibility = values[0].visibility\n\n    // We store a callback for applying the visbility when all the fields are created\n    visibilities.push({\n      name: fieldName,\n      config: visibility\n    })\n\n    return visibilities\n  }\n\n  function applyVisibilities(data, $rule) {\n    for (let i = 0; i < data.length; i++) {\n      applyVisibility(data[i].name, data[i].config, $rule)\n    }\n  }\n\n  function applyVisibility(fieldName, visibility, $rule) {\n    let show = false\n\n    // Test each visibility condition\n    for (let i = 0; i < visibility.length; i++) {\n      // We need to remove the 's' in value => name is value but backend is values\n      let $field = $rule.find('select[name=\"tangible_logic[][][' + visibility[i].field.replace('s', '') + ']\"]')\n\n      // If we have an array on multiple field\n      if (\n        visibility[i].value.constructor === Array &&\n        visibility[i].value.indexOf($field.val()) !== -1\n      ) {\n        show = true\n      }\n      // On string name\n      else if (visibility[i].value === $field.val()) {\n        show = true\n      }\n    }\n\n    let $container = $rule.find('select[name=\"tangible_logic[][][' + fieldName.replace('s', '') + ']\"]').parent().parent()\n    show !== false ? $container.show() : $container.hide()\n  }\n\n\n  // Utilities\n\n  const entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  }\n\n  function escapeHtml(string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function (s) {\n      return entityMap[s]\n    })\n  }\n\n\n})\n"]}