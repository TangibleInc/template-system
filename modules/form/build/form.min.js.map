{"version":3,"file":"form.min.js","sources":["../src/getFormData.ts","../src/index.ts"],"sourcesContent":["// Based on: https://github.com/maxatwork/form2js\n\n/**\n * Returns form values represented as Javascript object\n * \"name\" attribute defines structure of resulting object\n *\n * @param rootNode {Element|String} root form element (or it's id) or array of root elements\n * @param delimiter {String} structure parts delimiter defaults to '.'\n * @param skipEmpty {Boolean} should skip empty text values, defaults to true\n * @param nodeCallback {Function} custom function to get node value\n * @param useIdIfEmptyName {Boolean} if true value of id attribute of field will be used if name of field is empty\n */\nexport default function getFormData(rootNode) {\n  const delimiter = '.'\n  const getDisabled = false\n  const skipEmpty = false\n  const nodeCallback = null\n  const useIdIfEmptyName = false\n\n  rootNode =\n    typeof rootNode == 'string' ? document.getElementById(rootNode) : rootNode\n\n  var formValues = [],\n    currNode,\n    i = 0\n\n  /* If rootNode is array - combine values */\n  if (\n    rootNode.constructor == Array ||\n    (typeof NodeList != 'undefined' && rootNode.constructor == NodeList)\n  ) {\n    while ((currNode = rootNode[i++])) {\n      formValues = formValues.concat(\n        getFormValues(currNode, nodeCallback, useIdIfEmptyName, getDisabled)\n      )\n    }\n  } else {\n    formValues = getFormValues(\n      rootNode,\n      nodeCallback,\n      useIdIfEmptyName,\n      getDisabled\n    )\n  }\n\n  return processNameValues(formValues, skipEmpty, delimiter)\n}\n\n/**\n * Processes collection of { name: 'name', value: 'value' } objects.\n * @param nameValues\n * @param skipEmpty if true skips elements with value == '' or value == null\n * @param delimiter\n */\nfunction processNameValues(nameValues, skipEmpty, delimiter) {\n  var result = {},\n    arrays = {},\n    i,\n    j,\n    k,\n    l,\n    value,\n    nameParts,\n    currResult,\n    arrNameFull,\n    arrName,\n    arrIdx,\n    namePart,\n    name,\n    _nameParts\n\n  for (i = 0; i < nameValues.length; i++) {\n    value = nameValues[i].value\n\n    if (skipEmpty && (value === '' || value === null)) continue\n\n    name = nameValues[i].name\n    _nameParts = name.split(delimiter)\n    nameParts = []\n    currResult = result\n    arrNameFull = ''\n\n    for (j = 0; j < _nameParts.length; j++) {\n      namePart = _nameParts[j].split('][')\n      if (namePart.length > 1) {\n        for (k = 0; k < namePart.length; k++) {\n          if (k == 0) {\n            namePart[k] = namePart[k] + ']'\n          } else if (k == namePart.length - 1) {\n            namePart[k] = '[' + namePart[k]\n          } else {\n            namePart[k] = '[' + namePart[k] + ']'\n          }\n\n          arrIdx = namePart[k].match(/([a-z_]+)?\\[([a-z_][a-z0-9_]+?)\\]/i)\n          if (arrIdx) {\n            for (l = 1; l < arrIdx.length; l++) {\n              if (arrIdx[l]) nameParts.push(arrIdx[l])\n            }\n          } else {\n            nameParts.push(namePart[k])\n          }\n        }\n      } else nameParts = nameParts.concat(namePart)\n    }\n\n    for (j = 0; j < nameParts.length; j++) {\n      namePart = nameParts[j]\n\n      if (namePart.indexOf('[]') > -1 && j == nameParts.length - 1) {\n        arrName = namePart.substr(0, namePart.indexOf('['))\n        arrNameFull += arrName\n\n        if (!currResult[arrName]) currResult[arrName] = []\n        currResult[arrName].push(value)\n      } else if (namePart.indexOf('[') > -1) {\n        arrName = namePart.substr(0, namePart.indexOf('['))\n        arrIdx = namePart.replace(/(^([a-z_]+)?\\[)|(\\]$)/gi, '')\n\n        /* Unique array name */\n        arrNameFull += '_' + arrName + '_' + arrIdx\n\n        /*\n         * Because arrIdx in field name can be not zero-based and step can be\n         * other than 1, we can't use them in target array directly.\n         * Instead we're making a hash where key is arrIdx and value is a reference to\n         * added array element\n         */\n\n        if (!arrays[arrNameFull]) arrays[arrNameFull] = {}\n        if (arrName != '' && !currResult[arrName]) currResult[arrName] = []\n\n        if (j == nameParts.length - 1) {\n          if (arrName == '') {\n            currResult.push(value)\n            arrays[arrNameFull][arrIdx] = currResult[currResult.length - 1]\n          } else {\n            currResult[arrName].push(value)\n            arrays[arrNameFull][arrIdx] =\n              currResult[arrName][currResult[arrName].length - 1]\n          }\n        } else {\n          if (!arrays[arrNameFull][arrIdx]) {\n            if (/^[0-9a-z_]+\\[?/i.test(nameParts[j + 1]))\n              currResult[arrName].push({})\n            else currResult[arrName].push([])\n\n            arrays[arrNameFull][arrIdx] =\n              currResult[arrName][currResult[arrName].length - 1]\n          }\n        }\n\n        currResult = arrays[arrNameFull][arrIdx]\n      } else {\n        arrNameFull += namePart\n\n        if (j < nameParts.length - 1) {\n          /* Not the last part of name - means object */\n          if (!currResult[namePart]) currResult[namePart] = {}\n          currResult = currResult[namePart]\n        } else {\n          currResult[namePart] = value\n        }\n      }\n    }\n  }\n\n  return result\n}\n\nfunction getFormValues(rootNode, nodeCallback, useIdIfEmptyName, getDisabled) {\n  var result = extractNodeValues(\n    rootNode,\n    nodeCallback,\n    useIdIfEmptyName,\n    getDisabled\n  )\n  return result.length > 0\n    ? result\n    : getSubFormValues(rootNode, nodeCallback, useIdIfEmptyName, getDisabled)\n}\n\nfunction getSubFormValues(\n  rootNode,\n  nodeCallback,\n  useIdIfEmptyName,\n  getDisabled\n) {\n  var result = [],\n    currentNode = rootNode.firstChild\n\n  while (currentNode) {\n    result = result.concat(\n      extractNodeValues(\n        currentNode,\n        nodeCallback,\n        useIdIfEmptyName,\n        getDisabled\n      )\n    )\n    currentNode = currentNode.nextSibling\n  }\n\n  return result\n}\n\nfunction extractNodeValues(node, nodeCallback, useIdIfEmptyName, getDisabled) {\n  if (node.disabled && !getDisabled) return []\n\n  var callbackResult,\n    fieldValue,\n    result,\n    fieldName = getFieldName(node, useIdIfEmptyName)\n\n  callbackResult = nodeCallback && nodeCallback(node)\n\n  if (callbackResult && callbackResult.name) {\n    result = [callbackResult]\n  } else if (fieldName != '' && node.nodeName.match(/INPUT|TEXTAREA/i)) {\n    fieldValue = getFieldValue(node, getDisabled)\n    if (null === fieldValue) {\n      result = []\n    } else {\n      result = [{ name: fieldName, value: fieldValue }]\n    }\n  } else if (fieldName != '' && node.nodeName.match(/SELECT/i)) {\n    fieldValue = getFieldValue(node, getDisabled)\n    result = [{ name: fieldName.replace(/\\[\\]$/, ''), value: fieldValue }]\n  } else {\n    result = getSubFormValues(node, nodeCallback, useIdIfEmptyName, getDisabled)\n  }\n\n  return result\n}\n\nfunction getFieldName(node, useIdIfEmptyName) {\n  if (node.name && node.name != '') return node.name\n  else if (useIdIfEmptyName && node.id && node.id != '') return node.id\n  else return ''\n}\n\nfunction getFieldValue(fieldNode, getDisabled) {\n  if (fieldNode.disabled && !getDisabled) return null\n\n  switch (fieldNode.nodeName) {\n    case 'INPUT':\n    case 'TEXTAREA':\n      switch (fieldNode.type.toLowerCase()) {\n        case 'radio':\n          if (fieldNode.checked && fieldNode.value === 'false') return false\n        // fallthrough\n        case 'checkbox':\n          if (fieldNode.checked && fieldNode.value === 'true') return true\n          if (!fieldNode.checked && fieldNode.value === 'true') return false\n          if (fieldNode.checked) return fieldNode.value\n          break\n\n        case 'button':\n        case 'reset':\n        case 'submit':\n        case 'image':\n          return ''\n\n        default:\n          return fieldNode.value\n      }\n      break\n\n    case 'SELECT':\n      return getSelectedOptionValue(fieldNode)\n\n    default:\n      break\n  }\n\n  return null\n}\n\nfunction getSelectedOptionValue(selectNode) {\n  var multiple = selectNode.multiple,\n    result = [],\n    options,\n    i,\n    l\n\n  if (!multiple) return selectNode.value\n\n  for (\n    options = selectNode.getElementsByTagName('option'),\n      i = 0,\n      l = options.length;\n    i < l;\n    i++\n  ) {\n    if (options[i].selected) result.push(options[i].value)\n  }\n\n  return result\n}\n","import getFormData from './getFormData'\n\nconst debug = false\nconst log = (...args) => debug && console.log(...args)\n\njQuery(function ($) {\n  const { forms = [], ajax } = window.Tangible || {}\n\n  if (!ajax || !forms.length) return\n\n  forms.forEach(function handleForm(form) {\n    const { id, location, hash } = form\n\n    const $form = $('#' + id)\n    if (!$form.length) return\n\n    // Find success, error\n    const $success = $form.find('.tangible-form-success-message')\n    const $error = $form.find('.tangible-form-error-message')\n\n    $form.on('submit', function (e) {\n      e.preventDefault()\n\n      const form = $form[0]\n      const data = getFormData(form)\n\n      // TODO: Custom validation\n      // form.checkValidity() === false\n\n      const request = {\n        location,\n        hash,\n        data,\n      }\n\n      log('Submit form', request)\n\n      ajax('tangible_form_handler', request)\n        .then(function (result) {\n          log('Form success', result)\n\n          $error.hide()\n\n          if (result.redirect) {\n            window.location = result.redirect\n            return\n          }\n\n          if (result.success) {\n            $success.html(result.success)\n          }\n\n          $success.show()\n        })\n        .catch(function (result) {\n          if (result.redirect) {\n            window.location = result.redirect\n            return\n          }\n\n          console.error('Form error', result)\n\n          const message =\n            result.error || result.message || 'There was an error.'\n          if (message) {\n            $error.html(message)\n            $error.show()\n            $success.hide()\n          }\n        })\n    })\n  })\n})\n"],"names":["getFormData","rootNode","delimiter","formValues","currNode","i","getFormValues","processNameValues","__name","nameValues","skipEmpty","result","arrays","j","k","l","value","nameParts","currResult","arrNameFull","arrName","arrIdx","namePart","name","_nameParts","nodeCallback","useIdIfEmptyName","getDisabled","extractNodeValues","getSubFormValues","currentNode","node","callbackResult","fieldValue","fieldName","getFieldName","getFieldValue","fieldNode","getSelectedOptionValue","selectNode","multiple","options","debug","log","args","$","forms","ajax","form","id","location","hash","$form","$success","$error","e","data","request","message"],"mappings":"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"}