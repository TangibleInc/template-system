@top Stylesheet {
  topLevelItem*
}

topLevelItem {
  Declaration |
  RuleSet |
  ImportStatement |
  MediaStatement |
  CharsetStatement |
  NamespaceStatement |
  KeyframesStatement |
  SupportsStatement |
  UseStatement |
  ForwardStatement |
  ApplyStatement |
  MixinStatement |
  IncludeStatement |
  IfStatement |
  EachStatement |
  ForStatement |
  WhileStatement |
  FunctionStatement |
  ErrorStatement |
  WarnStatement |
  DebugStatement |
  AtRule |
  Placeholder
}

ImportStatement {
  "@import" value (query ("," query)*)? ";"
}

MediaStatement {
  "@media" query ("," query)* Block
}

CharsetStatement {
  "@charset" value ";"
}

NamespaceStatement {
  "@namespace" NamespaceName { Identifier }? (StringValue | CallExpression) ";"
}

KeyframesStatement {
  ("@keyframes" | AtKeyword { token_2 }) KeyframesName { Identifier } KeyframeBlockList
}

KeyframeBlockList {
  "{" KeyframeBlock* "}"
}

KeyframeBlock {
  (From | To | IntegerValue) Block
}

SupportsStatement {
  "@supports" query Block
}

AtRule {
  AtKeyword (query ("," query)*)? (";" | Block)
}

UseStatement {
  "@use" value ";"
}

ForwardStatement {
  "@forward" value ";"
}

ApplyStatement {
  "@apply" value* ";"
}

Parameters {
  "(" Parameter ("," Parameter)* ")"
}

Parameter {
  VariableName { VariableIdentifier } (":" DefaultValue { value })?
}

MixinStatement {
  "@mixin" Name { Identifier } Parameters? Block
}

IncludeStatement {
  "@include" Identifier Arguments { IncludeArguments }? (Block | ";")
}

IncludeArguments {
  "(" Argument { IncludeArgument } ("," Argument { IncludeArgument })* ")"
}

IncludeArgument {
  (ArgumentName { VariableIdentifier } ":")? ArgumentValue { value }
}

Placeholder {
  "%" Name { Identifier } Block
}

ExtendStatement {
  "@extend" (value | ClassSelector) ";"
}

IfStatement {
  IfClause ElseIfClause* ElseClause?
}

IfClause {
  "@if" Condition { value } Block
}

ElseIfClause {
  "@else" "if" Condition { value } Block
}

ElseClause {
  "@else" Block
}

EachStatement {
  "@each" (Key { VariableIdentifier } ",")? Value { VariableIdentifier } "in" value Block
}

ForStatement {
  "@for" Variable { VariableIdentifier } "from" From { value } "through" Through { value } Block
}

WhileStatement {
  "@while" value Block
}

FunctionStatement {
  "@function" Name { Identifier } Parameters? Block
}

ReturnStatement {
  "@return" value ";"
}

AtRootStatement {
  "@at-root" value Block
}

ErrorStatement {
  "@error" value ";"
}

WarnStatement {
  "@warn" value ";"
}

DebugStatement {
  "@debug" value ";"
}

RuleSet {
  Selectors Block
}

Selectors {
  selector ("," selector)*
}

Block {
  "{" blockItem* Declaration { LastDeclaration }? "}"
}

blockItem {
  Declaration |
  RuleSet |
  ImportStatement |
  MediaStatement |
  CharsetStatement |
  NamespaceStatement |
  KeyframesStatement |
  SupportsStatement |
  MixinStatement |
  IncludeStatement |
  ExtendStatement |
  IfStatement |
  EachStatement |
  ForStatement |
  WhileStatement |
  FunctionStatement |
  ReturnStatement |
  AtRootStatement |
  ErrorStatement |
  WarnStatement |
  DebugStatement |
  AtRule
}

selector {
  UniversalSelector |
  TagName { Identifier } |
  ClassSelector |
  NestingSelector |
  PseudoClassSelector |
  PseudoElementSelector |
  IdSelector |
  AttributeSelector |
  StringValue |
  ChildSelector |
  DescendantSelector |
  SiblingSelector |
  AdjacentSiblingSelector
}

ClassSelector /* precedence: 1 */ {
  selector? ("." | NestingSelector) ClassName { Identifier }
}

PseudoClassSelector {
  selector? ":" ClassName { Identifier } Arguments { PseudoClassArguments }?
}

PseudoElementSelector {
  selector? "::" TagName { Identifier }
}

IdSelector {
  selector? "#" IdName { Identifier }
}

AttributeSelector {
  selector? "[" AttributeName { Identifier } (("=" | "~=" | "^=" | "|=" | "*=" | "$=") value)? "]"
}

ChildSelector /* precedence: left 0 */ {
  selector ">" selector
}

DescendantSelector /* precedence: left 0 */ {
  selector descendantOperator selector
}

SiblingSelector /* precedence: left 0 */ {
  selector "~" selector
}

AdjacentSiblingSelector /* precedence: left 0 */ {
  selector "+" selector
}

PseudoClassArguments {
  "(" ((selector | value+) ("," (selector | value+))*)? ")"
}

Declaration {
  (VariableName { VariableIdentifier } | PropertyName { Identifier }) ":" value (","? value)* Important? ";"
}

LastDeclaration /* precedence: 1 */ {
  PropertyName { Identifier } ":" value (","? value)* Important?
}

query {
  KeywordQuery { Identifier } |
  FeatureQuery |
  BinaryQuery |
  UnaryQuery |
  SelectorQuery |
  ParenthesizedQuery
}

FeatureQuery {
  "(" FeatureName { Identifier } ":" value+ ")"
}

ParenthesizedQuery {
  "(" query ")"
}

BinaryQuery /* precedence: left 0 */ {
  query ("and" | "or") query
}

UnaryQuery /* precedence: 1 */ {
  ("not" | "only") query
}

SelectorQuery {
  "selector" "(" selector ")"
}

value /* precedence: -1 */ {
  PlainValue { Identifier } |
  VariableValue { VariableIdentifier } |
  PlainValue |
  ColorValue |
  IntegerValue |
  FloatValue |
  StringValue |
  BinaryExpression |
  ParenthesizedValue |
  CallExpression
}

ParenthesizedValue {
  "(" value ")"
}

ColorValue {
  "#" token_3
}

IntegerValue {
  token_4 Unit?
}

FloatValue {
  token_5 Unit?
}

Unit {
  token_6
}

CallExpression {
  FunctionName { Identifier } Arguments
}

BinaryExpression /* precedence: left 0 */ {
  value ("+" | "-" | "*" | "/" | "==" | "<" | ">" | "!=" | "<=" | ">=") value
}

Arguments {
  "(" (value+ (("," | ";") value+)*)? ")"
}

@skip { token_1 | Comment | SingleLineComment }

@external tokens token from "./tokens" { descendantOperator }

@tokens {
  token_1 {
    $[ \t\r\n]
  }
  token_2 {
    "@" $[-a-z]+ "keyframes"
  }
  From {
    "from"
  }
  To {
    "to"
  }
  NestingSelector {
    "&"
  }
  UniversalSelector {
    "*"
  }
  Important {
    "!important"
  }
  token_3 {
    $[0-9a-fA-F] $[0-9a-fA-F] $[0-9a-fA-F] $[0-9a-fA-F]? $[0-9a-fA-F]? $[0-9a-fA-F]? $[0-9a-fA-F]? $[0-9a-fA-F]? 
  }
  StringValue {
    "'" (!['\n] | "\\\\" (![\n] | "\\n"))* "'" | "\"" (!["\n] | "\\\\" (![\n] | "\\n"))* "\""
  }
  token_4 {
    ("+" | "-")? $[0-9]+
  }
  token_5 {
    ("+" | "-")? $[0-9]* ("." $[0-9]+ | $[eE] "-"? $[0-9]+ | "." $[0-9]+ $[eE] "-"? $[0-9]+)
  }
  token_6 {
    $[a-zA-Z%]+
  }
  Identifier {
    (("#\\{" $[a-zA-Z0-9-_,&\$\.\(\) ]* "\\}") | ("--" | "-"? $[a-zA-Z_])) ($[a-zA-Z0-9-_] | ("#\\{" $[a-zA-Z0-9-_,&\$\.\(\) ]* "\\}"))*
  }
  VariableIdentifier {
    ($[a-zA-Z_]+ "\\.")? "\\$" $[a-zA-Z-_] $[a-zA-Z0-9-_]*
  }
  AtKeyword {
    "@" $[a-zA-Z-_]+
  }
  Comment {
    "/*" ![*]* "\\*"+ (![/*] ![*]* "\\*"+)* "/"
  }
  SingleLineComment {
    "//" ![\n]*
  }
  PlainValue {
    ($[-_] | "\\/" ![\* \t\n\r,;!{}()\[\]])* $[a-zA-Z] (![/ \t\n\r,;!{}()\[\]] | "\\/" ![\* \t\n\r,;!{}()\[\]])*
  }
}
