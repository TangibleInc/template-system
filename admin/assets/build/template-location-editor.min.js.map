{"version":3,"file":"template-location-editor.min.js","sources":["../src/common/Select.jsx","../src/template-location-editor/RuleGroups/Rule/Field.jsx","../src/template-location-editor/RuleGroups/Rule/ensureDataForRule.js","../src/template-location-editor/RuleGroups/Rule/index.jsx","../src/template-location-editor/RuleGroups/index.jsx","../src/template-location-editor/LocationEditor.jsx","../src/template-location-editor/index.jsx"],"sourcesContent":["import { useEffect, useRef } from 'react' // Aliased from Tangible.Preact || wp.element\n\n/**\n * Wrap Select2 module from vendor/tangible/interface\n *\n * @see https://select2.org/\n *\n * Also used in ../template-import-export\n */\nconst { jQuery: $ } = window\n\nconst Select = ({\n  labelForEmptyValue = '',\n  options = [],\n  value = '',\n  onChange,\n  multiSelect,\n  style,\n}) => {\n  const ref = useRef()\n\n  /**\n   * Activate Select2\n   */\n\n  useEffect(() => {\n    const $el = $(ref.current)\n    ref.current.$el = $el\n\n    onChange(value)\n\n    $el.tangibleSelect({\n      minimumResultsForSearch: 5,\n    })\n\n    if (multiSelect) {\n      // Ensure multiple values are selected on mount\n      $el.val(value)\n      $el.trigger('change')\n    }\n\n    $el.on('change', function (e) {\n      if (!multiSelect) {\n        onChange(e.target.value)\n        return\n      }\n\n      if (!ref.current) return\n\n      // Ensure array of values for multi-select\n\n      const values = $el.select2('data').map((item) => item.id)\n      onChange(values)\n    })\n\n    const select2 = (ref.current.select2 = $el.data('select2'))\n\n    // Clean up when component removed\n    return () => {\n      select2 && select2.destroy()\n    }\n  }, []) // NOTE: Empty array to run only once on component mount\n\n  // Ensure Select2 shows current value\n  if (ref.current && ref.current.$el) {\n    if (multiSelect) {\n      const currentValues = ref.current.$el.val()\n      if (value.length !== currentValues.length && options.length) {\n        // After select is rendered with options\n        setTimeout(function () {\n          ref.current.$el.val(value)\n          ref.current.$el.trigger('change')\n        }, 0)\n      }\n    } else if (ref.current.value !== value) {\n      ref.current.$el.val(value)\n      ref.current.$el.trigger('change')\n    }\n  }\n\n  return (\n    <select\n      ref={ref}\n      // onChange={e => onChange(e.target.value)}\n      autoComplete=\"off\"\n      multiple={multiSelect}\n      style={{\n        display: 'none',\n        width: '160px', // Default width\n        ...style,\n      }}\n    >\n      {labelForEmptyValue && (\n        <option value=\"\" disabled={true} selected={value == null}>\n          {labelForEmptyValue}\n        </option>\n      )}\n      {options.map((option, optionIndex) => (\n        <option\n          key={`option-${optionIndex}`}\n          value={option.value}\n          selected={option.value === value}\n        >\n          {option.label}\n        </option>\n      ))}\n    </select>\n  )\n}\n\nexport default Select\n","import Select from '../../../common/Select'\n\nconst Field = ({ rule, setRule, ruleProps, ensureData }) => {\n  const { fieldOptions } = ruleProps\n\n  return (\n    <div className=\"rule-part rule-field\">\n      <Select\n        {...{\n          labelForEmptyValue: 'Select location..',\n          options: fieldOptions,\n          value: rule.field,\n          onChange(value) {\n            setRule({\n              field: value,\n            }) // Will trigger ensureData()\n          },\n        }}\n      />\n    </div>\n  )\n}\n\nexport default Field\n","const debug = false // Set this to false for production\nconst log = (...args) => debug && console.log('[ensureDataForRule]', ...args)\n\nconst { ajax } = window.Tangible\n\n// AJAX action prefix must be the same as in includes/location/ajax/index.php\nconst ajaxActionPrefix = 'tangible_template_location__'\n\nconst ensureDataForRule = ({\n  rule,\n  ruleDefinitionByField,\n  ajaxStateRef,\n  setAjaxState,\n}) => {\n  if (!rule.field) return\n\n  // Field definition\n  const fieldDef = ruleDefinitionByField[rule.field]\n  if (!fieldDef) return\n\n  for (const partName of ['field_2', 'values']) {\n    if (!fieldDef[partName]) continue // Next\n\n    // Field part definition\n    let partDef = fieldDef[partName][0]\n    if (!partDef || partDef.type !== 'select_ajax') continue // Check next part\n\n    /**\n     * Support conditionally showing values select for certain operators\n     *\n     * Also supports multiple values to match different operators.\n     *\n     * See same logic in ./index.js, partSelect()\n     */\n\n    if (partName === 'values') {\n      for (const valuesDef of fieldDef.values) {\n        if (\n          !valuesDef.operators ||\n          valuesDef.operators.indexOf(rule.operator) >= 0\n        ) {\n          // Operators not defined or matches\n\n          partDef = valuesDef\n          break // Stop searching\n        }\n\n        // No match - Continue searching\n        partDef = null\n      }\n\n      if (!partDef) {\n        log('No values select for operator', rule.operator)\n        return\n      }\n    }\n\n    const ajaxState = ajaxStateRef.current\n    const ajaxActionName = partDef.ajax_action\n    const ajaxActionData = {}\n\n    /**\n     * Map rule properties to AJAX request\n     *\n     * For example, if definition is field_2 => post_type, then\n     * request.post_type = rule.field_2\n     */\n\n    if (partDef['rule_properties_to_ajax']) {\n      const props = partDef['rule_properties_to_ajax']\n\n      for (const key in props) {\n        if (!rule[key]) {\n          // Assume all keys are required: Don't make AJAX request\n\n          log('Missing request key', key)\n          return\n        }\n\n        ajaxActionData[props[key]] = rule[key]\n      }\n    }\n\n    /**\n     * Map direct values to AJAX request keys\n     *\n     * For example, if definition is post_type => 'lesson', then\n     * request.post_type = 'lesson'\n     */\n    if (partDef['ajax_properties']) {\n      const props = partDef['ajax_properties']\n\n      for (const key in props) {\n        ajaxActionData[key] = props[key]\n      }\n\n      log('Mapped AJAX properties to values', ajaxActionData)\n    }\n\n    // Provide part definition with methods to get options based on rule\n    if (!partDef.getAjaxActionCacheKey) {\n      partDef.getAjaxActionCacheKey = function (currentRule) {\n        let cacheKey = ajaxActionName\n\n        if (partDef['rule_properties_to_ajax']) {\n          const props = partDef['rule_properties_to_ajax']\n\n          for (const key in props) {\n            cacheKey += '__' + props[key] + '__' + currentRule[key]\n          }\n\n          // log('Cache key', cacheKey, currentRule)\n        }\n\n        return cacheKey\n      }\n\n      partDef.getOptionsForRule = function (currentRule) {\n        const key = partDef.getAjaxActionCacheKey(currentRule)\n        const ajaxState = ajaxStateRef.current // NOTE: Ensure fresh reference\n\n        if (ajaxState[key] && !(ajaxState[key] instanceof Promise)) {\n          log('Got options for key', key, ajaxState[key])\n          return ajaxState[key]\n        }\n        // Caller must handle when no options available\n        log('Options not ready for key', key, ajaxState)\n      }\n    }\n\n    // Unique key to track progress\n    const ajaxActionCacheKey = partDef.getAjaxActionCacheKey(rule)\n\n    /**\n     * Update part definition with fetched options\n     */\n\n    const updatePartDefinition = (data) => {\n      log('updatePartDefinition', ajaxStateRef.current)\n\n      setAjaxState({\n        ...ajaxStateRef.current, // NOTE: Ensure fresh reference\n      }) // Re-render\n    }\n\n    /**\n     * Fetch\n     */\n    if (!ajaxState[ajaxActionCacheKey]) {\n      const name = ajaxActionPrefix + ajaxActionName\n\n      log('Getting data..', name, ajaxActionData)\n\n      // Assign the Promise to cache for tracking progress\n      ajaxState[ajaxActionCacheKey] = ajax(name, ajaxActionData)\n        .then((data) => {\n          ajaxStateRef.current[ajaxActionCacheKey] = data // NOTE: Ensure fresh reference\n\n          log(\n            'Got data',\n            ajaxActionCacheKey,\n            ajaxStateRef.current[ajaxActionCacheKey]\n          )\n\n          updatePartDefinition(data)\n\n          return data // Make it available for subsequent .then()\n        })\n        .catch((e) => {\n          log('Failed to get data', ajaxActionCacheKey, e)\n        })\n\n      return // Skip the rest until data ready\n    }\n\n    /**\n     * Fetch in progress\n     */\n    if (ajaxState[ajaxActionCacheKey] instanceof Promise) {\n      log('Fetch in progress', ajaxActionCacheKey)\n      return // Skip the rest until data ready\n    }\n\n    /**\n     * Cached\n     */\n\n    // log('Cached', ajaxActionCacheKey, ajaxState[ ajaxActionCacheKey ])\n\n    // Continue to next rule part\n  }\n}\n\nexport default ensureDataForRule\n","import { useCallback, useRef, useState } from 'react'\nimport Field from './Field'\nimport Select from '../../../common/Select'\nimport ensureDataForRule from './ensureDataForRule'\n\nconst debug = false // Set this to false for production\nconst log = (...args) => debug && console.log('[Rule]', ...args)\n\nconst Rule = ({\n  ruleGroups,\n  setRuleGroups,\n  group,\n  groupIndex,\n  rule,\n  ruleIndex,\n  ruleProps,\n}) => {\n  log('--- Rule ---', rule)\n\n  /**\n   * Create ever-fresh reference for current rule, for use in onChange function closure\n   * for select field (see below)\n   */\n  const ruleRef = useRef()\n  ruleRef.current = rule\n\n  const {\n    ruleDefinitionByField,\n\n    ajaxStateRef,\n    setAjaxState,\n  } = ruleProps\n\n  const setRule = (givenRule = {}) => {\n    group[ruleIndex] = {\n      ...rule,\n      ...givenRule,\n    }\n    ruleGroups[groupIndex] = group\n    setRuleGroups()\n  }\n\n  /**\n   * Ensure data by AJAX request as needed\n   *\n   * Was on rule mount: useEffect(() => { ensureData() }, [])\n   *\n   * Must check on every render, in case any rule part changed\n   */\n\n  const ensureData = useCallback(() => {\n    ensureDataForRule({\n      rule,\n      ruleDefinitionByField,\n\n      ajaxStateRef,\n      setAjaxState,\n    })\n  }, [rule])\n\n  ensureData()\n\n  const fieldDef = rule.field && ruleDefinitionByField[rule.field]\n\n  /**\n   * Create select field for each rule part\n   */\n  const partSelect = (partName) => {\n    if (!fieldDef || !fieldDef[partName]) return // Ensure field definition exists\n\n    // Part definition\n    let partDef = fieldDef[partName][0]\n\n    const isPartSelect =\n      partName === 'operators' ||\n      (partDef && (partDef.type === 'select' || partDef.type === 'select_ajax'))\n    // NOTE: If fieldDef['values'][1] exists, assume it's the same type\n\n    if (!isPartSelect) {\n      /**\n       * Support non-select field types\n       * See ../LocationEditor where it gathers\n       */\n\n      const { type, placeholder, description } = partDef || {}\n\n      if (type === 'input') {\n        let value = rule[partName]\n\n        return (\n          <div className={`rule-part rule-${partName}`}>\n            <input\n              type=\"text\"\n              placeholder={placeholder}\n              value={value}\n              onChange={(e) => {\n                const rule = ruleRef.current // Use fresh reference\n                setRule({\n                  ...rule,\n                  [partName]: e.target.value,\n                })\n              }}\n            />\n            {description && (\n              <small style={{ display: 'block' }}>{description}</small>\n            )}\n          </div>\n        )\n      }\n\n      return\n    }\n\n    /**\n     * Support conditionally showing values select for certain operators\n     *\n     * Also supports multiple values to match different operators.\n     *\n     * See same logic in ./ensureDataForRule.js\n     */\n\n    if (partName === 'values') {\n      for (const valuesDef of fieldDef.values) {\n        if (\n          !valuesDef.operators ||\n          valuesDef.operators.indexOf(rule.operator) >= 0\n        ) {\n          // Operators not defined or matches\n\n          partDef = valuesDef\n          break // Stop searching\n        }\n\n        // No match - Continue searching\n        partDef = null\n      }\n\n      if (!partDef) {\n        log('No values select for operator', rule.operator)\n        return\n      }\n    }\n\n    const isOperators = partName === 'operators'\n\n    const rulePartName = isOperators\n      ? 'operator'\n      : partName.replace(/values/, 'value')\n\n    // Prepare properties for select input\n\n    const labelForEmptyValue =\n      isOperators || rule.operator === 'exclude'\n        ? '' // No empty value for operators\n        : // Empty value is accepted if label is defined\n          partDef['label_for_empty_value']\n\n    /**\n     * For input type \"select_ajax\", options are empty until they're ready.\n     *\n     * See ./ensureDataForRule, getOptionsForRule()\n     */\n\n    const options = isOperators\n      ? fieldDef[partName]\n\n          // Support filtering operators by field_2\n          .filter(\n            (obj) => !obj.field_2 || obj.field_2.indexOf(rule.field_2) >= 0\n          )\n\n          .map((obj) => ({\n            value: obj.name,\n            label: obj.label,\n          }))\n      : partDef.getOptionsForRule\n      ? partDef.getOptionsForRule(rule)\n      : partDef.options\n\n    if (!options) {\n      log('Options not available yet')\n      return\n    }\n\n    if (isOperators) log('Operator options', options)\n\n    let value = rule[rulePartName]\n\n    // Select first option by default if value is empty and there's no option for empty\n    if (\n      !partDef['multi_select'] &&\n      !value &&\n      !labelForEmptyValue &&\n      options[0] &&\n      options[0].value\n    ) {\n      value = rule[rulePartName] = options[0].value\n\n      log('Select first option by default', rulePartName, value)\n\n      setRule(rule) // Will trigger re-render\n    }\n\n    log('partSelect', rulePartName, rule[rulePartName])\n\n    return (\n      <div className={`rule-part rule-${partName}`}>\n        <Select\n          {...{\n            labelForEmptyValue,\n            options,\n            value,\n\n            onChange(value) {\n              // Use fresh reference for current rule\n              const rule = ruleRef.current\n\n              /**\n               * Update rule with new value for current part\n               *\n               * Previously, there was logic here to clear/remove the rest of rule parts\n               * (afer current part), but because the Select component triggers onChange\n               * initially on mount, it caused parts to get cleared incorrectly.\n               *\n               * Now we simply update the changed part and keep other rule parts the same.\n               */\n              const nextRule = {\n                ...rule,\n                [rulePartName]: value,\n              }\n\n              log('Next rule', nextRule)\n\n              setRule(nextRule) // Will trigger ensureData()\n            },\n\n            multiSelect: !isOperators && partDef['multi_select'],\n\n            style: isOperators ? { width: 'auto' } : {},\n          }}\n        />\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <div className=\"rule\">\n        <div className=\"rule-parts\">\n          <Field\n            {...{\n              rule,\n              setRule,\n              ruleProps,\n              ensureData,\n            }}\n          />\n\n          {partSelect('field_2')}\n\n          {fieldDef &&\n            (!fieldDef['field_2'] || rule['field_2']) &&\n            partSelect('operators')}\n          {fieldDef &&\n            (!fieldDef['field_2'] || rule['field_2']) &&\n            partSelect('values')}\n        </div>\n\n        <div className=\"rule-actions\">\n          <div className=\"rule-action rule-action--remove-rule\">\n            <div\n              className=\"icon\"\n              onClick={() => {\n                // Remove this rule\n                group.splice(ruleIndex, 1)\n\n                if (!group.length) {\n                  // If group is empty, remove it\n\n                  ruleGroups.splice(groupIndex, 1)\n                } else {\n                  ruleGroups[groupIndex] = group\n                }\n\n                setRuleGroups()\n              }}\n            >\n              <svg viewBox=\"0 0 1792 1792\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M1490 1322q0 40-28 68l-136 136q-28 28-68 28t-68-28l-294-294-294 294q-28 28-68 28t-68-28l-136-136q-28-28-28-68t28-68l294-294-294-294q-28-28-28-68t28-68l136-136q28-28 68-28t68 28l294 294 294-294q28-28 68-28t68 28l136 136q28 28 28 68t-28 68l-294 294 294 294q28 28 28 68z\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {fieldDef && fieldDef.description && (\n        <p\n          dangerouslySetInnerHTML={{\n            __html: fieldDef.description,\n          }}\n        ></p>\n      )}\n    </>\n  )\n}\n\nexport default Rule\n","import Rule from './Rule'\n\nconst createNewRuleGroup = () => [\n  {}, // Empty rule\n]\n\nconst RuleGroups = ({ ruleGroups, setRuleGroups, ruleProps }) => {\n  return (\n    <>\n      <div className=\"rule-groups\">\n        {ruleGroups.map((group, groupIndex) => (\n          <div key={`rule-group-${groupIndex}`} className=\"rule-group\">\n            {/* {groupIndex > 0 &&\n          <div>\n            ..or..\n          </div>\n          } */}\n\n            {group.map((rule, ruleIndex) => (\n              <Rule\n                key={`rule-group-${groupIndex}-rule-${ruleIndex}`}\n                {...{\n                  ruleGroups,\n                  setRuleGroups,\n                  group,\n                  groupIndex,\n                  rule,\n                  ruleIndex,\n                  ruleProps,\n                }}\n              />\n            ))}\n          </div>\n        ))}\n      </div>\n\n      <button\n        type=\"button\"\n        className=\"button button--add-rule-group\"\n        onClick={() => {\n          ruleGroups.push(createNewRuleGroup())\n          setRuleGroups(ruleGroups)\n        }}\n      >\n        Add location\n      </button>\n    </>\n  )\n}\n\nexport default RuleGroups\n","import { useEffect, useMemo, useRef, useState } from 'react'\nimport RuleGroups from './RuleGroups'\n\nconst { jQuery: $ } = window\n\nconst debug = false // Set this to false for production\nconst log = (...args) => debug && console.log('[LocationEditor]', ...args)\n\nconst LocationEditor = ({ data, ruleDefinitions }) => {\n  const [state, setState] = useState(data)\n\n  const stateRef = useRef()\n  stateRef.current = state\n\n  const [ajaxState, setAjaxState] = useState({})\n\n  /**\n   * Create ever-fresh reference for current AJAX state, for use in function closures\n   * See ./Rule/ensureDataForRule\n   */\n  const ajaxStateRef = useRef()\n  ajaxStateRef.current = ajaxState\n\n  const containerRef = useRef()\n  const stateInputElementRef = useRef()\n\n  // Rule groups\n\n  const {\n    // NOTE: Convert incoming data from snake to camel case\n    rule_groups: ruleGroups = [],\n  } = state\n\n  const setRuleGroups = () =>\n    setState((state) => ({\n      ...state,\n      // NOTE: Convert outgoing data from camel to snake case\n      rule_groups: ruleGroups,\n    }))\n\n  /**\n   * Preprocess rule definitions on mount - Used in Rule/Field.js\n   */\n\n  const { fieldOptions, ruleDefinitionByField } = useMemo(() => {\n    // First field as list of select options\n    const fieldOptions = []\n\n    // Map of rule definitions organized by field name\n    const ruleDefinitionByField = {\n      // field: definition\n    }\n\n    ruleDefinitions.forEach((def) => {\n      fieldOptions.push({\n        value: def.name, // Field name\n        label: def.label,\n      })\n\n      ruleDefinitionByField[def.name] = def\n    })\n\n    log('ruleDefinitionByField', ruleDefinitionByField)\n\n    return {\n      fieldOptions,\n      ruleDefinitionByField,\n    }\n  }, [])\n\n  /**\n   * Properties to pass to Rule\n   */\n  const ruleProps = {\n    ruleDefinitions,\n    fieldOptions,\n    ruleDefinitionByField,\n\n    ajaxStateRef,\n    setAjaxState,\n  }\n\n  useEffect(() => {\n    /**\n     * Generate human-readable description of rule groups\n     */\n\n    let description = ''\n\n    const $rules = $(containerRef.current).find('.rule')\n\n    for (let i = 0, len = $rules.length; i < len; i++) {\n      const $parts = $($rules[i]).find('.rule-part')\n\n      let ruleDescription = ''\n\n      for (let j = 0, partLen = $parts.length; j < partLen; j++) {\n        const $part = $($parts[j])\n        const $select = $part.find('select')\n\n        if (!$select[0]) {\n          // Support non-select field types\n          const $input = $part.find('input')\n          if ($input) {\n            ruleDescription += (j > 0 ? ' ' : '') + $input.val()\n          }\n\n          continue\n        }\n\n        /**\n         * Ensure Select2 was instantiated - See ./Rule/Select\n         */\n        if (!$select[0].select2) continue\n\n        const values = $select.select2('data')\n\n        if (!Array.isArray(values)) continue\n\n        ruleDescription +=\n          (j > 0 ? ' ' : '') + values.map((value) => value.text).join(', ')\n      }\n\n      // log('Rule description:', ruleDescription)\n\n      description += (i > 0 ? '<br>' : '') + ruleDescription\n    }\n\n    log('Description:', description)\n\n    /**\n     * Update input field for entire state\n     */\n    const state = stateRef.current\n\n    state.description = description\n    stateInputElementRef.current.value = JSON.stringify(state)\n  })\n\n  return (\n    <div ref={containerRef}>\n      <input\n        type=\"hidden\"\n        name=\"location\"\n        ref={stateInputElementRef}\n        value={JSON.stringify(state)}\n      />\n\n      <RuleGroups\n        {...{\n          ruleGroups,\n          setRuleGroups,\n          ruleProps,\n        }}\n      />\n    </div>\n  )\n}\n\nexport default LocationEditor\n","/**\n * Template edit screen: Location tab\n *\n * Depends on Tangible AJAX and Select modules\n */\n\nimport LocationEditor from './LocationEditor'\n\nconst {\n  jQuery: $,\n  Tangible: { Preact },\n} = window\n\nconst $el = $('#post .template-location-editor')\nconst el = $el[0]\n\nlet data = $el.data('location')\n\n// Server can pass empty array to mean an object\ndata = typeof data === 'object' && !Array.isArray(data) ? data : {}\n\nconst ruleDefinitions = $el.data('ruleDefinitions') || []\n\nPreact.render(\n  <LocationEditor\n    {...{\n      data,\n      ruleDefinitions,\n    }}\n  />,\n  el\n)\n"],"names":["d","o","__name","n","c","h","m","r","s","l","a","e","useRef","useEffect","Field","rule","setRule","ruleProps","ensureData","fieldOptions","Select","value","debug","log","args","ajax","ajaxActionPrefix","ensureDataForRule","ruleDefinitionByField","ajaxStateRef","setAjaxState","fieldDef","partName","partDef","valuesDef","ajaxState","ajaxActionName","ajaxActionData","props","key","currentRule","cacheKey","ajaxActionCacheKey","updatePartDefinition","data","name","C","u","i","v","z","A","f","_","R","y","useCallback","j","q","O","w","x","S","t","g","D","k","p","b","$","P","createNewRuleGroup","RuleGroups","ruleGroups","setRuleGroups","group","groupIndex","ruleIndex","Rule","useState","useMemo","Preact","$el","el","ruleDefinitions","LocationEditor"],"mappings":"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"}