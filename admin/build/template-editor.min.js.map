{"version":3,"file":"template-editor.min.js","sources":["../editor/template-editor/memory.ts","../editor/template-editor/tabs.ts","../editor/template-editor/editors.ts","../editor/template-editor/index.ts"],"sourcesContent":["\n/**\n * Remember state in local storage\n */\n\nconst memoryKey = 'tangibleTemplateEditorState'\n\nexport const memory = Object.assign(\n  {\n    tab: undefined, // Default tab\n    postId: 0, // ?\n    theme: 'default',\n    fontFamily: 'default',\n    fontSize: 14,\n  },\n  getMemory() || {}\n)\n\nexport function setMemory(state) {\n  if (!window.localStorage) return\n  Object.assign(memory, state)\n  window.localStorage.setItem(memoryKey, JSON.stringify(memory))\n}\n\nexport function getMemory() {\n  if (!window.localStorage) return\n  let state = window.localStorage.getItem(memoryKey)\n  if (!state) return\n  try {\n    state = JSON.parse(state)\n    return state\n  } catch (e) {\n    /* Ignore */\n  }\n}\n","\nimport {\n  memory,\n  getMemory,\n  setMemory\n} from './memory'\n\nexport function handleTabs({\n  $,\n  postId,\n  $postForm,\n  editorInstances,\n  renderPreview\n}) {\n  \n  /**\n   * Tabs\n   */\n\n  const $tabSelectors = $postForm.find('.tangible-template-tab-selector')\n  const $tabs = $postForm.find('.tangible-template-tab')\n  const tabEditorActivated: boolean[] = [] // index => boolean\n\n  if (!$tabs.length) {\n    console.warn('No tabs elements found for Tangible Template code editor')\n    return\n  }\n\n  $tabSelectors.on('click', function () {\n    const currentTabSelector = this\n\n    // Show current tab, hide others\n\n    $tabSelectors.each(function (index) {\n\n      const $tabSelector = $(this)\n      const tabName = $tabSelector.data('tabName')\n      const $tab = $tabs.eq(index)\n\n      // TODO: Each tab area should set its name\n      // $tabs.filter(`[data-tab-name=\"${tabName}\"]`).first()\n\n      if (this !== currentTabSelector) {\n        // Hide\n\n        $tabSelector.removeClass('active')\n        $tab.hide()\n\n        return\n      }\n\n      // Show\n\n      $tabSelector.addClass('active')\n      $tab.show()\n\n      // Find editor in tab, if any\n      const $tabEditor = $tab.find('[data-tangible-template-editor-type]')\n      const editorInstance = $tabEditor.length\n        ? editorInstances[\n          $tabEditor.attr('name') // By field name\n        ]\n        : false\n\n      if (!tabEditorActivated[index]) {\n        tabEditorActivated[index] = true\n\n        // Refresh editor once\n        if (editorInstance) {\n          editorInstance.refresh()\n        }\n      }\n\n      if (editorInstance) {\n        editorInstance.focus()\n      }\n\n      if (tabName==='preview') {\n        renderPreview($tab[0])\n      }\n\n      setMemory({\n        tab: tabName,\n        postId,\n      })\n    }) // End for each tab selector\n  }) // End on click tab selector\n\n  /**\n   * Set default tab from URL query parameter\n   */\n\n  const query: {\n    [key: string]: string\n  } = window.location.search\n    .substr(1)\n    .split('&')\n    .reduce(function (obj, pair) {\n      const [key, value] = pair.split('=')\n      obj[key] = value\n      return obj\n    }, {})\n\n  const gotoTab = query.tab || (memory.postId === postId && memory.tab)\n\n  if (gotoTab) {\n    // Switch to tab\n\n    const $activeTabSelector = $tabSelectors.filter(\n      `[data-tab-name=\"${gotoTab}\"]`\n    )\n\n    if ($activeTabSelector.length) {\n      $activeTabSelector.eq(0).click()\n    } else {\n      // Ignore if tab not found\n      // console.log('Tab not found', gotoTab)\n    }\n  }  \n}\n","// import type { EditorView, Panel, ViewUpdate } from '@codemirror/view'\nimport { memory, setMemory } from './memory'\n\nexport async function createEditors({\n  $,\n  save,\n  $editors,\n  editorInstances,\n  createCodeEditor,\n  templateMeta,\n  Tangible,\n}) {\n  const sharedEditorOptions = {\n    // New editor\n    onSave: save,\n\n    // Legacy editor\n\n    viewportMargin: Infinity, // With .CodeMirror height: auto or 100%\n    resizable: false,\n    lineWrapping: true,\n\n    extraKeys: {\n      'Alt-F': 'findPersistent',\n      'Ctrl-S': save,\n      'Cmd-S': save,\n      Tab: 'emmetExpandAbbreviation',\n      Esc: 'emmetResetAbbreviation',\n      Enter: 'emmetInsertLineBreak',\n      'Ctrl-Space': 'autocomplete',\n    },\n  }\n\n  /**\n   * Create editors\n   */\n\n  async function create(el) {\n\n    const $editor = $(el)\n    const fieldName = $editor.attr('name')\n    const type = $editor.data('tangibleTemplateEditorType') // html, sass, javascript, json\n\n    const editorOptions: {\n      [key: string]: any\n    } = {\n      ...sharedEditorOptions,\n      language: type,\n    }\n\n    if (type === 'html') {\n      editorOptions.emmet = {\n        preview: false,\n      }\n    }\n\n    const editor = (editorInstances[fieldName] = await createCodeEditor(\n      el,\n      editorOptions\n    ))\n\n    editor.setSize(null, '100%')\n\n    // Focus on content if editing existing post\n    if (fieldName === 'post_content' && !templateMeta.isNewPost) editor.focus()\n\n    // Provide public method to save\n    el.editor = editor\n    editor.save = save\n\n    if (!editor.codeMirror6) return\n\n    // New editor\n\n    // console.log('Editor', editor)\n\n    // Tangible.codeEditors.push({\n    //   editor,\n    //   $editor,\n    //   fieldName,\n    //   type,\n    // })\n  }\n\n  const promises: Promise<void>[] = []\n\n  $editors.each(function() {\n    promises.push(create(this))\n  })\n\n  await Promise.all(promises)\n\n  // await loadFonts()\n}\n","/**\n * Editor for template post type\n */\n\nimport { handleTabs } from './tabs'\nimport { createEditors } from './editors'\n\ndeclare global {\n  interface Window {\n    jQuery: any\n    wp: any\n    Tangible: any\n  }\n}\n\nwindow.jQuery(function ($) {\n  const $postForm = $('#post')\n  const $editors = $postForm.find('[data-tangible-template-editor-type]')\n\n  if (!$editors.length) {\n    console.warn('No editor elements found for Tangible Template code editor')\n    return\n  }\n\n  /**\n   * Silence \"Are you sure?\" alert when leaving screen\n   * @see https://core.trac.wordpress.org/browser/branches/5.6/src/js/_enqueues/wp/autosave.js?rev=50366\n   */\n  const { wp } = window\n  if (\n    wp &&\n    wp.autosave &&\n    wp.autosave.server &&\n    wp.autosave.server.postChanged\n  ) {\n    // console.log('Proxy wp.autosave.server.postChanged')\n    wp.autosave.server.postChanged = function () {\n      // console.log('postChanged', false)\n      return false\n    }\n  }\n\n  const { Tangible } = window\n  const {\n    ajax,\n    // Provide new editor compatibility layer\n    createCodeEditor,\n  } = Tangible\n\n  Tangible.codeEditors = []\n\n  const editorInstances = {\n    // fieldName: editor instance\n  }\n\n  const postId = $('#post_ID').val()\n  const $postTitle = $postForm.find('input[name=\"post_title\"]')\n  // const $postContent = $postForm.find('[name=\"post_content\"]') // textarea\n\n  const $publishButton = $('#publish')\n  const $publishingActions = $publishButton.closest('#major-publishing-actions')\n\n  const templateMeta =\n    $postForm.find('#tangible-template-editor-meta').data('json') || {}\n\n  /**\n   * Additional fields that are not editors\n   * @see /system/editor/fields.php\n   */\n  const additionalFieldNames = [\n    'name',\n    'assets',\n    'location',\n    'theme_position',\n    'theme_header',\n    'theme_footer',\n    'universal_id',\n  ]\n\n  const $additionalFields = {\n    // name?: $element\n  }\n\n  for (const fieldName of additionalFieldNames) {\n    const $field = $postForm.find(`[name=\"${fieldName}\"]`)\n    if ($field.length) {\n      $additionalFields[fieldName] = $field\n    }\n  }\n\n  // Get taxonomy fields\n\n  const taxonomyNames = ['tangible_template_category']\n  const $taxonomyFields = {\n    // name?: $terms\n  }\n\n  for (const taxName of taxonomyNames) {\n    const $terms = $postForm.find(\n      `[type=\"checkbox\"][name=\"tax_input[${taxName}][]\"]`\n    )\n    if ($terms.length) {\n      $taxonomyFields[taxName] = $terms\n\n      /**\n       * Fix browser autocomplete messing with checkboxes..\n       * Force \"checked\" state based on HTML attribute\n       */\n      $terms.each(function () {\n        const checked = this.getAttribute('checked') === 'checked'\n        $(this).prop('checked', checked)\n      })\n    }\n  }\n\n  /**\n   * Show success/error message in publish button\n   */\n  const updatePublishButton = function (newText, errorMessage = '') {\n    $publishButton.val(newText)\n\n    if (errorMessage) {\n      $publishingActions.append(\n        `<div id=\"post-save-error-message\" style=\"padding-top: 8px\">${errorMessage}</div>`\n      )\n    } else {\n      $publishingActions.find('#post-save-error-message').remove()\n    }\n  }\n\n  const getEditorFields = function () {\n    const data = {}\n\n    for (let fieldName in editorInstances) {\n      const editor = editorInstances[fieldName]\n\n      if (fieldName === 'post_content') fieldName = 'content'\n\n      const value = editor.getValue()\n      data[fieldName] = value\n    }\n\n    return data\n  }\n\n  const getAdditionalFields = function () {\n    const data = {}\n\n    for (const fieldName of additionalFieldNames) {\n      if (!$additionalFields[fieldName]) continue\n      data[fieldName] = $additionalFields[fieldName].val()\n    }\n\n    return data\n  }\n\n  const getTaxonomyFields = function () {\n    const data = {}\n\n    for (const taxName of taxonomyNames) {\n      if (!$taxonomyFields[taxName]) continue\n      data[taxName] = []\n      $taxonomyFields[taxName].each(function () {\n        const $el = $(this)\n        if ($el.prop('checked')) {\n          data[taxName].push($el.val())\n        }\n      })\n    }\n\n    return data\n  }\n\n  /**\n   * Save via AJAX, except for new post which requires page reload\n   */\n  function save() {\n    if (templateMeta.isNewPost) {\n      $publishButton.click()\n      return\n    }\n\n    // New and existing post should have ID\n    if (!postId) return\n\n    const title = $postTitle.val()\n    if (!title) return\n\n    const data = {\n      title,\n      id: postId,\n      content: '',\n      ...getEditorFields(),\n      ...getAdditionalFields(),\n      tax_input: getTaxonomyFields(),\n    }\n\n    const previousLabel = $publishButton.val()\n\n    let labelTimer\n    function restorePreviousLabelAfterTimeout() {\n      if (labelTimer) clearTimeout(labelTimer)\n      labelTimer = setTimeout(function () {\n        $publishButton.val(previousLabel)\n      }, 7000)\n    }\n\n    // $publishButton.val('Saving..')\n\n    ajax('tangible_template_editor_save', data)\n      .then(function (res) {\n        updatePublishButton('Saved')\n        restorePreviousLabelAfterTimeout()\n      })\n      .catch(function (e) {\n        updatePublishButton('Error', e.message)\n        restorePreviousLabelAfterTimeout()\n      })\n  }\n\n  /**\n   * New or draft posts must submit the form and reload the edit screen,\n   * but after that the publish button can use AJAX save.\n   */\n  if (!templateMeta.isNewPost && templateMeta.postStatus === 'publish') {\n    /**\n     * Disable AJAX save until following issues are resolved:\n     *\n     * - AJAX nonce expiring\n     * - Sometimes the post slug not saving?\n     * - Sometimes there's a confirmation dialog \"information you've entered may not be saved\"\n     */\n    /*\n        $publishButton.on('click', function (e) {\n          e.preventDefault()\n          save()\n        })\n    */\n    //\n    // window.onbeforeunload = function() {}\n  }\n\n  function setIframeContent(iframe, content) {\n    // iframe.src = 'data:text/html;charset=utf-8,' + encodeURI(content)\n    iframe.contentWindow.document\n    iframe.contentWindow.document.open()\n    iframe.contentWindow.document.write(content)\n    iframe.contentWindow.document.close()\n  }\n\n  async function renderPreview(el: HTMLElement) {\n    const data = {\n      id: postId,\n      content: '',\n      ...getEditorFields(),\n      ...getAdditionalFields(),\n    }\n\n    let iframe: HTMLIFrameElement = el.getElementsByTagName('iframe')[0]\n\n    if (!iframe) {\n      iframe = document.createElement('iframe')\n      iframe.style.width = '100%'\n      iframe.style.height = '100%'\n      iframe.style.minHeight = '380px'\n      el.style.resize = 'vertical'\n      el.style.overflowY = 'auto'\n      el.appendChild(iframe)\n    }\n\n    ajax('tangible_template_editor_render', data)\n      .then(function (res) {\n        setIframeContent(iframe, res.result)\n      })\n      .catch(function (e) {\n        setIframeContent(iframe, `<p>${e.message}</p>`)\n      })\n  }\n\n  createEditors({\n    $,\n    save,\n    $editors,\n    editorInstances,\n    createCodeEditor,\n    templateMeta,\n    Tangible,\n  }).finally(function () {\n    handleTabs({\n      $,\n      postId,\n      $postForm,\n      editorInstances,\n      renderPreview,\n    })\n  })\n})\n"],"names":["__name"],"mappings":"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"}