{"version":3,"file":"template-editor.min.js","sources":["../editor/template-editor/memory.ts","../editor/template-editor/tabs.ts","../editor/template-editor/editors.ts","../editor/template-editor/index.ts"],"sourcesContent":["\n/**\n * Remember state in local storage\n */\n\nconst memoryKey = 'tangibleTemplateEditorState'\n\nexport const memory = Object.assign(\n  {\n    tab: undefined, // Default tab\n    postId: 0, // ?\n    theme: 'default',\n    fontFamily: 'default',\n    fontSize: 14,\n    previewOpen: false\n  },\n  getMemory() || {}\n)\n\nexport function setMemory(state) {\n  if (!window.localStorage) return\n  Object.assign(memory, state)\n  window.localStorage.setItem(memoryKey, JSON.stringify(memory))\n}\n\nexport function getMemory() {\n  if (!window.localStorage) return\n  let state = window.localStorage.getItem(memoryKey)\n  if (!state) return\n  try {\n    state = JSON.parse(state)\n    return state\n  } catch (e) {\n    /* Ignore */\n  }\n}\n","\nimport {\n  memory,\n  getMemory,\n  setMemory\n} from './memory'\n\nexport function handleTabs({\n  $,\n  postId,\n  $postForm,\n  editorInstances,\n  setEditorActiveForPreview\n}) {\n  \n  /**\n   * Tabs\n   */\n\n  const $tabSelectors = $postForm.find('.tangible-template-tab-selector')\n  const $tabs = $postForm.find('.tangible-template-tab')\n  const tabEditorActivated: boolean[] = [] // index => boolean\n\n  if (!$tabs.length) {\n    console.warn('No tabs elements found for Tangible Template code editor')\n    return\n  }\n\n  $tabSelectors.on('click', function () {\n\n    const tabName = $(this).data('tabName')\n    if (tabName==='preview') return\n\n    const currentTabSelector = this\n\n    // Show current tab, hide others\n\n    $tabSelectors.each(function (index) {\n\n      const $tabSelector = $(this)\n      const tabName = $tabSelector.data('tabName')\n      if (tabName==='preview') return\n\n      const $tab = $tabs.eq(index)\n\n      // TODO: Each tab area should set its name\n      // $tabs.filter(`[data-tab-name=\"${tabName}\"]`).first()\n\n      if (this !== currentTabSelector) {\n        // Hide\n\n        $tabSelector.removeClass('active')\n        $tab.hide()\n\n        return\n      }\n\n      // Show\n\n      $tabSelector.addClass('active')\n      $tab.show()\n\n      // Find editor in tab, if any\n      const $tabEditor = $tab.find('[data-tangible-template-editor-type]')\n      const editorInstance = $tabEditor.length\n        ? editorInstances[\n          $tabEditor.attr('name') // By field name\n        ]\n        : false\n\n      if (!tabEditorActivated[index]) {\n        tabEditorActivated[index] = true\n\n        // Refresh editor once\n        if (editorInstance) {\n          editorInstance.refresh()\n        }\n      }\n\n      if (editorInstance) {\n        editorInstance.focus()\n        setEditorActiveForPreview()\n      } else {\n        /**\n         * Hide preview if non-editor tab is open\n         */\n        setEditorActiveForPreview(false)\n      }\n\n      setMemory({\n        tab: tabName,\n        postId,\n      })\n    }) // End for each tab selector\n  }) // End on click tab selector\n\n  /**\n   * Set default tab from URL query parameter\n   */\n\n  const query: {\n    [key: string]: string\n  } = window.location.search\n    .substr(1)\n    .split('&')\n    .reduce(function (obj, pair) {\n      const [key, value] = pair.split('=')\n      obj[key] = value\n      return obj\n    }, {})\n\n  const gotoTab = query.tab || (memory.postId === postId && memory.tab)\n\n  if (gotoTab) {\n    // Switch to tab\n\n    const $activeTabSelector = $tabSelectors.filter(\n      `[data-tab-name=\"${gotoTab}\"]`\n    )\n\n    if ($activeTabSelector.length) {\n      $activeTabSelector.eq(0).click()\n    } else {\n      // Ignore if tab not found\n      // console.log('Tab not found', gotoTab)\n    }\n  }  \n}\n","// import type { EditorView, Panel, ViewUpdate } from '@codemirror/view'\nimport { memory, setMemory } from './memory'\n\nexport async function createEditors({\n  $,\n  save,\n  $editors,\n  editorInstances,\n  createCodeEditor,\n  templateMeta,\n  Tangible,\n}) {\n  const sharedEditorOptions = {\n    // New editor\n    onSave: save,\n\n    // Legacy editor\n\n    viewportMargin: Infinity, // With .CodeMirror height: auto or 100%\n    resizable: false,\n    lineWrapping: true,\n\n    extraKeys: {\n      'Alt-F': 'findPersistent',\n      'Ctrl-S': save,\n      'Cmd-S': save,\n      Tab: 'emmetExpandAbbreviation',\n      Esc: 'emmetResetAbbreviation',\n      Enter: 'emmetInsertLineBreak',\n      'Ctrl-Space': 'autocomplete',\n    },\n  }\n\n  /**\n   * Create editors\n   */\n\n  async function create(el) {\n\n    const $editor = $(el)\n    const fieldName = $editor.attr('name')\n    const type = $editor.data('tangibleTemplateEditorType') // html, sass, javascript, json\n\n    const editorOptions: {\n      [key: string]: any\n    } = {\n      ...sharedEditorOptions,\n      language: type,\n    }\n\n    if (type === 'html') {\n      editorOptions.emmet = {\n        preview: false,\n      }\n    }\n\n    const editor = (editorInstances[fieldName] = await createCodeEditor(\n      el,\n      editorOptions\n    ))\n\n    editor.setSize(null, '100%')\n\n    // Focus on content if editing existing post\n    if (fieldName === 'post_content' && !templateMeta.isNewPost) editor.focus()\n\n    // Provide public method to save\n    el.editor = editor\n    editor.save = save\n\n    if (!editor.codeMirror6) return\n\n    // New editor\n\n    // console.log('Editor', editor)\n\n    // Tangible.codeEditors.push({\n    //   editor,\n    //   $editor,\n    //   fieldName,\n    //   type,\n    // })\n  }\n\n  const promises: Promise<void>[] = []\n\n  $editors.each(function() {\n    promises.push(create(this))\n  })\n\n  await Promise.all(promises)\n\n  // await loadFonts()\n}\n","/**\n * Editor for template post type\n */\n\nimport { handleTabs } from './tabs'\nimport { createEditors } from './editors'\nimport {\n  memory,\n  setMemory\n} from './memory'\n\ndeclare global {\n  interface Window {\n    jQuery: any\n    wp: any\n    Tangible: any\n  }\n}\n\nwindow.jQuery(function ($) {\n  const $postForm = $('#post')\n  const $editors = $postForm.find('[data-tangible-template-editor-type]')\n\n  if (!$editors.length) {\n    console.warn('No editor elements found for Tangible Template code editor')\n    return\n  }\n\n  /**\n   * Silence \"Are you sure?\" alert when leaving screen\n   * @see https://core.trac.wordpress.org/browser/branches/5.6/src/js/_enqueues/wp/autosave.js?rev=50366\n   */\n  const { wp } = window\n  if (\n    wp &&\n    wp.autosave &&\n    wp.autosave.server &&\n    wp.autosave.server.postChanged\n  ) {\n    // console.log('Proxy wp.autosave.server.postChanged')\n    wp.autosave.server.postChanged = function () {\n      // console.log('postChanged', false)\n      return false\n    }\n  }\n\n  const { Tangible } = window\n  const {\n    ajax,\n    // Provide new editor compatibility layer\n    createCodeEditor,\n  } = Tangible\n\n  Tangible.codeEditors = []\n\n  const editorInstances = {\n    // fieldName: editor instance\n  }\n\n  const postId = $('#post_ID').val()\n  const $postTitle = $postForm.find('input[name=\"post_title\"]')\n  // const $postContent = $postForm.find('[name=\"post_content\"]') // textarea\n\n  const $publishButton = $('#publish')\n  const $publishingActions = $publishButton.closest('#major-publishing-actions')\n\n  const templateMeta =\n    $postForm.find('#tangible-template-editor-meta').data('json') || {}\n\n  /**\n   * Additional fields that are not editors\n   * @see /system/editor/fields.php\n   */\n  const additionalFieldNames = [\n    'name',\n    'assets',\n    'location',\n    'theme_position',\n    'theme_header',\n    'theme_footer',\n    'universal_id',\n  ]\n\n  const $additionalFields = {\n    // name?: $element\n  }\n\n  for (const fieldName of additionalFieldNames) {\n    const $field = $postForm.find(`[name=\"${fieldName}\"]`)\n    if ($field.length) {\n      $additionalFields[fieldName] = $field\n    }\n  }\n\n  // Get taxonomy fields\n\n  const taxonomyNames = ['tangible_template_category']\n  const $taxonomyFields = {\n    // name?: $terms\n  }\n\n  for (const taxName of taxonomyNames) {\n    const $terms = $postForm.find(\n      `[type=\"checkbox\"][name=\"tax_input[${taxName}][]\"]`\n    )\n    if ($terms.length) {\n      $taxonomyFields[taxName] = $terms\n\n      /**\n       * Fix browser autocomplete messing with checkboxes..\n       * Force \"checked\" state based on HTML attribute\n       */\n      $terms.each(function () {\n        const checked = this.getAttribute('checked') === 'checked'\n        $(this).prop('checked', checked)\n      })\n    }\n  }\n\n  /**\n   * Show success/error message in publish button\n   */\n  const updatePublishButton = function (newText, errorMessage = '') {\n    $publishButton.val(newText)\n\n    if (errorMessage) {\n      $publishingActions.append(\n        `<div id=\"post-save-error-message\" style=\"padding-top: 8px\">${errorMessage}</div>`\n      )\n    } else {\n      $publishingActions.find('#post-save-error-message').remove()\n    }\n  }\n\n  const getEditorFields = function () {\n    const data = {}\n\n    for (let fieldName in editorInstances) {\n      const editor = editorInstances[fieldName]\n\n      if (fieldName === 'post_content') fieldName = 'content'\n\n      const value = editor.getValue()\n      data[fieldName] = value\n    }\n\n    return data\n  }\n\n  const getAdditionalFields = function () {\n    const data = {}\n\n    for (const fieldName of additionalFieldNames) {\n      if (!$additionalFields[fieldName]) continue\n      data[fieldName] = $additionalFields[fieldName].val()\n    }\n\n    return data\n  }\n\n  const getTaxonomyFields = function () {\n    const data = {}\n\n    for (const taxName of taxonomyNames) {\n      if (!$taxonomyFields[taxName]) continue\n      data[taxName] = []\n      $taxonomyFields[taxName].each(function () {\n        const $el = $(this)\n        if ($el.prop('checked')) {\n          data[taxName].push($el.val())\n        }\n      })\n    }\n\n    return data\n  }\n\n  /**\n   * Save via AJAX, except for new post which requires page reload\n   */\n  function save() {\n    if (templateMeta.isNewPost) {\n      $publishButton.click()\n      return\n    }\n\n    // New and existing post should have ID\n    if (!postId) return\n\n    const title = $postTitle.val()\n    if (!title) return\n\n    const data = {\n      title,\n      id: postId,\n      content: '',\n      ...getEditorFields(),\n      ...getAdditionalFields(),\n      tax_input: getTaxonomyFields(),\n    }\n\n    const previousLabel = $publishButton.val()\n\n    let labelTimer\n    function restorePreviousLabelAfterTimeout() {\n      if (labelTimer) clearTimeout(labelTimer)\n      labelTimer = setTimeout(function () {\n        $publishButton.val(previousLabel)\n      }, 7000)\n    }\n\n    // $publishButton.val('Saving..')\n\n    ajax('tangible_template_editor_save', data)\n      .then(function (res) {\n        updatePublishButton('Saved')\n        restorePreviousLabelAfterTimeout()\n      })\n      .catch(function (e) {\n        updatePublishButton('Error', e.message)\n        restorePreviousLabelAfterTimeout()\n      })\n  }\n\n  /**\n   * New or draft posts must submit the form and reload the edit screen,\n   * but after that the publish button can use AJAX save.\n   */\n  if (!templateMeta.isNewPost && templateMeta.postStatus === 'publish') {\n    /**\n     * Disable AJAX save until following issues are resolved:\n     *\n     * - AJAX nonce expiring\n     * - Sometimes the post slug not saving?\n     * - Sometimes there's a confirmation dialog \"information you've entered may not be saved\"\n     */\n    /*\n        $publishButton.on('click', function (e) {\n          e.preventDefault()\n          save()\n        })\n    */\n    //\n    // window.onbeforeunload = function() {}\n  }\n\n  const $preview = $postForm.find('.tangible-template-preview-pane')\n\n  function setIframeContent(iframe, content) {\n    // iframe.src = 'data:text/html;charset=utf-8,' + encodeURI(content)\n    iframe.contentWindow.document\n    iframe.contentWindow.document.open()\n    iframe.contentWindow.document.write(content)\n    iframe.contentWindow.document.close()\n  }\n\n  let isPreviewVisible = false\n  let isRenderPreviewScheduled = false\n\n  function scheduleRenderPreview() {\n    isRenderPreviewScheduled = true\n  }\n\n  setInterval(function () {\n    if (!isRenderPreviewScheduled) return\n    isRenderPreviewScheduled = false\n    if (isPreviewVisible) {\n      renderPreview()\n    }\n  }, 3000)\n\n  async function renderPreview() {\n    const el = $preview[0]\n\n    const data = {\n      id: postId,\n      content: '',\n      ...getEditorFields(),\n      ...getAdditionalFields(),\n    }\n\n    let iframe: HTMLIFrameElement = el.getElementsByTagName('iframe')[0]\n\n    if (!iframe) {\n      iframe = document.createElement('iframe')\n      iframe.style.width = '100%'\n      iframe.style.height = '100%'\n      iframe.style.minHeight = '240px'\n      iframe.style.border = 'none'\n      iframe.style.borderRadius = '.5rem'\n      iframe.style.backgroundColor = '#fff'\n\n      el.style.resize = 'vertical'\n      el.style.overflowY = 'auto'\n      el.appendChild(iframe)\n    }\n\n    ajax('tangible_template_editor_render', data)\n      .then(function (res) {\n        setIframeContent(iframe, res.result)\n      })\n      .catch(function (e) {\n        setIframeContent(iframe, `<p>${e.message}</p>`)\n      })\n  }\n\n  const $previewButton = $postForm.find(\n    '.tangible-template-tab-selector[data-tab-name=preview]'\n  )\n\n  let isEditorActiveForPreview = true\n\n  $previewButton.on('click', function () {\n\n    const isOpen = !$previewButton.hasClass('active')\n\n    if (isEditorActiveForPreview) {\n      $preview.toggle()\n    }\n\n    if (isOpen) {\n      $previewButton.addClass('active')\n      isPreviewVisible = true\n\n      if (isEditorActiveForPreview) {\n        renderPreview()\n      }\n    } else {\n      $previewButton.removeClass('active')\n      isPreviewVisible = false\n    }\n\n    setMemory({\n      previewOpen: isOpen\n    })\n\n  })\n\n  function setEditorActiveForPreview(open = true) {\n    isEditorActiveForPreview = open\n    if (open) {\n      if (isPreviewVisible && !$preview.is(':visible')) {\n        $preview.show()\n      }\n    } else {\n      if (isPreviewVisible && $preview.is(':visible')) {\n        $preview.hide()\n      }\n    }\n  }\n\n  createEditors({\n    $,\n    save,\n    $editors,\n    editorInstances,\n    createCodeEditor,\n    templateMeta,\n    Tangible,\n  }).finally(function () {\n\n    if (memory.previewOpen) {\n      $previewButton.click()\n    }\n\n    /**\n     * Schedule preview on editor change\n     */\n    for (const [key, editor] of Object.entries(editorInstances)) {\n      editor && editor.on('change', scheduleRenderPreview)\n    }\n\n    handleTabs({\n      $,\n      postId,\n      $postForm,\n      editorInstances,\n      setEditorActiveForPreview\n    })\n  })\n})\n"],"names":["memoryKey","memory","getMemory","setMemory","state","__name","handleTabs","$","postId","$postForm","editorInstances","setEditorActiveForPreview","$tabSelectors","$tabs","tabEditorActivated","currentTabSelector","index","$tabSelector","tabName","$tab","$tabEditor","editorInstance","gotoTab","obj","pair","key","value","$activeTabSelector","createEditors","save","$editors","createCodeEditor","templateMeta","Tangible","sharedEditorOptions","create","el","$editor","fieldName","type","editorOptions","editor","promises","wp","ajax","$postTitle","$publishButton","$publishingActions","additionalFieldNames","$additionalFields","$field","taxonomyNames","$taxonomyFields","taxName","$terms","checked","updatePublishButton","newText","errorMessage","getEditorFields","data","getAdditionalFields","getTaxonomyFields","$el","title","previousLabel","labelTimer","restorePreviousLabelAfterTimeout","res","e","$preview","setIframeContent","iframe","content","isPreviewVisible","isRenderPreviewScheduled","scheduleRenderPreview","renderPreview","$previewButton","isEditorActiveForPreview","isOpen","open"],"mappings":"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"}